<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="2.9" jmeter="3.0 r1743807">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="TF_CNG_TP142_Claim_Status_Changes" enabled="true"/>
      <hashTree>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">true</boolProp>
        </CookieManager>
        <hashTree/>
        <CacheManager guiclass="CacheManagerGui" testclass="CacheManager" testname="HTTP Cache Manager" enabled="true">
          <boolProp name="clearEachIteration">true</boolProp>
          <boolProp name="useExpires">false</boolProp>
        </CacheManager>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Host</stringProp>
              <stringProp name="Header.value">${GV_HOSTNAME_NAVIGATOR}</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Connection</stringProp>
              <stringProp name="Header.value">Keep-Alive</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Accept-Encoding</stringProp>
              <stringProp name="Header.value">gzip, deflate</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">DNT</stringProp>
              <stringProp name="Header.value">1</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CLAIMNUMBER.csv - CSV Data Set Config" enabled="true">
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="filename">${test_path}..${PATH_SEP}Scripts${PATH_SEP}JMX_CNG_TP142_Claim_Status_Changes${PATH_SEP}CLAIMNUMBER.csv</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <stringProp name="shareMode.all">shareMode</stringProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="variableNames">CLAIMNUMBER</stringProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
          <stringProp name="TestPlan.comments">CLAIMNUMBER</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="nNumbers.csv - CSV Data Set Config" enabled="true">
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="filename">${test_path}..${PATH_SEP}Scripts${PATH_SEP}JMX_CNG_TP142_Claim_Status_Changes${PATH_SEP}nNumbers.csv</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <stringProp name="shareMode.all">shareMode</stringProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="variableNames">USERNAME,PASSWORD</stringProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
          <stringProp name="TestPlan.comments">USERNAME,PASSWORD</stringProp>
        </CSVDataSet>
        <hashTree/>
        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="ThinkTime" enabled="true">
          <stringProp name="ConstantTimer.delay">${CNG_TP142_Claim_Status_Changes_ThinkTime}</stringProp>
        </ConstantTimer>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP142_A_Launch_Browser" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="CNG_TP142_A_Launch_Browser failed " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-683626894">Please log in using your Enterprise ID and password</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cTYPE" enabled="true">
              <stringProp name="TestPlan.comments">&quot;ParamName=cTYPE&quot;|&quot;RegExp=TYPE=(.*?)&amp;REALMOID&quot;|SEARCH_FILTERS,&quot;Scope=Headers&quot;|&quot;IgnoreRedirections=No&quot;|&quot;RequestUrl=*/ClaimCenter.do*&quot;|</stringProp>
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">cTYPE</stringProp>
              <stringProp name="RegexExtractor.regex">TYPE=(.*?)&amp;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
              <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cSMAGENTNAME" enabled="true">
              <stringProp name="TestPlan.comments">&quot;ParamName=cSMAGENTNAME&quot;|&quot;RegExp=SMAGENTNAME=(.*?)&amp;TARGET&quot;|SEARCH_FILTERS,&quot;Scope=Headers&quot;|&quot;IgnoreRedirections=No&quot;|&quot;RequestUrl=*/ClaimCenter.do*&quot;|</stringProp>
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">cSMAGENTNAME</stringProp>
              <stringProp name="RegexExtractor.regex">SMAGENTNAME=(.*?)&amp;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cREALMOID" enabled="true">
              <stringProp name="TestPlan.comments">&quot;ParamName=cREALMOID&quot;|&quot;RegExp=REALMOID=(.*?)&amp;GUID&quot;|SEARCH_FILTERS,&quot;Scope=Headers&quot;|&quot;IgnoreRedirections=No&quot;|&quot;RequestUrl=*/ClaimCenter.do*&quot;|</stringProp>
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">cREALMOID</stringProp>
              <stringProp name="RegexExtractor.regex">REALMOID=(.*?)&amp;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="SiteMinderCount" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SiteMinderCount</stringProp>
              <stringProp name="RegexExtractor.regex">Please log in using your Enterp(.*?) ID and password</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">null</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If &quot;${SiteMinderCount}&quot;!=&quot;null&quot; - CNG_TP142_B_Login" enabled="true">
          <stringProp name="IfController.condition">&quot;${SiteMinderCount}&quot;!=&quot;null&quot;</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP142_B_Login" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PMClaimCenterLogin.fcc" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="USER" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">USER</stringProp>
                    <stringProp name="Argument.value">${USERNAME}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="PASSWORD" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">PASSWORD</stringProp>
                    <stringProp name="Argument.value">${PASSWORD}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="target" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">target</stringProp>
                    <stringProp name="Argument.value">http://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="smauthreason" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">smauthreason</stringProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/LMAuth/PMClaimCenterLogin.fcc?TYPE=${cTYPE}&amp;REALMOID=${cREALMOID}&amp;GUID=&amp;SMAUTHREASON=0&amp;METHOD=GET&amp;SMAGENTNAME=${cSMAGENTNAME}&amp;TARGET=-SM-http%3a%2f%2fperf--pmclaimcenter--internal%2elibertyec%2ecom%2fcc%2fClaimCenter%2edo</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <boolProp name="HTTPSampler.image_parser">true</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="CNG_TP142_B_Login failed - nNumber unable to Login, ${USERNAME}" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-252897267">Activities</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="CNG_TP142_B_Login failed - nNumber unable to Login, ${USERNAME}" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1822264439">GENERAL_MSG_CAT_SSL_ERROR</stringProp>
                  <stringProp name="-927154469">User not setup in ClaimCenter</stringProp>
                  <stringProp name="-27349170">Internal Server Error</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">20</intProp>
              </ResponseAssertion>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cTBLINKS" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">cTBLINKS</stringProp>
                <stringProp name="RegexExtractor.regex">uitem&quot;,&quot;shortcut&quot;:&quot;Z&quot;}],&quot;defaultType&quot;:&quot;gmenuitem&quot;},&quot;noaction&quot;:1,&quot;xtype&quot;:&quot;gbutton&quot;,&quot;iconCls&quot;:&quot;g-preferences-icon&quot;}],&quot;checksum&quot;:&quot;(.*?)&quot;},</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cTABS" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">cTABS</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;id&quot;:&quot;TabBar:VacationTab&quot;,&quot;text&quot;:&quot;Vacation&quot;,&quot;menu&quot;:\{&quot;defaultType&quot;:&quot;gmenuitem&quot;},&quot;xtype&quot;:&quot;gbutton&quot;,&quot;disabled&quot;:true}],&quot;checksum&quot;:&quot;(.*?)&quot;}},\{</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cINFOBAR" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">cINFOBAR</stringProp>
                <stringProp name="RegexExtractor.regex">topActivitiesScreen:0&quot;,&quot;text&quot;:&quot;Activities&quot;,&quot;cls&quot;:&quot;x-panel-header-text&quot;,&quot;xtype&quot;:&quot;box&quot;}]}]},&quot;infoBar&quot;:\{&quot;hidden&quot;:true,&quot;checksum&quot;:&quot;(.*?)&quot;},</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cDESKTOPMENUACTIONS" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">cDESKTOPMENUACTIONS</stringProp>
                <stringProp name="RegexExtractor.regex">Profile&quot;}],&quot;defaultType&quot;:&quot;gmenuitem&quot;},&quot;xtype&quot;:&quot;gbutton&quot;,&quot;noaction&quot;:1,&quot;checksum&quot;:&quot;(.*?)&quot;,</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cDESKTOPMENULINKS" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">cDESKTOPMENULINKS</stringProp>
                <stringProp name="RegexExtractor.regex">Profile&quot;}],&quot;defaultType&quot;:&quot;gmenuitem&quot;},&quot;xtype&quot;:&quot;gbutton&quot;,&quot;noaction&quot;:1,&quot;checksum&quot;:&quot;(.*?)&quot;,</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="-RUN" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </LoopController>
        <hashTree>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="PacingTime" enabled="true">
            <intProp name="ActionProcessor.action">1</intProp>
            <intProp name="ActionProcessor.target">0</intProp>
            <stringProp name="ActionProcessor.duration">${CNG_TP142_Claim_Status_Changes_Pacing}</stringProp>
          </TestAction>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Host</stringProp>
                <stringProp name="Header.value">${GV_HOSTNAME_NAVIGATOR}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Connection</stringProp>
                <stringProp name="Header.value">Keep-Alive</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">DNT</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-Requested-With</stringProp>
                <stringProp name="Header.value">XMLHttpRequest</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP142_C_Claim_Search" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_2" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">TabBar%3AClaimTab%3AClaimTab_FindClaim=${CLAIMNUMBER}&amp;QuickJump=&amp;Desktop%3AMenuLinks_toggle=&amp;DesktopActivities%3ADesktopActivitiesScreen%3ADesktopActivitiesLV%3ADesktopActivitiesFilter=AndFilter%2FMy%20activities%20today&amp;%3Atblinks=${cTBLINKS_URL2}&amp;%3Atabs=${cTABS_URL2}&amp;infoBar=${cINFOBAR_URL2}&amp;Desktop%3ADesktopMenuActions=${cDESKTOPMENUACTIONS_URL2}&amp;Desktop%3AMenuLinks=${cDESKTOPMENULINKS_URL2}&amp;csrfToken=&amp;eventSource=TabBar%3AClaimTab%3AClaimTab_FindClaim_Button_act</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <boolProp name="HTTPSampler.image_parser">true</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor - CNG_TP142_C_Claim_Search" enabled="true">
                <stringProp name="cacheKey">27dbf407-2138-4f53-b9a0-da3c6853de2e</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">vars.put(&quot;cDESKTOPMENULINKS_URL2&quot;,java.net.URLDecoder.decode(vars.get(&quot;cDESKTOPMENULINKS&quot;), &quot;UTF-8&quot;));
vars.put(&quot;cDESKTOPMENUACTIONS_URL2&quot;,java.net.URLDecoder.decode(vars.get(&quot;cDESKTOPMENUACTIONS&quot;), &quot;UTF-8&quot;));
vars.put(&quot;cINFOBAR_URL2&quot;,java.net.URLDecoder.decode(vars.get(&quot;cINFOBAR&quot;), &quot;UTF-8&quot;));
vars.put(&quot;cTABS_URL2&quot;,java.net.URLDecoder.decode(vars.get(&quot;cTABS&quot;), &quot;UTF-8&quot;));
vars.put(&quot;cTBLINKS_URL2&quot;,java.net.URLDecoder.decode(vars.get(&quot;cTBLINKS&quot;), &quot;UTF-8&quot;));</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="CNG_TP142_C_Claim_Search failed - Unsuccessful nNumber ${USERNAME} and Claimnumber ${CLAIMNUMBER}" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1822264439">GENERAL_MSG_CAT_SSL_ERROR</stringProp>
                  <stringProp name="1926069336">Specify at least one of the following</stringProp>
                  <stringProp name="-180821492">Insufficient Permission</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">20</intProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="CNG_TP142_C_Claim_Search failed - Unsuccessful nNumber ${USERNAME} and Claimnumber ${CLAIMNUMBER}" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-192987258">Summary</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cTABS_1" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">cTABS_1</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;id&quot;:&quot;TabBar:VacationTab&quot;,&quot;text&quot;:&quot;Vacation&quot;,&quot;menu&quot;:\{&quot;defaultType&quot;:&quot;gmenuitem&quot;},&quot;xtype&quot;:&quot;gbutton&quot;,&quot;disabled&quot;:true}],&quot;checksum&quot;:&quot;(.*?)&quot;}},\{</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
                <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cINFOBAR_1" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">cINFOBAR_1</stringProp>
                <stringProp name="RegexExtractor.regex">span&gt;&quot;,&quot;cls&quot;:&quot;infobar_elem&quot;,&quot;noaction&quot;:1,&quot;disabled&quot;:true}],&quot;checksum&quot;:&quot;(.*?)&quot;},</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
                <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cCLAIMMENULINKS" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">cCLAIMMENULINKS</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;eventId&quot;:&quot;Claim:MenuLinks:Claim_ClaimCalendarGroup:ClaimCalendarGroup_ClaimCalendar&quot;}]}],&quot;xtype&quot;:&quot;accordionpanel&quot;,&quot;checksum&quot;:&quot;(.*?)&quot;,</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
                <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cCLAIMMENUACTIONS" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">cCLAIMMENUACTIONS</stringProp>
                <stringProp name="RegexExtractor.regex">ctions&quot;,&quot;menu&quot;:\{&quot;numEntriesPerColumn&quot;:3,&quot;flattened&quot;:true,&quot;defaultType&quot;:&quot;gmenuitem&quot;},&quot;xtype&quot;:&quot;gbutton&quot;,&quot;noaction&quot;:1,&quot;checksum&quot;:&quot;(.*?)&quot;,</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
                <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cADDRESSSTRING" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">cADDRESSSTRING</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;id&quot;:&quot;ClaimSummary:ClaimSummaryScreen:ClaimSummaryDV:Location&quot;,&quot;xtype&quot;:&quot;displayfield&quot;,&quot;value&quot;:&quot;(.*?)&quot;,</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
                <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="AutoClaim" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">AutoClaim</stringProp>
                <stringProp name="RegexExtractor.regex">Vehi(.*?)le</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">null</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="PropClaim" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">PropClaim</stringProp>
                <stringProp name="RegexExtractor.regex">Building and D(.*?)elling</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">null</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor - CNG_TP142_C_Claim_Search" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">5909bb5f-2c95-40e5-b0ef-4d3e00b73f82</stringProp>
                <stringProp name="script">vars.put(&quot;cCLAIMMENUACTIONS_URL2&quot;,java.net.URLDecoder.decode(vars.get(&quot;cCLAIMMENUACTIONS&quot;), &quot;UTF-8&quot;));
vars.put(&quot;cCLAIMMENULINKS_URL2&quot;,java.net.URLDecoder.decode(vars.get(&quot;cCLAIMMENULINKS&quot;), &quot;UTF-8&quot;));
vars.put(&quot;cINFOBAR_1_URL2&quot;,java.net.URLDecoder.decode(vars.get(&quot;cINFOBAR_1&quot;), &quot;UTF-8&quot;));
vars.put(&quot;cTABS_1_URL2&quot;,java.net.URLDecoder.decode(vars.get(&quot;cTABS_1&quot;), &quot;UTF-8&quot;));

String fullline1=vars.get(&quot;cADDRESSSTRING&quot;);
//log.info(&quot;cADDRESSSTRING - &quot;+vars.get(&quot;cADDRESSSTRING&quot;));
String[] words = fullline1.split(&quot;,&quot;);
for (int i = 0; i &lt; words.length; i++) 
{

}

vars.put(&quot;cADDRESSLINE_1&quot;, words[0]);
vars.put(&quot;cCITY&quot;, words[1]);
vars.put(&quot;STATEPOSTAL&quot;, words[2]);

String[] words1 = words[2].split(&quot; &quot;);
for (int i = 0; i &lt; words1.length; i++) 
{
}
vars.put(&quot;cSTATE&quot;, words1[1]);
vars.put(&quot;cPOSTCODE&quot;, words1[2]);

fullline1 = null;</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If &quot;${AutoClaim}&quot; != &quot;null&quot;" enabled="true">
            <stringProp name="IfController.condition">&quot;${AutoClaim}&quot; != &quot;null&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP142_D_Auto_Claim_Stat_Change" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="Claim:MenuLinks" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">Claim:MenuLinks</stringProp>
                      <stringProp name="Argument.value">${cCLAIMMENULINKS}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="csrfToken" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">csrfToken</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="TabBar:ClaimTab:ClaimTab_FindClaim" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">TabBar:ClaimTab:ClaimTab_FindClaim</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="QuickJump" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">QuickJump</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="Claim:MenuLinks_toggle" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">Claim:MenuLinks_toggle</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name=":tblinks" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">:tblinks</stringProp>
                      <stringProp name="Argument.value">${cTBLINKS}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name=":tabs" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">:tabs</stringProp>
                      <stringProp name="Argument.value">${cTABS_1}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="infoBar" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">infoBar</stringProp>
                      <stringProp name="Argument.value">${cINFOBAR_1}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="Claim:ClaimMenuActions" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">Claim:ClaimMenuActions</stringProp>
                      <stringProp name="Argument.value">${cCLAIMMENUACTIONS}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="eventSource" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">eventSource</stringProp>
                      <stringProp name="Argument.value">Claim:MenuLinks:Claim_ClaimSummaryGroup:ClaimSummaryGroup_ClaimStatus_act</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="CNG_TP142_D_Auto_Claim_Stat_Change failed - GENERAL_MSG_CAT_SSL_ERROR" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1822264439">GENERAL_MSG_CAT_SSL_ERROR</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">20</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="CNG_TP142_D_Auto_Claim_Stat_Change failed - Unable to view claim status screen for claimnumber, ${CLAIMNUMBER}" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1615244138">Claim Status</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP142_E_Auto_Edit_Claim_Status" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_4" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="Claim:MenuLinks" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">Claim:MenuLinks</stringProp>
                      <stringProp name="Argument.value">${cCLAIMMENULINKS}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="csrfToken" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">csrfToken</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="TabBar:ClaimTab:ClaimTab_FindClaim" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">TabBar:ClaimTab:ClaimTab_FindClaim</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="QuickJump" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">QuickJump</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="Claim:MenuLinks_toggle" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">Claim:MenuLinks_toggle</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name=":tblinks" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">:tblinks</stringProp>
                      <stringProp name="Argument.value">${cTBLINKS}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name=":tabs" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">:tabs</stringProp>
                      <stringProp name="Argument.value">${cTABS_1}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="infoBar" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">infoBar</stringProp>
                      <stringProp name="Argument.value">${cINFOBAR_1}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="Claim:ClaimMenuActions" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">Claim:ClaimMenuActions</stringProp>
                      <stringProp name="Argument.value">${cCLAIMMENUACTIONS}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="objFocusId" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">objFocusId</stringProp>
                      <stringProp name="Argument.value">ClaimStatus:Edit</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="eventSource" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">eventSource</stringProp>
                      <stringProp name="Argument.value">ClaimStatus:Edit_act</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cTBLINKS_1" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">cTBLINKS_1</stringProp>
                  <stringProp name="RegexExtractor.regex">shortcut&quot;:&quot;Z&quot;}],&quot;defaultType&quot;:&quot;gmenuitem&quot;},&quot;noaction&quot;:1,&quot;xtype&quot;:&quot;gbutton&quot;,&quot;iconCls&quot;:&quot;g-preferences-icon&quot;}],&quot;checksum&quot;:&quot;(.*?)&quot;},</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default"></stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
                </RegexExtractor>
                <hashTree/>
                <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor - CNG_TP142_E_Auto_Edit_Claim_Status" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">5909bb5f-2c95-40e5-b0ef-4d3e00b73f82</stringProp>
                  <stringProp name="script">vars.put(&quot;cTBLINKS_1_URL2&quot;,java.net.URLDecoder.decode(vars.get(&quot;cTBLINKS_1&quot;), &quot;UTF-8&quot;));
vars.put(&quot;DATE_URL2&quot;,java.net.URLDecoder.decode(vars.get(&quot;DATE&quot;), &quot;UTF-8&quot;));</stringProp>
                </JSR223PostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP142_F_Auto_Update_Claim_Status" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_5" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">TabBar%3AClaimTab%3AClaimTab_FindClaim=&amp;QuickJump=&amp;Claim%3AMenuLinks_toggle=&amp;ClaimStatus%3ALineOfBusiness=auto&amp;ClaimStatus%3AIncidentOnly=false&amp;ClaimStatus%3ADateReported=${DATE_URL2}%2002%3A56%20PM&amp;ClaimStatus%3ASpecialClaimPermission=&amp;ClaimStatus%3ASalvageStatus=other&amp;ClaimStatus%3AOtherRecoverableStatus=closed&amp;ClaimStatus%3AStorageInputSet%3ADateShippedToStorage=&amp;ClaimStatus%3AStorageInputSet%3AStorageLocationState=&amp;ClaimStatus%3AStorageInputSet%3AStorageCategory=&amp;ClaimStatus%3AStorageInputSet%3AStorageType=&amp;ClaimStatus%3AStorageInputSet%3AStorageBoxNumber=&amp;ClaimStatus%3AStorageInputSet%3AStorageBarCodeNumber=&amp;ClaimStatus%3AStorageInputSet%3AStorageVolumes=&amp;ClaimStatus%3AStorageInputSet%3AStorageNotes=&amp;ClaimStatus%3A3%3AClaimIndicatorInputSet%3ACoverageInQuestion=false&amp;%3Atblinks=${cTBLINKS_1_URL2}&amp;%3Atabs=${cTABS_1_URL2}&amp;infoBar=${cINFOBAR_1_URL2}&amp;Claim%3AClaimMenuActions=${cCLAIMMENUACTIONS_URL2}&amp;Claim%3AMenuLinks=${cCLAIMMENULINKS}&amp;csrfToken=&amp;eventSource=ClaimStatus%3AUpdate_act&amp;objFocusId=ClaimStatus%3AUpdate</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP142_G_Auto_Loss_Details" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_6" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="Claim:MenuLinks" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">Claim:MenuLinks</stringProp>
                      <stringProp name="Argument.value">${cCLAIMMENULINKS}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="csrfToken" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">csrfToken</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="TabBar:ClaimTab:ClaimTab_FindClaim" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">TabBar:ClaimTab:ClaimTab_FindClaim</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="QuickJump" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">QuickJump</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="Claim:MenuLinks_toggle" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">Claim:MenuLinks_toggle</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name=":tblinks" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">:tblinks</stringProp>
                      <stringProp name="Argument.value">${cTBLINKS}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name=":tabs" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">:tabs</stringProp>
                      <stringProp name="Argument.value">${cTABS_1}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="infoBar" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">infoBar</stringProp>
                      <stringProp name="Argument.value">${cINFOBAR_1}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="Claim:ClaimMenuActions" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">Claim:ClaimMenuActions</stringProp>
                      <stringProp name="Argument.value">${cCLAIMMENUACTIONS}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="eventSource" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">eventSource</stringProp>
                      <stringProp name="Argument.value">Claim:MenuLinks:Claim_ClaimLossDetailsGroup:ClaimLossDetailsGroup_ClaimLossDetails_act</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="CNG_TP142_G_Auto_Loss_Details failed - GENERAL_MSG_CAT_SSL_ERROR" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1822264439">GENERAL_MSG_CAT_SSL_ERROR</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">20</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="CNG_TP142_G_Auto_Loss_Details failed - Unable to view loss details screen for claimnumber, ${CLAIMNUMBER}" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-338071995">Loss Details</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cPERSON" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">cPERSON</stringProp>
                  <stringProp name="RegexExtractor.regex">Person:(.*?)&quot;,</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default"></stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP142_H_Auto_Edit_Loss_Details" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_7" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="Claim:MenuLinks" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">Claim:MenuLinks</stringProp>
                      <stringProp name="Argument.value">${cCLAIMMENULINKS}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="csrfToken" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">csrfToken</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="TabBar:ClaimTab:ClaimTab_FindClaim" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">TabBar:ClaimTab:ClaimTab_FindClaim</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="QuickJump" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">QuickJump</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="Claim:MenuLinks_toggle" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">Claim:MenuLinks_toggle</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name=":tblinks" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">:tblinks</stringProp>
                      <stringProp name="Argument.value">${cTBLINKS}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name=":tabs" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">:tabs</stringProp>
                      <stringProp name="Argument.value">${cTABS_1}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="infoBar" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">infoBar</stringProp>
                      <stringProp name="Argument.value">${cINFOBAR_1}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="Claim:ClaimMenuActions" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">Claim:ClaimMenuActions</stringProp>
                      <stringProp name="Argument.value">${cCLAIMMENUACTIONS}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="objFocusId" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">objFocusId</stringProp>
                      <stringProp name="Argument.value">ClaimLossDetails:ClaimLossDetailsScreen:Edit</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="eventSource" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">eventSource</stringProp>
                      <stringProp name="Argument.value">ClaimLossDetails:ClaimLossDetailsScreen:Edit_act</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cADDRESS_1" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">cADDRESS_1</stringProp>
                  <stringProp name="RegexExtractor.regex">Address:(.*?)&quot;,</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default"></stringProp>
                  <stringProp name="RegexExtractor.match_number">2</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cCOUNTY" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">cCOUNTY</stringProp>
                  <stringProp name="RegexExtractor.regex">ClaimLossDetailsScreen:LossDetailsPanelSet:LossDetailsCardCV:LossDetailsDV:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:Country&quot;,&quot;value&quot;:&quot;(.*?)&quot;,</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">null</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
                <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor - CNG_TP142_H_Auto_Edit_Loss_Details" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">5909bb5f-2c95-40e5-b0ef-4d3e00b73f82</stringProp>
                  <stringProp name="script">vars.put(&quot;cADDRESSLINE_1_URL2&quot;,java.net.URLDecoder.decode(vars.get(&quot;cADDRESSLINE_1&quot;), &quot;UTF-8&quot;));
vars.put(&quot;cCITY_URL2&quot;,java.net.URLDecoder.decode(vars.get(&quot;cCITY&quot;), &quot;UTF-8&quot;));
vars.put(&quot;cCOUNTY_URL2&quot;,java.net.URLDecoder.decode(vars.get(&quot;cCOUNTY&quot;), &quot;UTF-8&quot;));
vars.put(&quot;cSTATE_URL2&quot;,java.net.URLDecoder.decode(vars.get(&quot;cSTATE&quot;), &quot;UTF-8&quot;));
</stringProp>
                </JSR223PostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP142_I_Auto_Edit_Loss_Cause" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_5" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">TabBar%3AClaimTab%3AClaimTab_FindClaim=&amp;QuickJump=&amp;Claim%3AMenuLinks_toggle=&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3ACatastrophe_CatastropheNumber=&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3APermissionRequired=&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3ADescription=TP142&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3ALossCategory=multiVehicleAccidentAuto&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3ALossCause=hitstationary&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3ALossPrimarySubCode=&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3ANotification_Fault=1&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3ANotification_AtFaultPercentage=0&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3AClaim_Weather=&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3ADamageQuestionsAuto%3ADamageQuestionsAutoInputSet%3ATypeObjectStruck=other&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3ACCAddressInputSet%3AglobalAddressContainer%3AglobalAddress%3AGlobalAddressInputSet%3AAddress_Picker=Address%3A${cADDRESS_1}&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3ACCAddressInputSet%3AglobalAddressContainer%3AglobalAddress%3AGlobalAddressInputSet%3AAddressLine1=&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3ACCAddressInputSet%3AglobalAddressContainer%3AglobalAddress%3AGlobalAddressInputSet%3AAddressLine2=&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3ACCAddressInputSet%3AglobalAddressContainer%3AglobalAddress%3AGlobalAddressInputSet%3ACity=&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3ACCAddressInputSet%3AglobalAddressContainer%3AglobalAddress%3AGlobalAddressInputSet%3ACounty=&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3ACCAddressInputSet%3AglobalAddressContainer%3AglobalAddress%3AGlobalAddressInputSet%3AState=&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3ACCAddressInputSet%3AglobalAddressContainer%3AglobalAddress%3AGlobalAddressInputSet%3APostalCode=&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3ACCAddressInputSet%3AglobalAddressContainer%3AglobalAddress%3AGlobalAddressInputSet%3ACountry=US&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3ANotification_ReportedDate=${DATE_URL2}&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3ANotification_HowReported=mail&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3AReportedBy_Picker=Person%3A${cPERSON}&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3ANotification_ReportedByType=self&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3AMainContact_Picker=&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3ANotification_MainContactType=&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3ANotification_DateReportedToAgent=&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3AStatus_OtherRecoverablesStatus=&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3AStatus_ReinsuranceStatus=&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3AStorage_StorageDate=&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3AStorage_StorageLocationState=&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3AStorage_StorageCategory=&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3AStorage_StorageType=&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3AStorage_StorageBoxNum=&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3AStorage_StorageBarCodeNum=&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3AStorage_StorageVolumes=&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3AStorage_StorageNotes=&amp;%3Atblinks=${cTBLINKS_1_URL2}&amp;%3Atabs=${cTABS_1_URL2}&amp;infoBar=${cINFOBAR_1_URL2}&amp;Claim%3AClaimMenuActions=${cCLAIMMENUACTIONS_URL2}&amp;Claim%3AMenuLinks=${cCLAIMMENULINKS_URL2}&amp;csrfToken=&amp;scrollPositions=%7B%22centerPanel%22%3A%7B%22left%22%3A0%2C%22top%22%3A212%7D%7D&amp;eventSource=_refresh_&amp;eventParam=ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3ALossCategory</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_6" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">TabBar%3AClaimTab%3AClaimTab_FindClaim=&amp;QuickJump=&amp;Claim%3AMenuLinks_toggle=&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3ACatastrophe_CatastropheNumber=&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3APermissionRequired=&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3ADescription=TP142&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3ALossCategory=multiVehicleAccidentAuto&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3ALossCause=hitparkedcar&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3ANotification_Fault=&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3AClaim_Weather=&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3ACCAddressInputSet%3AglobalAddressContainer%3AglobalAddress%3AGlobalAddressInputSet%3AAddress_Picker=Address%3A${cADDRESS_1}&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3ACCAddressInputSet%3AglobalAddressContainer%3AglobalAddress%3AGlobalAddressInputSet%3AAddressLine1=&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3ACCAddressInputSet%3AglobalAddressContainer%3AglobalAddress%3AGlobalAddressInputSet%3AAddressLine2=&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3ACCAddressInputSet%3AglobalAddressContainer%3AglobalAddress%3AGlobalAddressInputSet%3ACity=&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3ACCAddressInputSet%3AglobalAddressContainer%3AglobalAddress%3AGlobalAddressInputSet%3ACounty=&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3ACCAddressInputSet%3AglobalAddressContainer%3AglobalAddress%3AGlobalAddressInputSet%3AState=&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3ACCAddressInputSet%3AglobalAddressContainer%3AglobalAddress%3AGlobalAddressInputSet%3APostalCode=&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3ACCAddressInputSet%3AglobalAddressContainer%3AglobalAddress%3AGlobalAddressInputSet%3ACountry=US&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3ANotification_ReportedDate=${DATE_URL2}&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3ANotification_HowReported=mail&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3AReportedBy_Picker=Person%3A${cPERSON}&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3ANotification_ReportedByType=self&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3AMainContact_Picker=&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3ANotification_MainContactType=&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3ANotification_DateReportedToAgent=&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3AStatus_OtherRecoverablesStatus=&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3AStatus_ReinsuranceStatus=&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3AStorage_StorageDate=&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3AStorage_StorageLocationState=&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3AStorage_StorageCategory=&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3AStorage_StorageType=&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3AStorage_StorageBoxNum=&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3AStorage_StorageBarCodeNum=&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3AStorage_StorageVolumes=&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3AStorage_StorageNotes=&amp;%3Atblinks=${cTBLINKS_1_URL2}&amp;%3Atabs=${cTABS_1_URL2}&amp;infoBar=${cINFOBAR_1_URL2}&amp;Claim%3AClaimMenuActions=${cCLAIMMENUACTIONS_URL2}&amp;Claim%3AMenuLinks=${cCLAIMMENULINKS_URL2}&amp;csrfToken=&amp;scrollPositions=%7B%22centerPanel%22%3A%7B%22left%22%3A0%2C%22top%22%3A212%7D%7D&amp;eventSource=_refresh_&amp;eventParam=ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3ALossCause&amp;objFocusId=ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3ALossCause</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_7" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">TabBar%3AClaimTab%3AClaimTab_FindClaim=&amp;QuickJump=&amp;Claim%3AMenuLinks_toggle=&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3ACatastrophe_CatastropheNumber=&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3APermissionRequired=&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3ADescription=TP142&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3ALossCategory=multiVehicleAccidentAuto&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3ALossCause=hitparkedcar&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3ALossPrimarySubCode=&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3ANotification_Fault=1&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3AClaim_Weather=&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3ADamageQuestionsAuto%3ADamageQuestionsAutoInputSet%3AvehicleMotionDirection=&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3ADamageQuestionsAuto%3ADamageQuestionsAutoInputSet%3AlocationContribute=&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3ACCAddressInputSet%3AglobalAddressContainer%3AglobalAddress%3AGlobalAddressInputSet%3AAddress_Picker=Address%3A${cADDRESS_1}&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3ACCAddressInputSet%3AglobalAddressContainer%3AglobalAddress%3AGlobalAddressInputSet%3AAddressLine1=&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3ACCAddressInputSet%3AglobalAddressContainer%3AglobalAddress%3AGlobalAddressInputSet%3AAddressLine2=&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3ACCAddressInputSet%3AglobalAddressContainer%3AglobalAddress%3AGlobalAddressInputSet%3ACity=&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3ACCAddressInputSet%3AglobalAddressContainer%3AglobalAddress%3AGlobalAddressInputSet%3ACounty=&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3ACCAddressInputSet%3AglobalAddressContainer%3AglobalAddress%3AGlobalAddressInputSet%3AState=&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3ACCAddressInputSet%3AglobalAddressContainer%3AglobalAddress%3AGlobalAddressInputSet%3APostalCode=&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3ACCAddressInputSet%3AglobalAddressContainer%3AglobalAddress%3AGlobalAddressInputSet%3ACountry=US&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3ANotification_ReportedDate=${DATE_URL2}&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3ANotification_HowReported=mail&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3AReportedBy_Picker=Person%3A${cPERSON}&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3ANotification_ReportedByType=self&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3AMainContact_Picker=&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3ANotification_MainContactType=&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3ANotification_DateReportedToAgent=&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3AStatus_OtherRecoverablesStatus=&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3AStatus_ReinsuranceStatus=&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3AStorage_StorageDate=&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3AStorage_StorageLocationState=&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3AStorage_StorageCategory=&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3AStorage_StorageType=&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3AStorage_StorageBoxNum=&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3AStorage_StorageBarCodeNum=&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3AStorage_StorageVolumes=&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3AStorage_StorageNotes=&amp;%3Atblinks=${cTBLINKS_1_URL2}&amp;%3Atabs=${cTABS_1_URL2}&amp;infoBar=${cINFOBAR_1_URL2}&amp;Claim%3AClaimMenuActions=${cCLAIMMENUACTIONS_URL2}&amp;Claim%3AMenuLinks=${cCLAIMMENULINKS_URL2}&amp;csrfToken=&amp;scrollPositions=%7B%22centerPanel%22%3A%7B%22left%22%3A0%2C%22top%22%3A212%7D%7D&amp;eventSource=_refresh_&amp;eventParam=ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3ANotification_Fault&amp;objFocusId=ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3ANotification_Fault</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_8" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">TabBar%3AClaimTab%3AClaimTab_FindClaim=&amp;QuickJump=&amp;Claim%3AMenuLinks_toggle=&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3ACatastrophe_CatastropheNumber=&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3APermissionRequired=&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3ADescription=TP142&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3ALossCategory=multiVehicleAccidentAuto&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3ALossCause=hitparkedcar&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3ALossPrimarySubCode=&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3ANotification_Fault=1&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3ANotification_AtFaultPercentage=100&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3AClaim_Weather=&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3ADamageQuestionsAuto%3ADamageQuestionsAutoInputSet%3AvehicleMotionDirection=forward&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3ADamageQuestionsAuto%3ADamageQuestionsAutoInputSet%3AlocationContribute=No&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3ACCAddressInputSet%3AglobalAddressContainer%3AglobalAddress%3AGlobalAddressInputSet%3AAddress_Picker=Address%3A${cADDRESS_1}&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3ACCAddressInputSet%3AglobalAddressContainer%3AglobalAddress%3AGlobalAddressInputSet%3AAddressLine1=&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3ACCAddressInputSet%3AglobalAddressContainer%3AglobalAddress%3AGlobalAddressInputSet%3AAddressLine2=&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3ACCAddressInputSet%3AglobalAddressContainer%3AglobalAddress%3AGlobalAddressInputSet%3ACity=&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3ACCAddressInputSet%3AglobalAddressContainer%3AglobalAddress%3AGlobalAddressInputSet%3ACounty=&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3ACCAddressInputSet%3AglobalAddressContainer%3AglobalAddress%3AGlobalAddressInputSet%3AState=&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3ACCAddressInputSet%3AglobalAddressContainer%3AglobalAddress%3AGlobalAddressInputSet%3APostalCode=&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3ACCAddressInputSet%3AglobalAddressContainer%3AglobalAddress%3AGlobalAddressInputSet%3ACountry=US&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3ANotification_ReportedDate=${DATE_URL2}&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3ANotification_HowReported=mail&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3AReportedBy_Picker=Person%3A${cPERSON}&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3ANotification_ReportedByType=self&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3AMainContact_Picker=&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3ANotification_MainContactType=&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3ANotification_DateReportedToAgent=&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3AStatus_OtherRecoverablesStatus=&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3AStatus_ReinsuranceStatus=&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3AStorage_StorageDate=&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3AStorage_StorageLocationState=&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3AStorage_StorageCategory=&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3AStorage_StorageType=&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3AStorage_StorageBoxNum=&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3AStorage_StorageBarCodeNum=&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3AStorage_StorageVolumes=&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3AStorage_StorageNotes=&amp;%3Atblinks=${cTBLINKS_1_URL2}&amp;%3Atabs=${cTABS_1_URL2}&amp;infoBar=${cINFOBAR_1_URL2}&amp;Claim%3AClaimMenuActions=${cCLAIMMENUACTIONS_URL2}&amp;Claim%3AMenuLinks=${cCLAIMMENULINKS_URL2}&amp;csrfToken=&amp;scrollPositions=%7B%22centerPanel%22%3A%7B%22left%22%3A0%2C%22top%22%3A212%7D%7D&amp;eventSource=_refresh_&amp;eventParam=ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3ADamageQuestionsAuto%3ADamageQuestionsAutoInputSet%3AlocationContribute&amp;objFocusId=ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3ADamageQuestionsAuto%3ADamageQuestionsAutoInputSet%3AlocationContribute</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP142_J_Auto_Update_Loss_Details" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_9" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">TabBar%3AClaimTab%3AClaimTab_FindClaim=&amp;QuickJump=&amp;Claim%3AMenuLinks_toggle=&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3ACatastrophe_CatastropheNumber=&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3APermissionRequired=&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3ADescription=TP142&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3ALossCategory=multiVehicleAccidentAuto&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3ALossCause=hitparkedcar&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3ALossPrimarySubCode=&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3ANotification_Fault=1&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3ANotification_AtFaultPercentage=100&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3AClaim_Weather=&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3ADamageQuestionsAuto%3ADamageQuestionsAutoInputSet%3AvehicleMotionDirection=forward&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3ADamageQuestionsAuto%3ADamageQuestionsAutoInputSet%3AlocationContribute=No&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3ACCAddressInputSet%3AglobalAddressContainer%3AglobalAddress%3AGlobalAddressInputSet%3AAddress_Picker=Address%3A${cADDRESS_1}&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3ACCAddressInputSet%3AglobalAddressContainer%3AglobalAddress%3AGlobalAddressInputSet%3AAddressLine1=&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3ACCAddressInputSet%3AglobalAddressContainer%3AglobalAddress%3AGlobalAddressInputSet%3AAddressLine2=&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3ACCAddressInputSet%3AglobalAddressContainer%3AglobalAddress%3AGlobalAddressInputSet%3ACity=&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3ACCAddressInputSet%3AglobalAddressContainer%3AglobalAddress%3AGlobalAddressInputSet%3ACounty=&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3ACCAddressInputSet%3AglobalAddressContainer%3AglobalAddress%3AGlobalAddressInputSet%3AState=&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3ACCAddressInputSet%3AglobalAddressContainer%3AglobalAddress%3AGlobalAddressInputSet%3APostalCode=&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3ACCAddressInputSet%3AglobalAddressContainer%3AglobalAddress%3AGlobalAddressInputSet%3ACountry=US&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3ANotification_ReportedDate=${DATE_URL2}&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3ANotification_HowReported=mail&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3AReportedBy_Picker=Person%3A${cPERSON}&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3ANotification_ReportedByType=self&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3AMainContact_Picker=&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3ANotification_MainContactType=&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3ANotification_DateReportedToAgent=&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3AStatus_CoverageQuestion=false&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3AStatus_OtherRecoverablesStatus=&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3AStatus_ReinsuranceStatus=&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3AStorage_StorageDate=&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3AStorage_StorageLocationState=&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3AStorage_StorageCategory=&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3AStorage_StorageType=&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3AStorage_StorageBoxNum=&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3AStorage_StorageBarCodeNum=&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3AStorage_StorageVolumes=&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsCardCV%3ALossDetailsDV%3AStorage_StorageNotes=&amp;%3Atblinks=${cTBLINKS_1_URL2}&amp;%3Atabs=${cTABS_1_URL2}&amp;infoBar=${cINFOBAR_1_URL2}&amp;Claim%3AClaimMenuActions=${cCLAIMMENUACTIONS_URL2}&amp;Claim%3AMenuLinks=${cCLAIMMENULINKS_URL2}&amp;csrfToken=&amp;eventSource=ClaimLossDetails%3AClaimLossDetailsScreen%3AUpdate_act&amp;objFocusId=ClaimLossDetails%3AClaimLossDetailsScreen%3AUpdate</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP142_K_Auto_Exposures" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_14" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="Claim:MenuLinks" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">Claim:MenuLinks</stringProp>
                      <stringProp name="Argument.value">${cCLAIMMENULINKS}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="csrfToken" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">csrfToken</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="TabBar:ClaimTab:ClaimTab_FindClaim" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">TabBar:ClaimTab:ClaimTab_FindClaim</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="QuickJump" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">QuickJump</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="Claim:MenuLinks_toggle" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">Claim:MenuLinks_toggle</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name=":tblinks" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">:tblinks</stringProp>
                      <stringProp name="Argument.value">${cTBLINKS}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name=":tabs" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">:tabs</stringProp>
                      <stringProp name="Argument.value">${cTABS_1}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="infoBar" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">infoBar</stringProp>
                      <stringProp name="Argument.value">${cINFOBAR_1}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="Claim:ClaimMenuActions" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">Claim:ClaimMenuActions</stringProp>
                      <stringProp name="Argument.value">${cCLAIMMENUACTIONS}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="eventSource" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">eventSource</stringProp>
                      <stringProp name="Argument.value">Claim:MenuLinks:Claim_ClaimExposures_act</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="CNG_TP142_K_Auto_Exposures failed - GENERAL_MSG_CAT_SSL_ERROR" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1822264439">GENERAL_MSG_CAT_SSL_ERROR</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">20</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="CNG_TP142_K_Auto_Exposures failed - Unable to exposures screen for claimnumber, ${CLAIMNUMBER}" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1867627476">Exposures</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP142_L_Auto_Select_Exposure" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_15" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">TabBar%3AClaimTab%3AClaimTab_FindClaim=&amp;QuickJump=&amp;Claim%3AMenuLinks_toggle=&amp;ClaimExposures%3AClaimExposuresScreen%3AExposureList%3AExposuresLV%3AExposuresFilter=CoreFilters.AllFilter%2FAll%20claimants&amp;%3Atblinks=${cTBLINKS_URL2}&amp;%3Atabs=${cTABS_1_URL2}&amp;infoBar=${cINFOBAR_1_URL2}&amp;Claim%3AClaimMenuActions=${cCLAIMMENUACTIONS_URL2}&amp;Claim%3AMenuLinks=${cCLAIMMENULINKS_URL2}&amp;csrfToken=&amp;eventSource=ClaimExposures%3AClaimExposuresScreen%3AExposureList%3AExposuresLV%3A0%3AOrder_act&amp;objFocusId=ClaimExposures%3AClaimExposuresScreen%3AExposureList%3AExposuresLV%3A0%3AOrder</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP142_M_Auto_Edit_Exposure" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_16" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="Claim:MenuLinks" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">Claim:MenuLinks</stringProp>
                      <stringProp name="Argument.value">${cCLAIMMENULINKS}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="csrfToken" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">csrfToken</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="TabBar:ClaimTab:ClaimTab_FindClaim" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">TabBar:ClaimTab:ClaimTab_FindClaim</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="QuickJump" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">QuickJump</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="Claim:MenuLinks_toggle" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">Claim:MenuLinks_toggle</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name=":tblinks" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">:tblinks</stringProp>
                      <stringProp name="Argument.value">${cTBLINKS}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name=":tabs" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">:tabs</stringProp>
                      <stringProp name="Argument.value">${cTABS_1}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="infoBar" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">infoBar</stringProp>
                      <stringProp name="Argument.value">${cINFOBAR_1}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="Claim:ClaimMenuActions" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">Claim:ClaimMenuActions</stringProp>
                      <stringProp name="Argument.value">${cCLAIMMENUACTIONS}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="objFocusId" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">objFocusId</stringProp>
                      <stringProp name="Argument.value">ExposureDetail:ExposureDetailScreen:ExposureDetailDV_tb:Edit</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="eventSource" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">eventSource</stringProp>
                      <stringProp name="Argument.value">ExposureDetail:ExposureDetailScreen:ExposureDetailDV_tb:Edit_act</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP142_N_Auto_Select_Claimant" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_15" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="ExposureDetail:ExposureDetailScreen:ExposureDetailDV:ExposureDetailDV:Code" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ExposureDetail:ExposureDetailScreen:ExposureDetailDV:ExposureDetailDV:Code</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name=":tblinks" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">:tblinks</stringProp>
                      <stringProp name="Argument.value">${cTBLINKS_1}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="TabBar:ClaimTab:ClaimTab_FindClaim" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">TabBar:ClaimTab:ClaimTab_FindClaim</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="QuickJump" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">QuickJump</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="Claim:MenuLinks_toggle" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">Claim:MenuLinks_toggle</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ExposureDetail:ExposureDetailScreen:ExposureDetailDV:ExposureDetailDV:Claimant_ContactProhibited" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ExposureDetail:ExposureDetailScreen:ExposureDetailDV:ExposureDetailDV:Claimant_ContactProhibited</stringProp>
                      <stringProp name="Argument.value">false</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ExposureDetail:ExposureDetailScreen:ExposureDetailDV:ExposureDetailDV:AltContact_Name" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ExposureDetail:ExposureDetailScreen:ExposureDetailDV:ExposureDetailDV:AltContact_Name</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ExposureDetail:ExposureDetailScreen:ExposureDetailDV:ExposureDetailDV:JurisdictionState" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ExposureDetail:ExposureDetailScreen:ExposureDetailDV:ExposureDetailDV:JurisdictionState</stringProp>
                      <stringProp name="Argument.value">OH</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ExposureDetail:ExposureDetailScreen:ExposureDetailDV:ExposureDetailDV:Segment" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ExposureDetail:ExposureDetailScreen:ExposureDetailDV:ExposureDetailDV:Segment</stringProp>
                      <stringProp name="Argument.value">medpay_minor</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="csrfToken" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">csrfToken</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="Claim:MenuLinks" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">Claim:MenuLinks</stringProp>
                      <stringProp name="Argument.value">${cCLAIMMENULINKS}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="Claim:ClaimMenuActions" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">Claim:ClaimMenuActions</stringProp>
                      <stringProp name="Argument.value">${cCLAIMMENUACTIONS}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="infoBar" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">infoBar</stringProp>
                      <stringProp name="Argument.value">${cINFOBAR_1}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="objFocusId" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">objFocusId</stringProp>
                      <stringProp name="Argument.value">ExposureDetail:ExposureDetailScreen:ExposureDetailDV:ExposureDetailDV:Claimant_Picker</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="eventSource" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">eventSource</stringProp>
                      <stringProp name="Argument.value">ExposureDetail:ExposureDetailScreen:ExposureDetailDV:ExposureDetailDV:Claimant_Picker_act</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="scrollPositions" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">scrollPositions</stringProp>
                      <stringProp name="Argument.value">{&quot;centerPanel&quot;:{&quot;left&quot;:0,&quot;top&quot;:71}}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name=":tabs" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">:tabs</stringProp>
                      <stringProp name="Argument.value">${cTABS_1}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cLICENSENUMBER" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">cLICENSENUMBER</stringProp>
                  <stringProp name="RegexExtractor.regex">tDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:DriversLicenseInfoInputSet:LicenseNumber&quot;,&quot;xtype&quot;:&quot;displayfield&quot;,&quot;value&quot;:&quot;(.*?)&quot;,</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default"></stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP142_O_Auto_Edit_Claimant" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_16" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="csrfToken" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">csrfToken</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="eventSource" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">eventSource</stringProp>
                      <stringProp name="Argument.value">ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV_tb:ContactDetailToolbarButtonSet:Edit_act</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="TabBar:ClaimTab:ClaimTab_FindClaim" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">TabBar:ClaimTab:ClaimTab_FindClaim</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="QuickJump" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">QuickJump</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="Claim:MenuLinks_toggle" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">Claim:MenuLinks_toggle</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name=":tblinks" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">:tblinks</stringProp>
                      <stringProp name="Argument.value">${cTBLINKS_1}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name=":tabs" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">:tabs</stringProp>
                      <stringProp name="Argument.value">${cTABS_1}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="infoBar" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">infoBar</stringProp>
                      <stringProp name="Argument.value">${cINFOBAR_1}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="Claim:MenuLinks" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">Claim:MenuLinks</stringProp>
                      <stringProp name="Argument.value">${cCLAIMMENULINKS}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="objFocusId" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">objFocusId</stringProp>
                      <stringProp name="Argument.value">ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV_tb:ContactDetailToolbarButtonSet:Edit</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_17" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:PersonContactInfoInputSet:ContactProhibited" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:PersonContactInfoInputSet:ContactProhibited</stringProp>
                      <stringProp name="Argument.value">false</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:PersonContactInfoInputSet:EmailAllowed" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:PersonContactInfoInputSet:EmailAllowed</stringProp>
                      <stringProp name="Argument.value">false</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name=":tabs" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">:tabs</stringProp>
                      <stringProp name="Argument.value">${cTABS_1}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="TabBar:ClaimTab:ClaimTab_FindClaim" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">TabBar:ClaimTab:ClaimTab_FindClaim</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name=":tblinks" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">:tblinks</stringProp>
                      <stringProp name="Argument.value">${cTBLINKS_1}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="QuickJump" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">QuickJump</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:PersonContactInfoInputSet:pcinfoinputset_lmphonesref:LM_PhonesInputSet:2:_Checkbox" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:PersonContactInfoInputSet:pcinfoinputset_lmphonesref:LM_PhonesInputSet:2:_Checkbox</stringProp>
                      <stringProp name="Argument.value">true</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="Claim:MenuLinks_toggle" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">Claim:MenuLinks_toggle</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:PersonContactInfoInputSet:pcinfoinputset_lmphonesref:LM_PhonesInputSet:1:_Checkbox" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:PersonContactInfoInputSet:pcinfoinputset_lmphonesref:LM_PhonesInputSet:1:_Checkbox</stringProp>
                      <stringProp name="Argument.value">true</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:PersonNameInputSet:Prefix" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:PersonNameInputSet:Prefix</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="scrollPositions" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">scrollPositions</stringProp>
                      <stringProp name="Argument.value">{&quot;centerPanel&quot;:{&quot;left&quot;:0,&quot;top&quot;:182}}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:PersonNameInputSet:Suffix" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:PersonNameInputSet:Suffix</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="csrfToken" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">csrfToken</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:PersonNameInputSet:FormerName" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:PersonNameInputSet:FormerName</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="Claim:MenuLinks" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">Claim:MenuLinks</stringProp>
                      <stringProp name="Argument.value">${cCLAIMMENULINKS}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:PersonNameInputSet:DeceasedIndEdit" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:PersonNameInputSet:DeceasedIndEdit</stringProp>
                      <stringProp name="Argument.value">false</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="infoBar" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">infoBar</stringProp>
                      <stringProp name="Argument.value">${cINFOBAR_1}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:PersonContactInfoInputSet:pcinfoinputset_lmphonesref:LM_PhonesInputSet:0:_Checkbox" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:PersonContactInfoInputSet:pcinfoinputset_lmphonesref:LM_PhonesInputSet:0:_Checkbox</stringProp>
                      <stringProp name="Argument.value">true</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:Notes" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:Notes</stringProp>
                      <stringProp name="Argument.value">TP142</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:DriversLicenseInfoInputSet:LicenseState" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:DriversLicenseInfoInputSet:LicenseState</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:Occupation" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:Occupation</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:Gender" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:Gender</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:DateOfBirth" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:DateOfBirth</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:TaxFilingStatus" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:TaxFilingStatus</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:DriversLicenseInfoInputSet:LicenseNumber" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:DriversLicenseInfoInputSet:LicenseNumber</stringProp>
                      <stringProp name="Argument.value">${cLICENSENUMBER}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:MedicareEligible" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:MedicareEligible</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:dependants" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:dependants</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:MaritalStatus" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:MaritalStatus</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:TaxId1" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:TaxId1</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="objFocusId" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">objFocusId</stringProp>
                      <stringProp name="Argument.value">ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:PersonContactInfoInputSet:pcinfoinputset_lmphonesref:LM_PhonesInputSet:Remove</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="eventSource" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">eventSource</stringProp>
                      <stringProp name="Argument.value">ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:PersonContactInfoInputSet:pcinfoinputset_lmphonesref:LM_PhonesInputSet:Remove_act</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_18" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:PersonContactInfoInputSet:ContactProhibited" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:PersonContactInfoInputSet:ContactProhibited</stringProp>
                      <stringProp name="Argument.value">false</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:PersonContactInfoInputSet:EmailAllowed" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:PersonContactInfoInputSet:EmailAllowed</stringProp>
                      <stringProp name="Argument.value">false</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="csrfToken" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">csrfToken</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="TabBar:ClaimTab:ClaimTab_FindClaim" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">TabBar:ClaimTab:ClaimTab_FindClaim</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="Claim:MenuLinks" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">Claim:MenuLinks</stringProp>
                      <stringProp name="Argument.value">${cCLAIMMENULINKS}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="QuickJump" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">QuickJump</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="infoBar" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">infoBar</stringProp>
                      <stringProp name="Argument.value">${cINFOBAR_1}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="Claim:MenuLinks_toggle" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">Claim:MenuLinks_toggle</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name=":tabs" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">:tabs</stringProp>
                      <stringProp name="Argument.value">${cTABS_1}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:PersonNameInputSet:Prefix" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:PersonNameInputSet:Prefix</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:PersonNameInputSet:Suffix" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:PersonNameInputSet:Suffix</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="objFocusId" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">objFocusId</stringProp>
                      <stringProp name="Argument.value">ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:PersonContactInfoInputSet:pcinfoinputset_lmphonesref:LM_PhonesInputSet:Add</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:PersonNameInputSet:FormerName" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:PersonNameInputSet:FormerName</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="eventSource" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">eventSource</stringProp>
                      <stringProp name="Argument.value">ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:PersonContactInfoInputSet:pcinfoinputset_lmphonesref:LM_PhonesInputSet:Add_act</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:PersonNameInputSet:DeceasedIndEdit" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:PersonNameInputSet:DeceasedIndEdit</stringProp>
                      <stringProp name="Argument.value">false</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="scrollPositions" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">scrollPositions</stringProp>
                      <stringProp name="Argument.value">{&quot;centerPanel&quot;:{&quot;left&quot;:0,&quot;top&quot;:182}}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name=":tblinks" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">:tblinks</stringProp>
                      <stringProp name="Argument.value">${cTBLINKS_1}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:Notes" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:Notes</stringProp>
                      <stringProp name="Argument.value">TP142</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:DriversLicenseInfoInputSet:LicenseState" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:DriversLicenseInfoInputSet:LicenseState</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:Occupation" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:Occupation</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:Gender" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:Gender</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:DateOfBirth" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:DateOfBirth</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:TaxFilingStatus" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:TaxFilingStatus</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:DriversLicenseInfoInputSet:LicenseNumber" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:DriversLicenseInfoInputSet:LicenseNumber</stringProp>
                      <stringProp name="Argument.value">${cLICENSENUMBER}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:MedicareEligible" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:MedicareEligible</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:dependants" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:dependants</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:MaritalStatus" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:MaritalStatus</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:TaxId1" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:TaxId1</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_19" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:PersonContactInfoInputSet:ContactProhibited" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:PersonContactInfoInputSet:ContactProhibited</stringProp>
                      <stringProp name="Argument.value">false</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="PhoneType" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">PhoneType</stringProp>
                      <stringProp name="Argument.value">home</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:PersonContactInfoInputSet:pcinfoinputset_lmphonesref:LM_PhonesInputSet:0:LM_Phone_PhoneNumber" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:PersonContactInfoInputSet:pcinfoinputset_lmphonesref:LM_PhonesInputSet:0:LM_Phone_PhoneNumber</stringProp>
                      <stringProp name="Argument.value">000-000-0000</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="TabBar:ClaimTab:ClaimTab_FindClaim" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">TabBar:ClaimTab:ClaimTab_FindClaim</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:PersonContactInfoInputSet:pcinfoinputset_lmphonesref:LM_PhonesInputSet:0:LM_Phone_PrimaryPhone" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:PersonContactInfoInputSet:pcinfoinputset_lmphonesref:LM_PhonesInputSet:0:LM_Phone_PrimaryPhone</stringProp>
                      <stringProp name="Argument.value">true</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="QuickJump" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">QuickJump</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:PersonContactInfoInputSet:pcinfoinputset_lmphonesref:LM_PhonesInputSet:0:PhoneType" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:PersonContactInfoInputSet:pcinfoinputset_lmphonesref:LM_PhonesInputSet:0:PhoneType</stringProp>
                      <stringProp name="Argument.value">home</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="Claim:MenuLinks_toggle" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">Claim:MenuLinks_toggle</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:Notes" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:Notes</stringProp>
                      <stringProp name="Argument.value">TP142</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:PersonNameInputSet:Prefix" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:PersonNameInputSet:Prefix</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="infoBar" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">infoBar</stringProp>
                      <stringProp name="Argument.value">${cINFOBAR_1}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:PersonNameInputSet:Suffix" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:PersonNameInputSet:Suffix</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name=":tabs" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">:tabs</stringProp>
                      <stringProp name="Argument.value">${cTABS_1}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:PersonNameInputSet:FormerName" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:PersonNameInputSet:FormerName</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name=":tblinks" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">:tblinks</stringProp>
                      <stringProp name="Argument.value">${cTBLINKS_1}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:PersonNameInputSet:DeceasedIndEdit" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:PersonNameInputSet:DeceasedIndEdit</stringProp>
                      <stringProp name="Argument.value">false</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="PrimaryPhoneSelection_Radio" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">PrimaryPhoneSelection_Radio</stringProp>
                      <stringProp name="Argument.value">ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:PersonContactInfoInputSet:pcinfoinputset_lmphonesref:LM_PhonesInputSet:0:LM_Phone_PrimaryPhone</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:DriversLicenseInfoInputSet:LicenseState" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:DriversLicenseInfoInputSet:LicenseState</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:DriversLicenseInfoInputSet:LicenseNumber" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:DriversLicenseInfoInputSet:LicenseNumber</stringProp>
                      <stringProp name="Argument.value">${cLICENSENUMBER}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:MedicareEligible" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:MedicareEligible</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:DateOfBirth" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:DateOfBirth</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:TaxFilingStatus" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:TaxFilingStatus</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="objFocusId" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">objFocusId</stringProp>
                      <stringProp name="Argument.value">textfield-2235</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:TaxId1" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:TaxId1</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="eventParam" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">eventParam</stringProp>
                      <stringProp name="Argument.value">ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:PersonContactInfoInputSet:pcinfoinputset_lmphonesref:LM_PhonesInputSet:0:LM_Phone_PrimaryPhone</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:PersonContactInfoInputSet:EmailAllowed" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:PersonContactInfoInputSet:EmailAllowed</stringProp>
                      <stringProp name="Argument.value">false</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="eventSource" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">eventSource</stringProp>
                      <stringProp name="Argument.value">_refresh_</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:dependants" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:dependants</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:MaritalStatus" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:MaritalStatus</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:Occupation" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:Occupation</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:Gender" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:Gender</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="LM_Phone_PhoneNumber" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">LM_Phone_PhoneNumber</stringProp>
                      <stringProp name="Argument.value">000-000-0000</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="scrollPositions" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">scrollPositions</stringProp>
                      <stringProp name="Argument.value">{&quot;centerPanel&quot;:{&quot;left&quot;:0,&quot;top&quot;:182}}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="csrfToken" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">csrfToken</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="Claim:MenuLinks" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">Claim:MenuLinks</stringProp>
                      <stringProp name="Argument.value">${cCLAIMMENULINKS}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_20" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:PersonContactInfoInputSet:ContactProhibited" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:PersonContactInfoInputSet:ContactProhibited</stringProp>
                      <stringProp name="Argument.value">false</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:PersonContactInfoInputSet:EmailAllowed" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:PersonContactInfoInputSet:EmailAllowed</stringProp>
                      <stringProp name="Argument.value">false</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="csrfToken" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">csrfToken</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="TabBar:ClaimTab:ClaimTab_FindClaim" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">TabBar:ClaimTab:ClaimTab_FindClaim</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="Claim:MenuLinks" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">Claim:MenuLinks</stringProp>
                      <stringProp name="Argument.value">${cCLAIMMENULINKS}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="QuickJump" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">QuickJump</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="infoBar" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">infoBar</stringProp>
                      <stringProp name="Argument.value">${cINFOBAR_1}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="Claim:MenuLinks_toggle" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">Claim:MenuLinks_toggle</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name=":tabs" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">:tabs</stringProp>
                      <stringProp name="Argument.value">${cTABS_1}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:PersonNameInputSet:Prefix" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:PersonNameInputSet:Prefix</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:PersonNameInputSet:Suffix" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:PersonNameInputSet:Suffix</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="eventParam" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">eventParam</stringProp>
                      <stringProp name="Argument.value">ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:PersonContactInfoInputSet:pcinfoinputset_lmphonesref:LM_PhonesInputSet:0:LM_Phone_PhoneNumber</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:PersonNameInputSet:FormerName" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:PersonNameInputSet:FormerName</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="eventSource" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">eventSource</stringProp>
                      <stringProp name="Argument.value">_refresh_</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:PersonNameInputSet:DeceasedIndEdit" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:PersonNameInputSet:DeceasedIndEdit</stringProp>
                      <stringProp name="Argument.value">false</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="scrollPositions" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">scrollPositions</stringProp>
                      <stringProp name="Argument.value">{&quot;centerPanel&quot;:{&quot;left&quot;:0,&quot;top&quot;:182}}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name=":tblinks" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">:tblinks</stringProp>
                      <stringProp name="Argument.value">${cTBLINKS_1}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:Notes" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:Notes</stringProp>
                      <stringProp name="Argument.value">TP142</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:DriversLicenseInfoInputSet:LicenseState" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:DriversLicenseInfoInputSet:LicenseState</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:Occupation" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:Occupation</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:Gender" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:Gender</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:DateOfBirth" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:DateOfBirth</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:TaxFilingStatus" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:TaxFilingStatus</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:DriversLicenseInfoInputSet:LicenseNumber" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:DriversLicenseInfoInputSet:LicenseNumber</stringProp>
                      <stringProp name="Argument.value">${cLICENSENUMBER}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:MedicareEligible" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:MedicareEligible</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:dependants" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:dependants</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:MaritalStatus" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:MaritalStatus</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:TaxId1" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:TaxId1</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP142_P_Auto_Update_Claimant" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_21" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:PersonContactInfoInputSet:ContactProhibited" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:PersonContactInfoInputSet:ContactProhibited</stringProp>
                      <stringProp name="Argument.value">false</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:PersonContactInfoInputSet:EmailAllowed" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:PersonContactInfoInputSet:EmailAllowed</stringProp>
                      <stringProp name="Argument.value">false</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="csrfToken" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">csrfToken</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="TabBar:ClaimTab:ClaimTab_FindClaim" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">TabBar:ClaimTab:ClaimTab_FindClaim</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="Claim:MenuLinks" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">Claim:MenuLinks</stringProp>
                      <stringProp name="Argument.value">${cCLAIMMENULINKS}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="QuickJump" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">QuickJump</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="infoBar" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">infoBar</stringProp>
                      <stringProp name="Argument.value">${cINFOBAR_1}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="Claim:MenuLinks_toggle" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">Claim:MenuLinks_toggle</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name=":tabs" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">:tabs</stringProp>
                      <stringProp name="Argument.value">${cTABS_1}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:PersonNameInputSet:Prefix" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:PersonNameInputSet:Prefix</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:PersonNameInputSet:Suffix" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:PersonNameInputSet:Suffix</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:PersonNameInputSet:FormerName" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:PersonNameInputSet:FormerName</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="objFocusId" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">objFocusId</stringProp>
                      <stringProp name="Argument.value">ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV_tb:ContactDetailToolbarButtonSet:ToolbarButton</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:PersonNameInputSet:DeceasedIndEdit" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:PersonNameInputSet:DeceasedIndEdit</stringProp>
                      <stringProp name="Argument.value">false</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="eventSource" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">eventSource</stringProp>
                      <stringProp name="Argument.value">ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV_tb:ContactDetailToolbarButtonSet:ToolbarButton_act</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name=":tblinks" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">:tblinks</stringProp>
                      <stringProp name="Argument.value">${cTBLINKS_1}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:Notes" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:Notes</stringProp>
                      <stringProp name="Argument.value">TP142</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:DriversLicenseInfoInputSet:LicenseState" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:DriversLicenseInfoInputSet:LicenseState</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:Occupation" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:Occupation</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:Gender" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:Gender</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:DateOfBirth" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:DateOfBirth</stringProp>
                      <stringProp name="Argument.value">01/29/1985</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:TaxFilingStatus" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:TaxFilingStatus</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:DriversLicenseInfoInputSet:LicenseNumber" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:DriversLicenseInfoInputSet:LicenseNumber</stringProp>
                      <stringProp name="Argument.value">${cLICENSENUMBER}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:MedicareEligible" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:MedicareEligible</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:dependants" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:dependants</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:MaritalStatus" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:MaritalStatus</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:TaxId1" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:TaxId1</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_22" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="ExposureDetail:ExposureDetailScreen:ExposureDetailDV:ExposureDetailDV:Code" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ExposureDetail:ExposureDetailScreen:ExposureDetailDV:ExposureDetailDV:Code</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name=":tblinks" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">:tblinks</stringProp>
                      <stringProp name="Argument.value">${cTBLINKS_1}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="TabBar:ClaimTab:ClaimTab_FindClaim" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">TabBar:ClaimTab:ClaimTab_FindClaim</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="QuickJump" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">QuickJump</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="Claim:MenuLinks_toggle" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">Claim:MenuLinks_toggle</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ExposureDetail:ExposureDetailScreen:ExposureDetailDV:ExposureDetailDV:Claimant_ContactProhibited" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ExposureDetail:ExposureDetailScreen:ExposureDetailDV:ExposureDetailDV:Claimant_ContactProhibited</stringProp>
                      <stringProp name="Argument.value">false</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ExposureDetail:ExposureDetailScreen:ExposureDetailDV:ExposureDetailDV:AltContact_Name" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ExposureDetail:ExposureDetailScreen:ExposureDetailDV:ExposureDetailDV:AltContact_Name</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ExposureDetail:ExposureDetailScreen:ExposureDetailDV:ExposureDetailDV:JurisdictionState" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ExposureDetail:ExposureDetailScreen:ExposureDetailDV:ExposureDetailDV:JurisdictionState</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ExposureDetail:ExposureDetailScreen:ExposureDetailDV:ExposureDetailDV:Segment" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ExposureDetail:ExposureDetailScreen:ExposureDetailDV:ExposureDetailDV:Segment</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="csrfToken" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">csrfToken</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="Claim:MenuLinks" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">Claim:MenuLinks</stringProp>
                      <stringProp name="Argument.value">${cCLAIMMENULINKS}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="Claim:ClaimMenuActions" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">Claim:ClaimMenuActions</stringProp>
                      <stringProp name="Argument.value">${cCLAIMMENUACTIONS}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="infoBar" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">infoBar</stringProp>
                      <stringProp name="Argument.value">${cINFOBAR_1}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="objFocusId" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">objFocusId</stringProp>
                      <stringProp name="Argument.value">ExposureDetail:ExposureDetailScreen:ExposureDetailDV_tb:ToolbarButton</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="eventSource" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">eventSource</stringProp>
                      <stringProp name="Argument.value">ExposureDetail:ExposureDetailScreen:ExposureDetailDV_tb:ToolbarButton_act</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="scrollPositions" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">scrollPositions</stringProp>
                      <stringProp name="Argument.value">{&quot;centerPanel&quot;:{&quot;left&quot;:0,&quot;top&quot;:71}}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name=":tabs" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">:tabs</stringProp>
                      <stringProp name="Argument.value">${cTABS_1}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP142_Q_Auto_Parties_Involved" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_23" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="Claim:MenuLinks" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">Claim:MenuLinks</stringProp>
                      <stringProp name="Argument.value">${cCLAIMMENULINKS}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="csrfToken" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">csrfToken</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="TabBar:ClaimTab:ClaimTab_FindClaim" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">TabBar:ClaimTab:ClaimTab_FindClaim</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="QuickJump" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">QuickJump</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="Claim:MenuLinks_toggle" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">Claim:MenuLinks_toggle</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name=":tblinks" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">:tblinks</stringProp>
                      <stringProp name="Argument.value">${cTBLINKS}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name=":tabs" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">:tabs</stringProp>
                      <stringProp name="Argument.value">${cTABS_1}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="infoBar" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">infoBar</stringProp>
                      <stringProp name="Argument.value">${cINFOBAR_1}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="Claim:ClaimMenuActions" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">Claim:ClaimMenuActions</stringProp>
                      <stringProp name="Argument.value">${cCLAIMMENUACTIONS}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="eventSource" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">eventSource</stringProp>
                      <stringProp name="Argument.value">Claim:MenuLinks:Claim_ClaimPartiesGroup:ClaimPartiesGroup_ClaimContacts_act</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="CNG_TP142_Q_Auto_Parties_Involved failed - GENERAL_MSG_CAT_SSL_ERROR" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1822264439">GENERAL_MSG_CAT_SSL_ERROR</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">20</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="CNG_TP142_Q_Auto_Parties_Involved failed - Unable to view parties involved screen for claimnumber, ${CLAIMNUMBER}" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-502807437">Contacts</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP142_R_Auto_Edit_Parties_Involved" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_9" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="Claim:ClaimMenuActions" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">Claim:ClaimMenuActions</stringProp>
                      <stringProp name="Argument.value">${cCLAIMMENUACTIONS}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="Claim:MenuLinks" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">Claim:MenuLinks</stringProp>
                      <stringProp name="Argument.value">${cCLAIMMENULINKS}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="TabBar:ClaimTab:ClaimTab_FindClaim" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">TabBar:ClaimTab:ClaimTab_FindClaim</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="QuickJump" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">QuickJump</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="Claim:MenuLinks_toggle" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">Claim:MenuLinks_toggle</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:PeopleInvolvedDetailedLV:PeopleInvolvedDetailedFilter" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:PeopleInvolvedDetailedLV:PeopleInvolvedDetailedFilter</stringProp>
                      <stringProp name="Argument.value">CoreFilters.AllFilter/All</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name=":tblinks" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">:tblinks</stringProp>
                      <stringProp name="Argument.value">${cTBLINKS}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name=":tabs" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">:tabs</stringProp>
                      <stringProp name="Argument.value">${cTABS_1}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="infoBar" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">infoBar</stringProp>
                      <stringProp name="Argument.value">${cINFOBAR_1}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="objFocusId" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">objFocusId</stringProp>
                      <stringProp name="Argument.value">ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:PeopleInvolvedDetailedLV_tb:ClaimContacts_CreateNewContactButton:ClaimContacts_NewPerson</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="eventSource" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">eventSource</stringProp>
                      <stringProp name="Argument.value">ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:PeopleInvolvedDetailedLV_tb:ClaimContacts_CreateNewContactButton:ClaimContacts_NewPerson_act</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="csrfToken" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">csrfToken</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_10" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:PersonNameInputSet:Suffix" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:PersonNameInputSet:Suffix</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:PersonNameInputSet:FormerName" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:PersonNameInputSet:FormerName</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:Occupation" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:Occupation</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="TabBar:ClaimTab:ClaimTab_FindClaim" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">TabBar:ClaimTab:ClaimTab_FindClaim</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:Gender" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:Gender</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="QuickJump" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">QuickJump</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:DateOfBirth" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:DateOfBirth</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="Claim:MenuLinks_toggle" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">Claim:MenuLinks_toggle</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:TaxFilingStatus" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:TaxFilingStatus</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:PersonNameInputSet:FirstName" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:PersonNameInputSet:FirstName</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:DriversLicenseInfoInputSet:LicenseNumber" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:DriversLicenseInfoInputSet:LicenseNumber</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:PersonNameInputSet:MiddleName" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:PersonNameInputSet:MiddleName</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:MedicareEligible" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:MedicareEligible</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:PersonNameInputSet:LastName" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:PersonNameInputSet:LastName</stringProp>
                      <stringProp name="Argument.value">Adams</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:dependants" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:dependants</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:PersonNameInputSet:Prefix" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:PersonNameInputSet:Prefix</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:MaritalStatus" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:MaritalStatus</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:TaxId1" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:TaxId1</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:useInsuredAddressID" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:useInsuredAddressID</stringProp>
                      <stringProp name="Argument.value">false</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="csrfToken" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">csrfToken</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="Claim:MenuLinks" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">Claim:MenuLinks</stringProp>
                      <stringProp name="Argument.value">${cCLAIMMENULINKS}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="infoBar" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">infoBar</stringProp>
                      <stringProp name="Argument.value">${cINFOBAR_1}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name=":tabs" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">:tabs</stringProp>
                      <stringProp name="Argument.value">${cTABS_1}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="objFocusId" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">objFocusId</stringProp>
                      <stringProp name="Argument.value">NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:ContactBasicsHeaderInputSet:EditableClaimContactRolesLV_tb:Add</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="eventSource" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">eventSource</stringProp>
                      <stringProp name="Argument.value">NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:ContactBasicsHeaderInputSet:EditableClaimContactRolesLV_tb:Add_act</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name=":tblinks" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">:tblinks</stringProp>
                      <stringProp name="Argument.value">${cTBLINKS}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:Notes" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:Notes</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:DriversLicenseInfoInputSet:LicenseState" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:DriversLicenseInfoInputSet:LicenseState</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:PrimaryAddressInputSet:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:Address_AddressType" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:PrimaryAddressInputSet:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:Address_AddressType</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:PrimaryAddressInputSet:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:City" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:PrimaryAddressInputSet:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:City</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:PrimaryAddressInputSet:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:AddressLine2" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:PrimaryAddressInputSet:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:AddressLine2</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:PrimaryAddressInputSet:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:AddressLine1" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:PrimaryAddressInputSet:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:AddressLine1</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:PersonContactInfoInputSet:EmailAllowed" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:PersonContactInfoInputSet:EmailAllowed</stringProp>
                      <stringProp name="Argument.value">false</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:PrimaryAddressInputSet:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:Country" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:PrimaryAddressInputSet:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:Country</stringProp>
                      <stringProp name="Argument.value">US</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:PrimaryAddressInputSet:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:PostalCode" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:PrimaryAddressInputSet:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:PostalCode</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:PrimaryAddressInputSet:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:State" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:PrimaryAddressInputSet:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:State</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:PrimaryAddressInputSet:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:County" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:PrimaryAddressInputSet:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:County</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:PersonNameInputSet:DeceasedIndEdit" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:PersonNameInputSet:DeceasedIndEdit</stringProp>
                      <stringProp name="Argument.value">false</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_11" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:PersonNameInputSet:Prefix" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:PersonNameInputSet:Prefix</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:PersonNameInputSet:Suffix" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:PersonNameInputSet:Suffix</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:Gender" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:Gender</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="TabBar:ClaimTab:ClaimTab_FindClaim" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">TabBar:ClaimTab:ClaimTab_FindClaim</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:DateOfBirth" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:DateOfBirth</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="QuickJump" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">QuickJump</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:TaxFilingStatus" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:TaxFilingStatus</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="Claim:MenuLinks_toggle" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">Claim:MenuLinks_toggle</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:TaxId1" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:TaxId1</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="Role" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">Role</stringProp>
                      <stringProp name="Argument.value">altcontact</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:MedicareEligible" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:MedicareEligible</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:PersonNameInputSet:FirstName" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:PersonNameInputSet:FirstName</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:dependants" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:dependants</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:PersonNameInputSet:MiddleName" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:PersonNameInputSet:MiddleName</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:MaritalStatus" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:MaritalStatus</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:PersonNameInputSet:LastName" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:PersonNameInputSet:LastName</stringProp>
                      <stringProp name="Argument.value">Adams</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:Occupation" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:Occupation</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:useInsuredAddressID" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:useInsuredAddressID</stringProp>
                      <stringProp name="Argument.value">false</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:PrimaryAddressInputSet:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:Address_AddressType" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:PrimaryAddressInputSet:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:Address_AddressType</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="infoBar" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">infoBar</stringProp>
                      <stringProp name="Argument.value">${cINFOBAR_1}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name=":tabs" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">:tabs</stringProp>
                      <stringProp name="Argument.value">${cTABS_1}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name=":tblinks" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">:tblinks</stringProp>
                      <stringProp name="Argument.value">${cTBLINKS}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:ContactBasicsHeaderInputSet:EditableClaimContactRolesLV:0:Role" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:ContactBasicsHeaderInputSet:EditableClaimContactRolesLV:0:Role</stringProp>
                      <stringProp name="Argument.value">altcontact</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="eventSource" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">eventSource</stringProp>
                      <stringProp name="Argument.value">_refresh_</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="csrfToken" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">csrfToken</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="Claim:MenuLinks" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">Claim:MenuLinks</stringProp>
                      <stringProp name="Argument.value">${cCLAIMMENULINKS}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:Notes" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:Notes</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:DriversLicenseInfoInputSet:LicenseState" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:DriversLicenseInfoInputSet:LicenseState</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:DriversLicenseInfoInputSet:LicenseNumber" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:DriversLicenseInfoInputSet:LicenseNumber</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="objFocusId" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">objFocusId</stringProp>
                      <stringProp name="Argument.value">simplecombo-1938</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="eventParam" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">eventParam</stringProp>
                      <stringProp name="Argument.value">NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:ContactBasicsHeaderInputSet:EditableClaimContactRolesLV:0:Role</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:PrimaryAddressInputSet:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:Country" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:PrimaryAddressInputSet:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:Country</stringProp>
                      <stringProp name="Argument.value">US</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:PrimaryAddressInputSet:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:AddressLine2" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:PrimaryAddressInputSet:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:AddressLine2</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:PrimaryAddressInputSet:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:AddressLine1" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:PrimaryAddressInputSet:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:AddressLine1</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:PersonContactInfoInputSet:EmailAllowed" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:PersonContactInfoInputSet:EmailAllowed</stringProp>
                      <stringProp name="Argument.value">false</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:PersonNameInputSet:DeceasedIndEdit" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:PersonNameInputSet:DeceasedIndEdit</stringProp>
                      <stringProp name="Argument.value">false</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:PrimaryAddressInputSet:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:PostalCode" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:PrimaryAddressInputSet:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:PostalCode</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:PrimaryAddressInputSet:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:State" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:PrimaryAddressInputSet:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:State</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:PrimaryAddressInputSet:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:County" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:PrimaryAddressInputSet:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:County</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:PrimaryAddressInputSet:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:City" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:PrimaryAddressInputSet:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:City</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:PersonNameInputSet:FormerName" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:PersonNameInputSet:FormerName</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_12" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:PersonNameInputSet:Suffix" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:PersonNameInputSet:Suffix</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:PersonNameInputSet:FormerName" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:PersonNameInputSet:FormerName</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:Occupation" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:Occupation</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="TabBar:ClaimTab:ClaimTab_FindClaim" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">TabBar:ClaimTab:ClaimTab_FindClaim</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:Gender" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:Gender</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="QuickJump" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">QuickJump</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:DateOfBirth" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:DateOfBirth</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="Claim:MenuLinks_toggle" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">Claim:MenuLinks_toggle</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:TaxFilingStatus" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:TaxFilingStatus</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:PersonNameInputSet:FirstName" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:PersonNameInputSet:FirstName</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:DriversLicenseInfoInputSet:LicenseNumber" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:DriversLicenseInfoInputSet:LicenseNumber</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:PersonNameInputSet:MiddleName" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:PersonNameInputSet:MiddleName</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:MedicareEligible" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:MedicareEligible</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:PersonNameInputSet:LastName" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:PersonNameInputSet:LastName</stringProp>
                      <stringProp name="Argument.value">Adams</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:dependants" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:dependants</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:PersonNameInputSet:Prefix" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:PersonNameInputSet:Prefix</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:MaritalStatus" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:MaritalStatus</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:TaxId1" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:TaxId1</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:useInsuredAddressID" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:useInsuredAddressID</stringProp>
                      <stringProp name="Argument.value">false</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="csrfToken" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">csrfToken</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="Claim:MenuLinks" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">Claim:MenuLinks</stringProp>
                      <stringProp name="Argument.value">${cCLAIMMENULINKS}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="infoBar" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">infoBar</stringProp>
                      <stringProp name="Argument.value">${cINFOBAR_1}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name=":tabs" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">:tabs</stringProp>
                      <stringProp name="Argument.value">${cTABS_1}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="objFocusId" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">objFocusId</stringProp>
                      <stringProp name="Argument.value">NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:PersonContactInfoInputSet:pcinfoinputset_lmemails:LM_EmailsInputSet:Add</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="eventSource" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">eventSource</stringProp>
                      <stringProp name="Argument.value">NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:PersonContactInfoInputSet:pcinfoinputset_lmemails:LM_EmailsInputSet:Add_act</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name=":tblinks" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">:tblinks</stringProp>
                      <stringProp name="Argument.value">${cTBLINKS}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:Notes" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:Notes</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:DriversLicenseInfoInputSet:LicenseState" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:DriversLicenseInfoInputSet:LicenseState</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:PrimaryAddressInputSet:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:Address_AddressType" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:PrimaryAddressInputSet:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:Address_AddressType</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:PrimaryAddressInputSet:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:City" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:PrimaryAddressInputSet:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:City</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:PrimaryAddressInputSet:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:AddressLine2" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:PrimaryAddressInputSet:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:AddressLine2</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:PrimaryAddressInputSet:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:AddressLine1" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:PrimaryAddressInputSet:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:AddressLine1</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:PersonContactInfoInputSet:EmailAllowed" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:PersonContactInfoInputSet:EmailAllowed</stringProp>
                      <stringProp name="Argument.value">false</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:PrimaryAddressInputSet:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:Country" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:PrimaryAddressInputSet:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:Country</stringProp>
                      <stringProp name="Argument.value">US</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:PrimaryAddressInputSet:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:PostalCode" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:PrimaryAddressInputSet:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:PostalCode</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:PrimaryAddressInputSet:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:State" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:PrimaryAddressInputSet:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:State</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:PrimaryAddressInputSet:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:County" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:PrimaryAddressInputSet:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:County</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:PersonNameInputSet:DeceasedIndEdit" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:PersonNameInputSet:DeceasedIndEdit</stringProp>
                      <stringProp name="Argument.value">false</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_14" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:PersonNameInputSet:Prefix" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:PersonNameInputSet:Prefix</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:PersonNameInputSet:Suffix" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:PersonNameInputSet:Suffix</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:DateOfBirth" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:DateOfBirth</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ajaxRequestInfo" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ajaxRequestInfo</stringProp>
                      <stringProp name="Argument.value">[{&quot;viewRootId&quot;:&quot;NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:PrimaryAddressInputSet:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:PostalCode&quot;,&quot;paramMap&quot;:{&quot;postOnChangeTarget&quot;:&quot;NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:PrimaryAddressInputSet:CCAddressInputSet:globalAddressContainer&quot;,&quot;skipFocusOnPOC&quot;:true}}]</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:TaxFilingStatus" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:TaxFilingStatus</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="TabBar:ClaimTab:ClaimTab_FindClaim" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">TabBar:ClaimTab:ClaimTab_FindClaim</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:TaxId1" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:TaxId1</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="QuickJump" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">QuickJump</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:useInsuredAddressID" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:useInsuredAddressID</stringProp>
                      <stringProp name="Argument.value">false</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="Claim:MenuLinks_toggle" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">Claim:MenuLinks_toggle</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:dependants" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:dependants</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:PersonNameInputSet:FirstName" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:PersonNameInputSet:FirstName</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:MaritalStatus" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:MaritalStatus</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:PersonNameInputSet:MiddleName" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:PersonNameInputSet:MiddleName</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:Occupation" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:Occupation</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:PersonNameInputSet:LastName" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:PersonNameInputSet:LastName</stringProp>
                      <stringProp name="Argument.value">Adams</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:Gender" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:Gender</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:PrimaryAddressInputSet:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:Address_AddressType" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:PrimaryAddressInputSet:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:Address_AddressType</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:PrimaryAddressInputSet:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:Country" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:PrimaryAddressInputSet:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:Country</stringProp>
                      <stringProp name="Argument.value">US</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name=":tabs" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">:tabs</stringProp>
                      <stringProp name="Argument.value">${cTABS_1}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name=":tblinks" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">:tblinks</stringProp>
                      <stringProp name="Argument.value">${cTBLINKS}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:PersonContactInfoInputSet:pcinfoinputset_lmemails:LM_EmailsInputSet:0:LM_ElectronicAddress_AddressString" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:PersonContactInfoInputSet:pcinfoinputset_lmemails:LM_EmailsInputSet:0:LM_ElectronicAddress_AddressString</stringProp>
                      <stringProp name="Argument.value">test@test.com</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:Notes" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:Notes</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="csrfToken" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">csrfToken</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="Claim:MenuLinks" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">Claim:MenuLinks</stringProp>
                      <stringProp name="Argument.value">${cCLAIMMENULINKS}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="infoBar" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">infoBar</stringProp>
                      <stringProp name="Argument.value">${cINFOBAR_1}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:DriversLicenseInfoInputSet:LicenseState" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:DriversLicenseInfoInputSet:LicenseState</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:DriversLicenseInfoInputSet:LicenseNumber" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:DriversLicenseInfoInputSet:LicenseNumber</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:MedicareEligible" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:MedicareEligible</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="scrollPositions" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">scrollPositions</stringProp>
                      <stringProp name="Argument.value">{&quot;centerPanel&quot;:{&quot;left&quot;:0,&quot;top&quot;:219}}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:PrimaryAddressInputSet:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:PostalCode" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:PrimaryAddressInputSet:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:PostalCode</stringProp>
                      <stringProp name="Argument.value">60015</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:PrimaryAddressInputSet:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:AddressLine1" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:PrimaryAddressInputSet:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:AddressLine1</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:PersonContactInfoInputSet:EmailAllowed" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:PersonContactInfoInputSet:EmailAllowed</stringProp>
                      <stringProp name="Argument.value">false</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="LM_ElectronicAddress_AddressString" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">LM_ElectronicAddress_AddressString</stringProp>
                      <stringProp name="Argument.value">test@test.com</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:PersonNameInputSet:DeceasedIndEdit" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:PersonNameInputSet:DeceasedIndEdit</stringProp>
                      <stringProp name="Argument.value">false</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:PrimaryAddressInputSet:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:State" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:PrimaryAddressInputSet:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:State</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:PrimaryAddressInputSet:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:County" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:PrimaryAddressInputSet:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:County</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:PrimaryAddressInputSet:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:City" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:PrimaryAddressInputSet:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:City</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:PrimaryAddressInputSet:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:AddressLine2" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:PrimaryAddressInputSet:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:AddressLine2</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:PersonNameInputSet:FormerName" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">NewPartyInvolvedPopup:ContactDetailScreen:ContactBasicsDV:PersonNameInputSet:FormerName</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_15" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">TabBar%3AClaimTab%3AClaimTab_FindClaim=&amp;QuickJump=&amp;Claim%3AMenuLinks_toggle=&amp;NewPartyInvolvedPopup%3AContactDetailScreen%3AContactBasicsDV%3APersonNameInputSet%3AFirstName=&amp;NewPartyInvolvedPopup%3AContactDetailScreen%3AContactBasicsDV%3APersonNameInputSet%3AMiddleName=&amp;NewPartyInvolvedPopup%3AContactDetailScreen%3AContactBasicsDV%3APersonNameInputSet%3ALastName=Adams&amp;NewPartyInvolvedPopup%3AContactDetailScreen%3AContactBasicsDV%3APersonNameInputSet%3APrefix=&amp;NewPartyInvolvedPopup%3AContactDetailScreen%3AContactBasicsDV%3APersonNameInputSet%3ASuffix=&amp;NewPartyInvolvedPopup%3AContactDetailScreen%3AContactBasicsDV%3APersonNameInputSet%3AFormerName=&amp;NewPartyInvolvedPopup%3AContactDetailScreen%3AContactBasicsDV%3APersonNameInputSet%3ADeceasedIndEdit=false&amp;LM_ElectronicAddress_AddressString=test%40test.com&amp;NewPartyInvolvedPopup%3AContactDetailScreen%3AContactBasicsDV%3APersonContactInfoInputSet%3AEmailAllowed=false&amp;NewPartyInvolvedPopup%3AContactDetailScreen%3AContactBasicsDV%3APrimaryAddressInputSet%3ACCAddressInputSet%3AglobalAddressContainer%3AglobalAddress%3AGlobalAddressInputSet%3AAddressLine1=100%20Main%20Street&amp;NewPartyInvolvedPopup%3AContactDetailScreen%3AContactBasicsDV%3APrimaryAddressInputSet%3ACCAddressInputSet%3AglobalAddressContainer%3AglobalAddress%3AGlobalAddressInputSet%3AAddressLine2=&amp;NewPartyInvolvedPopup%3AContactDetailScreen%3AContactBasicsDV%3APrimaryAddressInputSet%3ACCAddressInputSet%3AglobalAddressContainer%3AglobalAddress%3AGlobalAddressInputSet%3ACity=&amp;NewPartyInvolvedPopup%3AContactDetailScreen%3AContactBasicsDV%3APrimaryAddressInputSet%3ACCAddressInputSet%3AglobalAddressContainer%3AglobalAddress%3AGlobalAddressInputSet%3ACounty=Lake&amp;NewPartyInvolvedPopup%3AContactDetailScreen%3AContactBasicsDV%3APrimaryAddressInputSet%3ACCAddressInputSet%3AglobalAddressContainer%3AglobalAddress%3AGlobalAddressInputSet%3AState=IL&amp;NewPartyInvolvedPopup%3AContactDetailScreen%3AContactBasicsDV%3APrimaryAddressInputSet%3ACCAddressInputSet%3AglobalAddressContainer%3AglobalAddress%3AGlobalAddressInputSet%3APostalCode=60015&amp;NewPartyInvolvedPopup%3AContactDetailScreen%3AContactBasicsDV%3APrimaryAddressInputSet%3ACCAddressInputSet%3AglobalAddressContainer%3AglobalAddress%3AGlobalAddressInputSet%3ACountry=US&amp;NewPartyInvolvedPopup%3AContactDetailScreen%3AContactBasicsDV%3APrimaryAddressInputSet%3ACCAddressInputSet%3AglobalAddressContainer%3AglobalAddress%3AGlobalAddressInputSet%3AAddress_AddressType=&amp;NewPartyInvolvedPopup%3AContactDetailScreen%3AContactBasicsDV%3AuseInsuredAddressID=false&amp;NewPartyInvolvedPopup%3AContactDetailScreen%3AContactBasicsDV%3AAdditionalInfoInputSet%3ATaxId1=&amp;NewPartyInvolvedPopup%3AContactDetailScreen%3AContactBasicsDV%3AAdditionalInfoInputSet%3ATaxFilingStatus=&amp;NewPartyInvolvedPopup%3AContactDetailScreen%3AContactBasicsDV%3AAdditionalInfoInputSet%3ADateOfBirth=&amp;NewPartyInvolvedPopup%3AContactDetailScreen%3AContactBasicsDV%3AAdditionalInfoInputSet%3AGender=&amp;NewPartyInvolvedPopup%3AContactDetailScreen%3AContactBasicsDV%3AAdditionalInfoInputSet%3AOccupation=&amp;NewPartyInvolvedPopup%3AContactDetailScreen%3AContactBasicsDV%3AAdditionalInfoInputSet%3AMaritalStatus=&amp;NewPartyInvolvedPopup%3AContactDetailScreen%3AContactBasicsDV%3AAdditionalInfoInputSet%3Adependants=&amp;NewPartyInvolvedPopup%3AContactDetailScreen%3AContactBasicsDV%3AAdditionalInfoInputSet%3AMedicareEligible=&amp;NewPartyInvolvedPopup%3AContactDetailScreen%3AContactBasicsDV%3AAdditionalInfoInputSet%3ADriversLicenseInfoInputSet%3ALicenseNumber=&amp;NewPartyInvolvedPopup%3AContactDetailScreen%3AContactBasicsDV%3AAdditionalInfoInputSet%3ADriversLicenseInfoInputSet%3ALicenseState=&amp;NewPartyInvolvedPopup%3AContactDetailScreen%3AContactBasicsDV%3ANotes=&amp;%3Atblinks=${cTBLINKS}%3D&amp;%3Atabs=${cTABS_1}%3D&amp;infoBar=${cINFOBAR_1}%3D&amp;Claim%3AMenuLinks=${cCLAIMMENULINKS}%3D&amp;csrfToken=&amp;eventSource=NewPartyInvolvedPopup%3AContactDetailScreen%3AContactBasicsDV_tb%3AContactDetailToolbarButtonSet%3AToolbarButton_act&amp;objFocusId=NewPartyInvolvedPopup%3AContactDetailScreen%3AContactBasicsDV_tb%3AContactDetailToolbarButtonSet%3AToolbarButton</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_16" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="Claim:MenuLinks" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">Claim:MenuLinks</stringProp>
                      <stringProp name="Argument.value">${cCLAIMMENULINKS}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="csrfToken" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">csrfToken</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="TabBar:ClaimTab:ClaimTab_FindClaim" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">TabBar:ClaimTab:ClaimTab_FindClaim</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="QuickJump" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">QuickJump</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="Claim:MenuLinks_toggle" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">Claim:MenuLinks_toggle</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="objFocusId" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">objFocusId</stringProp>
                      <stringProp name="Argument.value">AddressCleansingPopup:AddressCleansingScreen:ToolbarButtonCancel</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="AddressCleansingPopup:AddressCleansingScreen:AddressCleansingDV:overridereasinid" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">AddressCleansingPopup:AddressCleansingScreen:AddressCleansingDV:overridereasinid</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name=":tblinks" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">:tblinks</stringProp>
                      <stringProp name="Argument.value">${cTBLINKS}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name=":tabs" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">:tabs</stringProp>
                      <stringProp name="Argument.value">${cTABS_1}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="infoBar" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">infoBar</stringProp>
                      <stringProp name="Argument.value">${cINFOBAR_1}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="eventSource" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">eventSource</stringProp>
                      <stringProp name="Argument.value">AddressCleansingPopup:AddressCleansingScreen:ToolbarButtonCancel_act</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP142_S_Auto_Update_Parties_Involved" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_39" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">TabBar%3AClaimTab%3AClaimTab_FindClaim=&amp;QuickJump=&amp;Claim%3AMenuLinks_toggle=&amp;ClaimContacts%3AClaimContactsScreen%3APeopleInvolvedDetailedListDetail%3APeopleInvolvedDetailedLV%3APeopleInvolvedDetailedFilter=CoreFilters.AllFilter%2FAll&amp;ClaimContacts%3AClaimContactsScreen%3APeopleInvolvedDetailedListDetail%3AClaimContactCV%3AContactBasicsDV%3AOrganizationName=CENTERVILLE%20PD&amp;ClaimContacts%3AClaimContactsScreen%3APeopleInvolvedDetailedListDetail%3AClaimContactCV%3AContactBasicsDV%3AAgencyType=police_department&amp;ClaimContacts%3AClaimContactsScreen%3APeopleInvolvedDetailedListDetail%3AClaimContactCV%3AContactBasicsDV%3APrecinctNumber=&amp;ClaimContacts%3AClaimContactsScreen%3APeopleInvolvedDetailedListDetail%3AClaimContactCV%3AContactBasicsDV%3APrimaryAddressInputSet%3ACCAddressInputSet%3AglobalAddressContainer%3AglobalAddress%3AGlobalAddressInputSet%3AAddressLine1=4%20Erhard%20Lane&amp;ClaimContacts%3AClaimContactsScreen%3APeopleInvolvedDetailedListDetail%3AClaimContactCV%3AContactBasicsDV%3APrimaryAddressInputSet%3ACCAddressInputSet%3AglobalAddressContainer%3AglobalAddress%3AGlobalAddressInputSet%3AAddressLine2=&amp;ClaimContacts%3AClaimContactsScreen%3APeopleInvolvedDetailedListDetail%3AClaimContactCV%3AContactBasicsDV%3APrimaryAddressInputSet%3ACCAddressInputSet%3AglobalAddressContainer%3AglobalAddress%3AGlobalAddressInputSet%3ACity=Erhard&amp;ClaimContacts%3AClaimContactsScreen%3APeopleInvolvedDetailedListDetail%3AClaimContactCV%3AContactBasicsDV%3APrimaryAddressInputSet%3ACCAddressInputSet%3AglobalAddressContainer%3AglobalAddress%3AGlobalAddressInputSet%3ACounty=Otter%20Tail&amp;ClaimContacts%3AClaimContactsScreen%3APeopleInvolvedDetailedListDetail%3AClaimContactCV%3AContactBasicsDV%3APrimaryAddressInputSet%3ACCAddressInputSet%3AglobalAddressContainer%3AglobalAddress%3AGlobalAddressInputSet%3AState=MN&amp;ClaimContacts%3AClaimContactsScreen%3APeopleInvolvedDetailedListDetail%3AClaimContactCV%3AContactBasicsDV%3APrimaryAddressInputSet%3ACCAddressInputSet%3AglobalAddressContainer%3AglobalAddress%3AGlobalAddressInputSet%3APostalCode=83441-5432&amp;ClaimContacts%3AClaimContactsScreen%3APeopleInvolvedDetailedListDetail%3AClaimContactCV%3AContactBasicsDV%3APrimaryAddressInputSet%3ACCAddressInputSet%3AglobalAddressContainer%3AglobalAddress%3AGlobalAddressInputSet%3ACountry=US&amp;ClaimContacts%3AClaimContactsScreen%3APeopleInvolvedDetailedListDetail%3AClaimContactCV%3AContactBasicsDV%3APrimaryAddressInputSet%3ACCAddressInputSet%3AglobalAddressContainer%3AglobalAddress%3AGlobalAddressInputSet%3AAddress_AddressType=business&amp;ClaimContacts%3AClaimContactsScreen%3APeopleInvolvedDetailedListDetail%3AClaimContactCV%3AContactBasicsDV%3ACompanyVendorValidFrom=&amp;ClaimContacts%3AClaimContactsScreen%3APeopleInvolvedDetailedListDetail%3AClaimContactCV%3AContactBasicsDV%3ACompanyVendorValidTo=&amp;ClaimContacts%3AClaimContactsScreen%3APeopleInvolvedDetailedListDetail%3AClaimContactCV%3AContactBasicsDV%3ABusinessContactInfoInputSet%3APrimaryContact=&amp;ClaimContacts%3AClaimContactsScreen%3APeopleInvolvedDetailedListDetail%3AClaimContactCV%3AContactBasicsDV%3ABusinessContactInfoInputSet%3AEmailAllowed=false&amp;ClaimContacts%3AClaimContactsScreen%3APeopleInvolvedDetailedListDetail%3AClaimContactCV%3AContactBasicsDV%3ATaxId2=&amp;ClaimContacts%3AClaimContactsScreen%3APeopleInvolvedDetailedListDetail%3AClaimContactCV%3AContactBasicsDV%3AVendorW9InfoInputSet%3AW9received=false&amp;ClaimContacts%3AClaimContactsScreen%3APeopleInvolvedDetailedListDetail%3AClaimContactCV%3AContactBasicsDV%3AVendorW9InfoInputSet%3AW9receivedDate=&amp;ClaimContacts%3AClaimContactsScreen%3APeopleInvolvedDetailedListDetail%3AClaimContactCV%3AContactBasicsDV%3AVendorW9InfoInputSet%3AW9ValidFrom=&amp;ClaimContacts%3AClaimContactsScreen%3APeopleInvolvedDetailedListDetail%3AClaimContactCV%3AContactBasicsDV%3AVendorW9InfoInputSet%3AW9ValidTo=&amp;ClaimContacts%3AClaimContactsScreen%3APeopleInvolvedDetailedListDetail%3AClaimContactCV%3AContactBasicsDV%3AVendorW9InfoInputSet%3ASubjectToCombining=false&amp;ClaimContacts%3AClaimContactsScreen%3APeopleInvolvedDetailedListDetail%3AClaimContactCV%3AContactBasicsDV%3AVendorW9InfoInputSet%3ASIUReportable=false&amp;ClaimContacts%3AClaimContactsScreen%3APeopleInvolvedDetailedListDetail%3AClaimContactCV%3AContactBasicsDV%3AVendorW9InfoInputSet%3AEDIPropPayments=false&amp;ClaimContacts%3AClaimContactsScreen%3APeopleInvolvedDetailedListDetail%3AClaimContactCV%3AContactBasicsDV%3ANotes=&amp;%3Atblinks=${cTBLINKS_1_URL2}&amp;%3Atabs=${cTABS_1_URL2}&amp;infoBar=${cINFOBAR_1_URL2}&amp;Claim%3AClaimMenuActions=${cCLAIMMENUACTIONS_URL2}&amp;Claim%3AMenuLinks=${cCLAIMMENULINKS_URL2}&amp;csrfToken=&amp;scrollPositions=%7B%22centerPanel%22%3A%7B%22left%22%3A0%2C%22top%22%3A325%7D%7D&amp;eventSource=ClaimContacts%3AClaimContactsScreen%3APeopleInvolvedDetailedListDetail%3AClaimContactCV%3AContactBasicsDV_tb%3AContactDetailToolbarButtonSet%3AToolbarButton_act&amp;objFocusId=ClaimContacts%3AClaimContactsScreen%3APeopleInvolvedDetailedListDetail%3AClaimContactCV%3AContactBasicsDV_tb%3AContactDetailToolbarButtonSet%3AToolbarButton</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_40" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="Claim:MenuLinks" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">Claim:MenuLinks</stringProp>
                      <stringProp name="Argument.value">${cCLAIMMENULINKS}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="csrfToken" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">csrfToken</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="TabBar:ClaimTab:ClaimTab_FindClaim" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">TabBar:ClaimTab:ClaimTab_FindClaim</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="QuickJump" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">QuickJump</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="Claim:MenuLinks_toggle" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">Claim:MenuLinks_toggle</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="objFocusId" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">objFocusId</stringProp>
                      <stringProp name="Argument.value">AddressCleansingPopup:AddressCleansingScreen:ToolbarButtonid</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="AddressCleansingPopup:AddressCleansingScreen:AddressCleansingDV:overridereasinid" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">AddressCleansingPopup:AddressCleansingScreen:AddressCleansingDV:overridereasinid</stringProp>
                      <stringProp name="Argument.value">TP142</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name=":tblinks" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">:tblinks</stringProp>
                      <stringProp name="Argument.value">${cTBLINKS_1}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name=":tabs" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">:tabs</stringProp>
                      <stringProp name="Argument.value">${cTABS_1}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="infoBar" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">infoBar</stringProp>
                      <stringProp name="Argument.value">${cINFOBAR_1}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="eventSource" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">eventSource</stringProp>
                      <stringProp name="Argument.value">AddressCleansingPopup:AddressCleansingScreen:ToolbarButtonid_act</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP142_Return_To_Desktop" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_30" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="Claim:ClaimMenuActions" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">Claim:ClaimMenuActions</stringProp>
                      <stringProp name="Argument.value">${cCLAIMMENUACTIONS}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="Claim:MenuLinks" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">Claim:MenuLinks</stringProp>
                      <stringProp name="Argument.value">${cCLAIMMENULINKS}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="TabBar:ClaimTab:ClaimTab_FindClaim" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">TabBar:ClaimTab:ClaimTab_FindClaim</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="QuickJump" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">QuickJump</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="Claim:MenuLinks_toggle" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">Claim:MenuLinks_toggle</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:PeopleInvolvedDetailedLV:PeopleInvolvedDetailedFilter" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:PeopleInvolvedDetailedLV:PeopleInvolvedDetailedFilter</stringProp>
                      <stringProp name="Argument.value">CoreFilters.AllFilter/All</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name=":tblinks" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">:tblinks</stringProp>
                      <stringProp name="Argument.value">${cTBLINKS}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name=":tabs" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">:tabs</stringProp>
                      <stringProp name="Argument.value">${cTABS_1}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="infoBar" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">infoBar</stringProp>
                      <stringProp name="Argument.value">${cINFOBAR_1}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="objFocusId" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">objFocusId</stringProp>
                      <stringProp name="Argument.value">TabBar:DesktopTab</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="eventSource" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">eventSource</stringProp>
                      <stringProp name="Argument.value">TabBar:DesktopTab_act</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="scrollPositions" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">scrollPositions</stringProp>
                      <stringProp name="Argument.value">{&quot;centerPanel&quot;:{&quot;left&quot;:0,&quot;top&quot;:94}}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="csrfToken" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">csrfToken</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="CNG_TP142_Return_To_Desktop failed - GENERAL_MSG_CAT_SSL_ERROR" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1822264439">GENERAL_MSG_CAT_SSL_ERROR</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">20</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="CNG_TP142_Return_To_Desktop failed - Desktop screen has not appeared for claim number: ${CLAIMNUMBER}" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1514705186">My activities today</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cTABS" enabled="true">
                  <stringProp name="TestPlan.comments">&quot;ParamName=cTABS&quot;|&quot;RegExp=\&quot;id\&quot;:\&quot;TabBar:VacationTab\&quot;|\&quot;text\&quot;:\&quot;Vacation\&quot;|\&quot;menu\&quot;:\\{\&quot;defaultType\&quot;:\&quot;gmenuitem\&quot;},\&quot;xtype\&quot;:\&quot;gbutton\&quot;|\&quot;disabled\&quot;:true}],\&quot;checksum\&quot;:\&quot;(.*?)\&quot;}},\\{&quot;|&quot;NotFound=Warning&quot;|SEARCH_FILTERS,&quot;Scope=Body&quot;|&quot;IgnoreRedirections=No&quot;|</stringProp>
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">cTABS</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;id&quot;:&quot;TabBar:VacationTab&quot;,&quot;text&quot;:&quot;Vacation&quot;,&quot;menu&quot;:\{&quot;defaultType&quot;:&quot;gmenuitem&quot;},&quot;xtype&quot;:&quot;gbutton&quot;,&quot;disabled&quot;:true}],&quot;checksum&quot;:&quot;(.*?)&quot;}},\{</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default"></stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
                </RegexExtractor>
                <hashTree/>
                <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor - CNG_TP142_Return_To_Desktop" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">5909bb5f-2c95-40e5-b0ef-4d3e00b73f82</stringProp>
                  <stringProp name="script">vars.put(&quot;cTABS_URL2&quot;,java.net.URLDecoder.decode(vars.get(&quot;cTABS&quot;), &quot;UTF-8&quot;));</stringProp>
                </JSR223PostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If &quot;${PropClaim}&quot; != &quot;null&quot;" enabled="true">
            <stringProp name="IfController.condition">&quot;${PropClaim}&quot; != &quot;null&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP142_T_Prop_Claim_Stat_Change" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="Claim:MenuLinks" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">Claim:MenuLinks</stringProp>
                      <stringProp name="Argument.value">${cCLAIMMENULINKS}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="csrfToken" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">csrfToken</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="TabBar:ClaimTab:ClaimTab_FindClaim" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">TabBar:ClaimTab:ClaimTab_FindClaim</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="QuickJump" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">QuickJump</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="Claim:MenuLinks_toggle" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">Claim:MenuLinks_toggle</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name=":tblinks" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">:tblinks</stringProp>
                      <stringProp name="Argument.value">${cTBLINKS}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name=":tabs" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">:tabs</stringProp>
                      <stringProp name="Argument.value">${cTABS_1}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="infoBar" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">infoBar</stringProp>
                      <stringProp name="Argument.value">${cINFOBAR_1}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="Claim:ClaimMenuActions" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">Claim:ClaimMenuActions</stringProp>
                      <stringProp name="Argument.value">${cCLAIMMENUACTIONS}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="eventSource" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">eventSource</stringProp>
                      <stringProp name="Argument.value">Claim:MenuLinks:Claim_ClaimSummaryGroup:ClaimSummaryGroup_ClaimStatus_act</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="CNG_TP142_T_Prop_Claim_Stat_Change failed - GENERAL_MSG_CAT_SSL_ERROR" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1822264439">GENERAL_MSG_CAT_SSL_ERROR</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">20</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="CNG_TP142_T_Prop_Claim_Stat_Change failed - Unable to view claim status screen for claimnumber,${CLAIMNUMBER}" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1615244138">Claim Status</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP142_V_Prop_Edit_Claim_Status" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_4" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="Claim:MenuLinks" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">Claim:MenuLinks</stringProp>
                      <stringProp name="Argument.value">${cCLAIMMENULINKS}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="csrfToken" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">csrfToken</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="TabBar:ClaimTab:ClaimTab_FindClaim" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">TabBar:ClaimTab:ClaimTab_FindClaim</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="QuickJump" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">QuickJump</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="Claim:MenuLinks_toggle" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">Claim:MenuLinks_toggle</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name=":tblinks" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">:tblinks</stringProp>
                      <stringProp name="Argument.value">${cTBLINKS}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name=":tabs" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">:tabs</stringProp>
                      <stringProp name="Argument.value">${cTABS_1}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="infoBar" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">infoBar</stringProp>
                      <stringProp name="Argument.value">${cINFOBAR_1}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="Claim:ClaimMenuActions" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">Claim:ClaimMenuActions</stringProp>
                      <stringProp name="Argument.value">${cCLAIMMENUACTIONS}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="objFocusId" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">objFocusId</stringProp>
                      <stringProp name="Argument.value">ClaimStatus:Edit</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="eventSource" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">eventSource</stringProp>
                      <stringProp name="Argument.value">ClaimStatus:Edit_act</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cTBLINKS_1" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">cTBLINKS_1</stringProp>
                  <stringProp name="RegexExtractor.regex">ator\.&quot;,&quot;shortcut&quot;:&quot;Z&quot;}],&quot;defaultType&quot;:&quot;gmenuitem&quot;},&quot;noaction&quot;:1,&quot;xtype&quot;:&quot;gbutton&quot;,&quot;iconCls&quot;:&quot;g-preferences-icon&quot;}],&quot;checksum&quot;:&quot;(.*?)&quot;},</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default"></stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
                </RegexExtractor>
                <hashTree/>
                <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor - CNG_TP142_V_Prop_Edit_Claim_Status" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">b7448d6d-342e-467e-9224-98c9584d1e2a</stringProp>
                  <stringProp name="script">vars.put(&quot;cTBLINKS_1_URL2&quot;,java.net.URLDecoder.decode(vars.get(&quot;cTBLINKS_1&quot;), &quot;UTF-8&quot;));
vars.put(&quot;DATE_URL2&quot;,java.net.URLDecoder.decode(vars.get(&quot;DATE&quot;), &quot;UTF-8&quot;));</stringProp>
                </JSR223PostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP142_W_Prop_Update_Claim_Status" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_5" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">TabBar%3AClaimTab%3AClaimTab_FindClaim=&amp;QuickJump=&amp;Claim%3AMenuLinks_toggle=&amp;ClaimStatus%3ALineOfBusiness=pr&amp;ClaimStatus%3AIncidentOnly=false&amp;ClaimStatus%3ADateReported=${DATE_URL2}%2010%3A42%20AM&amp;ClaimStatus%3ASpecialClaimPermission=&amp;ClaimStatus%3ASalvageStatus=&amp;ClaimStatus%3AOtherRecoverableStatus=&amp;ClaimStatus%3AStorageInputSet%3ADateShippedToStorage=&amp;ClaimStatus%3AStorageInputSet%3AStorageLocationState=&amp;ClaimStatus%3AStorageInputSet%3AStorageCategory=&amp;ClaimStatus%3AStorageInputSet%3AStorageType=&amp;ClaimStatus%3AStorageInputSet%3AStorageBoxNumber=&amp;ClaimStatus%3AStorageInputSet%3AStorageBarCodeNumber=&amp;ClaimStatus%3AStorageInputSet%3AStorageVolumes=&amp;ClaimStatus%3AStorageInputSet%3AStorageNotes=&amp;ClaimStatus%3A3%3AClaimIndicatorInputSet%3ACoverageInQuestion=false&amp;%3Atblinks=${cTBLINKS_1_URL2}&amp;%3Atabs=${cTABS_1_URL2}&amp;infoBar=${cINFOBAR_1_URL2}&amp;Claim%3AClaimMenuActions=${cCLAIMMENUACTIONS_URL2}&amp;Claim%3AMenuLinks=${cCLAIMMENULINKS_URL2}&amp;csrfToken=&amp;eventSource=ClaimStatus%3AUpdate_act&amp;objFocusId=ClaimStatus%3AUpdate</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP142_X_Prop_Loss_Details" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_6" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="Claim:MenuLinks" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">Claim:MenuLinks</stringProp>
                      <stringProp name="Argument.value">${cCLAIMMENULINKS}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="csrfToken" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">csrfToken</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="TabBar:ClaimTab:ClaimTab_FindClaim" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">TabBar:ClaimTab:ClaimTab_FindClaim</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="QuickJump" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">QuickJump</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="Claim:MenuLinks_toggle" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">Claim:MenuLinks_toggle</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name=":tblinks" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">:tblinks</stringProp>
                      <stringProp name="Argument.value">${cTBLINKS}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name=":tabs" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">:tabs</stringProp>
                      <stringProp name="Argument.value">${cTABS_1}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="infoBar" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">infoBar</stringProp>
                      <stringProp name="Argument.value">${cINFOBAR_1}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="Claim:ClaimMenuActions" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">Claim:ClaimMenuActions</stringProp>
                      <stringProp name="Argument.value">${cCLAIMMENUACTIONS}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="eventSource" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">eventSource</stringProp>
                      <stringProp name="Argument.value">Claim:MenuLinks:Claim_ClaimLossDetailsGroup:ClaimLossDetailsGroup_ClaimLossDetails_act</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="CNG_TP142_X_Prop_Loss_Details failed - GENERAL_MSG_CAT_SSL_ERROR" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1822264439">GENERAL_MSG_CAT_SSL_ERROR</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">20</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="CNG_TP142_X_Prop_Loss_Details failed - Unable to view loss details screen for claimnumber, ${CLAIMNUMBER}" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-338071995">Loss Details</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cPERSON" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">cPERSON</stringProp>
                  <stringProp name="RegexExtractor.regex">Person:(.*?)&quot;,</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default"></stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP142_Y_Prop_Edit_Loss_Details" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_7" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="Claim:MenuLinks" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">Claim:MenuLinks</stringProp>
                      <stringProp name="Argument.value">${cCLAIMMENULINKS}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="csrfToken" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">csrfToken</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="TabBar:ClaimTab:ClaimTab_FindClaim" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">TabBar:ClaimTab:ClaimTab_FindClaim</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="QuickJump" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">QuickJump</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="Claim:MenuLinks_toggle" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">Claim:MenuLinks_toggle</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name=":tblinks" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">:tblinks</stringProp>
                      <stringProp name="Argument.value">${cTBLINKS}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name=":tabs" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">:tabs</stringProp>
                      <stringProp name="Argument.value">${cTABS_1}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="infoBar" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">infoBar</stringProp>
                      <stringProp name="Argument.value">${cINFOBAR_1}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="Claim:ClaimMenuActions" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">Claim:ClaimMenuActions</stringProp>
                      <stringProp name="Argument.value">${cCLAIMMENUACTIONS}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="objFocusId" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">objFocusId</stringProp>
                      <stringProp name="Argument.value">ClaimLossDetails:ClaimLossDetailsScreen:Edit</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="eventSource" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">eventSource</stringProp>
                      <stringProp name="Argument.value">ClaimLossDetails:ClaimLossDetailsScreen:Edit_act</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cADDRESS_1" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">cADDRESS_1</stringProp>
                  <stringProp name="RegexExtractor.regex">Address:(.*?)&quot;,</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default"></stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cCOUNTY" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">cCOUNTY</stringProp>
                  <stringProp name="RegexExtractor.regex">ClaimLossDetailsScreen:LossDetailsPanelSet:LossDetailsDV:AddressDetailInputSetRef:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:Country&quot;,&quot;value&quot;:&quot;(.*?)&quot;,</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">null</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
                <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor - CNG_TP142_Y_Prop_Edit_Loss_Details" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">5909bb5f-2c95-40e5-b0ef-4d3e00b73f82</stringProp>
                  <stringProp name="script">vars.put(&quot;cADDRESSLINE_1_URL2&quot;,java.net.URLDecoder.decode(vars.get(&quot;cADDRESSLINE_1&quot;), &quot;UTF-8&quot;));
vars.put(&quot;cCITY_URL2&quot;,java.net.URLDecoder.decode(vars.get(&quot;cCITY&quot;), &quot;UTF-8&quot;));
vars.put(&quot;cCOUNTY_URL2&quot;,java.net.URLDecoder.decode(vars.get(&quot;cCOUNTY&quot;), &quot;UTF-8&quot;));
vars.put(&quot;cSTATE_URL2&quot;,java.net.URLDecoder.decode(vars.get(&quot;cSTATE&quot;), &quot;UTF-8&quot;));</stringProp>
                </JSR223PostProcessor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_8" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">TabBar%3AClaimTab%3AClaimTab_FindClaim=&amp;QuickJump=&amp;Claim%3AMenuLinks_toggle=&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsDV%3ADescription=TP142&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsDV%3AClaim_LossCategory=hailprop&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsDV%3AClaim_LossCause=otherWaterprop&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsDV%3ASubrogationPotential=true&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsDV%3AClaimPermissionRequired=&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsDV%3ACatastrophe_CatastropheNumber=&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsDV%3AinspectionDateTime=&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsDV%3AClaimLevelQuestions%3ADamageQuestionsClaimLevelInputSet%3AfloodInd=false&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsDV%3AClaimLevelQuestions%3ADamageQuestionsClaimLevelInputSet%3AwaterSourceStopped=true&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsDV%3AClaimLevelQuestions%3ADamageQuestionsClaimLevelInputSet%3AwaterDamageDuration=morethantwoweeks&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsDV%3AClaimLevelQuestions%3ADamageQuestionsClaimLevelInputSet%3AoriginateApplianceItem=false&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsDV%3AClaimLevelQuestions%3ADamageQuestionsClaimLevelInputSet%3ArecentWork=true&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsDV%3AClaimLevelQuestions%3ADamageQuestionsClaimLevelInputSet%3ArecentWorkDetails=new%20roof%20%20on%20part%20and%20repair%20to%20old%20roof&amp;HomeownersHelper.LocationChoice_Radio=ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsDV%3AOtherLocationChoice_Choice&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsDV%3AAddressDetailInputSetRef%3ACCAddressInputSet%3AglobalAddressContainer%3AglobalAddress%3AGlobalAddressInputSet%3AAddress_Picker=Address%3A${cADDRESS_1}&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsDV%3AAddressDetailInputSetRef%3ACCAddressInputSet%3AglobalAddressContainer%3AglobalAddress%3AGlobalAddressInputSet%3AAddressLine1=${cADDRESSLINE_1_URL2}&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsDV%3AAddressDetailInputSetRef%3ACCAddressInputSet%3AglobalAddressContainer%3AglobalAddress%3AGlobalAddressInputSet%3AAddressLine2=&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsDV%3AAddressDetailInputSetRef%3ACCAddressInputSet%3AglobalAddressContainer%3AglobalAddress%3AGlobalAddressInputSet%3ACity=${cCITY_URL2}&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsDV%3AAddressDetailInputSetRef%3ACCAddressInputSet%3AglobalAddressContainer%3AglobalAddress%3AGlobalAddressInputSet%3ACounty=${cCOUNTY_URL2}&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsDV%3AAddressDetailInputSetRef%3ACCAddressInputSet%3AglobalAddressContainer%3AglobalAddress%3AGlobalAddressInputSet%3AState=${cSTATE_URL2}&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsDV%3AAddressDetailInputSetRef%3ACCAddressInputSet%3AglobalAddressContainer%3AglobalAddress%3AGlobalAddressInputSet%3APostalCode=${cPOSTCODE}&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsDV%3AAddressDetailInputSetRef%3ACCAddressInputSet%3AglobalAddressContainer%3AglobalAddress%3AGlobalAddressInputSet%3ACountry=US&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ANotification_HowReported=phone&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3AReportedBy_Picker=Person%3A${cPERSON}&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ANotification_ReportedByType=self&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3AMainContact_Picker=&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ANotification_MainContactType=&amp;%3Atblinks=${cTBLINKS_1_URL2}&amp;%3Atabs=${cTABS_1_URL2}&amp;infoBar=${cINFOBAR_1_URL2}&amp;Claim%3AClaimMenuActions=${cCLAIMMENUACTIONS_URL2}&amp;Claim%3AMenuLinks=${cCLAIMMENULINKS_URL2}&amp;csrfToken=&amp;eventSource=_refresh_&amp;eventParam=ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsDV%3AClaim_LossCategory</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_9" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">TabBar%3AClaimTab%3AClaimTab_FindClaim=&amp;QuickJump=&amp;Claim%3AMenuLinks_toggle=&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsDV%3ADescription=TP142&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsDV%3AClaim_LossCategory=hailprop&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsDV%3ASubrogationPotential=true&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsDV%3AClaimPermissionRequired=&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsDV%3ACatastrophe_CatastropheNumber=&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsDV%3AinspectionDateTime=&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsDV%3AClaimLevelQuestions%3ADamageQuestionsClaimLevelInputSet%3AanyoneHome=false&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsDV%3AClaimLevelQuestions%3ADamageQuestionsClaimLevelInputSet%3AhailSize=penny&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsDV%3AClaimLevelQuestions%3ADamageQuestionsClaimLevelInputSet%3AinformedByContractor3rdParty=false&amp;HomeownersHelper.LocationChoice_Radio=ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsDV%3AOtherLocationChoice_Choice&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsDV%3AAddressDetailInputSetRef%3ACCAddressInputSet%3AglobalAddressContainer%3AglobalAddress%3AGlobalAddressInputSet%3AAddress_Picker=Address%3A${cADDRESS_1}&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsDV%3AAddressDetailInputSetRef%3ACCAddressInputSet%3AglobalAddressContainer%3AglobalAddress%3AGlobalAddressInputSet%3AAddressLine1=${cADDRESSLINE_1_URL2}&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsDV%3AAddressDetailInputSetRef%3ACCAddressInputSet%3AglobalAddressContainer%3AglobalAddress%3AGlobalAddressInputSet%3AAddressLine2=&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsDV%3AAddressDetailInputSetRef%3ACCAddressInputSet%3AglobalAddressContainer%3AglobalAddress%3AGlobalAddressInputSet%3ACity=${cCITY_URL2}&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsDV%3AAddressDetailInputSetRef%3ACCAddressInputSet%3AglobalAddressContainer%3AglobalAddress%3AGlobalAddressInputSet%3ACounty=${cCOUNTY_URL2}&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsDV%3AAddressDetailInputSetRef%3ACCAddressInputSet%3AglobalAddressContainer%3AglobalAddress%3AGlobalAddressInputSet%3AState=${cSTATE_URL2}&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsDV%3AAddressDetailInputSetRef%3ACCAddressInputSet%3AglobalAddressContainer%3AglobalAddress%3AGlobalAddressInputSet%3APostalCode=${cPOSTCODE}&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsDV%3AAddressDetailInputSetRef%3ACCAddressInputSet%3AglobalAddressContainer%3AglobalAddress%3AGlobalAddressInputSet%3ACountry=US&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ANotification_HowReported=phone&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3AReportedBy_Picker=Person%3A${cPERSON}&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ANotification_ReportedByType=self&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3AMainContact_Picker=&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ANotification_MainContactType=&amp;%3Atblinks=${cTBLINKS_1_URL2}&amp;%3Atabs=${cTABS_1_URL2}&amp;infoBar=${cINFOBAR_1_URL2}&amp;Claim%3AClaimMenuActions=${cCLAIMMENUACTIONS_URL2}&amp;Claim%3AMenuLinks=${cCLAIMMENULINKS_URL2}&amp;csrfToken=&amp;eventSource=_refresh_&amp;eventParam=ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsDV%3AClaimLevelQuestions%3ADamageQuestionsClaimLevelInputSet%3AinformedByContractor3rdParty&amp;objFocusId=ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsDV%3AClaimLevelQuestions%3ADamageQuestionsClaimLevelInputSet%3AinformedByContractor3rdParty</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_10" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">TabBar%3AClaimTab%3AClaimTab_FindClaim=&amp;QuickJump=&amp;Claim%3AMenuLinks_toggle=&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsDV%3ADescription=TP142&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsDV%3AClaim_LossCategory=hailprop&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsDV%3ASubrogationPotential=true&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsDV%3AClaimPermissionRequired=&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsDV%3ACatastrophe_CatastropheNumber=&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsDV%3AinspectionDateTime=&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsDV%3AClaimLevelQuestions%3ADamageQuestionsClaimLevelInputSet%3AanyoneHome=false&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsDV%3AClaimLevelQuestions%3ADamageQuestionsClaimLevelInputSet%3AhailSize=penny&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsDV%3AClaimLevelQuestions%3ADamageQuestionsClaimLevelInputSet%3AinformedByContractor3rdParty=false&amp;HomeownersHelper.LocationChoice_Radio=ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsDV%3AOtherLocationChoice_Choice&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsDV%3AAddressDetailInputSetRef%3ACCAddressInputSet%3AglobalAddressContainer%3AglobalAddress%3AGlobalAddressInputSet%3AAddress_Picker=Address%3A${cADDRESS_1}&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsDV%3AAddressDetailInputSetRef%3ACCAddressInputSet%3AglobalAddressContainer%3AglobalAddress%3AGlobalAddressInputSet%3AAddressLine1=${cADDRESSLINE_1_URL2}&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsDV%3AAddressDetailInputSetRef%3ACCAddressInputSet%3AglobalAddressContainer%3AglobalAddress%3AGlobalAddressInputSet%3AAddressLine2=&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsDV%3AAddressDetailInputSetRef%3ACCAddressInputSet%3AglobalAddressContainer%3AglobalAddress%3AGlobalAddressInputSet%3ACity=${cCITY_URL2}&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsDV%3AAddressDetailInputSetRef%3ACCAddressInputSet%3AglobalAddressContainer%3AglobalAddress%3AGlobalAddressInputSet%3ACounty=${cCOUNTY_URL2}&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsDV%3AAddressDetailInputSetRef%3ACCAddressInputSet%3AglobalAddressContainer%3AglobalAddress%3AGlobalAddressInputSet%3AState=${cSTATE_URL2}&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsDV%3AAddressDetailInputSetRef%3ACCAddressInputSet%3AglobalAddressContainer%3AglobalAddress%3AGlobalAddressInputSet%3APostalCode=${cPOSTCODE}&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsDV%3AAddressDetailInputSetRef%3ACCAddressInputSet%3AglobalAddressContainer%3AglobalAddress%3AGlobalAddressInputSet%3ACountry=US&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ANotification_HowReported=phone&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3AReportedBy_Picker=Person%3A${cPERSON}&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ANotification_ReportedByType=self&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3AMainContact_Picker=&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ANotification_MainContactType=&amp;%3Atblinks=${cTBLINKS_1_URL2}&amp;%3Atabs=${cTABS_1_URL2}&amp;infoBar=${cINFOBAR_1_URL2}&amp;Claim%3AClaimMenuActions=${cCLAIMMENUACTIONS_URL2}&amp;Claim%3AMenuLinks=${cCLAIMMENULINKS_URL2}&amp;csrfToken=&amp;scrollPositions=%7B%22centerPanel%22%3A%7B%22left%22%3A0%2C%22top%22%3A177%7D%7D&amp;eventSource=ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3AIncidentPanelSet%3A0%3AName_act&amp;objFocusId=ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3AIncidentPanelSet%3A0%3AName</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_11" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name=":tblinks" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">:tblinks</stringProp>
                      <stringProp name="Argument.value">${cTBLINKS_1}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name=":tabs" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">:tabs</stringProp>
                      <stringProp name="Argument.value">${cTABS_1}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="TabBar:ClaimTab:ClaimTab_FindClaim" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">TabBar:ClaimTab:ClaimTab_FindClaim</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="QuickJump" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">QuickJump</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="Claim:MenuLinks_toggle" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">Claim:MenuLinks_toggle</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="EditDwellingIncidentPopup:EditDwellingIncidentScreen:DwellingIncidentCV:DwellingIncidentPanelSet:DamageDV:Description" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">EditDwellingIncidentPopup:EditDwellingIncidentScreen:DwellingIncidentCV:DwellingIncidentPanelSet:DamageDV:Description</stringProp>
                      <stringProp name="Argument.value">TP142</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="EditDwellingIncidentPopup:EditDwellingIncidentScreen:DwellingIncidentCV:DwellingIncidentPanelSet:DamageDV:DwellingDamageQuestions:DamageQuestionsDwellingInputSet:interiorDamage" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">EditDwellingIncidentPopup:EditDwellingIncidentScreen:DwellingIncidentCV:DwellingIncidentPanelSet:DamageDV:DwellingDamageQuestions:DamageQuestionsDwellingInputSet:interiorDamage</stringProp>
                      <stringProp name="Argument.value">false</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="EditDwellingIncidentPopup:EditDwellingIncidentScreen:DwellingIncidentCV:DwellingIncidentPanelSet:DamageDV:DwellingDamageQuestions:DamageQuestionsDwellingInputSet:boardupRequired" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">EditDwellingIncidentPopup:EditDwellingIncidentScreen:DwellingIncidentCV:DwellingIncidentPanelSet:DamageDV:DwellingDamageQuestions:DamageQuestionsDwellingInputSet:boardupRequired</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="EditDwellingIncidentPopup:EditDwellingIncidentScreen:DwellingIncidentCV:DwellingIncidentPanelSet:EstimatesReceivedProperty" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">EditDwellingIncidentPopup:EditDwellingIncidentScreen:DwellingIncidentCV:DwellingIncidentPanelSet:EstimatesReceivedProperty</stringProp>
                      <stringProp name="Argument.value">No</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="eventParam" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">eventParam</stringProp>
                      <stringProp name="Argument.value">EditDwellingIncidentPopup:EditDwellingIncidentScreen:DwellingIncidentCV:DwellingIncidentPanelSet:DamageDV:DwellingDamageQuestions:DamageQuestionsDwellingInputSet:interiorDamage</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="eventSource" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">eventSource</stringProp>
                      <stringProp name="Argument.value">_refresh_</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="csrfToken" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">csrfToken</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="Claim:MenuLinks" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">Claim:MenuLinks</stringProp>
                      <stringProp name="Argument.value">${cCLAIMMENULINKS}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="objFocusId" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">objFocusId</stringProp>
                      <stringProp name="Argument.value">EditDwellingIncidentPopup:EditDwellingIncidentScreen:DwellingIncidentCV:DwellingIncidentPanelSet:DamageDV:DwellingDamageQuestions:DamageQuestionsDwellingInputSet:interiorDamage</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="infoBar" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">infoBar</stringProp>
                      <stringProp name="Argument.value">${cINFOBAR_1}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_12" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name=":tblinks" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">:tblinks</stringProp>
                      <stringProp name="Argument.value">${cTBLINKS_1}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name=":tabs" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">:tabs</stringProp>
                      <stringProp name="Argument.value">${cTABS_1}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="TabBar:ClaimTab:ClaimTab_FindClaim" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">TabBar:ClaimTab:ClaimTab_FindClaim</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="QuickJump" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">QuickJump</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="Claim:MenuLinks_toggle" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">Claim:MenuLinks_toggle</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="EditDwellingIncidentPopup:EditDwellingIncidentScreen:DwellingIncidentCV:DwellingIncidentPanelSet:DamageDV:Description" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">EditDwellingIncidentPopup:EditDwellingIncidentScreen:DwellingIncidentCV:DwellingIncidentPanelSet:DamageDV:Description</stringProp>
                      <stringProp name="Argument.value">TP142</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="EditDwellingIncidentPopup:EditDwellingIncidentScreen:DwellingIncidentCV:DwellingIncidentPanelSet:DamageDV:DwellingDamageQuestions:DamageQuestionsDwellingInputSet:interiorDamage" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">EditDwellingIncidentPopup:EditDwellingIncidentScreen:DwellingIncidentCV:DwellingIncidentPanelSet:DamageDV:DwellingDamageQuestions:DamageQuestionsDwellingInputSet:interiorDamage</stringProp>
                      <stringProp name="Argument.value">false</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="EditDwellingIncidentPopup:EditDwellingIncidentScreen:DwellingIncidentCV:DwellingIncidentPanelSet:DamageDV:DwellingDamageQuestions:DamageQuestionsDwellingInputSet:boardupRequired" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">EditDwellingIncidentPopup:EditDwellingIncidentScreen:DwellingIncidentCV:DwellingIncidentPanelSet:DamageDV:DwellingDamageQuestions:DamageQuestionsDwellingInputSet:boardupRequired</stringProp>
                      <stringProp name="Argument.value">false</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="EditDwellingIncidentPopup:EditDwellingIncidentScreen:DwellingIncidentCV:DwellingIncidentPanelSet:EstimatesReceivedProperty" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">EditDwellingIncidentPopup:EditDwellingIncidentScreen:DwellingIncidentCV:DwellingIncidentPanelSet:EstimatesReceivedProperty</stringProp>
                      <stringProp name="Argument.value">No</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="objFocusId" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">objFocusId</stringProp>
                      <stringProp name="Argument.value">EditDwellingIncidentPopup:EditDwellingIncidentScreen:Update</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="eventSource" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">eventSource</stringProp>
                      <stringProp name="Argument.value">EditDwellingIncidentPopup:EditDwellingIncidentScreen:Update_act</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="csrfToken" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">csrfToken</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="Claim:MenuLinks" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">Claim:MenuLinks</stringProp>
                      <stringProp name="Argument.value">${cCLAIMMENULINKS}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="infoBar" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">infoBar</stringProp>
                      <stringProp name="Argument.value">${cINFOBAR_1}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP142_Z_Prop_Update_Loss_Details" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_13" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">TabBar%3AClaimTab%3AClaimTab_FindClaim=&amp;QuickJump=&amp;Claim%3AMenuLinks_toggle=&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsDV%3ADescription=TP142&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsDV%3AClaim_LossCategory=hailprop&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsDV%3ASubrogationPotential=true&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsDV%3AClaimPermissionRequired=&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsDV%3ACatastrophe_CatastropheNumber=&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsDV%3AinspectionDateTime=&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsDV%3AClaimLevelQuestions%3ADamageQuestionsClaimLevelInputSet%3AanyoneHome=false&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsDV%3AClaimLevelQuestions%3ADamageQuestionsClaimLevelInputSet%3AhailSize=penny&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsDV%3AClaimLevelQuestions%3ADamageQuestionsClaimLevelInputSet%3AinformedByContractor3rdParty=false&amp;HomeownersHelper.LocationChoice_Radio=ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsDV%3AOtherLocationChoice_Choice&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsDV%3AAddressDetailInputSetRef%3ACCAddressInputSet%3AglobalAddressContainer%3AglobalAddress%3AGlobalAddressInputSet%3AAddress_Picker=Address%3A${cADDRESS_1}&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsDV%3AAddressDetailInputSetRef%3ACCAddressInputSet%3AglobalAddressContainer%3AglobalAddress%3AGlobalAddressInputSet%3AAddressLine1=${cADDRESSLINE_1_URL2}&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsDV%3AAddressDetailInputSetRef%3ACCAddressInputSet%3AglobalAddressContainer%3AglobalAddress%3AGlobalAddressInputSet%3AAddressLine2=&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsDV%3AAddressDetailInputSetRef%3ACCAddressInputSet%3AglobalAddressContainer%3AglobalAddress%3AGlobalAddressInputSet%3ACity=${cCITY_URL2}&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsDV%3AAddressDetailInputSetRef%3ACCAddressInputSet%3AglobalAddressContainer%3AglobalAddress%3AGlobalAddressInputSet%3ACounty=${cCOUNTY_URL2}&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsDV%3AAddressDetailInputSetRef%3ACCAddressInputSet%3AglobalAddressContainer%3AglobalAddress%3AGlobalAddressInputSet%3AState=${cSTATE_URL2}&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsDV%3AAddressDetailInputSetRef%3ACCAddressInputSet%3AglobalAddressContainer%3AglobalAddress%3AGlobalAddressInputSet%3APostalCode=${cPOSTCODE}&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ALossDetailsDV%3AAddressDetailInputSetRef%3ACCAddressInputSet%3AglobalAddressContainer%3AglobalAddress%3AGlobalAddressInputSet%3ACountry=US&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ANotification_HowReported=phone&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3AReportedBy_Picker=Person%3A${cPERSON}&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ANotification_ReportedByType=self&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3AMainContact_Picker=&amp;ClaimLossDetails%3AClaimLossDetailsScreen%3ALossDetailsPanelSet%3ANotification_MainContactType=&amp;%3Atblinks=${cTBLINKS_1_URL2}&amp;%3Atabs=${cTABS_1_URL2}&amp;infoBar=${cINFOBAR_1_URL2}&amp;Claim%3AClaimMenuActions=${cCLAIMMENUACTIONS_URL2}&amp;Claim%3AMenuLinks=${cCLAIMMENULINKS_URL2}&amp;csrfToken=&amp;eventSource=ClaimLossDetails%3AClaimLossDetailsScreen%3AUpdate_act&amp;objFocusId=ClaimLossDetails%3AClaimLossDetailsScreen%3AUpdate</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP142_ZA_Prop_Exposures" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_14" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="Claim:MenuLinks" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">Claim:MenuLinks</stringProp>
                      <stringProp name="Argument.value">${cCLAIMMENULINKS}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="csrfToken" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">csrfToken</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="TabBar:ClaimTab:ClaimTab_FindClaim" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">TabBar:ClaimTab:ClaimTab_FindClaim</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="QuickJump" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">QuickJump</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="Claim:MenuLinks_toggle" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">Claim:MenuLinks_toggle</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name=":tblinks" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">:tblinks</stringProp>
                      <stringProp name="Argument.value">${cTBLINKS}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name=":tabs" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">:tabs</stringProp>
                      <stringProp name="Argument.value">${cTABS_1}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="infoBar" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">infoBar</stringProp>
                      <stringProp name="Argument.value">${cINFOBAR_1}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="Claim:ClaimMenuActions" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">Claim:ClaimMenuActions</stringProp>
                      <stringProp name="Argument.value">${cCLAIMMENUACTIONS}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="eventSource" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">eventSource</stringProp>
                      <stringProp name="Argument.value">Claim:MenuLinks:Claim_ClaimExposures_act</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="CNG_TP142_ZA_Prop_Exposures failed - GENERAL_MSG_CAT_SSL_ERROR" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1822264439">GENERAL_MSG_CAT_SSL_ERROR</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">20</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="CNG_TP142_ZA_Prop_Exposures failed - Unable to exposures screen for claimnumber, ${CLAIMNUMBER}" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1867627476">Exposures</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP142_ZB_Prop_Select_Exposure" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_15" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">TabBar%3AClaimTab%3AClaimTab_FindClaim=&amp;QuickJump=&amp;Claim%3AMenuLinks_toggle=&amp;ClaimExposures%3AClaimExposuresScreen%3AExposureList%3AExposuresLV%3AExposuresFilter=CoreFilters.AllFilter%2FAll%20claimants&amp;%3Atblinks=${cTBLINKS_URL2}&amp;%3Atabs=${cTABS_1_URL2}&amp;infoBar=${cINFOBAR_1_URL2}&amp;Claim%3AClaimMenuActions=${cCLAIMMENUACTIONS_URL2}&amp;Claim%3AMenuLinks=${cCLAIMMENULINKS_URL2}&amp;csrfToken=&amp;eventSource=ClaimExposures%3AClaimExposuresScreen%3AExposureList%3AExposuresLV%3A0%3AOrder_act&amp;objFocusId=ClaimExposures%3AClaimExposuresScreen%3AExposureList%3AExposuresLV%3A0%3AOrder</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP142_ZC_Prop_Edit_Exposure" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_16" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="Claim:MenuLinks" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">Claim:MenuLinks</stringProp>
                      <stringProp name="Argument.value">${cCLAIMMENULINKS}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="csrfToken" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">csrfToken</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="TabBar:ClaimTab:ClaimTab_FindClaim" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">TabBar:ClaimTab:ClaimTab_FindClaim</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="QuickJump" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">QuickJump</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="Claim:MenuLinks_toggle" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">Claim:MenuLinks_toggle</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name=":tblinks" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">:tblinks</stringProp>
                      <stringProp name="Argument.value">${cTBLINKS}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name=":tabs" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">:tabs</stringProp>
                      <stringProp name="Argument.value">${cTABS_1}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="infoBar" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">infoBar</stringProp>
                      <stringProp name="Argument.value">${cINFOBAR_1}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="Claim:ClaimMenuActions" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">Claim:ClaimMenuActions</stringProp>
                      <stringProp name="Argument.value">${cCLAIMMENUACTIONS}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="objFocusId" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">objFocusId</stringProp>
                      <stringProp name="Argument.value">ExposureDetail:ExposureDetailScreen:ExposureDetailDV_tb:Edit</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="eventSource" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">eventSource</stringProp>
                      <stringProp name="Argument.value">ExposureDetail:ExposureDetailScreen:ExposureDetailDV_tb:Edit_act</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP142_ZD_Prop_Select_Claimant" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_17" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name=":tabs" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">:tabs</stringProp>
                      <stringProp name="Argument.value">${cTABS_1}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="infoBar" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">infoBar</stringProp>
                      <stringProp name="Argument.value">${cINFOBAR_1}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="TabBar:ClaimTab:ClaimTab_FindClaim" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">TabBar:ClaimTab:ClaimTab_FindClaim</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="QuickJump" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">QuickJump</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="Claim:MenuLinks_toggle" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">Claim:MenuLinks_toggle</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ExposureDetail:ExposureDetailScreen:ExposureDetailDV:PropertyDamageDV:Claimant_ContactProhibited" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ExposureDetail:ExposureDetailScreen:ExposureDetailDV:PropertyDamageDV:Claimant_ContactProhibited</stringProp>
                      <stringProp name="Argument.value">false</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ExposureDetail:ExposureDetailScreen:ExposureDetailDV:PropertyDamageDV:Segment" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ExposureDetail:ExposureDetailScreen:ExposureDetailDV:PropertyDamageDV:Segment</stringProp>
                      <stringProp name="Argument.value">prop_field_water</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ExposureDetail:ExposureDetailScreen:ExposureDetailDV:PropertyDamageDV:JurisdictionState" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ExposureDetail:ExposureDetailScreen:ExposureDetailDV:PropertyDamageDV:JurisdictionState</stringProp>
                      <stringProp name="Argument.value">IN</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name=":tblinks" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">:tblinks</stringProp>
                      <stringProp name="Argument.value">${cTBLINKS_1}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="objFocusId" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">objFocusId</stringProp>
                      <stringProp name="Argument.value">ExposureDetail:ExposureDetailScreen:ExposureDetailDV:PropertyDamageDV:Claimant_Picker</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="eventSource" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">eventSource</stringProp>
                      <stringProp name="Argument.value">ExposureDetail:ExposureDetailScreen:ExposureDetailDV:PropertyDamageDV:Claimant_Picker_act</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="csrfToken" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">csrfToken</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="Claim:MenuLinks" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">Claim:MenuLinks</stringProp>
                      <stringProp name="Argument.value">${cCLAIMMENULINKS}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="Claim:ClaimMenuActions" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">Claim:ClaimMenuActions</stringProp>
                      <stringProp name="Argument.value">${cCLAIMMENUACTIONS}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP142_ZE_Prop_Edit_Claimant" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_18" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="csrfToken" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">csrfToken</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="eventSource" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">eventSource</stringProp>
                      <stringProp name="Argument.value">ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV_tb:ContactDetailToolbarButtonSet:Edit_act</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="TabBar:ClaimTab:ClaimTab_FindClaim" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">TabBar:ClaimTab:ClaimTab_FindClaim</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="QuickJump" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">QuickJump</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="Claim:MenuLinks_toggle" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">Claim:MenuLinks_toggle</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name=":tblinks" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">:tblinks</stringProp>
                      <stringProp name="Argument.value">${cTBLINKS_1}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name=":tabs" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">:tabs</stringProp>
                      <stringProp name="Argument.value">${cTABS_1}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="infoBar" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">infoBar</stringProp>
                      <stringProp name="Argument.value">${cINFOBAR_1}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="Claim:MenuLinks" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">Claim:MenuLinks</stringProp>
                      <stringProp name="Argument.value">${cCLAIMMENULINKS}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="objFocusId" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">objFocusId</stringProp>
                      <stringProp name="Argument.value">ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV_tb:ContactDetailToolbarButtonSet:Edit</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP142_ZF_Prop_Update_Claimant" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_19" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:PersonContactInfoInputSet:ContactProhibited" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:PersonContactInfoInputSet:ContactProhibited</stringProp>
                      <stringProp name="Argument.value">false</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:PersonContactInfoInputSet:EmailAllowed" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:PersonContactInfoInputSet:EmailAllowed</stringProp>
                      <stringProp name="Argument.value">false</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="Claim:MenuLinks" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">Claim:MenuLinks</stringProp>
                      <stringProp name="Argument.value">${cCLAIMMENULINKS}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="TabBar:ClaimTab:ClaimTab_FindClaim" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">TabBar:ClaimTab:ClaimTab_FindClaim</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="infoBar" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">infoBar</stringProp>
                      <stringProp name="Argument.value">${cINFOBAR_1}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="QuickJump" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">QuickJump</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name=":tabs" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">:tabs</stringProp>
                      <stringProp name="Argument.value">${cTABS_1}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="Claim:MenuLinks_toggle" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">Claim:MenuLinks_toggle</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name=":tblinks" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">:tblinks</stringProp>
                      <stringProp name="Argument.value">${cTBLINKS_1}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:PersonNameInputSet:Prefix" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:PersonNameInputSet:Prefix</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="objFocusId" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">objFocusId</stringProp>
                      <stringProp name="Argument.value">ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV_tb:ContactDetailToolbarButtonSet:ToolbarButton</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:PersonNameInputSet:Suffix" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:PersonNameInputSet:Suffix</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="eventSource" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">eventSource</stringProp>
                      <stringProp name="Argument.value">ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV_tb:ContactDetailToolbarButtonSet:ToolbarButton_act</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:PersonNameInputSet:FormerName" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:PersonNameInputSet:FormerName</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="scrollPositions" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">scrollPositions</stringProp>
                      <stringProp name="Argument.value">{&quot;centerPanel&quot;:{&quot;left&quot;:0,&quot;top&quot;:182}}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:PersonNameInputSet:DeceasedIndEdit" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:PersonNameInputSet:DeceasedIndEdit</stringProp>
                      <stringProp name="Argument.value">false</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="csrfToken" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">csrfToken</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:Notes" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:Notes</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:DriversLicenseInfoInputSet:LicenseState" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:DriversLicenseInfoInputSet:LicenseState</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:DriversLicenseInfoInputSet:LicenseNumber" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:DriversLicenseInfoInputSet:LicenseNumber</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:Gender" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:Gender</stringProp>
                      <stringProp name="Argument.value">F</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:DateOfBirth" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:DateOfBirth</stringProp>
                      <stringProp name="Argument.value">01/29/1985</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:TaxFilingStatus" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:TaxFilingStatus</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:TaxId1" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:TaxId1</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:MedicareEligible" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:MedicareEligible</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:dependants" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:dependants</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:MaritalStatus" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:MaritalStatus</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:Occupation" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:AdditionalInfoInputSet:Occupation</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:PersonContactInfoInputSet:PaymentPreferenceInputSet:Payment_preference" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContactDetailPopup:ContactDetailScreen:ContactBasicsDV:PersonContactInfoInputSet:PaymentPreferenceInputSet:Payment_preference</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP142_Prop_Update_Exposure" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_20" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name=":tabs" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">:tabs</stringProp>
                      <stringProp name="Argument.value">${cTABS_1}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="infoBar" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">infoBar</stringProp>
                      <stringProp name="Argument.value">${cINFOBAR_1}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="TabBar:ClaimTab:ClaimTab_FindClaim" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">TabBar:ClaimTab:ClaimTab_FindClaim</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="QuickJump" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">QuickJump</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="Claim:MenuLinks_toggle" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">Claim:MenuLinks_toggle</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ExposureDetail:ExposureDetailScreen:ExposureDetailDV:PropertyDamageDV:Claimant_ContactProhibited" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ExposureDetail:ExposureDetailScreen:ExposureDetailDV:PropertyDamageDV:Claimant_ContactProhibited</stringProp>
                      <stringProp name="Argument.value">false</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ExposureDetail:ExposureDetailScreen:ExposureDetailDV:PropertyDamageDV:Segment" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ExposureDetail:ExposureDetailScreen:ExposureDetailDV:PropertyDamageDV:Segment</stringProp>
                      <stringProp name="Argument.value">prop_field_hail</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ExposureDetail:ExposureDetailScreen:ExposureDetailDV:PropertyDamageDV:JurisdictionState" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ExposureDetail:ExposureDetailScreen:ExposureDetailDV:PropertyDamageDV:JurisdictionState</stringProp>
                      <stringProp name="Argument.value">IN</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name=":tblinks" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">:tblinks</stringProp>
                      <stringProp name="Argument.value">${cTBLINKS_1}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="eventParam" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">eventParam</stringProp>
                      <stringProp name="Argument.value">ExposureDetail:ExposureDetailScreen:ExposureDetailDV:PropertyDamageDV:Segment</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="eventSource" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">eventSource</stringProp>
                      <stringProp name="Argument.value">_refresh_</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="csrfToken" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">csrfToken</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="Claim:MenuLinks" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">Claim:MenuLinks</stringProp>
                      <stringProp name="Argument.value">${cCLAIMMENULINKS}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="objFocusId" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">objFocusId</stringProp>
                      <stringProp name="Argument.value">ExposureDetail:ExposureDetailScreen:ExposureDetailDV:PropertyDamageDV:Segment</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="Claim:ClaimMenuActions" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">Claim:ClaimMenuActions</stringProp>
                      <stringProp name="Argument.value">${cCLAIMMENUACTIONS}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_21" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name=":tabs" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">:tabs</stringProp>
                      <stringProp name="Argument.value">${cTABS_1}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="infoBar" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">infoBar</stringProp>
                      <stringProp name="Argument.value">${cINFOBAR_1}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="TabBar:ClaimTab:ClaimTab_FindClaim" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">TabBar:ClaimTab:ClaimTab_FindClaim</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="QuickJump" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">QuickJump</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="Claim:MenuLinks_toggle" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">Claim:MenuLinks_toggle</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ExposureDetail:ExposureDetailScreen:ExposureDetailDV:PropertyDamageDV:Claimant_ContactProhibited" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ExposureDetail:ExposureDetailScreen:ExposureDetailDV:PropertyDamageDV:Claimant_ContactProhibited</stringProp>
                      <stringProp name="Argument.value">false</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ExposureDetail:ExposureDetailScreen:ExposureDetailDV:PropertyDamageDV:Segment" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ExposureDetail:ExposureDetailScreen:ExposureDetailDV:PropertyDamageDV:Segment</stringProp>
                      <stringProp name="Argument.value">prop_field_hail</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ExposureDetail:ExposureDetailScreen:ExposureDetailDV:PropertyDamageDV:JurisdictionState" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ExposureDetail:ExposureDetailScreen:ExposureDetailDV:PropertyDamageDV:JurisdictionState</stringProp>
                      <stringProp name="Argument.value">IN</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name=":tblinks" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">:tblinks</stringProp>
                      <stringProp name="Argument.value">${cTBLINKS_1}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="objFocusId" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">objFocusId</stringProp>
                      <stringProp name="Argument.value">ExposureDetail:ExposureDetailScreen:ExposureDetailDV_tb:ToolbarButton</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="eventSource" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">eventSource</stringProp>
                      <stringProp name="Argument.value">ExposureDetail:ExposureDetailScreen:ExposureDetailDV_tb:ToolbarButton_act</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="csrfToken" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">csrfToken</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="Claim:MenuLinks" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">Claim:MenuLinks</stringProp>
                      <stringProp name="Argument.value">${cCLAIMMENULINKS}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="Claim:ClaimMenuActions" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">Claim:ClaimMenuActions</stringProp>
                      <stringProp name="Argument.value">${cCLAIMMENUACTIONS}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_22" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="csrfToken" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">csrfToken</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="eventSource" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">eventSource</stringProp>
                      <stringProp name="Argument.value">ExposureAssignmentPopup:ExposureAssignmentScreen:ToolbarButtonCancel_act</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="TabBar:ClaimTab:ClaimTab_FindClaim" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">TabBar:ClaimTab:ClaimTab_FindClaim</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="QuickJump" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">QuickJump</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="Claim:MenuLinks_toggle" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">Claim:MenuLinks_toggle</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name=":tblinks" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">:tblinks</stringProp>
                      <stringProp name="Argument.value">${cTBLINKS_1}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name=":tabs" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">:tabs</stringProp>
                      <stringProp name="Argument.value">${cTABS_1}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="infoBar" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">infoBar</stringProp>
                      <stringProp name="Argument.value">${cINFOBAR_1}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="Claim:MenuLinks" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">Claim:MenuLinks</stringProp>
                      <stringProp name="Argument.value">${cCLAIMMENULINKS}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="objFocusId" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">objFocusId</stringProp>
                      <stringProp name="Argument.value">ExposureAssignmentPopup:ExposureAssignmentScreen:ToolbarButtonCancel</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP142_ZG_Prop_Parties_Involved" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_23" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="Claim:MenuLinks" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">Claim:MenuLinks</stringProp>
                      <stringProp name="Argument.value">${cCLAIMMENULINKS}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="csrfToken" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">csrfToken</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="TabBar:ClaimTab:ClaimTab_FindClaim" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">TabBar:ClaimTab:ClaimTab_FindClaim</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="QuickJump" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">QuickJump</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="Claim:MenuLinks_toggle" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">Claim:MenuLinks_toggle</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name=":tblinks" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">:tblinks</stringProp>
                      <stringProp name="Argument.value">${cTBLINKS}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name=":tabs" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">:tabs</stringProp>
                      <stringProp name="Argument.value">${cTABS_1}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="infoBar" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">infoBar</stringProp>
                      <stringProp name="Argument.value">${cINFOBAR_1}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="Claim:ClaimMenuActions" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">Claim:ClaimMenuActions</stringProp>
                      <stringProp name="Argument.value">${cCLAIMMENUACTIONS}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="eventSource" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">eventSource</stringProp>
                      <stringProp name="Argument.value">Claim:MenuLinks:Claim_ClaimPartiesGroup:ClaimPartiesGroup_ClaimContacts_act</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="CNG_TP142_ZG_Prop_Parties_Involved failed - GENERAL_MSG_CAT_SSL_ERROR" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1822264439">GENERAL_MSG_CAT_SSL_ERROR</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">20</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="CNG_TP142_ZG_Prop_Parties_Involved failed - Unable to view parties involved screen for claimnumber, ${CLAIMNUMBER}" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-502807437">Contacts</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cCONTACTNAME" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">cCONTACTNAME</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;ClaimContactRoleOwnerFilter/(.*?)&quot;,</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default"></stringProp>
                  <stringProp name="RegexExtractor.match_number">2</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
                </RegexExtractor>
                <hashTree/>
                <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor - CNG_TP142_ZG_Prop_Parties_Involved" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">5909bb5f-2c95-40e5-b0ef-4d3e00b73f82</stringProp>
                  <stringProp name="script">vars.put(&quot;cCONTACTNAME_URL2&quot;,java.net.URLDecoder.decode(vars.get(&quot;cCONTACTNAME&quot;), &quot;UTF-8&quot;));</stringProp>
                </JSR223PostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP142_ZH_Prop_Edit_Parties_Involved" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_4" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">ajaxRequestInfo=%5B%7B%22viewRootId%22%3A%22ClaimContacts%3AClaimContactsScreen%3APeopleInvolvedDetailedListDetail%3APeopleInvolvedDetailedLV%3APeopleInvolvedDetailedFilter%22%2C%22paramMap%22%3A%7B%22postOnChangeTarget%22%3A%22DATA_ONLY%22%2C%22skipFocusOnPOC%22%3Atrue%7D%7D%5D&amp;TabBar%3AClaimTab%3AClaimTab_FindClaim=&amp;QuickJump=&amp;Claim%3AMenuLinks_toggle=&amp;ClaimContacts%3AClaimContactsScreen%3APeopleInvolvedDetailedListDetail%3APeopleInvolvedDetailedLV%3APeopleInvolvedDetailedFilter=ClaimContactRoleOwnerFilter%2F${cCONTACTNAME_URL2}&amp;%3Atblinks=${cTBLINKS_URL2}&amp;%3Atabs=${cTABS_1_URL2}&amp;infoBar=${cINFOBAR_1_URL2}&amp;Claim%3AClaimMenuActions=${cCLAIMMENUACTIONS_URL2}&amp;Claim%3AMenuLinks=${cCLAIMMENULINKS_URL2}&amp;csrfToken=</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_24" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="Claim:ClaimMenuActions" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">Claim:ClaimMenuActions</stringProp>
                      <stringProp name="Argument.value">${cCLAIMMENUACTIONS}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="Claim:MenuLinks" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">Claim:MenuLinks</stringProp>
                      <stringProp name="Argument.value">${cCLAIMMENULINKS}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="TabBar:ClaimTab:ClaimTab_FindClaim" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">TabBar:ClaimTab:ClaimTab_FindClaim</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="QuickJump" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">QuickJump</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="objFocusId" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">objFocusId</stringProp>
                      <stringProp name="Argument.value">ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV_tb:ContactDetailToolbarButtonSet:Edit</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="Claim:MenuLinks_toggle" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">Claim:MenuLinks_toggle</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="eventSource" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">eventSource</stringProp>
                      <stringProp name="Argument.value">ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV_tb:ContactDetailToolbarButtonSet:Edit_act</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:PeopleInvolvedDetailedLV:PeopleInvolvedDetailedFilter" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:PeopleInvolvedDetailedLV:PeopleInvolvedDetailedFilter</stringProp>
                      <stringProp name="Argument.value">CoreFilters.AllFilter/All</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name=":tblinks" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">:tblinks</stringProp>
                      <stringProp name="Argument.value">${cTBLINKS}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name=":tabs" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">:tabs</stringProp>
                      <stringProp name="Argument.value">${cTABS_1}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="infoBar" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">infoBar</stringProp>
                      <stringProp name="Argument.value">${cINFOBAR_1}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="csrfToken" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">csrfToken</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_25" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:PersonNameInputSet:DeceasedIndEdit" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:PersonNameInputSet:DeceasedIndEdit</stringProp>
                      <stringProp name="Argument.value">false</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:PersonContactInfoInputSet:ContactProhibited" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:PersonContactInfoInputSet:ContactProhibited</stringProp>
                      <stringProp name="Argument.value">false</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name=":tabs" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">:tabs</stringProp>
                      <stringProp name="Argument.value">${cTABS_1}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="TabBar:ClaimTab:ClaimTab_FindClaim" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">TabBar:ClaimTab:ClaimTab_FindClaim</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name=":tblinks" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">:tblinks</stringProp>
                      <stringProp name="Argument.value">${cTBLINKS_1}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="QuickJump" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">QuickJump</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:PersonContactInfoInputSet:pcinfoinputset_lmphonesref:LM_PhonesInputSet:0:_Checkbox" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:PersonContactInfoInputSet:pcinfoinputset_lmphonesref:LM_PhonesInputSet:0:_Checkbox</stringProp>
                      <stringProp name="Argument.value">true</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="Claim:MenuLinks_toggle" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">Claim:MenuLinks_toggle</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:Notes" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:Notes</stringProp>
                      <stringProp name="Argument.value">TP142</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:PeopleInvolvedDetailedLV:PeopleInvolvedDetailedFilter" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:PeopleInvolvedDetailedLV:PeopleInvolvedDetailedFilter</stringProp>
                      <stringProp name="Argument.value">CoreFilters.AllFilter/All</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="csrfToken" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">csrfToken</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:PersonNameInputSet:Prefix" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:PersonNameInputSet:Prefix</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="Claim:MenuLinks" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">Claim:MenuLinks</stringProp>
                      <stringProp name="Argument.value">${cCLAIMMENULINKS}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:PersonNameInputSet:Suffix" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:PersonNameInputSet:Suffix</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="Claim:ClaimMenuActions" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">Claim:ClaimMenuActions</stringProp>
                      <stringProp name="Argument.value">${cCLAIMMENUACTIONS}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:PersonNameInputSet:FormerName" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:PersonNameInputSet:FormerName</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="infoBar" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">infoBar</stringProp>
                      <stringProp name="Argument.value">${cINFOBAR_1}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:AdditionalInfoInputSet:DriversLicenseInfoInputSet:LicenseState" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:AdditionalInfoInputSet:DriversLicenseInfoInputSet:LicenseState</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:AdditionalInfoInputSet:DriversLicenseInfoInputSet:LicenseNumber" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:AdditionalInfoInputSet:DriversLicenseInfoInputSet:LicenseNumber</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:AdditionalInfoInputSet:MedicareEligible" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:AdditionalInfoInputSet:MedicareEligible</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:AdditionalInfoInputSet:DateOfBirth" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:AdditionalInfoInputSet:DateOfBirth</stringProp>
                      <stringProp name="Argument.value">01/29/1985</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:AdditionalInfoInputSet:TaxFilingStatus" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:AdditionalInfoInputSet:TaxFilingStatus</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:AdditionalInfoInputSet:TaxId1" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:AdditionalInfoInputSet:TaxId1</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:PersonContactInfoInputSet:PaymentPreferenceInputSet:Payment_preference" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:PersonContactInfoInputSet:PaymentPreferenceInputSet:Payment_preference</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:AdditionalInfoInputSet:dependants" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:AdditionalInfoInputSet:dependants</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:AdditionalInfoInputSet:MaritalStatus" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:AdditionalInfoInputSet:MaritalStatus</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:AdditionalInfoInputSet:Occupation" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:AdditionalInfoInputSet:Occupation</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:AdditionalInfoInputSet:Gender" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:AdditionalInfoInputSet:Gender</stringProp>
                      <stringProp name="Argument.value">F</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="objFocusId" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">objFocusId</stringProp>
                      <stringProp name="Argument.value">ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:PersonContactInfoInputSet:pcinfoinputset_lmphonesref:LM_PhonesInputSet:Remove</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:PersonContactInfoInputSet:EmailAllowed" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:PersonContactInfoInputSet:EmailAllowed</stringProp>
                      <stringProp name="Argument.value">false</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="eventSource" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">eventSource</stringProp>
                      <stringProp name="Argument.value">ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:PersonContactInfoInputSet:pcinfoinputset_lmphonesref:LM_PhonesInputSet:Remove_act</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="scrollPositions" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">scrollPositions</stringProp>
                      <stringProp name="Argument.value">{&quot;centerPanel&quot;:{&quot;left&quot;:0,&quot;top&quot;:299}}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_26" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:PersonNameInputSet:DeceasedIndEdit" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:PersonNameInputSet:DeceasedIndEdit</stringProp>
                      <stringProp name="Argument.value">false</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:PersonContactInfoInputSet:ContactProhibited" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:PersonContactInfoInputSet:ContactProhibited</stringProp>
                      <stringProp name="Argument.value">false</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="infoBar" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">infoBar</stringProp>
                      <stringProp name="Argument.value">${cINFOBAR_1}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="TabBar:ClaimTab:ClaimTab_FindClaim" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">TabBar:ClaimTab:ClaimTab_FindClaim</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name=":tabs" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">:tabs</stringProp>
                      <stringProp name="Argument.value">${cTABS_1}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="QuickJump" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">QuickJump</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name=":tblinks" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">:tblinks</stringProp>
                      <stringProp name="Argument.value">${cTBLINKS_1}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="Claim:MenuLinks_toggle" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">Claim:MenuLinks_toggle</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:Notes" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:Notes</stringProp>
                      <stringProp name="Argument.value">TP142</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:PeopleInvolvedDetailedLV:PeopleInvolvedDetailedFilter" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:PeopleInvolvedDetailedLV:PeopleInvolvedDetailedFilter</stringProp>
                      <stringProp name="Argument.value">CoreFilters.AllFilter/All</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="scrollPositions" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">scrollPositions</stringProp>
                      <stringProp name="Argument.value">{&quot;centerPanel&quot;:{&quot;left&quot;:0,&quot;top&quot;:299}}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:PersonNameInputSet:Prefix" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:PersonNameInputSet:Prefix</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="csrfToken" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">csrfToken</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:PersonNameInputSet:Suffix" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:PersonNameInputSet:Suffix</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="Claim:MenuLinks" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">Claim:MenuLinks</stringProp>
                      <stringProp name="Argument.value">${cCLAIMMENULINKS}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:PersonNameInputSet:FormerName" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:PersonNameInputSet:FormerName</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="Claim:ClaimMenuActions" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">Claim:ClaimMenuActions</stringProp>
                      <stringProp name="Argument.value">${cCLAIMMENUACTIONS}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:AdditionalInfoInputSet:DriversLicenseInfoInputSet:LicenseState" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:AdditionalInfoInputSet:DriversLicenseInfoInputSet:LicenseState</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:AdditionalInfoInputSet:DriversLicenseInfoInputSet:LicenseNumber" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:AdditionalInfoInputSet:DriversLicenseInfoInputSet:LicenseNumber</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:AdditionalInfoInputSet:MedicareEligible" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:AdditionalInfoInputSet:MedicareEligible</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:AdditionalInfoInputSet:DateOfBirth" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:AdditionalInfoInputSet:DateOfBirth</stringProp>
                      <stringProp name="Argument.value">01/29/1985</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:AdditionalInfoInputSet:TaxFilingStatus" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:AdditionalInfoInputSet:TaxFilingStatus</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:AdditionalInfoInputSet:TaxId1" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:AdditionalInfoInputSet:TaxId1</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:PersonContactInfoInputSet:PaymentPreferenceInputSet:Payment_preference" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:PersonContactInfoInputSet:PaymentPreferenceInputSet:Payment_preference</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:AdditionalInfoInputSet:dependants" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:AdditionalInfoInputSet:dependants</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:AdditionalInfoInputSet:MaritalStatus" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:AdditionalInfoInputSet:MaritalStatus</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:AdditionalInfoInputSet:Occupation" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:AdditionalInfoInputSet:Occupation</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:AdditionalInfoInputSet:Gender" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:AdditionalInfoInputSet:Gender</stringProp>
                      <stringProp name="Argument.value">F</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:PersonContactInfoInputSet:EmailAllowed" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:PersonContactInfoInputSet:EmailAllowed</stringProp>
                      <stringProp name="Argument.value">false</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="objFocusId" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">objFocusId</stringProp>
                      <stringProp name="Argument.value">ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:PersonContactInfoInputSet:pcinfoinputset_lmphonesref:LM_PhonesInputSet:Add</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="eventSource" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">eventSource</stringProp>
                      <stringProp name="Argument.value">ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:PersonContactInfoInputSet:pcinfoinputset_lmphonesref:LM_PhonesInputSet:Add_act</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_27" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:PersonNameInputSet:DeceasedIndEdit" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:PersonNameInputSet:DeceasedIndEdit</stringProp>
                      <stringProp name="Argument.value">false</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:PersonContactInfoInputSet:ContactProhibited" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:PersonContactInfoInputSet:ContactProhibited</stringProp>
                      <stringProp name="Argument.value">false</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:PersonContactInfoInputSet:pcinfoinputset_lmphonesref:LM_PhonesInputSet:0:PhoneType" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:PersonContactInfoInputSet:pcinfoinputset_lmphonesref:LM_PhonesInputSet:0:PhoneType</stringProp>
                      <stringProp name="Argument.value">home</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="TabBar:ClaimTab:ClaimTab_FindClaim" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">TabBar:ClaimTab:ClaimTab_FindClaim</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:Notes" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:Notes</stringProp>
                      <stringProp name="Argument.value">TP142</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="QuickJump" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">QuickJump</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:AdditionalInfoInputSet:DriversLicenseInfoInputSet:LicenseState" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:AdditionalInfoInputSet:DriversLicenseInfoInputSet:LicenseState</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="Claim:MenuLinks_toggle" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">Claim:MenuLinks_toggle</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:AdditionalInfoInputSet:DriversLicenseInfoInputSet:LicenseNumber" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:AdditionalInfoInputSet:DriversLicenseInfoInputSet:LicenseNumber</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:PeopleInvolvedDetailedLV:PeopleInvolvedDetailedFilter" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:PeopleInvolvedDetailedLV:PeopleInvolvedDetailedFilter</stringProp>
                      <stringProp name="Argument.value">CoreFilters.AllFilter/All</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name=":tblinks" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">:tblinks</stringProp>
                      <stringProp name="Argument.value">${cTBLINKS_1}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:PersonNameInputSet:Prefix" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:PersonNameInputSet:Prefix</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="PrimaryPhoneSelection_Radio" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">PrimaryPhoneSelection_Radio</stringProp>
                      <stringProp name="Argument.value">ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:PersonContactInfoInputSet:pcinfoinputset_lmphonesref:LM_PhonesInputSet:0:LM_Phone_PrimaryPhone</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:PersonNameInputSet:Suffix" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:PersonNameInputSet:Suffix</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:PersonContactInfoInputSet:pcinfoinputset_lmphonesref:LM_PhonesInputSet:0:LM_Phone_PhoneNumber" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:PersonContactInfoInputSet:pcinfoinputset_lmphonesref:LM_PhonesInputSet:0:LM_Phone_PhoneNumber</stringProp>
                      <stringProp name="Argument.value">000-000-0000</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:PersonNameInputSet:FormerName" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:PersonNameInputSet:FormerName</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:PersonContactInfoInputSet:pcinfoinputset_lmphonesref:LM_PhonesInputSet:0:LM_Phone_PrimaryPhone" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:PersonContactInfoInputSet:pcinfoinputset_lmphonesref:LM_PhonesInputSet:0:LM_Phone_PrimaryPhone</stringProp>
                      <stringProp name="Argument.value">true</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:AdditionalInfoInputSet:MedicareEligible" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:AdditionalInfoInputSet:MedicareEligible</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:AdditionalInfoInputSet:dependants" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:AdditionalInfoInputSet:dependants</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="eventSource" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">eventSource</stringProp>
                      <stringProp name="Argument.value">_refresh_</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="scrollPositions" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">scrollPositions</stringProp>
                      <stringProp name="Argument.value">{&quot;centerPanel&quot;:{&quot;left&quot;:0,&quot;top&quot;:299}}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="csrfToken" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">csrfToken</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="Claim:MenuLinks" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">Claim:MenuLinks</stringProp>
                      <stringProp name="Argument.value">${cCLAIMMENULINKS}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="objFocusId" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">objFocusId</stringProp>
                      <stringProp name="Argument.value">textfield-2581</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="eventParam" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">eventParam</stringProp>
                      <stringProp name="Argument.value">ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:PersonContactInfoInputSet:pcinfoinputset_lmphonesref:LM_PhonesInputSet:0:LM_Phone_PrimaryPhone</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="Claim:ClaimMenuActions" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">Claim:ClaimMenuActions</stringProp>
                      <stringProp name="Argument.value">${cCLAIMMENUACTIONS}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="infoBar" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">infoBar</stringProp>
                      <stringProp name="Argument.value">${cINFOBAR_1}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name=":tabs" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">:tabs</stringProp>
                      <stringProp name="Argument.value">${cTABS_1}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:AdditionalInfoInputSet:MaritalStatus" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:AdditionalInfoInputSet:MaritalStatus</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:AdditionalInfoInputSet:TaxId1" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:AdditionalInfoInputSet:TaxId1</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:PersonContactInfoInputSet:PaymentPreferenceInputSet:Payment_preference" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:PersonContactInfoInputSet:PaymentPreferenceInputSet:Payment_preference</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:PersonContactInfoInputSet:EmailAllowed" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:PersonContactInfoInputSet:EmailAllowed</stringProp>
                      <stringProp name="Argument.value">false</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="LM_Phone_PhoneNumber" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">LM_Phone_PhoneNumber</stringProp>
                      <stringProp name="Argument.value">000-000-0000</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:AdditionalInfoInputSet:Occupation" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:AdditionalInfoInputSet:Occupation</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:AdditionalInfoInputSet:Gender" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:AdditionalInfoInputSet:Gender</stringProp>
                      <stringProp name="Argument.value">F</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:AdditionalInfoInputSet:DateOfBirth" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:AdditionalInfoInputSet:DateOfBirth</stringProp>
                      <stringProp name="Argument.value">01/29/1985</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:AdditionalInfoInputSet:TaxFilingStatus" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:AdditionalInfoInputSet:TaxFilingStatus</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="PhoneType" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">PhoneType</stringProp>
                      <stringProp name="Argument.value">home</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_28" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:PersonNameInputSet:DeceasedIndEdit" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:PersonNameInputSet:DeceasedIndEdit</stringProp>
                      <stringProp name="Argument.value">false</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:PersonContactInfoInputSet:ContactProhibited" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:PersonContactInfoInputSet:ContactProhibited</stringProp>
                      <stringProp name="Argument.value">false</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="infoBar" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">infoBar</stringProp>
                      <stringProp name="Argument.value">${cINFOBAR_1}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="TabBar:ClaimTab:ClaimTab_FindClaim" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">TabBar:ClaimTab:ClaimTab_FindClaim</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name=":tabs" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">:tabs</stringProp>
                      <stringProp name="Argument.value">${cTABS_1}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="QuickJump" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">QuickJump</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name=":tblinks" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">:tblinks</stringProp>
                      <stringProp name="Argument.value">${cTBLINKS_1}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="Claim:MenuLinks_toggle" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">Claim:MenuLinks_toggle</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:Notes" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:Notes</stringProp>
                      <stringProp name="Argument.value">TP142</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:PeopleInvolvedDetailedLV:PeopleInvolvedDetailedFilter" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:PeopleInvolvedDetailedLV:PeopleInvolvedDetailedFilter</stringProp>
                      <stringProp name="Argument.value">CoreFilters.AllFilter/All</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="scrollPositions" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">scrollPositions</stringProp>
                      <stringProp name="Argument.value">{&quot;centerPanel&quot;:{&quot;left&quot;:0,&quot;top&quot;:299}}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:PersonNameInputSet:Prefix" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:PersonNameInputSet:Prefix</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="csrfToken" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">csrfToken</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:PersonNameInputSet:Suffix" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:PersonNameInputSet:Suffix</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="Claim:MenuLinks" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">Claim:MenuLinks</stringProp>
                      <stringProp name="Argument.value">${cCLAIMMENULINKS}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:PersonNameInputSet:FormerName" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:PersonNameInputSet:FormerName</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="Claim:ClaimMenuActions" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">Claim:ClaimMenuActions</stringProp>
                      <stringProp name="Argument.value">${cCLAIMMENUACTIONS}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:AdditionalInfoInputSet:DriversLicenseInfoInputSet:LicenseState" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:AdditionalInfoInputSet:DriversLicenseInfoInputSet:LicenseState</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:AdditionalInfoInputSet:DriversLicenseInfoInputSet:LicenseNumber" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:AdditionalInfoInputSet:DriversLicenseInfoInputSet:LicenseNumber</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:AdditionalInfoInputSet:MedicareEligible" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:AdditionalInfoInputSet:MedicareEligible</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:AdditionalInfoInputSet:DateOfBirth" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:AdditionalInfoInputSet:DateOfBirth</stringProp>
                      <stringProp name="Argument.value">01/29/1985</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:AdditionalInfoInputSet:TaxFilingStatus" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:AdditionalInfoInputSet:TaxFilingStatus</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:AdditionalInfoInputSet:TaxId1" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:AdditionalInfoInputSet:TaxId1</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:PersonContactInfoInputSet:PaymentPreferenceInputSet:Payment_preference" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:PersonContactInfoInputSet:PaymentPreferenceInputSet:Payment_preference</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:AdditionalInfoInputSet:dependants" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:AdditionalInfoInputSet:dependants</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:AdditionalInfoInputSet:MaritalStatus" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:AdditionalInfoInputSet:MaritalStatus</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:AdditionalInfoInputSet:Occupation" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:AdditionalInfoInputSet:Occupation</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:AdditionalInfoInputSet:Gender" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:AdditionalInfoInputSet:Gender</stringProp>
                      <stringProp name="Argument.value">F</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:PersonContactInfoInputSet:EmailAllowed" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:PersonContactInfoInputSet:EmailAllowed</stringProp>
                      <stringProp name="Argument.value">false</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="eventParam" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">eventParam</stringProp>
                      <stringProp name="Argument.value">ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:PersonContactInfoInputSet:pcinfoinputset_lmphonesref:LM_PhonesInputSet:0:LM_Phone_PhoneNumber</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="eventSource" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">eventSource</stringProp>
                      <stringProp name="Argument.value">_refresh_</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP142_ZI_Prop_Update_Parties_Involved" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_29" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:PersonNameInputSet:DeceasedIndEdit" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:PersonNameInputSet:DeceasedIndEdit</stringProp>
                      <stringProp name="Argument.value">false</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:PersonContactInfoInputSet:ContactProhibited" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:PersonContactInfoInputSet:ContactProhibited</stringProp>
                      <stringProp name="Argument.value">false</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="infoBar" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">infoBar</stringProp>
                      <stringProp name="Argument.value">${cINFOBAR_1}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="TabBar:ClaimTab:ClaimTab_FindClaim" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">TabBar:ClaimTab:ClaimTab_FindClaim</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name=":tabs" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">:tabs</stringProp>
                      <stringProp name="Argument.value">${cTABS_1}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="QuickJump" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">QuickJump</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name=":tblinks" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">:tblinks</stringProp>
                      <stringProp name="Argument.value">${cTBLINKS_1}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="Claim:MenuLinks_toggle" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">Claim:MenuLinks_toggle</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:Notes" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:Notes</stringProp>
                      <stringProp name="Argument.value">TP142</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:PeopleInvolvedDetailedLV:PeopleInvolvedDetailedFilter" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:PeopleInvolvedDetailedLV:PeopleInvolvedDetailedFilter</stringProp>
                      <stringProp name="Argument.value">CoreFilters.AllFilter/All</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="scrollPositions" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">scrollPositions</stringProp>
                      <stringProp name="Argument.value">{&quot;centerPanel&quot;:{&quot;left&quot;:0,&quot;top&quot;:990}}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:PersonNameInputSet:Prefix" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:PersonNameInputSet:Prefix</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="csrfToken" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">csrfToken</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:PersonNameInputSet:Suffix" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:PersonNameInputSet:Suffix</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="Claim:MenuLinks" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">Claim:MenuLinks</stringProp>
                      <stringProp name="Argument.value">${cCLAIMMENULINKS}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:PersonNameInputSet:FormerName" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:PersonNameInputSet:FormerName</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="Claim:ClaimMenuActions" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">Claim:ClaimMenuActions</stringProp>
                      <stringProp name="Argument.value">${cCLAIMMENUACTIONS}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:AdditionalInfoInputSet:DriversLicenseInfoInputSet:LicenseState" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:AdditionalInfoInputSet:DriversLicenseInfoInputSet:LicenseState</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:AdditionalInfoInputSet:DriversLicenseInfoInputSet:LicenseNumber" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:AdditionalInfoInputSet:DriversLicenseInfoInputSet:LicenseNumber</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:AdditionalInfoInputSet:MedicareEligible" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:AdditionalInfoInputSet:MedicareEligible</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:AdditionalInfoInputSet:DateOfBirth" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:AdditionalInfoInputSet:DateOfBirth</stringProp>
                      <stringProp name="Argument.value">01/29/1985</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:AdditionalInfoInputSet:TaxFilingStatus" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:AdditionalInfoInputSet:TaxFilingStatus</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:AdditionalInfoInputSet:TaxId1" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:AdditionalInfoInputSet:TaxId1</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:PersonContactInfoInputSet:PaymentPreferenceInputSet:Payment_preference" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:PersonContactInfoInputSet:PaymentPreferenceInputSet:Payment_preference</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:AdditionalInfoInputSet:dependants" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:AdditionalInfoInputSet:dependants</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:AdditionalInfoInputSet:MaritalStatus" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:AdditionalInfoInputSet:MaritalStatus</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:AdditionalInfoInputSet:Occupation" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:AdditionalInfoInputSet:Occupation</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:AdditionalInfoInputSet:Gender" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:AdditionalInfoInputSet:Gender</stringProp>
                      <stringProp name="Argument.value">F</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:PersonContactInfoInputSet:EmailAllowed" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactBasicsDV:PersonContactInfoInputSet:EmailAllowed</stringProp>
                      <stringProp name="Argument.value">false</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="objFocusId" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">objFocusId</stringProp>
                      <stringProp name="Argument.value">ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactDetailBottomToolbarButtonSet:ToolbarButton</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="eventSource" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">eventSource</stringProp>
                      <stringProp name="Argument.value">ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:ClaimContactCV:ContactDetailBottomToolbarButtonSet:ToolbarButton_act</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP142_Return_To_Desktop" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_30" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="Claim:ClaimMenuActions" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">Claim:ClaimMenuActions</stringProp>
                      <stringProp name="Argument.value">${cCLAIMMENUACTIONS}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="Claim:MenuLinks" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">Claim:MenuLinks</stringProp>
                      <stringProp name="Argument.value">${cCLAIMMENULINKS}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="TabBar:ClaimTab:ClaimTab_FindClaim" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">TabBar:ClaimTab:ClaimTab_FindClaim</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="QuickJump" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">QuickJump</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="Claim:MenuLinks_toggle" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">Claim:MenuLinks_toggle</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:PeopleInvolvedDetailedLV:PeopleInvolvedDetailedFilter" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:PeopleInvolvedDetailedLV:PeopleInvolvedDetailedFilter</stringProp>
                      <stringProp name="Argument.value">CoreFilters.AllFilter/All</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name=":tblinks" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">:tblinks</stringProp>
                      <stringProp name="Argument.value">${cTBLINKS}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name=":tabs" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">:tabs</stringProp>
                      <stringProp name="Argument.value">${cTABS_1}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="infoBar" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">infoBar</stringProp>
                      <stringProp name="Argument.value">${cINFOBAR_1}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="objFocusId" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">objFocusId</stringProp>
                      <stringProp name="Argument.value">TabBar:DesktopTab</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="eventSource" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">eventSource</stringProp>
                      <stringProp name="Argument.value">TabBar:DesktopTab_act</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="scrollPositions" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">scrollPositions</stringProp>
                      <stringProp name="Argument.value">{&quot;centerPanel&quot;:{&quot;left&quot;:0,&quot;top&quot;:94}}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="csrfToken" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">csrfToken</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="CNG_TP142_Return_To_Desktop failed - GENERAL_MSG_CAT_SSL_ERROR" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1822264439">GENERAL_MSG_CAT_SSL_ERROR</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">20</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="CNG_TP142_Return_To_Desktop failed - Desktop screen has not appeared for claim number: ${CLAIMNUMBER}" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1514705186">My activities today</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cTABS" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">cTABS</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;id&quot;:&quot;TabBar:VacationTab&quot;,&quot;text&quot;:&quot;Vacation&quot;,&quot;menu&quot;:\{&quot;defaultType&quot;:&quot;gmenuitem&quot;},&quot;xtype&quot;:&quot;gbutton&quot;,&quot;disabled&quot;:true}],&quot;checksum&quot;:&quot;(.*?)&quot;}},\{</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default"></stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
                </RegexExtractor>
                <hashTree/>
                <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor - CNG_TP142_Return_To_Desktop" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">5909bb5f-2c95-40e5-b0ef-4d3e00b73f82</stringProp>
                  <stringProp name="script">vars.put(&quot;cTABS_URL2&quot;,java.net.URLDecoder.decode(vars.get(&quot;cTABS&quot;), &quot;UTF-8&quot;));</stringProp>
                </JSR223PostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP142_ZJ_Logout" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_31" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">TabBar%3AClaimTab%3AClaimTab_FindClaim=&amp;QuickJump=&amp;Desktop%3AMenuLinks_toggle=&amp;DesktopActivities%3ADesktopActivitiesScreen%3ADesktopActivitiesLV%3ADesktopActivitiesFilter=AndFilter%2FMy%20activities%20today&amp;%3Atblinks=${cTBLINKS_URL2}&amp;%3Atabs=${cTABS_URL2}&amp;Desktop%3ADesktopMenuActions=${cDESKTOPMENUACTIONS_URL2}&amp;Desktop%3AMenuLinks=${cDESKTOPMENULINKS_URL2}&amp;csrfToken=&amp;eventSource=TabBar%3ALogoutTabBarLink_act&amp;objFocusId=TabBar%3ALogoutTabBarLink</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PMClaimCenterLogout.fcc" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/LMAuth/PMClaimCenterLogout.fcc</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
