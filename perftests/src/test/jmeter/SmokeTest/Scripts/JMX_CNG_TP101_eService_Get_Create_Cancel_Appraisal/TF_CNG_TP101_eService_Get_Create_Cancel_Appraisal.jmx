<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="2.9" jmeter="3.0 r1743807">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="TF_CNG_TP101_eService_Get_Create_Cancel_Appraisal" enabled="true"/>
      <hashTree>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">true</boolProp>
        </CookieManager>
        <hashTree/>
        <CacheManager guiclass="CacheManagerGui" testclass="CacheManager" testname="HTTP Cache Manager" enabled="true">
          <boolProp name="clearEachIteration">true</boolProp>
          <boolProp name="useExpires">false</boolProp>
        </CacheManager>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="Accept-Language" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/soap+xml; charset=utf-8</stringProp>
            </elementProp>
            <elementProp name="Accept-Language" elementType="Header">
              <stringProp name="Header.name">SOAPAction</stringProp>
              <stringProp name="Header.value">https://${GV_HOSTNAME_APPRAISALS}/AppraisalsMediationModuleWeb/sca/AppraisalsAPIExport1</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Host</stringProp>
              <stringProp name="Header.value">${GV_HOSTNAME_APPRAISALS}</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Connection</stringProp>
              <stringProp name="Header.value">Keep-Alive</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="TP101 - CSV Data Set Config" enabled="true">
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="filename">${test_path}..${PATH_SEP}Scripts${PATH_SEP}JMX_CNG_TP101_eService_Get_Create_Cancel_Appraisal${PATH_SEP}TP101.csv</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <stringProp name="shareMode.all">shareMode</stringProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="variableNames">INCIDENTID</stringProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
          <stringProp name="TestPlan.comments">INCIDENTID</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="REQUESTOR.csv - CSV Data Set Config" enabled="true">
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="filename">${test_path}..${PATH_SEP}Scripts${PATH_SEP}JMX_CNG_TP101_eService_Get_Create_Cancel_Appraisal${PATH_SEP}REQUESTOR.csv</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <stringProp name="shareMode.all">shareMode</stringProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="variableNames">REQUESTOR</stringProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
          <stringProp name="TestPlan.comments">REQUESTOR</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="SERVICETYPE.csv - CSV Data Set Config" enabled="true">
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="filename">${test_path}..${PATH_SEP}Scripts${PATH_SEP}JMX_CNG_TP101_eService_Get_Create_Cancel_Appraisal${PATH_SEP}SERVICETYPE.csv</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <stringProp name="shareMode.all">shareMode</stringProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="variableNames">SERVICETYPE</stringProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
          <stringProp name="TestPlan.comments">SERVICETYPE</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="RECIPIENTNUMBER.csv - CSV Data Set Config" enabled="true">
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="filename">${test_path}..${PATH_SEP}Scripts${PATH_SEP}JMX_CNG_TP101_eService_Get_Create_Cancel_Appraisal${PATH_SEP}RECIPIENTNUMBER.csv</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <stringProp name="shareMode.all">shareMode</stringProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="variableNames">RECIPIENTNUMBER,</stringProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
          <stringProp name="TestPlan.comments">RECIPIENTNUMBER,</stringProp>
        </CSVDataSet>
        <hashTree/>
        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="ThinkTime" enabled="true">
          <stringProp name="ConstantTimer.delay">${CNG_TP101_eService_Get_Create_Cancel_Appraisal_ThinkTime}</stringProp>
        </ConstantTimer>
        <hashTree/>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="PacingTime" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">${CNG_TP101_eService_Get_Create_Cancel_Appraisal_Pacing}</stringProp>
        </TestAction>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TP101_010_eService_Get_Latest_Appraisal" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:app=&quot;http://pm.lmig.com/cl/AppraisalsLibrary/AppraisalsAPI&quot;&gt;	&lt;soap:Header/&gt;		&lt;soap:Body&gt;			&lt;app:getLatestAppraisalByIncidentId&gt;				&lt;AppraisalRequest&gt;				&lt;RequestId&gt;&lt;/RequestId&gt;				&lt;Requestor&gt;${REQUESTOR}&lt;/Requestor&gt;				&lt;UserID&gt;&lt;/UserID&gt;				&lt;IncidentId&gt;${INCIDENTID}&lt;/IncidentId&gt;				&lt;/AppraisalRequest&gt;			&lt;/app:getLatestAppraisalByIncidentId&gt;		&lt;/soap:Body&gt;&lt;/soap:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_APPRAISALS}/AppraisalsMediationModuleWeb/sca/AppraisalsAPIExport1</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
          <boolProp name="HTTPSampler.image_parser">true</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="TP101_010_eService_Get_Latest_Appraisal failed - HTTP Reponse not 200 OK" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Error_Code" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">Error_Code</stringProp>
            <stringProp name="RegexExtractor.regex">&lt;Code&gt;(.*?)&lt;/Code&gt;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">null</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Error_Description" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">Error_Description</stringProp>
            <stringProp name="RegexExtractor.regex">&lt;Description&gt;(.*?)&lt;/Description&gt;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">null</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="TP101_010_eService_Get_Latest_Appraisal failed - Error Code: ${Error_Code},  Error Description: ${Error_Description}, Incident ID - ${INCIDENTID}" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-970069084">&lt;ResponseStatus&gt;success&lt;/ResponseStatus&gt;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Qualification_Message" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">Qualification_Message</stringProp>
            <stringProp name="RegexExtractor.regex">&lt;QualificationMessage&gt;(.*?)&lt;/QualificationMessage&gt;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">null</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="APPRAISAL_ID" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">APPRAISAL_ID</stringProp>
            <stringProp name="RegexExtractor.regex">&lt;AppraisalId&gt;(.*?)&lt;/AppraisalId&gt;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">null</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="APPRAISALID_Count" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">APPRAISALID_Count</stringProp>
            <stringProp name="RegexExtractor.regex">&lt;AppraisalId(.*?)cc:</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">null</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If CNG_TP101_eService_Get_Create_Cancel_Appraisal - &quot;${APPRAISALID_Count}&quot;==&quot;null&quot;" enabled="true">
          <stringProp name="IfController.condition">&quot;${APPRAISALID_Count}&quot;==&quot;null&quot;</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TP101_020_eService_Create_Shop_Appraisal" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:app=&quot;http://pm.lmig.com/cl/AppraisalsLibrary/AppraisalsAPI&quot;&gt;	&lt;soap:Header/&gt;	&lt;soap:Body&gt;		&lt;app:createShopAppraisal&gt;			&lt;ShopServiceRequest&gt;    			&lt;RequestId&gt;&lt;/RequestId&gt;    			&lt;Requestor&gt;${REQUESTOR}&lt;/Requestor&gt;    			&lt;UserID&gt;&lt;/UserID&gt;            	&lt;Appointment&gt;       				&lt;Date&gt;${DATE}&lt;/Date&gt;				&lt;/Appointment&gt;    			&lt;DeductibleWaived&gt;&lt;/DeductibleWaived&gt;    			&lt;DirectionToPay&gt;&lt;/DirectionToPay&gt;    			&lt;IncidentId&gt;${INCIDENTID}&lt;/IncidentId&gt;    			&lt;Notes&gt;&lt;/Notes&gt;    			&lt;OkayToPay&gt;&lt;/OkayToPay&gt;    			&lt;RecipientNumber&gt;${RECIPIENTNUMBER}&lt;/RecipientNumber&gt;    			&lt;ServiceType&gt;${SERVICETYPE}&lt;/ServiceType&gt;    			&lt;TowNeeded&gt;&lt;/TowNeeded&gt;    			&lt;WaiverReason&gt;&lt;/WaiverReason&gt; 				&lt;/ShopServiceRequest&gt;		&lt;/app:createShopAppraisal&gt;	&lt;/soap:Body&gt;&lt;/soap:Envelope&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_APPRAISALS}/AppraisalsMediationModuleWeb/sca/AppraisalsAPIExport1</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="TP101_020_eService_Create_Shop_Appraisal failed - HTTP Reponse not 200 OK" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="APPRAISAL_ID" enabled="true">
              <stringProp name="TestPlan.comments">&quot;APPRAISAL_ID&quot;|&quot;LB=&lt;AppraisalId&gt;&quot;|&quot;RB=&lt;/AppraisalId&gt;&quot;|&quot;Search=Body&quot;|&quot;IgnoreRedirections=Yes&quot;|&quot;NotFound=WARNING&quot;|</stringProp>
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">APPRAISAL_ID</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;AppraisalId&gt;(.*?)&lt;/AppraisalId&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">null</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Error_Code" enabled="true">
              <stringProp name="TestPlan.comments">&quot;Error_Code&quot;|&quot;LB=&lt;Code&gt;&quot;|&quot;RB=&lt;/Code&gt;&quot;|&quot;Search=Body&quot;|&quot;IgnoreRedirections=Yes&quot;|&quot;NotFound=WARNING&quot;|</stringProp>
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">Error_Code</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;Code&gt;(.*?)&lt;/Code&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">null</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Error_Description" enabled="true">
              <stringProp name="TestPlan.comments">&quot;Error_Description&quot;|&quot;LB=&lt;Description&gt;&quot;|&quot;RB=&lt;/Description&gt;&quot;|&quot;Search=Body&quot;|&quot;IgnoreRedirections=Yes&quot;|&quot;NotFound=WARNING&quot;|</stringProp>
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">Error_Description</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;Description&gt;(.*?)&lt;/Description&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">null</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="TP101_020_eService_Create_Shop_Appraisal failed - Error Code: ${Error_Code}, Error Description: ${Error_Description}, Incident ID: ${INCIDENTID}, Recipient Number: ${RECIPIENTNUMBER}" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1076604733">&lt;AssessmentLineEvent&gt;Assignment Scheduled&lt;/AssessmentLineEvent&gt;</stringProp>
                <stringProp name="484346848">&lt;AssessmentLineEvent&gt;Assignment In Queue&lt;/AssessmentLineEvent&gt;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">20</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If &quot;SUCCESS_Count&quot;!=&quot;null&quot; &amp;&amp; &quot;ASSIGNMENT_Count&quot;!=&quot;null&quot; || &quot;ASSIGNMENT_Count2&quot;!=&quot;null&quot; - TP101_030_eService_Cancel_Appraisal" enabled="true">
            <stringProp name="IfController.condition">&quot;SUCCESS_Count&quot;!=&quot;null&quot; &amp;&amp; &quot;ASSIGNMENT_Count&quot;!=&quot;null&quot; || &quot;ASSIGNMENT_Count2&quot;!=&quot;null&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TP101_030_eService_Cancel_Appraisal" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:app=&quot;http://pm.lmig.com/cl/AppraisalsLibrary/AppraisalsAPI&quot;&gt;	&lt;soap:Header/&gt;	&lt;soap:Body&gt;		&lt;app:cancelAppraisal&gt;			&lt;CancelRequest&gt;		    	&lt;RequestId&gt;&lt;/RequestId&gt;		    	&lt;Requestor&gt;${REQUESTOR}&lt;/Requestor&gt;    			&lt;UserID&gt;&lt;/UserID&gt;    			&lt;AppraisalId&gt;${APPRAISAL_ID}&lt;/AppraisalId&gt; 			&lt;/CancelRequest&gt;		&lt;/app:cancelAppraisal&gt;	&lt;/soap:Body&gt;&lt;/soap:Envelope&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_APPRAISALS}/AppraisalsMediationModuleWeb/sca/AppraisalsAPIExport1</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <boolProp name="HTTPSampler.image_parser">true</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="TP101_020_eService_Create_Shop_Appraisal failed - HTTP Reponse not 200 OK" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="APPRAISAL_ID" enabled="true">
                <stringProp name="TestPlan.comments">&quot;APPRAISAL_ID&quot;|&quot;LB=&lt;AppraisalId&gt;&quot;|&quot;RB=&lt;/AppraisalId&gt;&quot;|&quot;Search=Body&quot;|&quot;IgnoreRedirections=Yes&quot;|&quot;NotFound=WARNING&quot;|</stringProp>
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">APPRAISAL_ID</stringProp>
                <stringProp name="RegexExtractor.regex">&lt;AppraisalId&gt;(.*?)&lt;/AppraisalId&gt;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">null</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Error_Code" enabled="true">
                <stringProp name="TestPlan.comments">&quot;Error_Code&quot;|&quot;LB=&lt;Code&gt;&quot;|&quot;RB=&lt;/Code&gt;&quot;|&quot;Search=Body&quot;|&quot;IgnoreRedirections=Yes&quot;|&quot;NotFound=WARNING&quot;|</stringProp>
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">Error_Code</stringProp>
                <stringProp name="RegexExtractor.regex">&lt;Code&gt;(.*?)&lt;/Code&gt;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">null</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Error_Description" enabled="true">
                <stringProp name="TestPlan.comments">&quot;Error_Description&quot;|&quot;LB=&lt;Description&gt;&quot;|&quot;RB=&lt;/Description&gt;&quot;|&quot;Search=Body&quot;|&quot;IgnoreRedirections=Yes&quot;|&quot;NotFound=WARNING&quot;|</stringProp>
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">Error_Description</stringProp>
                <stringProp name="RegexExtractor.regex">&lt;Description&gt;(.*?)&lt;/Description&gt;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">null</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="TP101_020_eService_Create_Shop_Appraisal failed - Error Code: ${Error_Code}, Error Description: ${Error_Description}, Incident ID: ${INCIDENTID}, Appraisal ID: ${APPRAISALID}" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-844402436">AssessmentLineEvent&gt;Cancelation Requested&lt;/AssessmentLineEvent&gt;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
