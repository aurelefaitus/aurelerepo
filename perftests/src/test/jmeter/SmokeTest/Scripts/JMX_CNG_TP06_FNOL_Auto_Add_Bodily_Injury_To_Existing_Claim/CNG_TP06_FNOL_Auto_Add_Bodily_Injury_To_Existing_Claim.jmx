<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="2.9" jmeter="3.0 r1743807">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="TF_CNG_TP06_FNOL_Auto_Add_Bodily_Injury_To_Existing_Claim" enabled="true"/>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="DATE" elementType="Argument">
              <stringProp name="Argument.name">DATE</stringProp>
              <stringProp name="Argument.value">${__time(MM/dd/yyyy)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="ThinkTime" enabled="true">
          <stringProp name="ConstantTimer.delay">${CNG_TP06_FNOL_Auto_Add_Bodily_Injury_To_Existing_Claim_ThinkTime}</stringProp>
          <stringProp name="TestPlan.comments">   Converting seconds to milliseconds - 20s x 1000</stringProp>
        </ConstantTimer>
        <hashTree/>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="CookieManager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">true</boolProp>
        </CookieManager>
        <hashTree/>
        <CacheManager guiclass="CacheManagerGui" testclass="CacheManager" testname="HTTP Cache Manager" enabled="true">
          <boolProp name="clearEachIteration">true</boolProp>
          <boolProp name="useExpires">false</boolProp>
        </CacheManager>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="SERVER CSV Data Set Config" enabled="true">
          <stringProp name="filename">${test_path}..${PATH_SEP}Scripts${PATH_SEP}JMX_CNG_TP06_FNOL_Auto_Add_Bodily_Injury_To_Existing_Claim${PATH_SEP}SERVER.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">SERVER</stringProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
          <stringProp name="TestPlan.comments">SERVER</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="nNumbers CSV Data Set Config" enabled="true">
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="filename">${test_path}..${PATH_SEP}Scripts${PATH_SEP}JMX_CNG_TP06_FNOL_Auto_Add_Bodily_Injury_To_Existing_Claim${PATH_SEP}nNumbers.csv</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <stringProp name="shareMode.all">shareMode</stringProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="variableNames">USERNAME,PASSWORD</stringProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
          <stringProp name="TestPlan.comments">USERNAME,PASSWORD</stringProp>
        </CSVDataSet>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="-LOGIN" enabled="true">
          <stringProp name="TestPlan.comments">This section contains the LOGIN part of Loadrunner</stringProp>
        </GenericController>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP06_A_Launch_Browser" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <boolProp name="HTTPSampler.image_parser">true</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">DNT</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-683626894">Please log in using your Enterprise ID and password</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cSMAGENTNAME" enabled="true">
                <stringProp name="TestPlan.comments">&quot;ParamName=cSMAGENTNAME&quot;|&quot;RegExp=SMAGENTNAME=(.*?)&amp;TARGET&quot;|SEARCH_FILTERS,&quot;Scope=Headers&quot;|&quot;IgnoreRedirections=No&quot;|&quot;RequestUrl=*/ClaimCenter.do*&quot;|</stringProp>
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">cSMAGENTNAME</stringProp>
                <stringProp name="RegexExtractor.regex">SMAGENTNAME\=(.*?)&amp;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">null</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cTYPE" enabled="true">
                <stringProp name="TestPlan.comments">&quot;ParamName=cTYPE&quot;|&quot;RegExp=TYPE=(.*?)&amp;REALMOID&quot;|SEARCH_FILTERS,&quot;Scope=Headers&quot;|&quot;IgnoreRedirections=No&quot;|&quot;RequestUrl=*/ClaimCenter.do*&quot;|</stringProp>
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">cTYPE</stringProp>
                <stringProp name="RegexExtractor.regex">TYPE=(.*?)&amp;amp;REALMOID</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">null</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cREALMOID" enabled="true">
                <stringProp name="TestPlan.comments">&quot;ParamName=cREALMOID&quot;|&quot;RegExp=REALMOID=(.*?)&amp;GUID&quot;|SEARCH_FILTERS,&quot;Scope=Headers&quot;|&quot;IgnoreRedirections=No&quot;|&quot;RequestUrl=*/ClaimCenter.do*&quot;|</stringProp>
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">cREALMOID</stringProp>
                <stringProp name="RegexExtractor.regex">REALMOID=(.*?)&amp;amp;GUID</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">null</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <ResultAction guiclass="ResultActionGui" testclass="ResultAction" testname="Result Status Action Handler" enabled="true">
                <intProp name="OnError.action">4</intProp>
              </ResultAction>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ThinkTime - 10" enabled="true">
              <stringProp name="TestPlan.comments">This transaction will wait for 10 seconds</stringProp>
            </GenericController>
            <hashTree>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="ThinkTime" enabled="true">
                <stringProp name="ConstantTimer.delay">10000</stringProp>
                <stringProp name="TestPlan.comments">   Converting seconds to milliseconds - 10s x 1000</stringProp>
              </ConstantTimer>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP06_B_Login" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PMClaimCenterLogin.fcc" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="USER" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">USER</stringProp>
                    <stringProp name="Argument.value">${USERNAME}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="PASSWORD" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">PASSWORD</stringProp>
                    <stringProp name="Argument.value">${PASSWORD}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="target" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">target</stringProp>
                    <stringProp name="Argument.value">http://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="smauthreason" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">smauthreason</stringProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/LMAuth/PMClaimCenterLogin.fcc?TYPE=${cTYPE}&amp;REALMOID=${cREALMOID}&amp;GUID=&amp;SMAUTHREASON=0&amp;METHOD=GET&amp;SMAGENTNAME=${cSMAGENTNAME}&amp;TARGET=-SM-http%3a%2f%2fperf--pmclaimcenter--internal%2elibertyec%2ecom%2fcc%2fClaimCenter%2edo</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <boolProp name="HTTPSampler.image_parser">true</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">DNT</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="CNG_TP06_B_Login -- nNumber unable to Login, ${USERNAME}" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1822264439">GENERAL_MSG_CAT_SSL_ERROR</stringProp>
                  <stringProp name="-927154469">User not setup in ClaimCenter</stringProp>
                  <stringProp name="-27349170">Internal Server Error</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">20</intProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="CNG_TP06_B_Login -- nNumber unable to Login, ${USERNAME}" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-252897267">Activities</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cDESKTOPMENUACTIONS Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">cDESKTOPMENUACTIONS</stringProp>
                <stringProp name="RegexExtractor.regex">Profile&quot;}],&quot;defaultType&quot;:&quot;gmenuitem&quot;},&quot;xtype&quot;:&quot;gbutton&quot;,&quot;noaction&quot;:1,&quot;checksum&quot;:&quot;(.*?)&quot;,</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">null</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cTBLINKS Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">cTBLINKS</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;}],&quot;checksum&quot;:&quot;(.*?)&quot;},</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">null</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cTABS Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">cTABS</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;id&quot;:&quot;TabBar:VacationTab&quot;,&quot;text&quot;:&quot;Vacation&quot;,&quot;menu&quot;:\{&quot;defaultType&quot;:&quot;gmenuitem&quot;},&quot;xtype&quot;:&quot;gbutton&quot;,&quot;disabled&quot;:true}],&quot;checksum&quot;:&quot;(.*?)&quot;}},\{</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">null</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cINFOBAR_0 Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">cINFOBAR_0</stringProp>
                <stringProp name="RegexExtractor.regex">topActivitiesScreen:0&quot;,&quot;text&quot;:&quot;Activities&quot;,&quot;cls&quot;:&quot;x-panel-header-text&quot;,&quot;xtype&quot;:&quot;box&quot;}]}]},&quot;infoBar&quot;:\{&quot;hidden&quot;:true,&quot;checksum&quot;:&quot;(.*?)&quot;},</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">null</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">cDESKTOPMENULINKS</stringProp>
                <stringProp name="RegexExtractor.regex">Report&quot;,&quot;eventId&quot;:&quot;Desktop:MenuLinks:Desktop_MarketingReport&quot;}],&quot;xtype&quot;:&quot;accordionpanel&quot;,&quot;checksum&quot;:&quot;(.*?)&quot;,</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">null</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname"></stringProp>
                <stringProp name="RegexExtractor.regex"></stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">null</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <ResultAction guiclass="ResultActionGui" testclass="ResultAction" testname="Result Status Action Handler" enabled="true">
                <intProp name="OnError.action">4</intProp>
              </ResultAction>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor CNG_TP06_B_Login" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">aa29db4a-3c42-4a10-9b0e-689135a8626e</stringProp>
                <stringProp name="script">	vars.put(&quot;cDESKTOPMENULINKS_URL2&quot;,java.net.URLDecoder.decode(vars.get(&quot;cDESKTOPMENULINKS&quot;), &quot;UTF-8&quot;));
	vars.put(&quot;cINFOBAR_0_URL2&quot;,java.net.URLDecoder.decode(vars.get(&quot;cINFOBAR_0&quot;), &quot;UTF-8&quot;));
	vars.put(&quot;cTABS_URL2&quot;,java.net.URLDecoder.decode(vars.get(&quot;cTABS&quot;), &quot;UTF-8&quot;));
	vars.put(&quot;cTBLINKS_URL2&quot;,java.net.URLDecoder.decode(vars.get(&quot;cTBLINKS&quot;), &quot;UTF-8&quot;));
	vars.put(&quot;cDESKTOPMENUACTIONS_URL2&quot;,java.net.URLDecoder.decode(vars.get(&quot;cDESKTOPMENUACTIONS&quot;), &quot;UTF-8&quot;));
</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ThinkTime - 10" enabled="true">
              <stringProp name="TestPlan.comments">This transaction will wait for 10 seconds</stringProp>
            </GenericController>
            <hashTree>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="ThinkTime" enabled="true">
                <stringProp name="ConstantTimer.delay">10000</stringProp>
                <stringProp name="TestPlan.comments">   Converting seconds to milliseconds - 10s x 1000</stringProp>
              </ConstantTimer>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="RUN x ( 2 )" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </LoopController>
        <hashTree>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="TP06a CSV Data Set Config" enabled="true">
            <stringProp name="delimiter">,</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="filename">${test_path}..${PATH_SEP}Scripts${PATH_SEP}JMX_CNG_TP06_FNOL_Auto_Add_Bodily_Injury_To_Existing_Claim${PATH_SEP}TP06a.csv</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <stringProp name="shareMode.all">shareMode</stringProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="variableNames">POLICYNUMBER,POLEFFDATE,POLEXPDATE,PHONENUMBER,LASTNAME,FIRSTNAME,STATE,POLICYTYPE,AGREEMENTSOURCE,Script</stringProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="VEHICLES CSV Data Set Config" enabled="true">
            <stringProp name="filename">${test_path}..${PATH_SEP}Scripts${PATH_SEP}JMX_CNG_TP06_FNOL_Auto_Add_Bodily_Injury_To_Existing_Claim${PATH_SEP}VEHICLES.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames">YEAR,MAKE,MODEL</stringProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
            <stringProp name="TestPlan.comments">YEAR,MAKE,MODEL</stringProp>
          </CSVDataSet>
          <hashTree/>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="NEWSTREET CSV Data Set Config" enabled="true">
            <stringProp name="filename">${test_path}..${PATH_SEP}Scripts${PATH_SEP}JMX_CNG_TP06_FNOL_Auto_Add_Bodily_Injury_To_Existing_Claim${PATH_SEP}NEWSTREET.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames">NEWSTREET,NEWCITY,NEWCOUNTY,NEWADDRESSSTATE</stringProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
            <stringProp name="TestPlan.comments">NEWSTREET,NEWCITY,NEWCOUNTY,NEWADDRESSSTATE</stringProp>
          </CSVDataSet>
          <hashTree/>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="RANDOMLETTERSFN CSV Data Set Config" enabled="true">
            <stringProp name="filename">${test_path}..${PATH_SEP}Scripts${PATH_SEP}JMX_CNG_TP06_FNOL_Auto_Add_Bodily_Injury_To_Existing_Claim${PATH_SEP}RANDOMLETTERSFN.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames">RANDOMLETTERSFN,RANDOMLETTERSLN</stringProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
            <stringProp name="TestPlan.comments">RANDOMLETTERSFN,RANDOMLETTERSLN</stringProp>
          </CSVDataSet>
          <hashTree/>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If &quot;${POLEXPDATE}&quot; != &quot;POL_EXP_DT&quot; &amp;&amp;&quot;${POLEFFDATE}&quot; != &quot;POL_EFF_DT&quot;" enabled="true">
            <stringProp name="IfController.condition">&quot;${POLEXPDATE}&quot; != &quot;POL_EXP_DT&quot; &amp;&amp;&quot;${POLEFFDATE}&quot; != &quot;POL_EFF_DT&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Pacing" enabled="true">
              <intProp name="ActionProcessor.action">1</intProp>
              <intProp name="ActionProcessor.target">0</intProp>
              <stringProp name="ActionProcessor.duration">${CNG_TP06_FNOL_Auto_Add_Bodily_Injury_To_Existing_Claim_Pacing}</stringProp>
            </TestAction>
            <hashTree/>
            <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="RANDOMNUMBER" enabled="true">
              <stringProp name="variableName">RANDOMNUMBER</stringProp>
              <stringProp name="outputFormat"></stringProp>
              <stringProp name="minimumValue">1</stringProp>
              <stringProp name="maximumValue">30</stringProp>
              <stringProp name="randomSeed"></stringProp>
              <boolProp name="perThread">false</boolProp>
            </RandomVariableConfig>
            <hashTree/>
            <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="RANDOMNUMBERNAME" enabled="true">
              <stringProp name="variableName">RANDOMNUMBERNAME</stringProp>
              <stringProp name="outputFormat"></stringProp>
              <stringProp name="minimumValue">1</stringProp>
              <stringProp name="maximumValue">1000</stringProp>
              <stringProp name="randomSeed"></stringProp>
              <boolProp name="perThread">false</boolProp>
            </RandomVariableConfig>
            <hashTree/>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="-NEWCLAIM" enabled="true">
              <stringProp name="TestPlan.comments">This section contains the NEWCLAIM part of Loadrunner</stringProp>
            </GenericController>
            <hashTree>
              <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP06_C_Activities_New_Claim" enabled="true">
                <boolProp name="TransactionController.includeTimers">false</boolProp>
                <boolProp name="TransactionController.parent">true</boolProp>
              </TransactionController>
              <hashTree>
                <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Generator for DOL Beanshell" enabled="true">
                  <stringProp name="maximumValue">30</stringProp>
                  <stringProp name="minimumValue">1</stringProp>
                  <stringProp name="outputFormat"></stringProp>
                  <boolProp name="perThread">false</boolProp>
                  <stringProp name="randomSeed"></stringProp>
                  <stringProp name="variableName">RandDate1</stringProp>
                </RandomVariableConfig>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_2" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">TabBar%3AClaimTab%3AClaimTab_FindClaim=&amp;QuickJump=&amp;Desktop%3AMenuLinks_toggle=&amp;DesktopActivities%3ADesktopActivitiesScreen%3ADesktopActivitiesLV%3ADesktopActivitiesFilter=AndFilter%2FMy%20activities%20today&amp;%3Atblinks=${cTBLINKS_URL2}&amp;%3Atabs=${cTABS_URL2}&amp;infoBar=${cINFOBAR_0_URL2}&amp;Desktop%3ADesktopMenuActions=${cDESKTOPMENUACTIONS_URL2}&amp;Desktop%3AMenuLinks=${cDESKTOPMENULINKS_URL2}&amp;csrfToken=&amp;eventSource=TabBar%3AClaimTab%3AClaimTab_FNOLWizard_Auto_act&amp;objFocusId=TabBar%3AClaimTab%3AClaimTab_FNOLWizard_Auto</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                  <boolProp name="HTTPSampler.image_parser">true</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">Accept-Language</stringProp>
                        <stringProp name="Header.value">en-US</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="DOL BeanShell Prepocessor" enabled="true">
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="script">	import java.text.*;
	//import java.lang.*;
	//log.info(vars.get(&quot;POL_EFF_DATE&quot;));
	//log.info(&quot;The value of policy effective date &quot;+vars.get(&quot;POLEFFDATE&quot;) +&quot;  The value of expirty date is &quot;+vars.get(&quot;POLEXPDATE&quot;));
	try
	{
	SimpleDateFormat sdf = new SimpleDateFormat(&quot;MM/dd/yyyy&quot;);
	SimpleDateFormat sdf1 = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);
	Calendar DOfL = Calendar.getInstance(); 
	Calendar C_peffdate = Calendar.getInstance();
	Calendar C_pexpdate = Calendar.getInstance();
	Calendar DOfL = Calendar.getInstance();
	Calendar C_currenttime= Calendar.getInstance();
	Date peffdate = new Date(vars.get(&quot;POLEFFDATE&quot;));
	Date pexpdate = new Date(vars.get(&quot;POLEXPDATE&quot;));
	
	//log.info(&quot;Policy Effective date:&quot;+sdf.format(peffdate).toString()+&quot; End Date: &quot;+sdf.format(pexpdate).toString()); 
	C_currenttime.setTime(new Date());
	C_peffdate.setTime(peffdate);
	C_pexpdate.setTime(pexpdate);
	DOfL.setTime(peffdate);
	//log.info(vars.get(&quot;RandDate&quot;));
	//${__Random(1,100,RandDate)}
	DOfL.add(Calendar.DATE, Integer.parseInt(vars.get(&quot;RandDate1&quot;)));
	//log.info(&quot;random variable value:&quot;+vars.get(&quot;RandDate1&quot;));
	//DOfL.add(Calendar.DATE, Integer.parseInt(vars.get(&quot;RandDate&quot;)));
	//DOfL.add(Calendar.MONTH, Integer.parseInt(vars.get(&quot;RandMonth&quot;)));
	/*if (DOfL.after(C_peffdate) &amp;&amp; DOfL.before(C_pexpdate) &amp;&amp; (DOfL.before(C_currenttime) || DOfL.before(C_currenttime) ) )
	{
		vars.put(&quot;DateOfLoss&quot;,sdf.format(DOfL.getTime()).toString());
		log.info(&quot;The valuse of of Date of Loss :&quot;+vars.get(&quot;DateOfLoss&quot;));
	}
	else
	{*/
	vars.put(&quot;DateOfLoss&quot;,&quot;0&quot;);
	//log.info(&quot;Before Loop&quot;+vars.get(&quot;DateOfLoss&quot;));
		while (vars.get(&quot;DateOfLoss&quot;).toString().equals(&quot;0&quot;))
		{
			if((DOfL.after(C_peffdate) &amp;&amp; DOfL.before(C_pexpdate) &amp;&amp; (DOfL.before(C_currenttime) || DOfL.before(C_currenttime))))
			{
				DOfL.add(Calendar.DATE, Integer.parseInt(vars.get(&quot;RandDate1&quot;)));
				//log.info(&quot;random variable value in IF condition:&quot;+Integer.parseInt(vars.get(&quot;RandDate1&quot;)));
			vars.put(&quot;DateOfLoss&quot;,sdf.format(DOfL.getTime()).toString());
			//log.info(&quot;The Date of loss value isxxx &quot;+vars.get(&quot;DateOfLoss&quot;));
			}
			//log.info(&quot;The Date of loss value isxxx &quot;+vars.get(&quot;DateOfLoss&quot;));
			
	//DOfL.add(Calendar.MONTH, Integer.parseInt(vars.get(&quot;RandMonth&quot;)));
	//log.info(&quot;While Loop The valuse of of Date of Loss :&quot;+vars.get(&quot;DateOfLoss&quot;));	
		}
	vars.put(&quot;DOL&quot;,vars.get(&quot;DateOfLoss&quot;));
	//log.info(&quot;The value of DOL is &quot; +vars.get(&quot;DOL&quot;));
	}
	catch(Throwable ex)
{
	log.error(&quot;Failed to do this or that&quot;, ex);
	
}
</stringProp>
                  </BeanShellPreProcessor>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="CNG_TP06_C_Activities_New_Claim -- Triage Screen is not displayed:  ${USERNAME}" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="1220007091">Attempt to use retired bean DRAFT</stringProp>
                      <stringProp name="-180821492">Insufficient Permission</stringProp>
                      <stringProp name="1926069336">Specify at least one of the following</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">20</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="CNG_TP06_C_Activities_New_Claim -- Triage Screen is not displayed:  ${USERNAME}" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-367896511">Triage and Policy Search</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cTBLINKS_1 Extractor" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">cTBLINKS_1</stringProp>
                    <stringProp name="RegexExtractor.regex">}],&quot;checksum&quot;:&quot;(.*?)&quot;},</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">null</stringProp>
                    <stringProp name="RegexExtractor.match_number">2</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cINFOBAR_1 Extractor" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">cINFOBAR_1</stringProp>
                    <stringProp name="RegexExtractor.regex">\\/span&gt;&quot;,&quot;cls&quot;:&quot;infobar_elem&quot;,&quot;noaction&quot;:1,&quot;disabled&quot;:true}],&quot;checksum&quot;:&quot;(.*?)&quot;},</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">null</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cFNOLMENUACTIONS Extractor" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">cFNOLMENUACTIONS</stringProp>
                    <stringProp name="RegexExtractor.regex">tions&quot;,&quot;ondemandmenu&quot;:true,&quot;cls&quot;:&quot;g-menuactions&quot;,&quot;menu&quot;:\{&quot;defaultType&quot;:&quot;gmenuitem&quot;},&quot;xtype&quot;:&quot;gbutton&quot;,&quot;noaction&quot;:1,&quot;checksum&quot;:&quot;(.*?)&quot;,</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">null</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cFNOLWIZARD0 Extractor" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">cFNOLWIZARD0</stringProp>
                    <stringProp name="RegexExtractor.regex">Claim&quot;,&quot;eventId&quot;:&quot;FNOLWizard:Summary&quot;,&quot;disabled&quot;:true}],&quot;xtype&quot;:&quot;accordionpanel&quot;,&quot;checksum&quot;:&quot;(.*?)&quot;,</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">null</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cFNOLWIZARD1 Extractor" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">cFNOLWIZARD1</stringProp>
                    <stringProp name="RegexExtractor.regex">ngpanel&quot;,&quot;disabled&quot;:true},\{&quot;title&quot;:&quot;Notes&quot;,&quot;eventId&quot;:&quot;FNOLWizard:Notes&quot;,&quot;disabled&quot;:true}],&quot;xtype&quot;:&quot;accordionpanel&quot;,&quot;checksum&quot;:&quot;(.*?)&quot;,</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">null</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="ResponseOk Extractor" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">ResponseOk</stringProp>
                    <stringProp name="RegexExtractor.regex">Triage and Policy Search(.*?)</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">null</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor CNG_TP06_C_Activities_New_Claim" enabled="true">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey">aa29db4a-3c42-4a10-9b0e-689135a8626e</stringProp>
                    <stringProp name="script">	vars.put(&quot;cFNOLWIZARD1_URL2&quot;,java.net.URLDecoder.decode(vars.get(&quot;cFNOLWIZARD1&quot;), &quot;UTF-8&quot;));
	vars.put(&quot;cFNOLWIZARD0_URL2&quot;,java.net.URLDecoder.decode(vars.get(&quot;cFNOLWIZARD0&quot;), &quot;UTF-8&quot;));
	vars.put(&quot;cFNOLMENUACTIONS_URL2&quot;,java.net.URLDecoder.decode(vars.get(&quot;cFNOLMENUACTIONS&quot;), &quot;UTF-8&quot;));
	vars.put(&quot;cINFOBAR_1_URL2&quot;,java.net.URLDecoder.decode(vars.get(&quot;cINFOBAR_1&quot;), &quot;UTF-8&quot;));
	vars.put(&quot;cTBLINKS_1_URL2&quot;,java.net.URLDecoder.decode(vars.get(&quot;cTBLINKS_1&quot;), &quot;UTF-8&quot;));
	vars.put(&quot;FIRSTNAME_URL2&quot;,java.net.URLDecoder.decode(vars.get(&quot;FIRSTNAME&quot;), &quot;UTF-8&quot;));
	vars.put(&quot;LASTNAME_URL2&quot;,java.net.URLDecoder.decode(vars.get(&quot;LASTNAME&quot;), &quot;UTF-8&quot;));
	vars.put(&quot;DOL_URL2&quot;,java.net.URLDecoder.decode(vars.get(&quot;DOL&quot;), &quot;UTF-8&quot;));

	
	
</stringProp>
                  </JSR223PostProcessor>
                  <hashTree/>
                </hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname"></stringProp>
                  <stringProp name="RegexExtractor.regex"></stringProp>
                  <stringProp name="RegexExtractor.template"></stringProp>
                  <stringProp name="RegexExtractor.default"></stringProp>
                  <stringProp name="RegexExtractor.match_number"></stringProp>
                </RegexExtractor>
                <hashTree/>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If &quot;${ResponseOk}&quot; == &quot;null&quot;" enabled="true">
                  <stringProp name="IfController.condition">&quot;${ResponseOk}&quot; == &quot;null&quot;</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="-LOGOUT" enabled="true">
                    <stringProp name="TestPlan.comments">This section contains the LOGOUT part of Loadrunner</stringProp>
                  </GenericController>
                  <hashTree>
                    <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP06_ZZL_Logout" enabled="true">
                      <boolProp name="TransactionController.includeTimers">false</boolProp>
                      <boolProp name="TransactionController.parent">true</boolProp>
                    </TransactionController>
                    <hashTree>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_132" enabled="true">
                        <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                          <collectionProp name="Arguments.arguments">
                            <elementProp name="" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.value">TabBar%3AClaimTab%3AClaimTab_FindClaim=&amp;QuickJump=&amp;Desktop%3AMenuLinks_toggle=&amp;DesktopActivities%3ADesktopActivitiesScreen%3ADesktopActivitiesLV%3ADesktopActivitiesFilter=AndFilter%2FMy%20activities%20today&amp;%3Atblinks=${cTBLINKS_URL2}&amp;%3Atabs=${cTABS_URL2}&amp;Desktop%3ADesktopMenuActions=${cDESKTOPMENUACTIONS_URL2}&amp;Desktop%3AMenuLinks=${cDESKTOPMENULINKS_URL2}&amp;csrfToken=&amp;eventSource=TabBar%3ALogoutTabBarLink_act&amp;objFocusId=TabBar%3ALogoutTabBarLink</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                          </collectionProp>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain"></stringProp>
                        <stringProp name="HTTPSampler.port"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        <stringProp name="HTTPSampler.protocol">https</stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                        <stringProp name="HTTPSampler.method">POST</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                        <boolProp name="HTTPSampler.image_parser">true</boolProp>
                        <boolProp name="HTTPSampler.monitor">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree>
                        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                          <collectionProp name="HeaderManager.headers">
                            <elementProp name="Accept-Language" elementType="Header">
                              <stringProp name="Header.name">DNT</stringProp>
                              <stringProp name="Header.value">1</stringProp>
                            </elementProp>
                          </collectionProp>
                        </HeaderManager>
                        <hashTree/>
                        <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                          <collectionProp name="Asserion.test_strings">
                            <stringProp name="1822264439">GENERAL_MSG_CAT_SSL_ERROR</stringProp>
                          </collectionProp>
                          <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                          <boolProp name="Assertion.assume_success">false</boolProp>
                          <intProp name="Assertion.test_type">20</intProp>
                        </ResponseAssertion>
                        <hashTree/>
                      </hashTree>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PMClaimCenterLogout.fcc" enabled="true">
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                          <collectionProp name="Arguments.arguments"/>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain"></stringProp>
                        <stringProp name="HTTPSampler.port"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        <stringProp name="HTTPSampler.protocol">https</stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/LMAuth/PMClaimCenterLogout.fcc</stringProp>
                        <stringProp name="HTTPSampler.method">GET</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                        <boolProp name="HTTPSampler.image_parser">true</boolProp>
                        <boolProp name="HTTPSampler.monitor">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree>
                        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                          <collectionProp name="HeaderManager.headers">
                            <elementProp name="Accept-Language" elementType="Header">
                              <stringProp name="Header.name">DNT</stringProp>
                              <stringProp name="Header.value">1</stringProp>
                            </elementProp>
                          </collectionProp>
                        </HeaderManager>
                        <hashTree/>
                      </hashTree>
                    </hashTree>
                  </hashTree>
                  <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Test Action" enabled="true">
                    <intProp name="ActionProcessor.action">3</intProp>
                    <intProp name="ActionProcessor.target">0</intProp>
                    <stringProp name="ActionProcessor.duration"></stringProp>
                  </TestAction>
                  <hashTree/>
                </hashTree>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="-POLICYSEARCHPHONE" enabled="true">
              <stringProp name="TestPlan.comments">This section contains the POLICYSEARCHPHONE part of Loadrunner</stringProp>
            </GenericController>
            <hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If ${RANDOMNUMBER} &lt;=15" enabled="true">
                <stringProp name="IfController.condition">${RANDOMNUMBER} &lt;=15</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP06_E_Triage_Search_Policy_Phone_Number" enabled="true">
                  <boolProp name="TransactionController.includeTimers">false</boolProp>
                  <boolProp name="TransactionController.parent">true</boolProp>
                </TransactionController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_81" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">TabBar%3AClaimTab%3AClaimTab_FindClaim=&amp;QuickJump=&amp;FNOLWizard%3A0_toggle=&amp;FNOLWizard%3A1_toggle=&amp;FNOLWizard%3AFNOLWizard_FindPolicyScreen%3ApolicyTypePageModeDV%3APolicyType=auto_per&amp;FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AScreenMode1=true&amp;FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AReportedByFN=&amp;FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AReportedByLN=&amp;FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AreportedByPhone=&amp;FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AClaim_ReportedByType=&amp;FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AFNOLWizardFindPolicyPanelSet%3APolicySearchSP%3ATriageAuto=&amp;FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AFNOLWizardFindPolicyPanelSet%3APolicySearchSP%3AdateAuto=${DOL_URL2}&amp;FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AFNOLWizardFindPolicyPanelSet%3APolicySearchSP%3AClaim_lossTimeAuto=12%3A00%20AM&amp;FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AFNOLWizardFindPolicyPanelSet%3APolicySearchSP%3AlossStateAuto=&amp;FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AFNOLWizardFindPolicyPanelSet%3APolicySearchSP%3AlossCategoryAuto=&amp;FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AFNOLWizardFindPolicyPanelSet%3APolicySearchSP%3AanyInjuryAuto=false&amp;PolicySearch.LM_SearchOption_Radio=FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AFNOLWizardFindPolicyPanelSet%3APolicySearchSP%3AphoneSearchAuto_Choice&amp;FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AFNOLWizardFindPolicyPanelSet%3APolicySearchSP%3AphoneAuto=${PHONENUMBER}&amp;%3Atblinks=${cTBLINKS_1_URL2}&amp;%3Atabs=${cTABS_URL2}&amp;infoBar=${cINFOBAR_1_URL2}&amp;FNOLWizard%3AFNOLMenuActions=${cFNOLMENUACTIONS_URL2}&amp;FNOLWizard%3A0=${cFNOLWIZARD0_URL2}&amp;FNOLWizard%3A1=${cFNOLWIZARD1_URL2}&amp;csrfToken=&amp;eventSource=_refresh_&amp;eventParam=FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AFNOLWizardFindPolicyPanelSet%3APolicySearchSP%3AClaim_lossTimeAuto&amp;objFocusId=FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AFNOLWizardFindPolicyPanelSet%3APolicySearchSP%3AClaim_lossTimeAuto</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <boolProp name="HTTPSampler.image_parser">true</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="Accept-Language" elementType="Header">
                          <stringProp name="Header.name">DNT</stringProp>
                          <stringProp name="Header.value">1</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="CNG_TP06_E_Triage_Search_Policy_Phone_Number-- Failed to retrive policy details ${PHONENUMBER}" enabled="true">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="-367896511">Triage and Policy Search</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">16</intProp>
                    </ResponseAssertion>
                    <hashTree/>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="CNG_TP06_E_Triage_Search_Policy_Phone_Number--Failed to retrive policy details ${PHONENUMBER}" enabled="true">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="2018118182">The search returned zero results</stringProp>
                        <stringProp name="-1505204672">This page is used to hold your data while you are being authorized for your request</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">20</intProp>
                    </ResponseAssertion>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_82" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">TabBar%3AClaimTab%3AClaimTab_FindClaim=&amp;QuickJump=&amp;FNOLWizard%3A0_toggle=&amp;FNOLWizard%3A1_toggle=&amp;FNOLWizard%3AFNOLWizard_FindPolicyScreen%3ApolicyTypePageModeDV%3APolicyType=auto_per&amp;FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AScreenMode1=true&amp;FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AReportedByFN=&amp;FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AReportedByLN=&amp;FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AreportedByPhone=&amp;FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AClaim_ReportedByType=&amp;FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AFNOLWizardFindPolicyPanelSet%3APolicySearchSP%3ATriageAuto=&amp;FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AFNOLWizardFindPolicyPanelSet%3APolicySearchSP%3AdateAuto=${DOL_URL2}&amp;FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AFNOLWizardFindPolicyPanelSet%3APolicySearchSP%3AClaim_lossTimeAuto=12%3A00%20AM&amp;FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AFNOLWizardFindPolicyPanelSet%3APolicySearchSP%3AlossStateAuto=${STATE}&amp;FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AFNOLWizardFindPolicyPanelSet%3APolicySearchSP%3AlossCategoryAuto=&amp;FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AFNOLWizardFindPolicyPanelSet%3APolicySearchSP%3AanyInjuryAuto=false&amp;PolicySearch.LM_SearchOption_Radio=FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AFNOLWizardFindPolicyPanelSet%3APolicySearchSP%3AphoneSearchAuto_Choice&amp;FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AFNOLWizardFindPolicyPanelSet%3APolicySearchSP%3AphoneAuto=${PHONENUMBER}&amp;%3Atblinks=${cTBLINKS_1_URL2}&amp;%3Atabs=${cTABS_URL2}&amp;infoBar=${cINFOBAR_1_URL2}&amp;FNOLWizard%3AFNOLMenuActions=${cFNOLMENUACTIONS_URL2}&amp;FNOLWizard%3A0=${cFNOLWIZARD0_URL2}&amp;FNOLWizard%3A1=${cFNOLWIZARD1_URL2}&amp;csrfToken=&amp;eventSource=FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AFNOLWizardFindPolicyPanelSet%3APolicySearchSP%3ASearch2_act&amp;objFocusId=FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AFNOLWizardFindPolicyPanelSet%3APolicySearchSP%3ASearch2</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <boolProp name="HTTPSampler.image_parser">true</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="Accept-Language" elementType="Header">
                          <stringProp name="Header.name">DNT</stringProp>
                          <stringProp name="Header.value">1</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                  </hashTree>
                  <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ThinkTime - 10" enabled="true">
                    <stringProp name="TestPlan.comments">This transaction will wait for 10 seconds</stringProp>
                  </GenericController>
                  <hashTree>
                    <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="ThinkTime" enabled="true">
                      <stringProp name="ConstantTimer.delay">10000</stringProp>
                      <stringProp name="TestPlan.comments">   Converting seconds to milliseconds - 10s x 1000</stringProp>
                    </ConstantTimer>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP06_H_Triage_Select_Policy" enabled="true">
                  <boolProp name="TransactionController.includeTimers">false</boolProp>
                  <boolProp name="TransactionController.parent">true</boolProp>
                </TransactionController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_6" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">TabBar%3AClaimTab%3AClaimTab_FindClaim=&amp;QuickJump=&amp;FNOLWizard%3A0_toggle=&amp;FNOLWizard%3A1_toggle=&amp;FNOLWizard%3AFNOLWizard_FindPolicyScreen%3ApolicyTypePageModeDV%3APolicyType=auto_per&amp;FNOLWizard%3AFNOLWizard_FindPolicyScreen%3ApolicyTypePageModeDV%3APolicyProviderType=liberty&amp;FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AScreenMode1=true&amp;FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AReportedByFN=&amp;FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AReportedByLN=&amp;FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AreportedByPhone=&amp;FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AreportedByPhoneExtn=&amp;FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AClaim_ReportedByType=&amp;FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AFNOLWizardFindPolicyPanelSet%3APolicySearchSP%3ATriageAuto=&amp;FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AFNOLWizardFindPolicyPanelSet%3APolicySearchSP%3AClaim_lossTimeAuto=12%3A00%20AM&amp;FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AFNOLWizardFindPolicyPanelSet%3APolicySearchSP%3AlossStateAuto=${STATE}&amp;FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AFNOLWizardFindPolicyPanelSet%3APolicySearchSP%3AlossCategoryAuto=&amp;FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AFNOLWizardFindPolicyPanelSet%3APolicySearchSP%3AanyInjuryAuto=false&amp;PolicySearch.LM_SearchOption_Radio=FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AFNOLWizardFindPolicyPanelSet%3APolicySearchSP%3ApolNumSearchAuto_Choice&amp;FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AFNOLWizardFindPolicyPanelSet%3APolicySearchSP%3ApolicyNumberAuto=${POLICYNUMBER}&amp;%3Atblinks=${cTBLINKS_1_URL2}&amp;%3Atabs=${cTABS_URL2}&amp;infoBar=${cINFOBAR_1_URL2}&amp;FNOLWizard%3AFNOLMenuActions=${cFNOLMENUACTIONS_URL2}&amp;FNOLWizard%3A0=${cFNOLWIZARD0_URL2}&amp;FNOLWizard%3A1=${cFNOLWIZARD1_URL2}&amp;csrfToken=&amp;eventSource=FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AFNOLWizardFindPolicyPanelSet%3APolicySearchSP%3APolicyResultLV%3A0%3AselectButton_act&amp;objFocusId=FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AFNOLWizardFindPolicyPanelSet%3APolicySearchSP%3APolicyResultLV%3A0%3AselectButton</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <boolProp name="HTTPSampler.image_parser">true</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="Accept-Language" elementType="Header">
                          <stringProp name="Header.name">DNT</stringProp>
                          <stringProp name="Header.value">1</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cINFOBAR_2 Extractor" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">cINFOBAR_2</stringProp>
                      <stringProp name="RegexExtractor.regex">\\/span&gt;&quot;,&quot;cls&quot;:&quot;infobar_elem&quot;,&quot;noaction&quot;:1,&quot;disabled&quot;:true}],&quot;checksum&quot;:&quot;(.*?)&quot;},</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">null</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cFNOLWIZARD0_1 Extractor" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">cFNOLWIZARD0_1</stringProp>
                      <stringProp name="RegexExtractor.regex">Claim&quot;,&quot;eventId&quot;:&quot;FNOLWizard:Summary&quot;,&quot;disabled&quot;:true}],&quot;xtype&quot;:&quot;accordionpanel&quot;,&quot;checksum&quot;:&quot;(.*?)&quot;,</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">null</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                  </hashTree>
                  <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ThinkTime - 10" enabled="true">
                    <stringProp name="TestPlan.comments">This transaction will wait for 10 seconds</stringProp>
                  </GenericController>
                  <hashTree>
                    <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="ThinkTime" enabled="true">
                      <stringProp name="ConstantTimer.delay">10000</stringProp>
                      <stringProp name="TestPlan.comments">   Converting seconds to milliseconds - 10s x 1000</stringProp>
                    </ConstantTimer>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP06_I_Triage_Next_To_Basic_Information" enabled="true">
                  <boolProp name="TransactionController.includeTimers">false</boolProp>
                  <boolProp name="TransactionController.parent">true</boolProp>
                </TransactionController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_83" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="TabBar:ClaimTab:ClaimTab_FindClaim" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">TabBar:ClaimTab:ClaimTab_FindClaim</stringProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="QuickJump" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">QuickJump</stringProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="FNOLWizard:0_toggle" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">FNOLWizard:0_toggle</stringProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="FNOLWizard:1_toggle" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">FNOLWizard:1_toggle</stringProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="FNOLWizard:FNOLWizard_FindPolicyScreen:policyTypePageModeDV:PolicyType" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">FNOLWizard:FNOLWizard_FindPolicyScreen:policyTypePageModeDV:PolicyType</stringProp>
                          <stringProp name="Argument.value">auto_per</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="FNOLWizard:FNOLWizard_FindPolicyScreen:ScreenMode1" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">FNOLWizard:FNOLWizard_FindPolicyScreen:ScreenMode1</stringProp>
                          <stringProp name="Argument.value">true</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="FNOLWizard:FNOLWizard_FindPolicyScreen:ReportedByFN" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">FNOLWizard:FNOLWizard_FindPolicyScreen:ReportedByFN</stringProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="FNOLWizard:FNOLWizard_FindPolicyScreen:ReportedByLN" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">FNOLWizard:FNOLWizard_FindPolicyScreen:ReportedByLN</stringProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="FNOLWizard:FNOLWizard_FindPolicyScreen:reportedByPhone" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">FNOLWizard:FNOLWizard_FindPolicyScreen:reportedByPhone</stringProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="FNOLWizard:FNOLWizard_FindPolicyScreen:Claim_ReportedByType" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">FNOLWizard:FNOLWizard_FindPolicyScreen:Claim_ReportedByType</stringProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:PolicySearchSP:TriageAuto" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:PolicySearchSP:TriageAuto</stringProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:PolicySearchSP:lossStateAuto" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:PolicySearchSP:lossStateAuto</stringProp>
                          <stringProp name="Argument.value">${STATE}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:PolicySearchSP:lossCategoryAuto" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:PolicySearchSP:lossCategoryAuto</stringProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:PolicySearchSP:anyInjuryAuto" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:PolicySearchSP:anyInjuryAuto</stringProp>
                          <stringProp name="Argument.value">false</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="PolicySearch.LM_SearchOption_Radio" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">PolicySearch.LM_SearchOption_Radio</stringProp>
                          <stringProp name="Argument.value">FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:PolicySearchSP:phoneSearchAuto_Choice</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:PolicySearchSP:phoneAuto" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:PolicySearchSP:phoneAuto</stringProp>
                          <stringProp name="Argument.value">${PHONENUMBER}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:ClaimMode" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:ClaimMode</stringProp>
                          <stringProp name="Argument.value">Auto</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name=":tblinks" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">:tblinks</stringProp>
                          <stringProp name="Argument.value">${cTBLINKS_1}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name=":tabs" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">:tabs</stringProp>
                          <stringProp name="Argument.value">${cTABS}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="infoBar" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">infoBar</stringProp>
                          <stringProp name="Argument.value">${cINFOBAR_2}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="FNOLWizard:FNOLMenuActions" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">FNOLWizard:FNOLMenuActions</stringProp>
                          <stringProp name="Argument.value">${cFNOLMENUACTIONS}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="FNOLWizard:0" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">FNOLWizard:0</stringProp>
                          <stringProp name="Argument.value">${cFNOLWIZARD0_1}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="FNOLWizard:1" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">FNOLWizard:1</stringProp>
                          <stringProp name="Argument.value">${cFNOLWIZARD1}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="csrfToken" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">csrfToken</stringProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="eventSource" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">eventSource</stringProp>
                          <stringProp name="Argument.value">FNOLWizard:Next_act</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="objFocusId" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">objFocusId</stringProp>
                          <stringProp name="Argument.value">FNOLWizard:Next</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <boolProp name="HTTPSampler.image_parser">true</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="Accept-Language" elementType="Header">
                          <stringProp name="Header.name">DNT</stringProp>
                          <stringProp name="Header.value">1</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="CNG_TP06_I_Triage_Next_To_Basic_Information -- Unverified Policy Search ${POLICYNUMBER} , ${POLEFFDATE} , ${POLEXPDATE} , ${PHONENUMBER} ,${LASTNAME},${FIRSTNAME} ,${STATE}, ${POLICYTYPE},${AGREEMENTSOURCE}" enabled="true">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="-2141785303">Loss Location State may disqualify this claim for creation in Navigator</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">20</intProp>
                    </ResponseAssertion>
                    <hashTree/>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="CNG_TP06_I_Triage_Next_To_Basic_Information -- Unverified Policy Search ${POLICYNUMBER} , ${POLEFFDATE} , ${POLEXPDATE} , ${PHONENUMBER} ,${LASTNAME},${FIRSTNAME} ,${STATE}, ${POLICYTYPE},${AGREEMENTSOURCE}" enabled="true">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="-2141785303">Loss Location State may disqualify this claim for creation in Navigator</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">20</intProp>
                    </ResponseAssertion>
                    <hashTree/>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="CNG_TP06_I_Triage_Next_To_Basic_Information -- Translation Error continuing with alternative flow, ${POLICYNUMBER} , ${POLEFFDATE} , ${POLEXPDATE} , ${PHONENUMBER} ,${LASTNAME},${FIRSTNAME} ,${STATE}, ${POLICYTYPE},${AGREEMENTSOURCE}" enabled="true">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="1411162009">Translation Error</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">20</intProp>
                    </ResponseAssertion>
                    <hashTree/>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="Accept-Language" elementType="Header">
                          <stringProp name="Header.name">DNT</stringProp>
                          <stringProp name="Header.value">1</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cINFOBAR_3 Extractor" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">cINFOBAR_3</stringProp>
                      <stringProp name="RegexExtractor.regex">\\/span&gt;&quot;,&quot;cls&quot;:&quot;infobar_elem&quot;,&quot;noaction&quot;:1,&quot;disabled&quot;:true}],&quot;checksum&quot;:&quot;(.*?)&quot;},</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">null</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cINFOBAR_4 Extractor" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">cINFOBAR_4</stringProp>
                      <stringProp name="RegexExtractor.regex">,&quot;checksum&quot;:&quot;(.*?)&quot;},</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">null</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cFNOLWIZARD0_2 Extractor" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">cFNOLWIZARD0_2</stringProp>
                      <stringProp name="RegexExtractor.regex">Claim&quot;,&quot;eventId&quot;:&quot;FNOLWizard:Summary&quot;,&quot;disabled&quot;:true}],&quot;xtype&quot;:&quot;accordionpanel&quot;,&quot;checksum&quot;:&quot;(.*?)&quot;,</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">null</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cFNOLWIZARD1_1 Extractor" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">cFNOLWIZARD1_1</stringProp>
                      <stringProp name="RegexExtractor.regex">rProfile&quot;}],&quot;xtype&quot;:&quot;noncollapsingpanel&quot;},\{&quot;title&quot;:&quot;Notes&quot;,&quot;eventId&quot;:&quot;FNOLWizard:Notes&quot;}],&quot;xtype&quot;:&quot;accordionpanel&quot;,&quot;checksum&quot;:&quot;(.*?)&quot;,</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">null</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cPERSON Extractor" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">cPERSON</stringProp>
                      <stringProp name="RegexExtractor.regex">Person:(.*?)&quot;,</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">null</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                    <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor CNG_TP06_I_Triage_Next_To_Basic_Information" enabled="true">
                      <stringProp name="scriptLanguage">groovy</stringProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="cacheKey">aa29db4a-3c42-4a10-9b0e-689135a8626e</stringProp>
                      <stringProp name="script">	vars.put(&quot;cINFOBAR_4_URL2&quot;,java.net.URLDecoder.decode(vars.get(&quot;cINFOBAR_4&quot;), &quot;UTF-8&quot;));
</stringProp>
                    </JSR223PostProcessor>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="TranslationError Extractor" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">TranslationError</stringProp>
                      <stringProp name="RegexExtractor.regex">Translation(.*?)Error(.*?)</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">null</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="PossibleDuplicateClaims Extractor" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">PossibleDuplicateClaims</stringProp>
                      <stringProp name="RegexExtractor.regex">Possible Duplicate Claims(.*?)</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">null</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                  </hashTree>
                  <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ThinkTime - 10" enabled="true">
                    <stringProp name="TestPlan.comments">This transaction will wait for 10 seconds</stringProp>
                  </GenericController>
                  <hashTree>
                    <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="ThinkTime" enabled="true">
                      <stringProp name="ConstantTimer.delay">10000</stringProp>
                      <stringProp name="TestPlan.comments">   Converting seconds to milliseconds - 10s x 1000</stringProp>
                    </ConstantTimer>
                    <hashTree/>
                  </hashTree>
                  <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If &quot;${TranslationError}&quot; != &quot;null&quot;" enabled="true">
                    <stringProp name="IfController.condition">&quot;${TranslationError}&quot; != &quot;null&quot;</stringProp>
                    <boolProp name="IfController.evaluateAll">false</boolProp>
                  </IfController>
                  <hashTree>
                    <ResultAction guiclass="ResultActionGui" testclass="ResultAction" testname="Result Status Action Handler" enabled="true">
                      <intProp name="OnError.action">4</intProp>
                    </ResultAction>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If &quot;${PossibleDuplicateClaims}&quot; != &quot;null&quot;" enabled="true">
                  <stringProp name="IfController.condition">&quot;${PossibleDuplicateClaims}&quot; != &quot;null&quot;</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP06_L_Triage_Close_Duplicate_Claims" enabled="true">
                    <boolProp name="TransactionController.includeTimers">false</boolProp>
                    <boolProp name="TransactionController.parent">true</boolProp>
                  </TransactionController>
                  <hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_84" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="FNOLWizard:FNOLWizard_FindPolicyScreen:ReportedByLN" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:FNOLWizard_FindPolicyScreen:ReportedByLN</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:FNOLWizard_FindPolicyScreen:reportedByPhone" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:FNOLWizard_FindPolicyScreen:reportedByPhone</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="eventSource" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">eventSource</stringProp>
                            <stringProp name="Argument.value">NewClaimDuplicatesWorksheet:NewClaimDuplicatesScreen:NewClaimDuplicatesWorksheet_CloseButton_act</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="TabBar:ClaimTab:ClaimTab_FindClaim" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">TabBar:ClaimTab:ClaimTab_FindClaim</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="csrfToken" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">csrfToken</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="QuickJump" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">QuickJump</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:1" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:1</stringProp>
                            <stringProp name="Argument.value">${cFNOLWIZARD1}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:0_toggle" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:0_toggle</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:0" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:0</stringProp>
                            <stringProp name="Argument.value">${cFNOLWIZARD0_1}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:1_toggle" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:1_toggle</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:FNOLWizard_FindPolicyScreen:policyTypePageModeDV:PolicyType" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:FNOLWizard_FindPolicyScreen:policyTypePageModeDV:PolicyType</stringProp>
                            <stringProp name="Argument.value">auto_per</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:FNOLWizard_FindPolicyScreen:ScreenMode1" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:FNOLWizard_FindPolicyScreen:ScreenMode1</stringProp>
                            <stringProp name="Argument.value">true</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:FNOLWizard_FindPolicyScreen:ReportedByFN" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:FNOLWizard_FindPolicyScreen:ReportedByFN</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="objFocusId" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">objFocusId</stringProp>
                            <stringProp name="Argument.value">NewClaimDuplicatesWorksheet:NewClaimDuplicatesScreen:NewClaimDuplicatesWorksheet_CloseButton</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:FNOLMenuActions" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:FNOLMenuActions</stringProp>
                            <stringProp name="Argument.value">${cFNOLMENUACTIONS}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="infoBar" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">infoBar</stringProp>
                            <stringProp name="Argument.value">${cINFOBAR_3}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name=":tabs" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">:tabs</stringProp>
                            <stringProp name="Argument.value">${cTABS}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:PolicySearchSP:anyInjuryAuto" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:PolicySearchSP:anyInjuryAuto</stringProp>
                            <stringProp name="Argument.value">false</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:PolicySearchSP:lossCategoryAuto" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:PolicySearchSP:lossCategoryAuto</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:PolicySearchSP:lossStateAuto" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:PolicySearchSP:lossStateAuto</stringProp>
                            <stringProp name="Argument.value">${STATE}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:PolicySearchSP:TriageAuto" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:PolicySearchSP:TriageAuto</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name=":tblinks" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">:tblinks</stringProp>
                            <stringProp name="Argument.value">${cTBLINKS_1}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:ClaimMode" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:ClaimMode</stringProp>
                            <stringProp name="Argument.value">Auto</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:PolicySearchSP:phoneAuto" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:PolicySearchSP:phoneAuto</stringProp>
                            <stringProp name="Argument.value">${PHONENUMBER}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="PolicySearch.LM_SearchOption_Radio" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">PolicySearch.LM_SearchOption_Radio</stringProp>
                            <stringProp name="Argument.value">FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:PolicySearchSP:phoneSearchAuto_Choice</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:FNOLWizard_FindPolicyScreen:Claim_ReportedByType" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:FNOLWizard_FindPolicyScreen:Claim_ReportedByType</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol">https</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                      <stringProp name="HTTPSampler.method">POST</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                      <boolProp name="HTTPSampler.image_parser">true</boolProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="Accept-Language" elementType="Header">
                            <stringProp name="Header.name">DNT</stringProp>
                            <stringProp name="Header.value">1</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                  <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP06_M_Triage_Next_To_Basic_Information" enabled="true">
                    <boolProp name="TransactionController.includeTimers">false</boolProp>
                    <boolProp name="TransactionController.parent">true</boolProp>
                  </TransactionController>
                  <hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_85" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="FNOLWizard:FNOLWizard_FindPolicyScreen:ReportedByLN" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:FNOLWizard_FindPolicyScreen:ReportedByLN</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:FNOLWizard_FindPolicyScreen:reportedByPhone" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:FNOLWizard_FindPolicyScreen:reportedByPhone</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="eventSource" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">eventSource</stringProp>
                            <stringProp name="Argument.value">FNOLWizard:Next_act</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="TabBar:ClaimTab:ClaimTab_FindClaim" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">TabBar:ClaimTab:ClaimTab_FindClaim</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="csrfToken" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">csrfToken</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="QuickJump" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">QuickJump</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:1" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:1</stringProp>
                            <stringProp name="Argument.value">${cFNOLWIZARD1}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:0_toggle" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:0_toggle</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:0" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:0</stringProp>
                            <stringProp name="Argument.value">${cFNOLWIZARD0_1}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:1_toggle" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:1_toggle</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:FNOLWizard_FindPolicyScreen:policyTypePageModeDV:PolicyType" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:FNOLWizard_FindPolicyScreen:policyTypePageModeDV:PolicyType</stringProp>
                            <stringProp name="Argument.value">auto_per</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:FNOLWizard_FindPolicyScreen:ScreenMode1" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:FNOLWizard_FindPolicyScreen:ScreenMode1</stringProp>
                            <stringProp name="Argument.value">true</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:FNOLWizard_FindPolicyScreen:ReportedByFN" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:FNOLWizard_FindPolicyScreen:ReportedByFN</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="objFocusId" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">objFocusId</stringProp>
                            <stringProp name="Argument.value">FNOLWizard:Next</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:FNOLMenuActions" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:FNOLMenuActions</stringProp>
                            <stringProp name="Argument.value">${cFNOLMENUACTIONS}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="infoBar" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">infoBar</stringProp>
                            <stringProp name="Argument.value">${cINFOBAR_3}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name=":tabs" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">:tabs</stringProp>
                            <stringProp name="Argument.value">${cTABS}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:PolicySearchSP:anyInjuryAuto" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:PolicySearchSP:anyInjuryAuto</stringProp>
                            <stringProp name="Argument.value">false</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:PolicySearchSP:lossCategoryAuto" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:PolicySearchSP:lossCategoryAuto</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:PolicySearchSP:lossStateAuto" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:PolicySearchSP:lossStateAuto</stringProp>
                            <stringProp name="Argument.value">${STATE}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:PolicySearchSP:TriageAuto" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:PolicySearchSP:TriageAuto</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name=":tblinks" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">:tblinks</stringProp>
                            <stringProp name="Argument.value">${cTBLINKS_1}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:ClaimMode" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:ClaimMode</stringProp>
                            <stringProp name="Argument.value">Auto</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:PolicySearchSP:phoneAuto" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:PolicySearchSP:phoneAuto</stringProp>
                            <stringProp name="Argument.value">${PHONENUMBER}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="PolicySearch.LM_SearchOption_Radio" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">PolicySearch.LM_SearchOption_Radio</stringProp>
                            <stringProp name="Argument.value">FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:PolicySearchSP:phoneSearchAuto_Choice</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:FNOLWizard_FindPolicyScreen:Claim_ReportedByType" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:FNOLWizard_FindPolicyScreen:Claim_ReportedByType</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol">https</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                      <stringProp name="HTTPSampler.method">POST</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                      <boolProp name="HTTPSampler.image_parser">true</boolProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="Accept-Language" elementType="Header">
                            <stringProp name="Header.name">DNT</stringProp>
                            <stringProp name="Header.value">1</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                      <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cINFOBAR_4 Extractor" enabled="true">
                        <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                        <stringProp name="RegexExtractor.refname">cINFOBAR_4</stringProp>
                        <stringProp name="RegexExtractor.regex">,&quot;checksum&quot;:&quot;(.*?)&quot;},</stringProp>
                        <stringProp name="RegexExtractor.template">$1$</stringProp>
                        <stringProp name="RegexExtractor.default">null</stringProp>
                        <stringProp name="RegexExtractor.match_number">1</stringProp>
                      </RegexExtractor>
                      <hashTree/>
                      <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cFNOLWIZARD0_2 Extractor" enabled="true">
                        <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                        <stringProp name="RegexExtractor.refname">cFNOLWIZARD0_2</stringProp>
                        <stringProp name="RegexExtractor.regex">Claim&quot;,&quot;eventId&quot;:&quot;FNOLWizard:Summary&quot;,&quot;disabled&quot;:true}],&quot;xtype&quot;:&quot;accordionpanel&quot;,&quot;checksum&quot;:&quot;(.*?)&quot;,</stringProp>
                        <stringProp name="RegexExtractor.template">$1$</stringProp>
                        <stringProp name="RegexExtractor.default">null</stringProp>
                        <stringProp name="RegexExtractor.match_number">1</stringProp>
                      </RegexExtractor>
                      <hashTree/>
                      <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cFNOLWIZARD1_1 Extractor" enabled="true">
                        <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                        <stringProp name="RegexExtractor.refname">cFNOLWIZARD1_1</stringProp>
                        <stringProp name="RegexExtractor.regex">rProfile&quot;}],&quot;xtype&quot;:&quot;noncollapsingpanel&quot;},\{&quot;title&quot;:&quot;Notes&quot;,&quot;eventId&quot;:&quot;FNOLWizard:Notes&quot;}],&quot;xtype&quot;:&quot;accordionpanel&quot;,&quot;checksum&quot;:&quot;(.*?)&quot;,</stringProp>
                        <stringProp name="RegexExtractor.template">$1$</stringProp>
                        <stringProp name="RegexExtractor.default">null</stringProp>
                        <stringProp name="RegexExtractor.match_number">1</stringProp>
                      </RegexExtractor>
                      <hashTree/>
                      <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cPERSON Extractor" enabled="true">
                        <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                        <stringProp name="RegexExtractor.refname">cPERSON</stringProp>
                        <stringProp name="RegexExtractor.regex">Person:(.*?)&quot;,</stringProp>
                        <stringProp name="RegexExtractor.template">$1$</stringProp>
                        <stringProp name="RegexExtractor.default">null</stringProp>
                        <stringProp name="RegexExtractor.match_number">1</stringProp>
                      </RegexExtractor>
                      <hashTree/>
                    </hashTree>
                    <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ThinkTime - 10" enabled="true">
                      <stringProp name="TestPlan.comments">This transaction will wait for 10 seconds</stringProp>
                    </GenericController>
                    <hashTree>
                      <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="ThinkTime" enabled="true">
                        <stringProp name="ConstantTimer.delay">10000</stringProp>
                        <stringProp name="TestPlan.comments">   Converting seconds to milliseconds - 10s x 1000</stringProp>
                      </ConstantTimer>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                </hashTree>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="-POLICYSEARCHPOLICYNUMBER" enabled="true">
              <stringProp name="TestPlan.comments">This section contains the POLICYSEARCHPOLICYNUMBER part of Loadrunner</stringProp>
            </GenericController>
            <hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If ${RANDOMNUMBER} &gt; 15 &amp;&amp; ${RANDOMNUMBER} &lt;=20" enabled="true">
                <stringProp name="IfController.condition">${RANDOMNUMBER} &gt; 15 &amp;&amp; ${RANDOMNUMBER} &lt;=20</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP06_G_Triage_Search_Policy_Number" enabled="true">
                  <boolProp name="TransactionController.includeTimers">false</boolProp>
                  <boolProp name="TransactionController.parent">true</boolProp>
                </TransactionController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_3" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">TabBar%3AClaimTab%3AClaimTab_FindClaim=&amp;QuickJump=&amp;FNOLWizard%3A0_toggle=&amp;FNOLWizard%3A1_toggle=&amp;FNOLWizard%3AFNOLWizard_FindPolicyScreen%3ApolicyTypePageModeDV%3APolicyType=auto_per&amp;FNOLWizard%3AFNOLWizard_FindPolicyScreen%3ApolicyTypePageModeDV%3APolicyProviderType=liberty&amp;FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AScreenMode1=true&amp;FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AReportedByFN=&amp;FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AReportedByLN=&amp;FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AreportedByPhone=&amp;FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AreportedByPhoneExtn=&amp;FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AClaim_ReportedByType=&amp;FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AFNOLWizardFindPolicyPanelSet%3APolicySearchSP%3ATriageAuto=&amp;FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AFNOLWizardFindPolicyPanelSet%3APolicySearchSP%3AdateAuto=${DOL_URL2}&amp;FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AFNOLWizardFindPolicyPanelSet%3APolicySearchSP%3AClaim_lossTimeAuto=12%3A00%20AM&amp;FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AFNOLWizardFindPolicyPanelSet%3APolicySearchSP%3AlossStateAuto=&amp;FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AFNOLWizardFindPolicyPanelSet%3APolicySearchSP%3AlossCategoryAuto=&amp;FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AFNOLWizardFindPolicyPanelSet%3APolicySearchSP%3AanyInjuryAuto=false&amp;PolicySearch.LM_SearchOption_Radio=FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AFNOLWizardFindPolicyPanelSet%3APolicySearchSP%3AphoneSearchAuto_Choice&amp;FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AFNOLWizardFindPolicyPanelSet%3APolicySearchSP%3AphoneAuto=&amp;%3Atblinks=${cTBLINKS_1_URL2}&amp;%3Atabs=${cTABS_URL2}&amp;infoBar=${cINFOBAR_1_URL2}&amp;FNOLWizard%3AFNOLMenuActions=${cFNOLMENUACTIONS_URL2}&amp;FNOLWizard%3A0=${cFNOLWIZARD0_URL2}&amp;FNOLWizard%3A1=${cFNOLWIZARD1_URL2}&amp;csrfToken=&amp;eventSource=_refresh_&amp;eventParam=FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AFNOLWizardFindPolicyPanelSet%3APolicySearchSP%3AClaim_lossTimeAuto&amp;objFocusId=FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AFNOLWizardFindPolicyPanelSet%3APolicySearchSP%3AClaim_lossTimeAuto</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <boolProp name="HTTPSampler.image_parser">true</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="Accept-Language" elementType="Header">
                          <stringProp name="Header.name">DNT</stringProp>
                          <stringProp name="Header.value">1</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="CNG_TP06_G_Triage_Search_Policy_Number -- Policy not found ${POLICYNUMBER}" enabled="true">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="-367896511">Triage and Policy Search</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">16</intProp>
                    </ResponseAssertion>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_4" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">TabBar%3AClaimTab%3AClaimTab_FindClaim=&amp;QuickJump=&amp;FNOLWizard%3A0_toggle=&amp;FNOLWizard%3A1_toggle=&amp;FNOLWizard%3AFNOLWizard_FindPolicyScreen%3ApolicyTypePageModeDV%3APolicyType=auto_per&amp;FNOLWizard%3AFNOLWizard_FindPolicyScreen%3ApolicyTypePageModeDV%3APolicyProviderType=liberty&amp;FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AScreenMode1=true&amp;FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AReportedByFN=&amp;FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AReportedByLN=&amp;FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AreportedByPhone=&amp;FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AreportedByPhoneExtn=&amp;FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AClaim_ReportedByType=&amp;FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AFNOLWizardFindPolicyPanelSet%3APolicySearchSP%3ATriageAuto=&amp;FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AFNOLWizardFindPolicyPanelSet%3APolicySearchSP%3AdateAuto=${DOL_URL2}&amp;FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AFNOLWizardFindPolicyPanelSet%3APolicySearchSP%3AClaim_lossTimeAuto=12%3A00%20AM&amp;FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AFNOLWizardFindPolicyPanelSet%3APolicySearchSP%3AlossStateAuto=${STATE}&amp;FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AFNOLWizardFindPolicyPanelSet%3APolicySearchSP%3AlossCategoryAuto=&amp;FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AFNOLWizardFindPolicyPanelSet%3APolicySearchSP%3AanyInjuryAuto=false&amp;FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AFNOLWizardFindPolicyPanelSet%3APolicySearchSP%3AphoneAuto=&amp;PolicySearch.LM_SearchOption_Radio=FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AFNOLWizardFindPolicyPanelSet%3APolicySearchSP%3ApolNumSearchAuto_Choice&amp;%3Atblinks=${cTBLINKS_1_URL2}&amp;%3Atabs=${cTABS_URL2}&amp;infoBar=${cINFOBAR_1_URL2}&amp;FNOLWizard%3AFNOLMenuActions=${cFNOLMENUACTIONS_URL2}&amp;FNOLWizard%3A0=${cFNOLWIZARD0_URL2}&amp;FNOLWizard%3A1=${cFNOLWIZARD1_URL2}&amp;csrfToken=&amp;eventSource=_refresh_&amp;eventParam=FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AFNOLWizardFindPolicyPanelSet%3APolicySearchSP%3ApolNumSearchAuto_Choice&amp;objFocusId=FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AFNOLWizardFindPolicyPanelSet%3APolicySearchSP%3ApolNumSearchAuto_Choice</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <boolProp name="HTTPSampler.image_parser">true</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="Accept-Language" elementType="Header">
                          <stringProp name="Header.name">DNT</stringProp>
                          <stringProp name="Header.value">1</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_5" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">TabBar%3AClaimTab%3AClaimTab_FindClaim=&amp;QuickJump=&amp;FNOLWizard%3A0_toggle=&amp;FNOLWizard%3A1_toggle=&amp;FNOLWizard%3AFNOLWizard_FindPolicyScreen%3ApolicyTypePageModeDV%3APolicyType=auto_per&amp;FNOLWizard%3AFNOLWizard_FindPolicyScreen%3ApolicyTypePageModeDV%3APolicyProviderType=liberty&amp;FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AScreenMode1=true&amp;FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AReportedByFN=&amp;FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AReportedByLN=&amp;FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AreportedByPhone=&amp;FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AreportedByPhoneExtn=&amp;FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AClaim_ReportedByType=&amp;FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AFNOLWizardFindPolicyPanelSet%3APolicySearchSP%3ATriageAuto=&amp;FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AFNOLWizardFindPolicyPanelSet%3APolicySearchSP%3AdateAuto=${DOL_URL2}&amp;FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AFNOLWizardFindPolicyPanelSet%3APolicySearchSP%3AClaim_lossTimeAuto=12%3A00%20AM&amp;FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AFNOLWizardFindPolicyPanelSet%3APolicySearchSP%3AlossStateAuto=${STATE}&amp;FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AFNOLWizardFindPolicyPanelSet%3APolicySearchSP%3AlossCategoryAuto=&amp;FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AFNOLWizardFindPolicyPanelSet%3APolicySearchSP%3AanyInjuryAuto=false&amp;PolicySearch.LM_SearchOption_Radio=FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AFNOLWizardFindPolicyPanelSet%3APolicySearchSP%3ApolNumSearchAuto_Choice&amp;FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AFNOLWizardFindPolicyPanelSet%3APolicySearchSP%3ApolicyNumberAuto=${POLICYNUMBER}&amp;%3Atblinks=${cTBLINKS_1_URL2}&amp;%3Atabs=${cTABS_URL2}&amp;infoBar=${cINFOBAR_1_URL2}&amp;FNOLWizard%3AFNOLMenuActions=${cFNOLMENUACTIONS_URL2}&amp;FNOLWizard%3A0=${cFNOLWIZARD0_URL2}&amp;FNOLWizard%3A1=${cFNOLWIZARD1_URL2}&amp;csrfToken=&amp;eventSource=FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AFNOLWizardFindPolicyPanelSet%3APolicySearchSP%3ASearch2_act&amp;objFocusId=FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AFNOLWizardFindPolicyPanelSet%3APolicySearchSP%3ASearch2</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <boolProp name="HTTPSampler.image_parser">true</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="Accept-Language" elementType="Header">
                          <stringProp name="Header.name">DNT</stringProp>
                          <stringProp name="Header.value">1</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                  </hashTree>
                  <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ThinkTime - 10" enabled="true">
                    <stringProp name="TestPlan.comments">This transaction will wait for 10 seconds</stringProp>
                  </GenericController>
                  <hashTree>
                    <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="ThinkTime" enabled="true">
                      <stringProp name="ConstantTimer.delay">10000</stringProp>
                      <stringProp name="TestPlan.comments">   Converting seconds to milliseconds - 10s x 1000</stringProp>
                    </ConstantTimer>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP06_H_Triage_Select_Policy" enabled="true">
                  <boolProp name="TransactionController.includeTimers">false</boolProp>
                  <boolProp name="TransactionController.parent">true</boolProp>
                </TransactionController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_6" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">TabBar%3AClaimTab%3AClaimTab_FindClaim=&amp;QuickJump=&amp;FNOLWizard%3A0_toggle=&amp;FNOLWizard%3A1_toggle=&amp;FNOLWizard%3AFNOLWizard_FindPolicyScreen%3ApolicyTypePageModeDV%3APolicyType=auto_per&amp;FNOLWizard%3AFNOLWizard_FindPolicyScreen%3ApolicyTypePageModeDV%3APolicyProviderType=liberty&amp;FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AScreenMode1=true&amp;FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AReportedByFN=&amp;FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AReportedByLN=&amp;FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AreportedByPhone=&amp;FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AreportedByPhoneExtn=&amp;FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AClaim_ReportedByType=&amp;FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AFNOLWizardFindPolicyPanelSet%3APolicySearchSP%3ATriageAuto=&amp;FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AFNOLWizardFindPolicyPanelSet%3APolicySearchSP%3AClaim_lossTimeAuto=12%3A00%20AM&amp;FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AFNOLWizardFindPolicyPanelSet%3APolicySearchSP%3AlossStateAuto=${STATE}&amp;FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AFNOLWizardFindPolicyPanelSet%3APolicySearchSP%3AlossCategoryAuto=&amp;FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AFNOLWizardFindPolicyPanelSet%3APolicySearchSP%3AanyInjuryAuto=false&amp;PolicySearch.LM_SearchOption_Radio=FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AFNOLWizardFindPolicyPanelSet%3APolicySearchSP%3ApolNumSearchAuto_Choice&amp;FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AFNOLWizardFindPolicyPanelSet%3APolicySearchSP%3ApolicyNumberAuto=${POLICYNUMBER}&amp;%3Atblinks=${cTBLINKS_1_URL2}&amp;%3Atabs=${cTABS_URL2}&amp;infoBar=${cINFOBAR_1_URL2}&amp;FNOLWizard%3AFNOLMenuActions=${cFNOLMENUACTIONS_URL2}&amp;FNOLWizard%3A0=${cFNOLWIZARD0_URL2}&amp;FNOLWizard%3A1=${cFNOLWIZARD1_URL2}&amp;csrfToken=&amp;eventSource=FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AFNOLWizardFindPolicyPanelSet%3APolicySearchSP%3APolicyResultLV%3A0%3AselectButton_act&amp;objFocusId=FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AFNOLWizardFindPolicyPanelSet%3APolicySearchSP%3APolicyResultLV%3A0%3AselectButton</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <boolProp name="HTTPSampler.image_parser">true</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="Accept-Language" elementType="Header">
                          <stringProp name="Header.name">DNT</stringProp>
                          <stringProp name="Header.value">1</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cFNOLWIZARD0_1 Extractor" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">cFNOLWIZARD0_1</stringProp>
                      <stringProp name="RegexExtractor.regex">Claim&quot;,&quot;eventId&quot;:&quot;FNOLWizard:Summary&quot;,&quot;disabled&quot;:true}],&quot;xtype&quot;:&quot;accordionpanel&quot;,&quot;checksum&quot;:&quot;(.*?)&quot;,</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">null</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cINFOBAR_2 Extractor" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">cINFOBAR_2</stringProp>
                      <stringProp name="RegexExtractor.regex">\\/span&gt;&quot;,&quot;cls&quot;:&quot;infobar_elem&quot;,&quot;noaction&quot;:1,&quot;disabled&quot;:true}],&quot;checksum&quot;:&quot;(.*?)&quot;},</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">null</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                  </hashTree>
                  <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ThinkTime - 10" enabled="true">
                    <stringProp name="TestPlan.comments">This transaction will wait for 10 seconds</stringProp>
                  </GenericController>
                  <hashTree>
                    <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="ThinkTime" enabled="true">
                      <stringProp name="ConstantTimer.delay">10000</stringProp>
                      <stringProp name="TestPlan.comments">   Converting seconds to milliseconds - 10s x 1000</stringProp>
                    </ConstantTimer>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP06_I_Triage_Next_To_Basic_Information" enabled="true">
                  <boolProp name="TransactionController.includeTimers">false</boolProp>
                  <boolProp name="TransactionController.parent">true</boolProp>
                </TransactionController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_7" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="FNOLWizard:FNOLWizard_FindPolicyScreen:ReportedByFN" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">FNOLWizard:FNOLWizard_FindPolicyScreen:ReportedByFN</stringProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="FNOLWizard:FNOLWizard_FindPolicyScreen:ReportedByLN" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">FNOLWizard:FNOLWizard_FindPolicyScreen:ReportedByLN</stringProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="FNOLWizard:1" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">FNOLWizard:1</stringProp>
                          <stringProp name="Argument.value">${cFNOLWIZARD1}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="TabBar:ClaimTab:ClaimTab_FindClaim" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">TabBar:ClaimTab:ClaimTab_FindClaim</stringProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="FNOLWizard:0" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">FNOLWizard:0</stringProp>
                          <stringProp name="Argument.value">${cFNOLWIZARD0_1}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="QuickJump" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">QuickJump</stringProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="FNOLWizard:FNOLMenuActions" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">FNOLWizard:FNOLMenuActions</stringProp>
                          <stringProp name="Argument.value">${cFNOLMENUACTIONS}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="FNOLWizard:0_toggle" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">FNOLWizard:0_toggle</stringProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="infoBar" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">infoBar</stringProp>
                          <stringProp name="Argument.value">${cINFOBAR_2}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="FNOLWizard:1_toggle" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">FNOLWizard:1_toggle</stringProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="FNOLWizard:FNOLWizard_FindPolicyScreen:policyTypePageModeDV:PolicyType" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">FNOLWizard:FNOLWizard_FindPolicyScreen:policyTypePageModeDV:PolicyType</stringProp>
                          <stringProp name="Argument.value">auto_per</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="objFocusId" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">objFocusId</stringProp>
                          <stringProp name="Argument.value">FNOLWizard:Next</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="FNOLWizard:FNOLWizard_FindPolicyScreen:policyTypePageModeDV:PolicyProviderType" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">FNOLWizard:FNOLWizard_FindPolicyScreen:policyTypePageModeDV:PolicyProviderType</stringProp>
                          <stringProp name="Argument.value">liberty</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="eventSource" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">eventSource</stringProp>
                          <stringProp name="Argument.value">FNOLWizard:Next_act</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="FNOLWizard:FNOLWizard_FindPolicyScreen:ScreenMode1" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">FNOLWizard:FNOLWizard_FindPolicyScreen:ScreenMode1</stringProp>
                          <stringProp name="Argument.value">true</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="csrfToken" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">csrfToken</stringProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name=":tabs" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">:tabs</stringProp>
                          <stringProp name="Argument.value">${cTABS}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name=":tblinks" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">:tblinks</stringProp>
                          <stringProp name="Argument.value">${cTBLINKS_1}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:ClaimMode" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:ClaimMode</stringProp>
                          <stringProp name="Argument.value">Auto</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:PolicySearchSP:lossStateAuto" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:PolicySearchSP:lossStateAuto</stringProp>
                          <stringProp name="Argument.value">${STATE}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:PolicySearchSP:TriageAuto" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:PolicySearchSP:TriageAuto</stringProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="FNOLWizard:FNOLWizard_FindPolicyScreen:Claim_ReportedByType" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">FNOLWizard:FNOLWizard_FindPolicyScreen:Claim_ReportedByType</stringProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="FNOLWizard:FNOLWizard_FindPolicyScreen:reportedByPhoneExtn" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">FNOLWizard:FNOLWizard_FindPolicyScreen:reportedByPhoneExtn</stringProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:PolicySearchSP:policyNumberAuto" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:PolicySearchSP:policyNumberAuto</stringProp>
                          <stringProp name="Argument.value">${POLICYNUMBER}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="PolicySearch.LM_SearchOption_Radio" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">PolicySearch.LM_SearchOption_Radio</stringProp>
                          <stringProp name="Argument.value">FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:PolicySearchSP:polNumSearchAuto_Choice</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:PolicySearchSP:anyInjuryAuto" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:PolicySearchSP:anyInjuryAuto</stringProp>
                          <stringProp name="Argument.value">false</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:PolicySearchSP:lossCategoryAuto" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:PolicySearchSP:lossCategoryAuto</stringProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="FNOLWizard:FNOLWizard_FindPolicyScreen:reportedByPhone" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">FNOLWizard:FNOLWizard_FindPolicyScreen:reportedByPhone</stringProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <boolProp name="HTTPSampler.image_parser">true</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="Accept-Language" elementType="Header">
                          <stringProp name="Header.name">DNT</stringProp>
                          <stringProp name="Header.value">1</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cINFOBAR_3 Extractor" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">cINFOBAR_3</stringProp>
                      <stringProp name="RegexExtractor.regex">\\/span&gt;&quot;,&quot;cls&quot;:&quot;infobar_elem&quot;,&quot;noaction&quot;:1,&quot;disabled&quot;:true}],&quot;checksum&quot;:&quot;(.*?)&quot;},</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">null</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cINFOBAR_4 Extractor" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">cINFOBAR_4</stringProp>
                      <stringProp name="RegexExtractor.regex">,&quot;checksum&quot;:&quot;(.*?)&quot;},</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">null</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cFNOLWIZARD0_2 Extractor" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">cFNOLWIZARD0_2</stringProp>
                      <stringProp name="RegexExtractor.regex">Claim&quot;,&quot;eventId&quot;:&quot;FNOLWizard:Summary&quot;,&quot;disabled&quot;:true}],&quot;xtype&quot;:&quot;accordionpanel&quot;,&quot;checksum&quot;:&quot;(.*?)&quot;,</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">null</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cFNOLWIZARD1_1 Extractor" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">cFNOLWIZARD1_1</stringProp>
                      <stringProp name="RegexExtractor.regex">rProfile&quot;}],&quot;xtype&quot;:&quot;noncollapsingpanel&quot;},\{&quot;title&quot;:&quot;Notes&quot;,&quot;eventId&quot;:&quot;FNOLWizard:Notes&quot;}],&quot;xtype&quot;:&quot;accordionpanel&quot;,&quot;checksum&quot;:&quot;(.*?)&quot;,</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">null</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cPERSON Extractor" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">cPERSON</stringProp>
                      <stringProp name="RegexExtractor.regex">Person:(.*?)&quot;,</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">null</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="CNG_TP06_I_Triage_Next_To_Basic_Information -- Unverified Policy Search ${POLICYNUMBER} , ${POLEFFDATE} , ${POLEXPDATE} , ${PHONENUMBER} ,${LASTNAME},${FIRSTNAME} ,${STATE}, ${POLICYTYPE},${AGREEMENTSOURCE}" enabled="true">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="-2141785303">Loss Location State may disqualify this claim for creation in Navigator</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">20</intProp>
                    </ResponseAssertion>
                    <hashTree/>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="CNG_TP06_I_Triage_Next_To_Basic_Information -- Unverified Policy Search ${POLICYNUMBER} , ${POLEFFDATE} , ${POLEXPDATE} , ${PHONENUMBER} ,${LASTNAME},${FIRSTNAME} ,${STATE}, ${POLICYTYPE},${AGREEMENTSOURCE}" enabled="true">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="-2141785303">Loss Location State may disqualify this claim for creation in Navigator</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">20</intProp>
                    </ResponseAssertion>
                    <hashTree/>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="CNG_TP06_I_Triage_Next_To_Basic_Information -- Translation Error continuing with alternative flow, ${POLICYNUMBER} , ${POLEFFDATE} , ${POLEXPDATE} , ${PHONENUMBER} ,${LASTNAME},${FIRSTNAME} ,${STATE}, ${POLICYTYPE},${AGREEMENTSOURCE}" enabled="true">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="1411162009">Translation Error</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">20</intProp>
                    </ResponseAssertion>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="TranslationError Extractor" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">TranslationError</stringProp>
                      <stringProp name="RegexExtractor.regex">Translation(.*?)Error</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">null</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="PossibleDuplicateClaims Extractor" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">PossibleDuplicateClaims</stringProp>
                      <stringProp name="RegexExtractor.regex">Possible Duplicate(.*?)Claims(.*?)</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">null</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                  </hashTree>
                  <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ThinkTime - 10" enabled="true">
                    <stringProp name="TestPlan.comments">This transaction will wait for 10 seconds</stringProp>
                  </GenericController>
                  <hashTree>
                    <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="ThinkTime" enabled="true">
                      <stringProp name="ConstantTimer.delay">10000</stringProp>
                      <stringProp name="TestPlan.comments">   Converting seconds to milliseconds - 10s x 1000</stringProp>
                    </ConstantTimer>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If &quot;${TranslationError}&quot; != &quot;null&quot;" enabled="true">
                  <stringProp name="IfController.condition">&quot;${TranslationError}&quot; != &quot;null&quot;</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <ResultAction guiclass="ResultActionGui" testclass="ResultAction" testname="Result Status Action Handler" enabled="true">
                    <intProp name="OnError.action">4</intProp>
                  </ResultAction>
                  <hashTree/>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If &quot;${PossibleDuplicateClaims}&quot; != &quot;null&quot;" enabled="true">
                  <stringProp name="IfController.condition">&quot;${PossibleDuplicateClaims}&quot; != &quot;null&quot;</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP06_L_Triage_Close_Duplicate_Claims" enabled="true">
                    <boolProp name="TransactionController.includeTimers">false</boolProp>
                    <boolProp name="TransactionController.parent">true</boolProp>
                  </TransactionController>
                  <hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_8" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="FNOLWizard:FNOLWizard_FindPolicyScreen:ReportedByFN" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:FNOLWizard_FindPolicyScreen:ReportedByFN</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:FNOLWizard_FindPolicyScreen:ReportedByLN" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:FNOLWizard_FindPolicyScreen:ReportedByLN</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:1" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:1</stringProp>
                            <stringProp name="Argument.value">${cFNOLWIZARD1}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="TabBar:ClaimTab:ClaimTab_FindClaim" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">TabBar:ClaimTab:ClaimTab_FindClaim</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:0" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:0</stringProp>
                            <stringProp name="Argument.value">${cFNOLWIZARD0_1}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="QuickJump" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">QuickJump</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:FNOLMenuActions" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:FNOLMenuActions</stringProp>
                            <stringProp name="Argument.value">${cFNOLMENUACTIONS}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:0_toggle" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:0_toggle</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="infoBar" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">infoBar</stringProp>
                            <stringProp name="Argument.value">${cINFOBAR_3}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:1_toggle" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:1_toggle</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:FNOLWizard_FindPolicyScreen:policyTypePageModeDV:PolicyType" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:FNOLWizard_FindPolicyScreen:policyTypePageModeDV:PolicyType</stringProp>
                            <stringProp name="Argument.value">auto_per</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="objFocusId" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">objFocusId</stringProp>
                            <stringProp name="Argument.value">NewClaimDuplicatesWorksheet:NewClaimDuplicatesScreen:NewClaimDuplicatesWorksheet_CloseButton</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:FNOLWizard_FindPolicyScreen:policyTypePageModeDV:PolicyProviderType" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:FNOLWizard_FindPolicyScreen:policyTypePageModeDV:PolicyProviderType</stringProp>
                            <stringProp name="Argument.value">liberty</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="eventSource" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">eventSource</stringProp>
                            <stringProp name="Argument.value">NewClaimDuplicatesWorksheet:NewClaimDuplicatesScreen:NewClaimDuplicatesWorksheet_CloseButton_act</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:FNOLWizard_FindPolicyScreen:ScreenMode1" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:FNOLWizard_FindPolicyScreen:ScreenMode1</stringProp>
                            <stringProp name="Argument.value">true</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="csrfToken" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">csrfToken</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name=":tabs" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">:tabs</stringProp>
                            <stringProp name="Argument.value">${cTABS}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name=":tblinks" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">:tblinks</stringProp>
                            <stringProp name="Argument.value">${cTBLINKS_1}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:ClaimMode" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:ClaimMode</stringProp>
                            <stringProp name="Argument.value">Auto</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:PolicySearchSP:lossStateAuto" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:PolicySearchSP:lossStateAuto</stringProp>
                            <stringProp name="Argument.value">${STATE}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:PolicySearchSP:TriageAuto" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:PolicySearchSP:TriageAuto</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:FNOLWizard_FindPolicyScreen:Claim_ReportedByType" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:FNOLWizard_FindPolicyScreen:Claim_ReportedByType</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:FNOLWizard_FindPolicyScreen:reportedByPhoneExtn" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:FNOLWizard_FindPolicyScreen:reportedByPhoneExtn</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:PolicySearchSP:policyNumberAuto" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:PolicySearchSP:policyNumberAuto</stringProp>
                            <stringProp name="Argument.value">${POLICYNUMBER}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="PolicySearch.LM_SearchOption_Radio" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">PolicySearch.LM_SearchOption_Radio</stringProp>
                            <stringProp name="Argument.value">FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:PolicySearchSP:polNumSearchAuto_Choice</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:PolicySearchSP:anyInjuryAuto" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:PolicySearchSP:anyInjuryAuto</stringProp>
                            <stringProp name="Argument.value">false</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:PolicySearchSP:lossCategoryAuto" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:PolicySearchSP:lossCategoryAuto</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:FNOLWizard_FindPolicyScreen:reportedByPhone" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:FNOLWizard_FindPolicyScreen:reportedByPhone</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol">https</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                      <stringProp name="HTTPSampler.method">POST</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                      <boolProp name="HTTPSampler.image_parser">true</boolProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="Accept-Language" elementType="Header">
                            <stringProp name="Header.name">DNT</stringProp>
                            <stringProp name="Header.value">1</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                    </hashTree>
                    <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ThinkTime - 10" enabled="true">
                      <stringProp name="TestPlan.comments">This transaction will wait for 10 seconds</stringProp>
                    </GenericController>
                    <hashTree>
                      <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="ThinkTime" enabled="true">
                        <stringProp name="ConstantTimer.delay">10000</stringProp>
                        <stringProp name="TestPlan.comments">   Converting seconds to milliseconds - 10s x 1000</stringProp>
                      </ConstantTimer>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                  <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP06_M_Triage_Next_To_Basic_Information" enabled="true">
                    <boolProp name="TransactionController.includeTimers">false</boolProp>
                    <boolProp name="TransactionController.parent">true</boolProp>
                  </TransactionController>
                  <hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_9" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="FNOLWizard:FNOLWizard_FindPolicyScreen:ReportedByFN" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:FNOLWizard_FindPolicyScreen:ReportedByFN</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:FNOLWizard_FindPolicyScreen:ReportedByLN" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:FNOLWizard_FindPolicyScreen:ReportedByLN</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:1" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:1</stringProp>
                            <stringProp name="Argument.value">${cFNOLWIZARD1}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="TabBar:ClaimTab:ClaimTab_FindClaim" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">TabBar:ClaimTab:ClaimTab_FindClaim</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:0" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:0</stringProp>
                            <stringProp name="Argument.value">${cFNOLWIZARD0_1}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="QuickJump" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">QuickJump</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:FNOLMenuActions" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:FNOLMenuActions</stringProp>
                            <stringProp name="Argument.value">${cFNOLMENUACTIONS}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:0_toggle" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:0_toggle</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="infoBar" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">infoBar</stringProp>
                            <stringProp name="Argument.value">${cINFOBAR_3}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:1_toggle" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:1_toggle</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:FNOLWizard_FindPolicyScreen:policyTypePageModeDV:PolicyType" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:FNOLWizard_FindPolicyScreen:policyTypePageModeDV:PolicyType</stringProp>
                            <stringProp name="Argument.value">auto_per</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="objFocusId" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">objFocusId</stringProp>
                            <stringProp name="Argument.value">FNOLWizard:Next</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:FNOLWizard_FindPolicyScreen:policyTypePageModeDV:PolicyProviderType" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:FNOLWizard_FindPolicyScreen:policyTypePageModeDV:PolicyProviderType</stringProp>
                            <stringProp name="Argument.value">liberty</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="eventSource" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">eventSource</stringProp>
                            <stringProp name="Argument.value">FNOLWizard:Next_act</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:FNOLWizard_FindPolicyScreen:ScreenMode1" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:FNOLWizard_FindPolicyScreen:ScreenMode1</stringProp>
                            <stringProp name="Argument.value">true</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="csrfToken" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">csrfToken</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name=":tabs" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">:tabs</stringProp>
                            <stringProp name="Argument.value">${cTABS}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name=":tblinks" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">:tblinks</stringProp>
                            <stringProp name="Argument.value">${cTBLINKS_1}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:ClaimMode" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:ClaimMode</stringProp>
                            <stringProp name="Argument.value">Auto</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:PolicySearchSP:lossStateAuto" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:PolicySearchSP:lossStateAuto</stringProp>
                            <stringProp name="Argument.value">${STATE}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:PolicySearchSP:TriageAuto" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:PolicySearchSP:TriageAuto</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:FNOLWizard_FindPolicyScreen:Claim_ReportedByType" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:FNOLWizard_FindPolicyScreen:Claim_ReportedByType</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:FNOLWizard_FindPolicyScreen:reportedByPhoneExtn" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:FNOLWizard_FindPolicyScreen:reportedByPhoneExtn</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:PolicySearchSP:policyNumberAuto" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:PolicySearchSP:policyNumberAuto</stringProp>
                            <stringProp name="Argument.value">${POLICYNUMBER}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="PolicySearch.LM_SearchOption_Radio" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">PolicySearch.LM_SearchOption_Radio</stringProp>
                            <stringProp name="Argument.value">FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:PolicySearchSP:polNumSearchAuto_Choice</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:PolicySearchSP:anyInjuryAuto" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:PolicySearchSP:anyInjuryAuto</stringProp>
                            <stringProp name="Argument.value">false</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:PolicySearchSP:lossCategoryAuto" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:PolicySearchSP:lossCategoryAuto</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:FNOLWizard_FindPolicyScreen:reportedByPhone" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:FNOLWizard_FindPolicyScreen:reportedByPhone</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol">https</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                      <stringProp name="HTTPSampler.method">POST</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                      <boolProp name="HTTPSampler.image_parser">true</boolProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="Accept-Language" elementType="Header">
                            <stringProp name="Header.name">DNT</stringProp>
                            <stringProp name="Header.value">1</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                      <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cINFOBAR_4 Extractor" enabled="true">
                        <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                        <stringProp name="RegexExtractor.refname">cINFOBAR_4</stringProp>
                        <stringProp name="RegexExtractor.regex">,&quot;checksum&quot;:&quot;(.*?)&quot;},</stringProp>
                        <stringProp name="RegexExtractor.template">$1$</stringProp>
                        <stringProp name="RegexExtractor.default">null</stringProp>
                        <stringProp name="RegexExtractor.match_number">1</stringProp>
                      </RegexExtractor>
                      <hashTree/>
                      <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cFNOLWIZARD0_2 Extractor" enabled="true">
                        <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                        <stringProp name="RegexExtractor.refname">cFNOLWIZARD0_2</stringProp>
                        <stringProp name="RegexExtractor.regex">Claim&quot;,&quot;eventId&quot;:&quot;FNOLWizard:Summary&quot;,&quot;disabled&quot;:true}],&quot;xtype&quot;:&quot;accordionpanel&quot;,&quot;checksum&quot;:&quot;(.*?)&quot;,</stringProp>
                        <stringProp name="RegexExtractor.template">$1$</stringProp>
                        <stringProp name="RegexExtractor.default">null</stringProp>
                        <stringProp name="RegexExtractor.match_number">1</stringProp>
                      </RegexExtractor>
                      <hashTree/>
                      <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cFNOLWIZARD1_1 Extractor" enabled="true">
                        <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                        <stringProp name="RegexExtractor.refname">cFNOLWIZARD1_1</stringProp>
                        <stringProp name="RegexExtractor.regex">rProfile&quot;}],&quot;xtype&quot;:&quot;noncollapsingpanel&quot;},\{&quot;title&quot;:&quot;Notes&quot;,&quot;eventId&quot;:&quot;FNOLWizard:Notes&quot;}],&quot;xtype&quot;:&quot;accordionpanel&quot;,&quot;checksum&quot;:&quot;(.*?)&quot;,</stringProp>
                        <stringProp name="RegexExtractor.template">$1$</stringProp>
                        <stringProp name="RegexExtractor.default">null</stringProp>
                        <stringProp name="RegexExtractor.match_number">1</stringProp>
                      </RegexExtractor>
                      <hashTree/>
                      <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cPERSON Extractor" enabled="true">
                        <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                        <stringProp name="RegexExtractor.refname">cPERSON</stringProp>
                        <stringProp name="RegexExtractor.regex">Person:(.*?)&quot;,</stringProp>
                        <stringProp name="RegexExtractor.template">$1$</stringProp>
                        <stringProp name="RegexExtractor.default">null</stringProp>
                        <stringProp name="RegexExtractor.match_number">1</stringProp>
                      </RegexExtractor>
                      <hashTree/>
                    </hashTree>
                    <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ThinkTime - 10" enabled="true">
                      <stringProp name="TestPlan.comments">This transaction will wait for 10 seconds</stringProp>
                    </GenericController>
                    <hashTree>
                      <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="ThinkTime" enabled="true">
                        <stringProp name="ConstantTimer.delay">10000</stringProp>
                        <stringProp name="TestPlan.comments">   Converting seconds to milliseconds - 10s x 1000</stringProp>
                      </ConstantTimer>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                  <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP06_L_Triage_Close_Duplicate_Claims" enabled="false">
                    <boolProp name="TransactionController.includeTimers">false</boolProp>
                    <boolProp name="TransactionController.parent">true</boolProp>
                  </TransactionController>
                  <hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_84" enabled="false">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="FNOLWizard:FNOLWizard_FindPolicyScreen:ReportedByLN" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:FNOLWizard_FindPolicyScreen:ReportedByLN</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:FNOLWizard_FindPolicyScreen:reportedByPhone" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:FNOLWizard_FindPolicyScreen:reportedByPhone</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="eventSource" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">eventSource</stringProp>
                            <stringProp name="Argument.value">NewClaimDuplicatesWorksheet:NewClaimDuplicatesScreen:NewClaimDuplicatesWorksheet_CloseButton_act</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="TabBar:ClaimTab:ClaimTab_FindClaim" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">TabBar:ClaimTab:ClaimTab_FindClaim</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="csrfToken" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">csrfToken</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="QuickJump" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">QuickJump</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:1" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:1</stringProp>
                            <stringProp name="Argument.value">${cFNOLWIZARD1}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:0_toggle" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:0_toggle</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:0" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:0</stringProp>
                            <stringProp name="Argument.value">${cFNOLWIZARD0_1}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:1_toggle" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:1_toggle</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:FNOLWizard_FindPolicyScreen:policyTypePageModeDV:PolicyType" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:FNOLWizard_FindPolicyScreen:policyTypePageModeDV:PolicyType</stringProp>
                            <stringProp name="Argument.value">auto_per</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:FNOLWizard_FindPolicyScreen:ScreenMode1" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:FNOLWizard_FindPolicyScreen:ScreenMode1</stringProp>
                            <stringProp name="Argument.value">true</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:FNOLWizard_FindPolicyScreen:ReportedByFN" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:FNOLWizard_FindPolicyScreen:ReportedByFN</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="objFocusId" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">objFocusId</stringProp>
                            <stringProp name="Argument.value">NewClaimDuplicatesWorksheet:NewClaimDuplicatesScreen:NewClaimDuplicatesWorksheet_CloseButton</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:FNOLMenuActions" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:FNOLMenuActions</stringProp>
                            <stringProp name="Argument.value">${cFNOLMENUACTIONS}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="infoBar" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">infoBar</stringProp>
                            <stringProp name="Argument.value">${cINFOBAR_3}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name=":tabs" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">:tabs</stringProp>
                            <stringProp name="Argument.value">${cTABS}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:PolicySearchSP:anyInjuryAuto" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:PolicySearchSP:anyInjuryAuto</stringProp>
                            <stringProp name="Argument.value">false</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:PolicySearchSP:lossCategoryAuto" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:PolicySearchSP:lossCategoryAuto</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:PolicySearchSP:lossStateAuto" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:PolicySearchSP:lossStateAuto</stringProp>
                            <stringProp name="Argument.value">${STATE}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:PolicySearchSP:TriageAuto" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:PolicySearchSP:TriageAuto</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name=":tblinks" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">:tblinks</stringProp>
                            <stringProp name="Argument.value">${cTBLINKS_1}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:ClaimMode" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:ClaimMode</stringProp>
                            <stringProp name="Argument.value">Auto</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:PolicySearchSP:phoneAuto" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:PolicySearchSP:phoneAuto</stringProp>
                            <stringProp name="Argument.value">${PHONENUMBER}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="PolicySearch.LM_SearchOption_Radio" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">PolicySearch.LM_SearchOption_Radio</stringProp>
                            <stringProp name="Argument.value">FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:PolicySearchSP:phoneSearchAuto_Choice</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:FNOLWizard_FindPolicyScreen:Claim_ReportedByType" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:FNOLWizard_FindPolicyScreen:Claim_ReportedByType</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol">https</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                      <stringProp name="HTTPSampler.method">POST</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                      <boolProp name="HTTPSampler.image_parser">true</boolProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="Accept-Language" elementType="Header">
                            <stringProp name="Header.name">DNT</stringProp>
                            <stringProp name="Header.value">1</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                  <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP06_M_Triage_Next_To_Basic_Information" enabled="false">
                    <boolProp name="TransactionController.includeTimers">false</boolProp>
                    <boolProp name="TransactionController.parent">true</boolProp>
                  </TransactionController>
                  <hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_85" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="FNOLWizard:FNOLWizard_FindPolicyScreen:ReportedByLN" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:FNOLWizard_FindPolicyScreen:ReportedByLN</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:FNOLWizard_FindPolicyScreen:reportedByPhone" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:FNOLWizard_FindPolicyScreen:reportedByPhone</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="eventSource" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">eventSource</stringProp>
                            <stringProp name="Argument.value">FNOLWizard:Next_act</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="TabBar:ClaimTab:ClaimTab_FindClaim" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">TabBar:ClaimTab:ClaimTab_FindClaim</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="csrfToken" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">csrfToken</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="QuickJump" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">QuickJump</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:1" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:1</stringProp>
                            <stringProp name="Argument.value">${cFNOLWIZARD1}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:0_toggle" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:0_toggle</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:0" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:0</stringProp>
                            <stringProp name="Argument.value">${cFNOLWIZARD0_1}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:1_toggle" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:1_toggle</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:FNOLWizard_FindPolicyScreen:policyTypePageModeDV:PolicyType" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:FNOLWizard_FindPolicyScreen:policyTypePageModeDV:PolicyType</stringProp>
                            <stringProp name="Argument.value">auto_per</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:FNOLWizard_FindPolicyScreen:ScreenMode1" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:FNOLWizard_FindPolicyScreen:ScreenMode1</stringProp>
                            <stringProp name="Argument.value">true</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:FNOLWizard_FindPolicyScreen:ReportedByFN" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:FNOLWizard_FindPolicyScreen:ReportedByFN</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="objFocusId" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">objFocusId</stringProp>
                            <stringProp name="Argument.value">FNOLWizard:Next</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:FNOLMenuActions" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:FNOLMenuActions</stringProp>
                            <stringProp name="Argument.value">${cFNOLMENUACTIONS}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="infoBar" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">infoBar</stringProp>
                            <stringProp name="Argument.value">${cINFOBAR_3}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name=":tabs" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">:tabs</stringProp>
                            <stringProp name="Argument.value">${cTABS}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:PolicySearchSP:anyInjuryAuto" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:PolicySearchSP:anyInjuryAuto</stringProp>
                            <stringProp name="Argument.value">false</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:PolicySearchSP:lossCategoryAuto" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:PolicySearchSP:lossCategoryAuto</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:PolicySearchSP:lossStateAuto" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:PolicySearchSP:lossStateAuto</stringProp>
                            <stringProp name="Argument.value">${STATE}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:PolicySearchSP:TriageAuto" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:PolicySearchSP:TriageAuto</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name=":tblinks" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">:tblinks</stringProp>
                            <stringProp name="Argument.value">${cTBLINKS_1}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:ClaimMode" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:ClaimMode</stringProp>
                            <stringProp name="Argument.value">Auto</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:PolicySearchSP:phoneAuto" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:PolicySearchSP:phoneAuto</stringProp>
                            <stringProp name="Argument.value">${PHONENUMBER}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="PolicySearch.LM_SearchOption_Radio" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">PolicySearch.LM_SearchOption_Radio</stringProp>
                            <stringProp name="Argument.value">FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:PolicySearchSP:phoneSearchAuto_Choice</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:FNOLWizard_FindPolicyScreen:Claim_ReportedByType" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:FNOLWizard_FindPolicyScreen:Claim_ReportedByType</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol">https</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                      <stringProp name="HTTPSampler.method">POST</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                      <boolProp name="HTTPSampler.image_parser">true</boolProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="Accept-Language" elementType="Header">
                            <stringProp name="Header.name">DNT</stringProp>
                            <stringProp name="Header.value">1</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                      <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cINFOBAR_4 Extractor" enabled="true">
                        <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                        <stringProp name="RegexExtractor.refname">cINFOBAR_4</stringProp>
                        <stringProp name="RegexExtractor.regex">,&quot;checksum&quot;:&quot;(.*?)&quot;},</stringProp>
                        <stringProp name="RegexExtractor.template">$1$</stringProp>
                        <stringProp name="RegexExtractor.default">null</stringProp>
                        <stringProp name="RegexExtractor.match_number">1</stringProp>
                      </RegexExtractor>
                      <hashTree/>
                      <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cFNOLWIZARD0_2 Extractor" enabled="true">
                        <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                        <stringProp name="RegexExtractor.refname">cFNOLWIZARD0_2</stringProp>
                        <stringProp name="RegexExtractor.regex">Claim&quot;,&quot;eventId&quot;:&quot;FNOLWizard:Summary&quot;,&quot;disabled&quot;:true}],&quot;xtype&quot;:&quot;accordionpanel&quot;,&quot;checksum&quot;:&quot;(.*?)&quot;,</stringProp>
                        <stringProp name="RegexExtractor.template">$1$</stringProp>
                        <stringProp name="RegexExtractor.default">null</stringProp>
                        <stringProp name="RegexExtractor.match_number">1</stringProp>
                      </RegexExtractor>
                      <hashTree/>
                      <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cFNOLWIZARD1_1 Extractor" enabled="true">
                        <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                        <stringProp name="RegexExtractor.refname">cFNOLWIZARD1_1</stringProp>
                        <stringProp name="RegexExtractor.regex">rProfile&quot;}],&quot;xtype&quot;:&quot;noncollapsingpanel&quot;},\{&quot;title&quot;:&quot;Notes&quot;,&quot;eventId&quot;:&quot;FNOLWizard:Notes&quot;}],&quot;xtype&quot;:&quot;accordionpanel&quot;,&quot;checksum&quot;:&quot;(.*?)&quot;,</stringProp>
                        <stringProp name="RegexExtractor.template">$1$</stringProp>
                        <stringProp name="RegexExtractor.default">null</stringProp>
                        <stringProp name="RegexExtractor.match_number">1</stringProp>
                      </RegexExtractor>
                      <hashTree/>
                      <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cPERSON Extractor" enabled="true">
                        <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                        <stringProp name="RegexExtractor.refname">cPERSON</stringProp>
                        <stringProp name="RegexExtractor.regex">Person:(.*?)&quot;,</stringProp>
                        <stringProp name="RegexExtractor.template">$1$</stringProp>
                        <stringProp name="RegexExtractor.default">null</stringProp>
                        <stringProp name="RegexExtractor.match_number">1</stringProp>
                      </RegexExtractor>
                      <hashTree/>
                    </hashTree>
                    <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ThinkTime - 10" enabled="true">
                      <stringProp name="TestPlan.comments">This transaction will wait for 10 seconds</stringProp>
                    </GenericController>
                    <hashTree>
                      <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="ThinkTime" enabled="true">
                        <stringProp name="ConstantTimer.delay">10000</stringProp>
                        <stringProp name="TestPlan.comments">   Converting seconds to milliseconds - 10s x 1000</stringProp>
                      </ConstantTimer>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                </hashTree>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="-POLICYSEARCHNAMEANDSTATE" enabled="true">
              <stringProp name="TestPlan.comments">This section contains the POLICYSEARCHNAMEANDSTATE part of Loadrunner</stringProp>
            </GenericController>
            <hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If ${RANDOMNUMBER} &gt;20" enabled="true">
                <stringProp name="IfController.condition">${RANDOMNUMBER} &gt;20</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP06_F_Triage_Search_Name_And_State" enabled="true">
                  <boolProp name="TransactionController.includeTimers">false</boolProp>
                  <boolProp name="TransactionController.parent">true</boolProp>
                </TransactionController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_3" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">TabBar%3AClaimTab%3AClaimTab_FindClaim=&amp;QuickJump=&amp;FNOLWizard%3A0_toggle=&amp;FNOLWizard%3A1_toggle=&amp;FNOLWizard%3AFNOLWizard_FindPolicyScreen%3ApolicyTypePageModeDV%3APolicyType=auto_per&amp;FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AScreenMode1=true&amp;FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AReportedByFN=&amp;FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AReportedByLN=&amp;FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AreportedByPhone=&amp;FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AreportedByPhoneExtn=&amp;FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AClaim_ReportedByType=&amp;FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AFNOLWizardFindPolicyPanelSet%3APolicySearchSP%3ATriageAuto=&amp;FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AFNOLWizardFindPolicyPanelSet%3APolicySearchSP%3AdateAuto=${DOL_URL2}&amp;FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AFNOLWizardFindPolicyPanelSet%3APolicySearchSP%3AClaim_lossTimeAuto=12%3A00%20AM&amp;FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AFNOLWizardFindPolicyPanelSet%3APolicySearchSP%3AlossStateAuto=&amp;FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AFNOLWizardFindPolicyPanelSet%3APolicySearchSP%3AlossCategoryAuto=&amp;FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AFNOLWizardFindPolicyPanelSet%3APolicySearchSP%3AanyInjuryAuto=false&amp;PolicySearch.LM_SearchOption_Radio=FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AFNOLWizardFindPolicyPanelSet%3APolicySearchSP%3AphoneSearchAuto_Choice&amp;FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AFNOLWizardFindPolicyPanelSet%3APolicySearchSP%3AphoneAuto=&amp;%3Atblinks=${cTBLINKS_1_URL2}&amp;%3Atabs=${cTABS_URL2}&amp;infoBar=${cINFOBAR_1_URL2}&amp;FNOLWizard%3AFNOLMenuActions=${cFNOLMENUACTIONS_URL2}&amp;FNOLWizard%3A0=${cFNOLWIZARD0_URL2}&amp;FNOLWizard%3A1=${cFNOLWIZARD1_URL2}&amp;csrfToken=&amp;eventSource=_refresh_&amp;eventParam=FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AFNOLWizardFindPolicyPanelSet%3APolicySearchSP%3AClaim_lossTimeAuto&amp;objFocusId=FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AFNOLWizardFindPolicyPanelSet%3APolicySearchSP%3AClaim_lossTimeAuto</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <boolProp name="HTTPSampler.image_parser">true</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="Accept-Language" elementType="Header">
                          <stringProp name="Header.name">DNT</stringProp>
                          <stringProp name="Header.value">1</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor CNG_TP06_F_Triage_Search_Name_And_State" enabled="true">
                      <stringProp name="cacheKey">27dbf407-2138-4f53-b9a0-da3c6853de2e</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="script">	vars.put(&quot;DOL_URL2&quot;,java.net.URLDecoder.decode(vars.get(&quot;DOL&quot;), &quot;UTF-8&quot;));
</stringProp>
                      <stringProp name="scriptLanguage">groovy</stringProp>
                    </JSR223PreProcessor>
                    <hashTree/>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="CNG_TP06_F_Triage_Search_Name_And_State--Unsuccessful Name and State Search ${FIRSTNAME} , ${LASTNAME}" enabled="true">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="-367896511">Triage and Policy Search</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">16</intProp>
                    </ResponseAssertion>
                    <hashTree/>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="CNG_TP06_F_Triage_Search_Name_And_State--Unsuccessful Name and State Search ${FIRSTNAME} , ${LASTNAME}" enabled="true">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="2018118182">The search returned zero results</stringProp>
                        <stringProp name="-1505204672">This page is used to hold your data while you are being authorized for your request</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">20</intProp>
                    </ResponseAssertion>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="ResposneOk Extractor" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">ResposneOk</stringProp>
                      <stringProp name="RegexExtractor.regex">Triage and Policy Search(.*?)</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">null</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_4" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">TabBar%3AClaimTab%3AClaimTab_FindClaim=&amp;QuickJump=&amp;FNOLWizard%3A0_toggle=&amp;FNOLWizard%3A1_toggle=&amp;FNOLWizard%3AFNOLWizard_FindPolicyScreen%3ApolicyTypePageModeDV%3APolicyType=auto_per&amp;FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AScreenMode1=true&amp;FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AReportedByFN=&amp;FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AReportedByLN=&amp;FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AreportedByPhone=&amp;FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AreportedByPhoneExtn=&amp;FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AClaim_ReportedByType=&amp;FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AFNOLWizardFindPolicyPanelSet%3APolicySearchSP%3ATriageAuto=&amp;FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AFNOLWizardFindPolicyPanelSet%3APolicySearchSP%3AdateAuto=${DOL_URL2}&amp;FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AFNOLWizardFindPolicyPanelSet%3APolicySearchSP%3AClaim_lossTimeAuto=12%3A00%20AM&amp;FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AFNOLWizardFindPolicyPanelSet%3APolicySearchSP%3AlossStateAuto=${STATE}&amp;FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AFNOLWizardFindPolicyPanelSet%3APolicySearchSP%3AlossCategoryAuto=&amp;FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AFNOLWizardFindPolicyPanelSet%3APolicySearchSP%3AanyInjuryAuto=false&amp;FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AFNOLWizardFindPolicyPanelSet%3APolicySearchSP%3AphoneAuto=&amp;PolicySearch.LM_SearchOption_Radio=FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AFNOLWizardFindPolicyPanelSet%3APolicySearchSP%3AnameSearchAuto_Choice&amp;%3Atblinks=${cTBLINKS_1_URL2}&amp;%3Atabs=${cTABS_URL2}&amp;infoBar=${cINFOBAR_1_URL2}&amp;FNOLWizard%3AFNOLMenuActions=${cFNOLMENUACTIONS_URL2}&amp;FNOLWizard%3A0=${cFNOLWIZARD0_URL2}&amp;FNOLWizard%3A1=${cFNOLWIZARD1_URL2}&amp;csrfToken=&amp;eventSource=_refresh_&amp;eventParam=FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AFNOLWizardFindPolicyPanelSet%3APolicySearchSP%3AnameSearchAuto_Choice&amp;objFocusId=FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AFNOLWizardFindPolicyPanelSet%3APolicySearchSP%3AnameSearchAuto_Choice</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <boolProp name="HTTPSampler.image_parser">true</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="Accept-Language" elementType="Header">
                          <stringProp name="Header.name">DNT</stringProp>
                          <stringProp name="Header.value">1</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_5" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">TabBar%3AClaimTab%3AClaimTab_FindClaim=&amp;QuickJump=&amp;FNOLWizard%3A0_toggle=&amp;FNOLWizard%3A1_toggle=&amp;FNOLWizard%3AFNOLWizard_FindPolicyScreen%3ApolicyTypePageModeDV%3APolicyType=auto_per&amp;FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AScreenMode1=true&amp;FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AReportedByFN=&amp;FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AReportedByLN=&amp;FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AreportedByPhone=&amp;FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AreportedByPhoneExtn=&amp;FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AClaim_ReportedByType=&amp;FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AFNOLWizardFindPolicyPanelSet%3APolicySearchSP%3ATriageAuto=&amp;FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AFNOLWizardFindPolicyPanelSet%3APolicySearchSP%3AdateAuto=${DOL_URL2}&amp;FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AFNOLWizardFindPolicyPanelSet%3APolicySearchSP%3AClaim_lossTimeAuto=12%3A00%20AM&amp;FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AFNOLWizardFindPolicyPanelSet%3APolicySearchSP%3AlossStateAuto=${STATE}&amp;FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AFNOLWizardFindPolicyPanelSet%3APolicySearchSP%3AlossCategoryAuto=&amp;FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AFNOLWizardFindPolicyPanelSet%3APolicySearchSP%3AanyInjuryAuto=false&amp;PolicySearch.LM_SearchOption_Radio=FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AFNOLWizardFindPolicyPanelSet%3APolicySearchSP%3AnameSearchAuto_Choice&amp;FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AFNOLWizardFindPolicyPanelSet%3APolicySearchSP%3AfirstnameAuto=${FIRSTNAME}&amp;FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AFNOLWizardFindPolicyPanelSet%3APolicySearchSP%3AlastnameAuto=${LASTNAME}&amp;FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AFNOLWizardFindPolicyPanelSet%3APolicySearchSP%3AcityAuto=&amp;FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AFNOLWizardFindPolicyPanelSet%3APolicySearchSP%3AstateAuto=${AGREEMENTSOURCE}&amp;FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AFNOLWizardFindPolicyPanelSet%3APolicySearchSP%3ApostalCodeAuto=&amp;%3Atblinks=${cTBLINKS_1_URL2}&amp;%3Atabs=${cTABS_URL2}&amp;infoBar=${cINFOBAR_1_URL2}&amp;FNOLWizard%3AFNOLMenuActions=${cFNOLMENUACTIONS_URL2}&amp;FNOLWizard%3A0=${cFNOLWIZARD0_URL2}&amp;FNOLWizard%3A1=${cFNOLWIZARD1_URL2}&amp;csrfToken=&amp;eventSource=FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AFNOLWizardFindPolicyPanelSet%3APolicySearchSP%3ASearch2_act&amp;objFocusId=FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AFNOLWizardFindPolicyPanelSet%3APolicySearchSP%3ASearch2</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <boolProp name="HTTPSampler.image_parser">true</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="Accept-Language" elementType="Header">
                          <stringProp name="Header.name">DNT</stringProp>
                          <stringProp name="Header.value">1</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                  </hashTree>
                  <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ThinkTime - 10" enabled="true">
                    <stringProp name="TestPlan.comments">This transaction will wait for 10 seconds</stringProp>
                  </GenericController>
                  <hashTree>
                    <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="ThinkTime" enabled="true">
                      <stringProp name="ConstantTimer.delay">10000</stringProp>
                      <stringProp name="TestPlan.comments">   Converting seconds to milliseconds - 10s x 1000</stringProp>
                    </ConstantTimer>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If CNG_TP06_F_Triage_Search_Name_And_State &quot;${ResposneOk}&quot; == &quot;null&quot;" enabled="true">
                  <stringProp name="IfController.condition">&quot;${ResposneOk}&quot; == &quot;null&quot;</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="-RETURNTODESKTOP" enabled="true">
                    <stringProp name="TestPlan.comments">This section contains the RETURNTODESKTOP part of Loadrunner</stringProp>
                  </GenericController>
                  <hashTree>
                    <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP06_Return_To_Desktop" enabled="true">
                      <boolProp name="TransactionController.includeTimers">false</boolProp>
                      <boolProp name="TransactionController.parent">true</boolProp>
                    </TransactionController>
                    <hashTree>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_66" enabled="true">
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                          <collectionProp name="Arguments.arguments">
                            <elementProp name="Claim:MenuLinks" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">Claim:MenuLinks</stringProp>
                              <stringProp name="Argument.value">${cCLAIMMENULINKS}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="csrfToken" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">csrfToken</stringProp>
                              <stringProp name="Argument.value"></stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="TabBar:ClaimTab:ClaimTab_FindClaim" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">TabBar:ClaimTab:ClaimTab_FindClaim</stringProp>
                              <stringProp name="Argument.value"></stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="QuickJump" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">QuickJump</stringProp>
                              <stringProp name="Argument.value"></stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="Claim:MenuLinks_toggle" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">Claim:MenuLinks_toggle</stringProp>
                              <stringProp name="Argument.value"></stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name=":tblinks" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">:tblinks</stringProp>
                              <stringProp name="Argument.value">${cTBLINKS}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name=":tabs" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">:tabs</stringProp>
                              <stringProp name="Argument.value">${cTABS_1}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="infoBar" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">infoBar</stringProp>
                              <stringProp name="Argument.value">${cINFOBAR_6}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="Claim:ClaimMenuActions" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">Claim:ClaimMenuActions</stringProp>
                              <stringProp name="Argument.value">${cCLAIMMENUACTIONS}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="objFocusId" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">objFocusId</stringProp>
                              <stringProp name="Argument.value">TabBar:DesktopTab</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="eventSource" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">eventSource</stringProp>
                              <stringProp name="Argument.value">TabBar:DesktopTab_act</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                          </collectionProp>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain"></stringProp>
                        <stringProp name="HTTPSampler.port"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        <stringProp name="HTTPSampler.protocol">https</stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                        <stringProp name="HTTPSampler.method">POST</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                        <boolProp name="HTTPSampler.image_parser">true</boolProp>
                        <boolProp name="HTTPSampler.monitor">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree>
                        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                          <collectionProp name="HeaderManager.headers">
                            <elementProp name="Accept-Language" elementType="Header">
                              <stringProp name="Header.name">DNT</stringProp>
                              <stringProp name="Header.value">1</stringProp>
                            </elementProp>
                          </collectionProp>
                        </HeaderManager>
                        <hashTree/>
                        <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="CNG_TP06_Return_To_Desktop -- Desktop screen has not appeared for claim number: ${CLAIMNUMBER}" enabled="true">
                          <collectionProp name="Asserion.test_strings">
                            <stringProp name="1514705186">My activities today</stringProp>
                          </collectionProp>
                          <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                          <boolProp name="Assertion.assume_success">false</boolProp>
                          <intProp name="Assertion.test_type">16</intProp>
                        </ResponseAssertion>
                        <hashTree/>
                        <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cTABS Extractor" enabled="true">
                          <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                          <stringProp name="RegexExtractor.refname">cTABS</stringProp>
                          <stringProp name="RegexExtractor.regex">&quot;id&quot;:&quot;TabBar:VacationTab&quot;,&quot;text&quot;:&quot;Vacation&quot;,&quot;menu&quot;:\{&quot;defaultType&quot;:&quot;gmenuitem&quot;},&quot;xtype&quot;:&quot;gbutton&quot;,&quot;disabled&quot;:true}],&quot;checksum&quot;:&quot;(.*?)&quot;}},\{</stringProp>
                          <stringProp name="RegexExtractor.template">$1$</stringProp>
                          <stringProp name="RegexExtractor.default">null</stringProp>
                          <stringProp name="RegexExtractor.match_number">1</stringProp>
                        </RegexExtractor>
                        <hashTree/>
                      </hashTree>
                      <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ThinkTime - 10" enabled="true">
                        <stringProp name="TestPlan.comments">This transaction will wait for 10 seconds</stringProp>
                      </GenericController>
                      <hashTree>
                        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="ThinkTime" enabled="true">
                          <stringProp name="ConstantTimer.delay">10000</stringProp>
                          <stringProp name="TestPlan.comments">   Converting seconds to milliseconds - 10s x 1000</stringProp>
                        </ConstantTimer>
                        <hashTree/>
                      </hashTree>
                    </hashTree>
                  </hashTree>
                  <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Go to Next loop Iteration" enabled="true">
                    <intProp name="ActionProcessor.action">3</intProp>
                    <intProp name="ActionProcessor.target">0</intProp>
                    <stringProp name="ActionProcessor.duration"></stringProp>
                  </TestAction>
                  <hashTree/>
                </hashTree>
                <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP06_H_Triage_Select_Policy" enabled="true">
                  <boolProp name="TransactionController.includeTimers">false</boolProp>
                  <boolProp name="TransactionController.parent">true</boolProp>
                </TransactionController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_6" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">TabBar%3AClaimTab%3AClaimTab_FindClaim=&amp;QuickJump=&amp;FNOLWizard%3A0_toggle=&amp;FNOLWizard%3A1_toggle=&amp;FNOLWizard%3AFNOLWizard_FindPolicyScreen%3ApolicyTypePageModeDV%3APolicyType=auto_per&amp;FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AScreenMode1=true&amp;FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AReportedByFN=&amp;FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AReportedByLN=&amp;FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AreportedByPhone=&amp;FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AreportedByPhoneExtn=&amp;FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AClaim_ReportedByType=&amp;FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AFNOLWizardFindPolicyPanelSet%3APolicySearchSP%3ATriageAuto=&amp;FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AFNOLWizardFindPolicyPanelSet%3APolicySearchSP%3AClaim_lossTimeAuto=12%3A00%20AM&amp;FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AFNOLWizardFindPolicyPanelSet%3APolicySearchSP%3AlossStateAuto=${STATE}&amp;FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AFNOLWizardFindPolicyPanelSet%3APolicySearchSP%3AlossCategoryAuto=&amp;FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AFNOLWizardFindPolicyPanelSet%3APolicySearchSP%3AanyInjuryAuto=false&amp;PolicySearch.LM_SearchOption_Radio=FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AFNOLWizardFindPolicyPanelSet%3APolicySearchSP%3AnameSearchAuto_Choice&amp;FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AFNOLWizardFindPolicyPanelSet%3APolicySearchSP%3AfirstnameAuto=${FIRSTNAME}&amp;FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AFNOLWizardFindPolicyPanelSet%3APolicySearchSP%3AlastnameAuto=${LASTNAME}&amp;FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AFNOLWizardFindPolicyPanelSet%3APolicySearchSP%3AcityAuto=&amp;FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AFNOLWizardFindPolicyPanelSet%3APolicySearchSP%3AstateAuto=${AGREEMENTSOURCE}&amp;FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AFNOLWizardFindPolicyPanelSet%3APolicySearchSP%3ApostalCodeAuto=&amp;%3Atblinks=${cTBLINKS_1_URL2}&amp;%3Atabs=${cTABS_URL2}&amp;infoBar=${cINFOBAR_1_URL2}&amp;FNOLWizard%3AFNOLMenuActions=${cFNOLMENUACTIONS_URL2}&amp;FNOLWizard%3A0=${cFNOLWIZARD0_URL2}&amp;FNOLWizard%3A1=${cFNOLWIZARD1_URL2}&amp;csrfToken=&amp;eventSource=FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AFNOLWizardFindPolicyPanelSet%3APolicySearchSP%3APolicyResultLV%3A0%3AselectButton_act&amp;objFocusId=FNOLWizard%3AFNOLWizard_FindPolicyScreen%3AFNOLWizardFindPolicyPanelSet%3APolicySearchSP%3APolicyResultLV%3A0%3AselectButton</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <boolProp name="HTTPSampler.image_parser">true</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="Accept-Language" elementType="Header">
                          <stringProp name="Header.name">DNT</stringProp>
                          <stringProp name="Header.value">1</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cINFOBAR_2 Extractor" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">cINFOBAR_2</stringProp>
                      <stringProp name="RegexExtractor.regex">\\/span&gt;&quot;,&quot;cls&quot;:&quot;infobar_elem&quot;,&quot;noaction&quot;:1,&quot;disabled&quot;:true}],&quot;checksum&quot;:&quot;(.*?)&quot;},</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">null</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cFNOLWIZARD0_1 Extractor" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">cFNOLWIZARD0_1</stringProp>
                      <stringProp name="RegexExtractor.regex">Claim&quot;,&quot;eventId&quot;:&quot;FNOLWizard:Summary&quot;,&quot;disabled&quot;:true}],&quot;xtype&quot;:&quot;accordionpanel&quot;,&quot;checksum&quot;:&quot;(.*?)&quot;,</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">null</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                    <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor CNG_TP06_H_Triage_Select_Policy" enabled="true">
                      <stringProp name="scriptLanguage">groovy</stringProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="cacheKey">aa29db4a-3c42-4a10-9b0e-689135a8626e</stringProp>
                      <stringProp name="script">	vars.put(&quot;cINFOBAR_2_URL2&quot;,java.net.URLDecoder.decode(vars.get(&quot;cINFOBAR_2&quot;), &quot;UTF-8&quot;));
</stringProp>
                    </JSR223PostProcessor>
                    <hashTree/>
                  </hashTree>
                  <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ThinkTime - 10" enabled="true">
                    <stringProp name="TestPlan.comments">This transaction will wait for 10 seconds</stringProp>
                  </GenericController>
                  <hashTree>
                    <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="ThinkTime" enabled="true">
                      <stringProp name="ConstantTimer.delay">10000</stringProp>
                      <stringProp name="TestPlan.comments">   Converting seconds to milliseconds - 10s x 1000</stringProp>
                    </ConstantTimer>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP06_I_Triage_Next_To_Basic_Information" enabled="true">
                  <boolProp name="TransactionController.includeTimers">false</boolProp>
                  <boolProp name="TransactionController.parent">true</boolProp>
                </TransactionController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_7" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="FNOLWizard:FNOLWizard_FindPolicyScreen:ReportedByLN" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">FNOLWizard:FNOLWizard_FindPolicyScreen:ReportedByLN</stringProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="FNOLWizard:FNOLWizard_FindPolicyScreen:reportedByPhone" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">FNOLWizard:FNOLWizard_FindPolicyScreen:reportedByPhone</stringProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="infoBar" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">infoBar</stringProp>
                          <stringProp name="Argument.value">${cINFOBAR_2}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="TabBar:ClaimTab:ClaimTab_FindClaim" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">TabBar:ClaimTab:ClaimTab_FindClaim</stringProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name=":tabs" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">:tabs</stringProp>
                          <stringProp name="Argument.value">${cTABS}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="QuickJump" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">QuickJump</stringProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name=":tblinks" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">:tblinks</stringProp>
                          <stringProp name="Argument.value">${cTBLINKS_1}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="FNOLWizard:0_toggle" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">FNOLWizard:0_toggle</stringProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:ClaimMode" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:ClaimMode</stringProp>
                          <stringProp name="Argument.value">Auto</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="FNOLWizard:1_toggle" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">FNOLWizard:1_toggle</stringProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="csrfToken" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">csrfToken</stringProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="FNOLWizard:FNOLWizard_FindPolicyScreen:policyTypePageModeDV:PolicyType" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">FNOLWizard:FNOLWizard_FindPolicyScreen:policyTypePageModeDV:PolicyType</stringProp>
                          <stringProp name="Argument.value">auto_per</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="FNOLWizard:1" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">FNOLWizard:1</stringProp>
                          <stringProp name="Argument.value">${cFNOLWIZARD1}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="FNOLWizard:FNOLWizard_FindPolicyScreen:ScreenMode1" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">FNOLWizard:FNOLWizard_FindPolicyScreen:ScreenMode1</stringProp>
                          <stringProp name="Argument.value">true</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="FNOLWizard:0" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">FNOLWizard:0</stringProp>
                          <stringProp name="Argument.value">${cFNOLWIZARD0_1}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="FNOLWizard:FNOLWizard_FindPolicyScreen:ReportedByFN" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">FNOLWizard:FNOLWizard_FindPolicyScreen:ReportedByFN</stringProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="FNOLWizard:FNOLMenuActions" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">FNOLWizard:FNOLMenuActions</stringProp>
                          <stringProp name="Argument.value">${cFNOLMENUACTIONS}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:PolicySearchSP:postalCodeAuto" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:PolicySearchSP:postalCodeAuto</stringProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:PolicySearchSP:stateAuto" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:PolicySearchSP:stateAuto</stringProp>
                          <stringProp name="Argument.value">${AGREEMENTSOURCE}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:PolicySearchSP:cityAuto" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:PolicySearchSP:cityAuto</stringProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:PolicySearchSP:lossCategoryAuto" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:PolicySearchSP:lossCategoryAuto</stringProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:PolicySearchSP:lossStateAuto" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:PolicySearchSP:lossStateAuto</stringProp>
                          <stringProp name="Argument.value">${STATE}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:PolicySearchSP:TriageAuto" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:PolicySearchSP:TriageAuto</stringProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="FNOLWizard:FNOLWizard_FindPolicyScreen:Claim_ReportedByType" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">FNOLWizard:FNOLWizard_FindPolicyScreen:Claim_ReportedByType</stringProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:PolicySearchSP:lastnameAuto" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:PolicySearchSP:lastnameAuto</stringProp>
                          <stringProp name="Argument.value">${LASTNAME}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:PolicySearchSP:firstnameAuto" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:PolicySearchSP:firstnameAuto</stringProp>
                          <stringProp name="Argument.value">${FIRSTNAME}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="PolicySearch.LM_SearchOption_Radio" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">PolicySearch.LM_SearchOption_Radio</stringProp>
                          <stringProp name="Argument.value">FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:PolicySearchSP:nameSearchAuto_Choice</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:PolicySearchSP:anyInjuryAuto" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:PolicySearchSP:anyInjuryAuto</stringProp>
                          <stringProp name="Argument.value">false</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="FNOLWizard:FNOLWizard_FindPolicyScreen:reportedByPhoneExtn" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">FNOLWizard:FNOLWizard_FindPolicyScreen:reportedByPhoneExtn</stringProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="objFocusId" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">objFocusId</stringProp>
                          <stringProp name="Argument.value">FNOLWizard:Next</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="eventSource" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">eventSource</stringProp>
                          <stringProp name="Argument.value">FNOLWizard:Next_act</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <boolProp name="HTTPSampler.image_parser">true</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="Accept-Language" elementType="Header">
                          <stringProp name="Header.name">DNT</stringProp>
                          <stringProp name="Header.value">1</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="-1945657509">Possible Duplicate Claims</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">16</intProp>
                    </ResponseAssertion>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="PossibleDuplicateClaims Extractor" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">PossibleDuplicateClaims</stringProp>
                      <stringProp name="RegexExtractor.regex">Possible Duplicate Claims(.*?)</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">null</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cINFOBAR_3 Extractor" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">cINFOBAR_3</stringProp>
                      <stringProp name="RegexExtractor.regex">\\/span&gt;&quot;,&quot;cls&quot;:&quot;infobar_elem&quot;,&quot;noaction&quot;:1,&quot;disabled&quot;:true}],&quot;checksum&quot;:&quot;(.*?)&quot;},</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">null</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cPERSON Extractor" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">cPERSON</stringProp>
                      <stringProp name="RegexExtractor.regex">Person:(.*?)&quot;,</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">null</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cINFOBAR_4 Extractor" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">cINFOBAR_4</stringProp>
                      <stringProp name="RegexExtractor.regex">\\/span&gt;&quot;,&quot;cls&quot;:&quot;infobar_elem&quot;,&quot;noaction&quot;:1,&quot;disabled&quot;:true}],&quot;checksum&quot;:&quot;(.*?)&quot;},</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">null</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cFNOLWIZARD0_2 Extractor" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">cFNOLWIZARD0_2</stringProp>
                      <stringProp name="RegexExtractor.regex">Claim&quot;,&quot;eventId&quot;:&quot;FNOLWizard:Summary&quot;,&quot;disabled&quot;:true}],&quot;xtype&quot;:&quot;accordionpanel&quot;,&quot;checksum&quot;:&quot;(.*?)&quot;,</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">null</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cFNOLWIZARD1_1&quot; Extractor" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">cFNOLWIZARD1_1&quot;</stringProp>
                      <stringProp name="RegexExtractor.regex">rProfile&quot;}],&quot;xtype&quot;:&quot;noncollapsingpanel&quot;},\{&quot;title&quot;:&quot;Notes&quot;,&quot;eventId&quot;:&quot;FNOLWizard:Notes&quot;}],&quot;xtype&quot;:&quot;accordionpanel&quot;,&quot;checksum&quot;:&quot;(.*?)&quot;,</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">null</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_7" enabled="false">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="FNOLWizard:FNOLWizard_FindPolicyScreen:ReportedByLN" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">FNOLWizard:FNOLWizard_FindPolicyScreen:ReportedByLN</stringProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="FNOLWizard:FNOLWizard_FindPolicyScreen:reportedByPhone" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">FNOLWizard:FNOLWizard_FindPolicyScreen:reportedByPhone</stringProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="infoBar" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">infoBar</stringProp>
                          <stringProp name="Argument.value">${cINFOBAR_2}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="TabBar:ClaimTab:ClaimTab_FindClaim" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">TabBar:ClaimTab:ClaimTab_FindClaim</stringProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name=":tabs" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">:tabs</stringProp>
                          <stringProp name="Argument.value">${cTABS}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="QuickJump" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">QuickJump</stringProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name=":tblinks" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">:tblinks</stringProp>
                          <stringProp name="Argument.value">${cTBLINKS_1}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="FNOLWizard:0_toggle" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">FNOLWizard:0_toggle</stringProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:ClaimMode" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:ClaimMode</stringProp>
                          <stringProp name="Argument.value">Auto</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="FNOLWizard:1_toggle" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">FNOLWizard:1_toggle</stringProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="csrfToken" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">csrfToken</stringProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="FNOLWizard:FNOLWizard_FindPolicyScreen:policyTypePageModeDV:PolicyType" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">FNOLWizard:FNOLWizard_FindPolicyScreen:policyTypePageModeDV:PolicyType</stringProp>
                          <stringProp name="Argument.value">auto_per</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="FNOLWizard:1" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">FNOLWizard:1</stringProp>
                          <stringProp name="Argument.value">${cFNOLWIZARD1}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="FNOLWizard:FNOLWizard_FindPolicyScreen:ScreenMode1" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">FNOLWizard:FNOLWizard_FindPolicyScreen:ScreenMode1</stringProp>
                          <stringProp name="Argument.value">true</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="FNOLWizard:0" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">FNOLWizard:0</stringProp>
                          <stringProp name="Argument.value">${cFNOLWIZARD0_1}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="FNOLWizard:FNOLWizard_FindPolicyScreen:ReportedByFN" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">FNOLWizard:FNOLWizard_FindPolicyScreen:ReportedByFN</stringProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="FNOLWizard:FNOLMenuActions" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">FNOLWizard:FNOLMenuActions</stringProp>
                          <stringProp name="Argument.value">${cFNOLMENUACTIONS}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:PolicySearchSP:postalCodeAuto" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:PolicySearchSP:postalCodeAuto</stringProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:PolicySearchSP:stateAuto" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:PolicySearchSP:stateAuto</stringProp>
                          <stringProp name="Argument.value">${AGREEMENTSOURCE}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:PolicySearchSP:cityAuto" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:PolicySearchSP:cityAuto</stringProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:PolicySearchSP:lossCategoryAuto" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:PolicySearchSP:lossCategoryAuto</stringProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:PolicySearchSP:lossStateAuto" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:PolicySearchSP:lossStateAuto</stringProp>
                          <stringProp name="Argument.value">${STATE}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:PolicySearchSP:TriageAuto" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:PolicySearchSP:TriageAuto</stringProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="FNOLWizard:FNOLWizard_FindPolicyScreen:Claim_ReportedByType" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">FNOLWizard:FNOLWizard_FindPolicyScreen:Claim_ReportedByType</stringProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:PolicySearchSP:lastnameAuto" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:PolicySearchSP:lastnameAuto</stringProp>
                          <stringProp name="Argument.value">${LASTNAME}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:PolicySearchSP:firstnameAuto" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:PolicySearchSP:firstnameAuto</stringProp>
                          <stringProp name="Argument.value">${FIRSTNAME}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="PolicySearch.LM_SearchOption_Radio" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">PolicySearch.LM_SearchOption_Radio</stringProp>
                          <stringProp name="Argument.value">FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:PolicySearchSP:nameSearchAuto_Choice</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:PolicySearchSP:anyInjuryAuto" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:PolicySearchSP:anyInjuryAuto</stringProp>
                          <stringProp name="Argument.value">false</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="FNOLWizard:FNOLWizard_FindPolicyScreen:reportedByPhoneExtn" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">FNOLWizard:FNOLWizard_FindPolicyScreen:reportedByPhoneExtn</stringProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="objFocusId" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">objFocusId</stringProp>
                          <stringProp name="Argument.value">FNOLWizard:Next</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="eventSource" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">eventSource</stringProp>
                          <stringProp name="Argument.value">FNOLWizard:Next_act</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <boolProp name="HTTPSampler.image_parser">true</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="Accept-Language" elementType="Header">
                          <stringProp name="Header.name">DNT</stringProp>
                          <stringProp name="Header.value">1</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="-1945657509">Possible Duplicate Claims</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">16</intProp>
                    </ResponseAssertion>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="PossibleDuplicateClaims Extractor" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">PossibleDuplicateClaims</stringProp>
                      <stringProp name="RegexExtractor.regex">Possible Duplicate Claims(.*?)</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">null</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                  </hashTree>
                  <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ThinkTime - 10" enabled="true">
                    <stringProp name="TestPlan.comments">This transaction will wait for 10 seconds</stringProp>
                  </GenericController>
                  <hashTree>
                    <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="ThinkTime" enabled="true">
                      <stringProp name="ConstantTimer.delay">10000</stringProp>
                      <stringProp name="TestPlan.comments">   Converting seconds to milliseconds - 10s x 1000</stringProp>
                    </ConstantTimer>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If &quot;${PossibleDuplicateClaims}&quot; != &quot;null&quot;" enabled="true">
                  <stringProp name="IfController.condition">&quot;${PossibleDuplicateClaims}&quot; != &quot;null&quot;</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP06_L_Triage_Close_Duplicate_Claims" enabled="true">
                    <boolProp name="TransactionController.includeTimers">false</boolProp>
                    <boolProp name="TransactionController.parent">true</boolProp>
                  </TransactionController>
                  <hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_8" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="FNOLWizard:FNOLWizard_FindPolicyScreen:ReportedByLN" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:FNOLWizard_FindPolicyScreen:ReportedByLN</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:FNOLWizard_FindPolicyScreen:reportedByPhone" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:FNOLWizard_FindPolicyScreen:reportedByPhone</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="infoBar" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">infoBar</stringProp>
                            <stringProp name="Argument.value">${cINFOBAR_3}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="TabBar:ClaimTab:ClaimTab_FindClaim" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">TabBar:ClaimTab:ClaimTab_FindClaim</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name=":tabs" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">:tabs</stringProp>
                            <stringProp name="Argument.value">${cTABS}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="QuickJump" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">QuickJump</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name=":tblinks" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">:tblinks</stringProp>
                            <stringProp name="Argument.value">${cTBLINKS_1}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:0_toggle" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:0_toggle</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:ClaimMode" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:ClaimMode</stringProp>
                            <stringProp name="Argument.value">Auto</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:1_toggle" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:1_toggle</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="csrfToken" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">csrfToken</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:FNOLWizard_FindPolicyScreen:policyTypePageModeDV:PolicyType" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:FNOLWizard_FindPolicyScreen:policyTypePageModeDV:PolicyType</stringProp>
                            <stringProp name="Argument.value">auto_per</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:1" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:1</stringProp>
                            <stringProp name="Argument.value">${cFNOLWIZARD1}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:FNOLWizard_FindPolicyScreen:ScreenMode1" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:FNOLWizard_FindPolicyScreen:ScreenMode1</stringProp>
                            <stringProp name="Argument.value">true</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:0" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:0</stringProp>
                            <stringProp name="Argument.value">${cFNOLWIZARD0_1}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:FNOLWizard_FindPolicyScreen:ReportedByFN" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:FNOLWizard_FindPolicyScreen:ReportedByFN</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:FNOLMenuActions" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:FNOLMenuActions</stringProp>
                            <stringProp name="Argument.value">${cFNOLMENUACTIONS}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:PolicySearchSP:postalCodeAuto" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:PolicySearchSP:postalCodeAuto</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:PolicySearchSP:stateAuto" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:PolicySearchSP:stateAuto</stringProp>
                            <stringProp name="Argument.value">${AGREEMENTSOURCE}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:PolicySearchSP:cityAuto" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:PolicySearchSP:cityAuto</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:PolicySearchSP:lossCategoryAuto" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:PolicySearchSP:lossCategoryAuto</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:PolicySearchSP:lossStateAuto" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:PolicySearchSP:lossStateAuto</stringProp>
                            <stringProp name="Argument.value">${STATE}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:PolicySearchSP:TriageAuto" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:PolicySearchSP:TriageAuto</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:FNOLWizard_FindPolicyScreen:Claim_ReportedByType" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:FNOLWizard_FindPolicyScreen:Claim_ReportedByType</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:PolicySearchSP:lastnameAuto" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:PolicySearchSP:lastnameAuto</stringProp>
                            <stringProp name="Argument.value">${LASTNAME}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:PolicySearchSP:firstnameAuto" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:PolicySearchSP:firstnameAuto</stringProp>
                            <stringProp name="Argument.value">${FIRSTNAME}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="PolicySearch.LM_SearchOption_Radio" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">PolicySearch.LM_SearchOption_Radio</stringProp>
                            <stringProp name="Argument.value">FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:PolicySearchSP:nameSearchAuto_Choice</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:PolicySearchSP:anyInjuryAuto" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:PolicySearchSP:anyInjuryAuto</stringProp>
                            <stringProp name="Argument.value">false</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:FNOLWizard_FindPolicyScreen:reportedByPhoneExtn" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:FNOLWizard_FindPolicyScreen:reportedByPhoneExtn</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="objFocusId" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">objFocusId</stringProp>
                            <stringProp name="Argument.value">NewClaimDuplicatesWorksheet:NewClaimDuplicatesScreen:NewClaimDuplicatesWorksheet_CloseButton</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="eventSource" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">eventSource</stringProp>
                            <stringProp name="Argument.value">NewClaimDuplicatesWorksheet:NewClaimDuplicatesScreen:NewClaimDuplicatesWorksheet_CloseButton_act</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol">https</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                      <stringProp name="HTTPSampler.method">POST</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                      <boolProp name="HTTPSampler.image_parser">true</boolProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="Accept-Language" elementType="Header">
                            <stringProp name="Header.name">DNT</stringProp>
                            <stringProp name="Header.value">1</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                    </hashTree>
                    <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ThinkTime - 10" enabled="true">
                      <stringProp name="TestPlan.comments">This transaction will wait for 10 seconds</stringProp>
                    </GenericController>
                    <hashTree>
                      <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="ThinkTime" enabled="true">
                        <stringProp name="ConstantTimer.delay">10000</stringProp>
                        <stringProp name="TestPlan.comments">   Converting seconds to milliseconds - 10s x 1000</stringProp>
                      </ConstantTimer>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                  <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP06_M_Triage_Next_to_Basic_Information" enabled="true">
                    <boolProp name="TransactionController.includeTimers">false</boolProp>
                    <boolProp name="TransactionController.parent">true</boolProp>
                  </TransactionController>
                  <hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_9" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="FNOLWizard:FNOLWizard_FindPolicyScreen:ReportedByLN" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:FNOLWizard_FindPolicyScreen:ReportedByLN</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:FNOLWizard_FindPolicyScreen:reportedByPhone" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:FNOLWizard_FindPolicyScreen:reportedByPhone</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="infoBar" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">infoBar</stringProp>
                            <stringProp name="Argument.value">${cINFOBAR_3}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="TabBar:ClaimTab:ClaimTab_FindClaim" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">TabBar:ClaimTab:ClaimTab_FindClaim</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name=":tabs" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">:tabs</stringProp>
                            <stringProp name="Argument.value">${cTABS}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="QuickJump" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">QuickJump</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name=":tblinks" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">:tblinks</stringProp>
                            <stringProp name="Argument.value">${cTBLINKS_1}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:0_toggle" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:0_toggle</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:ClaimMode" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:ClaimMode</stringProp>
                            <stringProp name="Argument.value">Auto</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:1_toggle" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:1_toggle</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="csrfToken" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">csrfToken</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:FNOLWizard_FindPolicyScreen:policyTypePageModeDV:PolicyType" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:FNOLWizard_FindPolicyScreen:policyTypePageModeDV:PolicyType</stringProp>
                            <stringProp name="Argument.value">auto_per</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:1" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:1</stringProp>
                            <stringProp name="Argument.value">${cFNOLWIZARD1}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:FNOLWizard_FindPolicyScreen:ScreenMode1" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:FNOLWizard_FindPolicyScreen:ScreenMode1</stringProp>
                            <stringProp name="Argument.value">true</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:0" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:0</stringProp>
                            <stringProp name="Argument.value">${cFNOLWIZARD0_1}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:FNOLWizard_FindPolicyScreen:ReportedByFN" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:FNOLWizard_FindPolicyScreen:ReportedByFN</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:FNOLMenuActions" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:FNOLMenuActions</stringProp>
                            <stringProp name="Argument.value">${cFNOLMENUACTIONS}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:PolicySearchSP:postalCodeAuto" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:PolicySearchSP:postalCodeAuto</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:PolicySearchSP:stateAuto" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:PolicySearchSP:stateAuto</stringProp>
                            <stringProp name="Argument.value">${AGREEMENTSOURCE}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:PolicySearchSP:cityAuto" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:PolicySearchSP:cityAuto</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:PolicySearchSP:lossCategoryAuto" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:PolicySearchSP:lossCategoryAuto</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:PolicySearchSP:lossStateAuto" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:PolicySearchSP:lossStateAuto</stringProp>
                            <stringProp name="Argument.value">${STATE}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:PolicySearchSP:TriageAuto" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:PolicySearchSP:TriageAuto</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:FNOLWizard_FindPolicyScreen:Claim_ReportedByType" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:FNOLWizard_FindPolicyScreen:Claim_ReportedByType</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:PolicySearchSP:lastnameAuto" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:PolicySearchSP:lastnameAuto</stringProp>
                            <stringProp name="Argument.value">${LASTNAME}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:PolicySearchSP:firstnameAuto" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:PolicySearchSP:firstnameAuto</stringProp>
                            <stringProp name="Argument.value">${FIRSTNAME}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="PolicySearch.LM_SearchOption_Radio" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">PolicySearch.LM_SearchOption_Radio</stringProp>
                            <stringProp name="Argument.value">FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:PolicySearchSP:nameSearchAuto_Choice</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:PolicySearchSP:anyInjuryAuto" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:PolicySearchSP:anyInjuryAuto</stringProp>
                            <stringProp name="Argument.value">false</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:FNOLWizard_FindPolicyScreen:reportedByPhoneExtn" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:FNOLWizard_FindPolicyScreen:reportedByPhoneExtn</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="objFocusId" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">objFocusId</stringProp>
                            <stringProp name="Argument.value">FNOLWizard:Next</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="eventSource" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">eventSource</stringProp>
                            <stringProp name="Argument.value">FNOLWizard:Next_act</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol">https</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                      <stringProp name="HTTPSampler.method">POST</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                      <boolProp name="HTTPSampler.image_parser">true</boolProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="Accept-Language" elementType="Header">
                            <stringProp name="Header.name">DNT</stringProp>
                            <stringProp name="Header.value">1</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                      <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cPERSON Extractor" enabled="true">
                        <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                        <stringProp name="RegexExtractor.refname">cPERSON</stringProp>
                        <stringProp name="RegexExtractor.regex">Person:(.*?)&quot;,</stringProp>
                        <stringProp name="RegexExtractor.template">$1$</stringProp>
                        <stringProp name="RegexExtractor.default">null</stringProp>
                        <stringProp name="RegexExtractor.match_number">1</stringProp>
                      </RegexExtractor>
                      <hashTree/>
                      <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cINFOBAR_4 Extractor" enabled="true">
                        <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                        <stringProp name="RegexExtractor.refname">cINFOBAR_4</stringProp>
                        <stringProp name="RegexExtractor.regex">\\/span&gt;&quot;,&quot;cls&quot;:&quot;infobar_elem&quot;,&quot;noaction&quot;:1,&quot;disabled&quot;:true}],&quot;checksum&quot;:&quot;(.*?)&quot;},</stringProp>
                        <stringProp name="RegexExtractor.template">$1$</stringProp>
                        <stringProp name="RegexExtractor.default">null</stringProp>
                        <stringProp name="RegexExtractor.match_number">1</stringProp>
                      </RegexExtractor>
                      <hashTree/>
                      <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cFNOLWIZARD0_2 Extractor" enabled="true">
                        <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                        <stringProp name="RegexExtractor.refname">cFNOLWIZARD0_2</stringProp>
                        <stringProp name="RegexExtractor.regex">Claim&quot;,&quot;eventId&quot;:&quot;FNOLWizard:Summary&quot;,&quot;disabled&quot;:true}],&quot;xtype&quot;:&quot;accordionpanel&quot;,&quot;checksum&quot;:&quot;(.*?)&quot;,</stringProp>
                        <stringProp name="RegexExtractor.template">$1$</stringProp>
                        <stringProp name="RegexExtractor.default">null</stringProp>
                        <stringProp name="RegexExtractor.match_number">1</stringProp>
                      </RegexExtractor>
                      <hashTree/>
                      <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cFNOLWIZARD1_1&quot; Extractor" enabled="true">
                        <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                        <stringProp name="RegexExtractor.refname">cFNOLWIZARD1_1&quot;</stringProp>
                        <stringProp name="RegexExtractor.regex">rProfile&quot;}],&quot;xtype&quot;:&quot;noncollapsingpanel&quot;},\{&quot;title&quot;:&quot;Notes&quot;,&quot;eventId&quot;:&quot;FNOLWizard:Notes&quot;}],&quot;xtype&quot;:&quot;accordionpanel&quot;,&quot;checksum&quot;:&quot;(.*?)&quot;,</stringProp>
                        <stringProp name="RegexExtractor.template">$1$</stringProp>
                        <stringProp name="RegexExtractor.default">null</stringProp>
                        <stringProp name="RegexExtractor.match_number">1</stringProp>
                      </RegexExtractor>
                      <hashTree/>
                    </hashTree>
                    <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ThinkTime - 10" enabled="true">
                      <stringProp name="TestPlan.comments">This transaction will wait for 10 seconds</stringProp>
                    </GenericController>
                    <hashTree>
                      <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="ThinkTime" enabled="true">
                        <stringProp name="ConstantTimer.delay">10000</stringProp>
                        <stringProp name="TestPlan.comments">   Converting seconds to milliseconds - 10s x 1000</stringProp>
                      </ConstantTimer>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                </hashTree>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="-BASICINFORMATION" enabled="true">
              <stringProp name="TestPlan.comments">This section contains the BASICINFORMATION part of Loadrunner</stringProp>
            </GenericController>
            <hashTree>
              <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP06_N_Basic_Information_Select_Person" enabled="true">
                <boolProp name="TransactionController.includeTimers">false</boolProp>
                <boolProp name="TransactionController.parent">true</boolProp>
              </TransactionController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_10" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_BasicInfoScreen:PanelRow:NewClaimPeopleDV:Claim_ReportedByType" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_BasicInfoScreen:PanelRow:NewClaimPeopleDV:Claim_ReportedByType</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_BasicInfoScreen:PanelRow:NewClaimPeopleDV:Notification_ReportedDate" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_BasicInfoScreen:PanelRow:NewClaimPeopleDV:Notification_ReportedDate</stringProp>
                        <stringProp name="Argument.value">${DATE}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="TabBar:ClaimTab:ClaimTab_FindClaim" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">TabBar:ClaimTab:ClaimTab_FindClaim</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="QuickJump" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">QuickJump</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:0_toggle" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:0_toggle</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:1_toggle" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:1_toggle</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_BasicInfoScreen:PanelRow:NewClaimPeopleDV:HowReported" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_BasicInfoScreen:PanelRow:NewClaimPeopleDV:HowReported</stringProp>
                        <stringProp name="Argument.value">phone</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_BasicInfoScreen:PanelRow:NewClaimPeopleDV:ReportRecorded" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_BasicInfoScreen:PanelRow:NewClaimPeopleDV:ReportRecorded</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_BasicInfoScreen:PanelRow:NewClaimPeopleDV:ReportedBy_NameNew" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_BasicInfoScreen:PanelRow:NewClaimPeopleDV:ReportedBy_NameNew</stringProp>
                        <stringProp name="Argument.value">Person:${cPERSON}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="objFocusId" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">objFocusId</stringProp>
                        <stringProp name="Argument.value">FNOLWizard:FNOLWizardStepSet:FNOLWizard_BasicInfoScreen:PanelRow:NewClaimPeopleDV:ReportedBy_NameNew</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="eventParam" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">eventParam</stringProp>
                        <stringProp name="Argument.value">FNOLWizard:FNOLWizardStepSet:FNOLWizard_BasicInfoScreen:PanelRow:NewClaimPeopleDV:ReportedBy_NameNew</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:FNOLMenuActions" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:FNOLMenuActions</stringProp>
                        <stringProp name="Argument.value">${cFNOLMENUACTIONS}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="infoBar" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">infoBar</stringProp>
                        <stringProp name="Argument.value">${cINFOBAR_4}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name=":tabs" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">:tabs</stringProp>
                        <stringProp name="Argument.value">${cTABS}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name=":tblinks" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">:tblinks</stringProp>
                        <stringProp name="Argument.value">${cTBLINKS_1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="eventSource" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">eventSource</stringProp>
                        <stringProp name="Argument.value">_refresh_</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="csrfToken" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">csrfToken</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:1" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:1</stringProp>
                        <stringProp name="Argument.value">${cFNOLWIZARD1_1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:0" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:0</stringProp>
                        <stringProp name="Argument.value">${cFNOLWIZARD0_2}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_BasicInfoScreen:PanelRow:NewClaimPeopleDV:HiddenInsured" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_BasicInfoScreen:PanelRow:NewClaimPeopleDV:HiddenInsured</stringProp>
                        <stringProp name="Argument.value">Person:${cPERSON}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                  <boolProp name="HTTPSampler.image_parser">true</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">DNT</stringProp>
                        <stringProp name="Header.value">1</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ThinkTime - 10" enabled="true">
                  <stringProp name="TestPlan.comments">This transaction will wait for 10 seconds</stringProp>
                </GenericController>
                <hashTree>
                  <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="ThinkTime" enabled="true">
                    <stringProp name="ConstantTimer.delay">10000</stringProp>
                    <stringProp name="TestPlan.comments">   Converting seconds to milliseconds - 10s x 1000</stringProp>
                  </ConstantTimer>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP06_O_Basic_Information_Next_To_Add_Claim_Information" enabled="true">
                <boolProp name="TransactionController.includeTimers">false</boolProp>
                <boolProp name="TransactionController.parent">true</boolProp>
              </TransactionController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_11" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_BasicInfoScreen:PanelRow:NewClaimPeopleDV:Claim_ReportedByType" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_BasicInfoScreen:PanelRow:NewClaimPeopleDV:Claim_ReportedByType</stringProp>
                        <stringProp name="Argument.value">self</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_BasicInfoScreen:PanelRow:NewClaimPeopleDV:Notification_ReportedDate" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_BasicInfoScreen:PanelRow:NewClaimPeopleDV:Notification_ReportedDate</stringProp>
                        <stringProp name="Argument.value">${DATE}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="TabBar:ClaimTab:ClaimTab_FindClaim" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">TabBar:ClaimTab:ClaimTab_FindClaim</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="QuickJump" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">QuickJump</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:0_toggle" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:0_toggle</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:1_toggle" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:1_toggle</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_BasicInfoScreen:PanelRow:NewClaimPeopleDV:HowReported" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_BasicInfoScreen:PanelRow:NewClaimPeopleDV:HowReported</stringProp>
                        <stringProp name="Argument.value">phone</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_BasicInfoScreen:PanelRow:NewClaimPeopleDV:ReportRecorded" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_BasicInfoScreen:PanelRow:NewClaimPeopleDV:ReportRecorded</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_BasicInfoScreen:PanelRow:NewClaimPeopleDV:ReportedBy_NameNew" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_BasicInfoScreen:PanelRow:NewClaimPeopleDV:ReportedBy_NameNew</stringProp>
                        <stringProp name="Argument.value">Person:${cPERSON}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="objFocusId" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">objFocusId</stringProp>
                        <stringProp name="Argument.value">FNOLWizard:Next</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="eventSource" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">eventSource</stringProp>
                        <stringProp name="Argument.value">FNOLWizard:Next_act</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="infoBar" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">infoBar</stringProp>
                        <stringProp name="Argument.value">${cINFOBAR_4}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name=":tabs" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">:tabs</stringProp>
                        <stringProp name="Argument.value">${cTABS}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name=":tblinks" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">:tblinks</stringProp>
                        <stringProp name="Argument.value">${cTBLINKS_1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_BasicInfoScreen:PanelRow:NewClaimPeopleDV:HiddenInsured" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_BasicInfoScreen:PanelRow:NewClaimPeopleDV:HiddenInsured</stringProp>
                        <stringProp name="Argument.value">Person:${cPERSON}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="csrfToken" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">csrfToken</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:1" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:1</stringProp>
                        <stringProp name="Argument.value">${cFNOLWIZARD1_1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:0" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:0</stringProp>
                        <stringProp name="Argument.value">${cFNOLWIZARD0_2}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:FNOLMenuActions" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:FNOLMenuActions</stringProp>
                        <stringProp name="Argument.value">${cFNOLMENUACTIONS}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_BasicInfoScreen:PanelRow:NewClaimPeopleDV:EmailAllowed" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_BasicInfoScreen:PanelRow:NewClaimPeopleDV:EmailAllowed</stringProp>
                        <stringProp name="Argument.value">false</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                  <boolProp name="HTTPSampler.image_parser">true</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">DNT</stringProp>
                        <stringProp name="Header.value">1</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="CNG_TP06_O_Basic_Information_Next_To_Add_Claim_Information -- Unsuccessful Policy, ${POLICYNUMBER} , ${POLEFFDATE} , ${POLEXPDATE} , ${PHONENUMBER} ,${LASTNAME},${FIRSTNAME} ,${STATE}, ${POLICYTYPE},${AGREEMENTSOURCE}" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-1685924503">Add claim information</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="ResponseOk Extractor" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">ResponseOk</stringProp>
                    <stringProp name="RegexExtractor.regex">Add claim information(.*?)</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">null</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cFNOLWIZARD0_3 Extractor" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">cFNOLWIZARD0_3</stringProp>
                    <stringProp name="RegexExtractor.regex">Claim&quot;,&quot;eventId&quot;:&quot;FNOLWizard:Summary&quot;,&quot;disabled&quot;:true}],&quot;xtype&quot;:&quot;accordionpanel&quot;,&quot;checksum&quot;:&quot;(.*?)&quot;,</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">null</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cADDRESS Extractor" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">cADDRESS</stringProp>
                    <stringProp name="RegexExtractor.regex">Address:(.*?)&quot;,</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">null</stringProp>
                    <stringProp name="RegexExtractor.match_number">2</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ThinkTime - 10" enabled="true">
                  <stringProp name="TestPlan.comments">This transaction will wait for 10 seconds</stringProp>
                </GenericController>
                <hashTree>
                  <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="ThinkTime" enabled="true">
                    <stringProp name="ConstantTimer.delay">10000</stringProp>
                    <stringProp name="TestPlan.comments">   Converting seconds to milliseconds - 10s x 1000</stringProp>
                  </ConstantTimer>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If CNG_TP06_O_Basic_Information_Next_To_Add_Claim_Information &quot;${ResponseOk}&quot; == &quot;null&quot;" enabled="true">
                <stringProp name="IfController.condition">&quot;${ResponseOk}&quot; == &quot;null&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="-CANCELCLAIMBASICINFORMATION" enabled="true">
                  <stringProp name="TestPlan.comments">This section contains the CANCELCLAIMBASICINFORMATION part of Loadrunner</stringProp>
                </GenericController>
                <hashTree>
                  <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP06_Cancel_Claim_Basic_Information" enabled="true">
                    <boolProp name="TransactionController.includeTimers">false</boolProp>
                    <boolProp name="TransactionController.parent">true</boolProp>
                  </TransactionController>
                  <hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_10" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_BasicInfoScreen:PanelRow:NewClaimPeopleDV:Claim_ReportedByType" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_BasicInfoScreen:PanelRow:NewClaimPeopleDV:Claim_ReportedByType</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_BasicInfoScreen:PanelRow:NewClaimPeopleDV:Notification_ReportedDate" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_BasicInfoScreen:PanelRow:NewClaimPeopleDV:Notification_ReportedDate</stringProp>
                            <stringProp name="Argument.value">${DATE}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="TabBar:ClaimTab:ClaimTab_FindClaim" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">TabBar:ClaimTab:ClaimTab_FindClaim</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="QuickJump" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">QuickJump</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:0_toggle" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:0_toggle</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:1_toggle" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:1_toggle</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_BasicInfoScreen:PanelRow:NewClaimPeopleDV:HowReported" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_BasicInfoScreen:PanelRow:NewClaimPeopleDV:HowReported</stringProp>
                            <stringProp name="Argument.value">phone</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_BasicInfoScreen:PanelRow:NewClaimPeopleDV:ReportRecorded" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_BasicInfoScreen:PanelRow:NewClaimPeopleDV:ReportRecorded</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_BasicInfoScreen:PanelRow:NewClaimPeopleDV:ReportedBy_NameNew" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_BasicInfoScreen:PanelRow:NewClaimPeopleDV:ReportedBy_NameNew</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="objFocusId" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">objFocusId</stringProp>
                            <stringProp name="Argument.value">FNOLWizard:Cancel</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:FNOLMenuActions" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:FNOLMenuActions</stringProp>
                            <stringProp name="Argument.value">${cFNOLMENUACTIONS}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="infoBar" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">infoBar</stringProp>
                            <stringProp name="Argument.value">${cINFOBAR_4}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name=":tabs" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">:tabs</stringProp>
                            <stringProp name="Argument.value">${cTABS}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name=":tblinks" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">:tblinks</stringProp>
                            <stringProp name="Argument.value">${cTBLINKS_1}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="eventSource" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">eventSource</stringProp>
                            <stringProp name="Argument.value">FNOLWizard:Cancel_act</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="csrfToken" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">csrfToken</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:1" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:1</stringProp>
                            <stringProp name="Argument.value">cFNOLWIZARD1_1</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:0" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:0</stringProp>
                            <stringProp name="Argument.value">${cFNOLWIZARD0_2}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_BasicInfoScreen:PanelRow:NewClaimPeopleDV:HiddenInsured" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_BasicInfoScreen:PanelRow:NewClaimPeopleDV:HiddenInsured</stringProp>
                            <stringProp name="Argument.value">Person:${PERSON}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol">https</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                      <stringProp name="HTTPSampler.method">POST</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                      <boolProp name="HTTPSampler.image_parser">true</boolProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="Accept-Language" elementType="Header">
                            <stringProp name="Header.name">DNT</stringProp>
                            <stringProp name="Header.value">1</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                      <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="CNG_TP06_Cancel_Claim_Basic_Information - Desktop screen not displayed  ${POLICYNUMBER} , ${POLEFFDATE} , ${POLEXPDATE} , ${PHONENUMBER} ,${LASTNAME},${FIRSTNAME} ,${STATE}, ${POLICYTYPE},${AGREEMENTSOURCE}" enabled="true">
                        <collectionProp name="Asserion.test_strings">
                          <stringProp name="-252897267">Activities</stringProp>
                        </collectionProp>
                        <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                        <boolProp name="Assertion.assume_success">false</boolProp>
                        <intProp name="Assertion.test_type">16</intProp>
                      </ResponseAssertion>
                      <hashTree/>
                    </hashTree>
                    <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ThinkTime - 10" enabled="true">
                      <stringProp name="TestPlan.comments">This transaction will wait for 10 seconds</stringProp>
                    </GenericController>
                    <hashTree>
                      <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="ThinkTime" enabled="true">
                        <stringProp name="ConstantTimer.delay">10000</stringProp>
                        <stringProp name="TestPlan.comments">   Converting seconds to milliseconds - 10s x 1000</stringProp>
                      </ConstantTimer>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                </hashTree>
                <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Go TO Next Loop Iteration" enabled="true">
                  <intProp name="ActionProcessor.action">3</intProp>
                  <intProp name="ActionProcessor.target">0</intProp>
                  <stringProp name="ActionProcessor.duration"></stringProp>
                </TestAction>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="-ADDCLAIMINFORMATION" enabled="true">
              <stringProp name="TestPlan.comments">This section contains the ADDCLAIMINFORMATION part of Loadrunner</stringProp>
            </GenericController>
            <hashTree>
              <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP06_P_Add_Claim_Information_Loss_Category" enabled="true">
                <boolProp name="TransactionController.includeTimers">false</boolProp>
                <boolProp name="TransactionController.parent">true</boolProp>
              </TransactionController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_12" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:anyInjuryAuto" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:anyInjuryAuto</stringProp>
                        <stringProp name="Argument.value">false</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:AddressDetailInputSetRef:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:Address_Picker" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:AddressDetailInputSetRef:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:Address_Picker</stringProp>
                        <stringProp name="Argument.value">__new</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="eventSource" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">eventSource</stringProp>
                        <stringProp name="Argument.value">_refresh_</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="TabBar:ClaimTab:ClaimTab_FindClaim" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">TabBar:ClaimTab:ClaimTab_FindClaim</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="csrfToken" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">csrfToken</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="QuickJump" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">QuickJump</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:1" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:1</stringProp>
                        <stringProp name="Argument.value">${cFNOLWIZARD1_1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:0_toggle" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:0_toggle</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:0" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:0</stringProp>
                        <stringProp name="Argument.value">${cFNOLWIZARD0_3}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:1_toggle" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:1_toggle</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:Claim_LossCategory" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:Claim_LossCategory</stringProp>
                        <stringProp name="Argument.value">multiVehicleAccidentAuto</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:Description" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:Description</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="objFocusId" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">objFocusId</stringProp>
                        <stringProp name="Argument.value">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:Claim_LossCategory</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:Fault" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:Fault</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="eventParam" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">eventParam</stringProp>
                        <stringProp name="Argument.value">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:Claim_LossCategory</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:FNOLMenuActions" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:FNOLMenuActions</stringProp>
                        <stringProp name="Argument.value">${cFNOLMENUACTIONS}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="infoBar" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">infoBar</stringProp>
                        <stringProp name="Argument.value">${cINFOBAR_4}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name=":tabs" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">:tabs</stringProp>
                        <stringProp name="Argument.value">${cTABS}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:AddressDetailInputSetRef:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:State" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:AddressDetailInputSetRef:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:State</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:AddressDetailInputSetRef:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:County" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:AddressDetailInputSetRef:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:County</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:AddressDetailInputSetRef:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:City" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:AddressDetailInputSetRef:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:City</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:AddressDetailInputSetRef:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:AddressLine2" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:AddressDetailInputSetRef:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:AddressLine2</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name=":tblinks" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">:tblinks</stringProp>
                        <stringProp name="Argument.value">${cTBLINKS_1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:Claim_PermissionRequired" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:Claim_PermissionRequired</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:AddressDetailInputSetRef:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:Country" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:AddressDetailInputSetRef:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:Country</stringProp>
                        <stringProp name="Argument.value">US</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:AddressDetailInputSetRef:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:PostalCode" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:AddressDetailInputSetRef:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:PostalCode</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:AddressDetailInputSetRef:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:AddressLine1" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:AddressDetailInputSetRef:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:AddressLine1</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                  <boolProp name="HTTPSampler.image_parser">true</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">DNT</stringProp>
                        <stringProp name="Header.value">1</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ThinkTime - 10" enabled="true">
                  <stringProp name="TestPlan.comments">This transaction will wait for 10 seconds</stringProp>
                </GenericController>
                <hashTree>
                  <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="ThinkTime" enabled="true">
                    <stringProp name="ConstantTimer.delay">10000</stringProp>
                    <stringProp name="TestPlan.comments">   Converting seconds to milliseconds - 10s x 1000</stringProp>
                  </ConstantTimer>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP06_Q_Add_Claim_Information_Loss_Cause" enabled="true">
                <boolProp name="TransactionController.includeTimers">false</boolProp>
                <boolProp name="TransactionController.parent">true</boolProp>
              </TransactionController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_13" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:Fault" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:Fault</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:anyInjuryAuto" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:anyInjuryAuto</stringProp>
                        <stringProp name="Argument.value">false</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="csrfToken" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">csrfToken</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="TabBar:ClaimTab:ClaimTab_FindClaim" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">TabBar:ClaimTab:ClaimTab_FindClaim</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:1" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:1</stringProp>
                        <stringProp name="Argument.value">${cFNOLWIZARD1_1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="QuickJump" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">QuickJump</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:0" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:0</stringProp>
                        <stringProp name="Argument.value">${cFNOLWIZARD0_3}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:0_toggle" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:0_toggle</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:FNOLMenuActions" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:FNOLMenuActions</stringProp>
                        <stringProp name="Argument.value">${cFNOLMENUACTIONS}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:1_toggle" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:1_toggle</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:Claim_LossCategory" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:Claim_LossCategory</stringProp>
                        <stringProp name="Argument.value">multiVehicleAccidentAuto</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="objFocusId" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">objFocusId</stringProp>
                        <stringProp name="Argument.value">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:Claim_LossCause</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:Claim_LossCause" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:Claim_LossCause</stringProp>
                        <stringProp name="Argument.value">headoncollision</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="eventParam" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">eventParam</stringProp>
                        <stringProp name="Argument.value">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:Claim_LossCause</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:Description" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:Description</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="eventSource" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">eventSource</stringProp>
                        <stringProp name="Argument.value">_refresh_</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="infoBar" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">infoBar</stringProp>
                        <stringProp name="Argument.value">${cINFOBAR_4}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name=":tabs" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">:tabs</stringProp>
                        <stringProp name="Argument.value">${cTABS}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name=":tblinks" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">:tblinks</stringProp>
                        <stringProp name="Argument.value">${cTBLINKS_1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:AddressDetailInputSetRef:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:County" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:AddressDetailInputSetRef:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:County</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:AddressDetailInputSetRef:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:City" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:AddressDetailInputSetRef:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:City</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:AddressDetailInputSetRef:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:AddressLine2" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:AddressDetailInputSetRef:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:AddressLine2</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:AddressDetailInputSetRef:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:AddressLine1" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:AddressDetailInputSetRef:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:AddressLine1</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:Claim_PermissionRequired" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:Claim_PermissionRequired</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:AddressDetailInputSetRef:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:Country" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:AddressDetailInputSetRef:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:Country</stringProp>
                        <stringProp name="Argument.value">US</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:AddressDetailInputSetRef:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:PostalCode" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:AddressDetailInputSetRef:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:PostalCode</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:AddressDetailInputSetRef:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:State" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:AddressDetailInputSetRef:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:State</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:AddressDetailInputSetRef:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:Address_Picker" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:AddressDetailInputSetRef:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:Address_Picker</stringProp>
                        <stringProp name="Argument.value">__new</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                  <boolProp name="HTTPSampler.image_parser">true</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">DNT</stringProp>
                        <stringProp name="Header.value">1</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ThinkTime - 10" enabled="true">
                  <stringProp name="TestPlan.comments">This transaction will wait for 10 seconds</stringProp>
                </GenericController>
                <hashTree>
                  <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="ThinkTime" enabled="true">
                    <stringProp name="ConstantTimer.delay">10000</stringProp>
                    <stringProp name="TestPlan.comments">   Converting seconds to milliseconds - 10s x 1000</stringProp>
                  </ConstantTimer>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP06_R_Add_Claim_Information_Fault_Rating" enabled="true">
                <boolProp name="TransactionController.includeTimers">false</boolProp>
                <boolProp name="TransactionController.parent">true</boolProp>
              </TransactionController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_14" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:Fault" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:Fault</stringProp>
                        <stringProp name="Argument.value">1</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:anyInjuryAuto" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:anyInjuryAuto</stringProp>
                        <stringProp name="Argument.value">false</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:AutoAdditionalDamageQuestions:DamageQuestionsAutoAdditionalInputSet:familiarArea" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:AutoAdditionalDamageQuestions:DamageQuestionsAutoAdditionalInputSet:familiarArea</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="TabBar:ClaimTab:ClaimTab_FindClaim" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">TabBar:ClaimTab:ClaimTab_FindClaim</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:AutoAdditionalDamageQuestions:DamageQuestionsAutoAdditionalInputSet:anyObstructions" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:AutoAdditionalDamageQuestions:DamageQuestionsAutoAdditionalInputSet:anyObstructions</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="QuickJump" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">QuickJump</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:AutoAdditionalDamageQuestions:DamageQuestionsAutoAdditionalInputSet:insuredSpeed" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:AutoAdditionalDamageQuestions:DamageQuestionsAutoAdditionalInputSet:insuredSpeed</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:0_toggle" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:0_toggle</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:AutoAdditionalDamageQuestions:DamageQuestionsAutoAdditionalInputSet:numberOfLanes" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:AutoAdditionalDamageQuestions:DamageQuestionsAutoAdditionalInputSet:numberOfLanes</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:1_toggle" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:1_toggle</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name=":tblinks" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">:tblinks</stringProp>
                        <stringProp name="Argument.value">${cTBLINKS_1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:Claim_LossCategory" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:Claim_LossCategory</stringProp>
                        <stringProp name="Argument.value">multiVehicleAccidentAuto</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:Claim_PermissionRequired" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:Claim_PermissionRequired</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:Claim_LossCause" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:Claim_LossCause</stringProp>
                        <stringProp name="Argument.value">headoncollision</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:AutoAdditionalDamageQuestions:DamageQuestionsAutoAdditionalInputSet:otherVehicleDirection" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:AutoAdditionalDamageQuestions:DamageQuestionsAutoAdditionalInputSet:otherVehicleDirection</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:Description" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:Description</stringProp>
                        <stringProp name="Argument.value">TP06</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:AutoAdditionalDamageQuestions:DamageQuestionsAutoAdditionalInputSet:ctionAvoidAccident" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:AutoAdditionalDamageQuestions:DamageQuestionsAutoAdditionalInputSet:ctionAvoidAccident</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:AutoAdditionalDamageQuestions:DamageQuestionsAutoAdditionalInputSet:trafficControlsPresent" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:AutoAdditionalDamageQuestions:DamageQuestionsAutoAdditionalInputSet:trafficControlsPresent</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:AutoAdditionalDamageQuestions:DamageQuestionsAutoAdditionalInputSet:weatherConditions" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:AutoAdditionalDamageQuestions:DamageQuestionsAutoAdditionalInputSet:weatherConditions</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="eventSource" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">eventSource</stringProp>
                        <stringProp name="Argument.value">_refresh_</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="csrfToken" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">csrfToken</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:1" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:1</stringProp>
                        <stringProp name="Argument.value">${cFNOLWIZARD1_1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:0" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:0</stringProp>
                        <stringProp name="Argument.value">${cFNOLWIZARD0_3}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="objFocusId" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">objFocusId</stringProp>
                        <stringProp name="Argument.value">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:Fault</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="eventParam" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">eventParam</stringProp>
                        <stringProp name="Argument.value">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:Fault</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:FNOLMenuActions" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:FNOLMenuActions</stringProp>
                        <stringProp name="Argument.value">${cFNOLMENUACTIONS}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="infoBar" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">infoBar</stringProp>
                        <stringProp name="Argument.value">${cINFOBAR_4}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name=":tabs" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">:tabs</stringProp>
                        <stringProp name="Argument.value">${cTABS}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:AutoDamageQuestions:DamageQuestionsAutoInputSet:vehicleDamageOtherProperty" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:AutoDamageQuestions:DamageQuestionsAutoInputSet:vehicleDamageOtherProperty</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:AddressDetailInputSetRef:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:County" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:AddressDetailInputSetRef:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:County</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:AddressDetailInputSetRef:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:City" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:AddressDetailInputSetRef:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:City</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:AddressDetailInputSetRef:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:AddressLine2" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:AddressDetailInputSetRef:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:AddressLine2</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:AddressDetailInputSetRef:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:AddressLine1" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:AddressDetailInputSetRef:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:AddressLine1</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:AutoDamageQuestions:DamageQuestionsAutoInputSet:numberVehiclesInvolved" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:AutoDamageQuestions:DamageQuestionsAutoInputSet:numberVehiclesInvolved</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:AddressDetailInputSetRef:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:Country" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:AddressDetailInputSetRef:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:Country</stringProp>
                        <stringProp name="Argument.value">US</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:AddressDetailInputSetRef:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:PostalCode" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:AddressDetailInputSetRef:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:PostalCode</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:AddressDetailInputSetRef:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:State" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:AddressDetailInputSetRef:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:State</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:AddressDetailInputSetRef:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:Address_Picker" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:AddressDetailInputSetRef:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:Address_Picker</stringProp>
                        <stringProp name="Argument.value">__new</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                  <boolProp name="HTTPSampler.image_parser">true</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">DNT</stringProp>
                        <stringProp name="Header.value">1</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ThinkTime - 10" enabled="true">
                  <stringProp name="TestPlan.comments">This transaction will wait for 10 seconds</stringProp>
                </GenericController>
                <hashTree>
                  <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="ThinkTime" enabled="true">
                    <stringProp name="ConstantTimer.delay">10000</stringProp>
                    <stringProp name="TestPlan.comments">   Converting seconds to milliseconds - 10s x 1000</stringProp>
                  </ConstantTimer>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP06_S_Add_Claim_Information_Loss_Location" enabled="true">
                <boolProp name="TransactionController.includeTimers">false</boolProp>
                <boolProp name="TransactionController.parent">true</boolProp>
              </TransactionController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_16" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                  <boolProp name="HTTPSampler.image_parser">true</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">DNT</stringProp>
                        <stringProp name="Header.value">1</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ThinkTime - 10" enabled="true">
                  <stringProp name="TestPlan.comments">This transaction will wait for 10 seconds</stringProp>
                </GenericController>
                <hashTree>
                  <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="ThinkTime" enabled="true">
                    <stringProp name="ConstantTimer.delay">10000</stringProp>
                    <stringProp name="TestPlan.comments">   Converting seconds to milliseconds - 10s x 1000</stringProp>
                  </ConstantTimer>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP06_T_Add_Claim_Information_Click_Add_Vehicle" enabled="true">
                <boolProp name="TransactionController.includeTimers">false</boolProp>
                <boolProp name="TransactionController.parent">true</boolProp>
              </TransactionController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_16" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:Fault" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:Fault</stringProp>
                        <stringProp name="Argument.value">1</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:FaultPercent" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:FaultPercent</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="infoBar" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">infoBar</stringProp>
                        <stringProp name="Argument.value">${cINFOBAR_4}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="TabBar:ClaimTab:ClaimTab_FindClaim" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">TabBar:ClaimTab:ClaimTab_FindClaim</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name=":tabs" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">:tabs</stringProp>
                        <stringProp name="Argument.value">${cTABS}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="QuickJump" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">QuickJump</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name=":tblinks" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">:tblinks</stringProp>
                        <stringProp name="Argument.value">${cTBLINKS_1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:0_toggle" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:0_toggle</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:Claim_PermissionRequired" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:Claim_PermissionRequired</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:1_toggle" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:1_toggle</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="csrfToken" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">csrfToken</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:Claim_LossCategory" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:Claim_LossCategory</stringProp>
                        <stringProp name="Argument.value">multiVehicleAccidentAuto</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:1" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:1</stringProp>
                        <stringProp name="Argument.value">${cFNOLWIZARD1_1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:Claim_LossCause" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:Claim_LossCause</stringProp>
                        <stringProp name="Argument.value">headoncollision</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:0" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:0</stringProp>
                        <stringProp name="Argument.value">${cFNOLWIZARD0_3}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:Description" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:Description</stringProp>
                        <stringProp name="Argument.value">TP06</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:FNOLMenuActions" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:FNOLMenuActions</stringProp>
                        <stringProp name="Argument.value">${cFNOLMENUACTIONS}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:AutoAdditionalDamageQuestions:DamageQuestionsAutoAdditionalInputSet:otherVehicleDirection" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:AutoAdditionalDamageQuestions:DamageQuestionsAutoAdditionalInputSet:otherVehicleDirection</stringProp>
                        <stringProp name="Argument.value">straightahead</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:AutoAdditionalDamageQuestions:DamageQuestionsAutoAdditionalInputSet:ctionAvoidAccident" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:AutoAdditionalDamageQuestions:DamageQuestionsAutoAdditionalInputSet:ctionAvoidAccident</stringProp>
                        <stringProp name="Argument.value">appliedbrakes</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:AutoAdditionalDamageQuestions:DamageQuestionsAutoAdditionalInputSet:familiarArea" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:AutoAdditionalDamageQuestions:DamageQuestionsAutoAdditionalInputSet:familiarArea</stringProp>
                        <stringProp name="Argument.value">Yes</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:AutoAdditionalDamageQuestions:DamageQuestionsAutoAdditionalInputSet:weatherConditions" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:AutoAdditionalDamageQuestions:DamageQuestionsAutoAdditionalInputSet:weatherConditions</stringProp>
                        <stringProp name="Argument.value">clear</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:AutoDamageQuestions:DamageQuestionsAutoInputSet:vehicleDamageOtherProperty" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:AutoDamageQuestions:DamageQuestionsAutoInputSet:vehicleDamageOtherProperty</stringProp>
                        <stringProp name="Argument.value">No</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:AutoDamageQuestions:DamageQuestionsAutoInputSet:numberVehiclesInvolved" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:AutoDamageQuestions:DamageQuestionsAutoInputSet:numberVehiclesInvolved</stringProp>
                        <stringProp name="Argument.value">2</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:AddressDetailInputSetRef:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:Address_Picker" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:AddressDetailInputSetRef:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:Address_Picker</stringProp>
                        <stringProp name="Argument.value">Address:${cADDRESS}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:AutoAdditionalDamageQuestions:DamageQuestionsAutoAdditionalInputSet:anyObstructions" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:AutoAdditionalDamageQuestions:DamageQuestionsAutoAdditionalInputSet:anyObstructions</stringProp>
                        <stringProp name="Argument.value">blindspot</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:AutoAdditionalDamageQuestions:DamageQuestionsAutoAdditionalInputSet:insuredSpeed" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:AutoAdditionalDamageQuestions:DamageQuestionsAutoAdditionalInputSet:insuredSpeed</stringProp>
                        <stringProp name="Argument.value">50</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:AutoAdditionalDamageQuestions:DamageQuestionsAutoAdditionalInputSet:numberOfLanes" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:AutoAdditionalDamageQuestions:DamageQuestionsAutoAdditionalInputSet:numberOfLanes</stringProp>
                        <stringProp name="Argument.value">two</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:AutoAdditionalDamageQuestions:DamageQuestionsAutoAdditionalInputSet:trafficControlsPresent" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:AutoAdditionalDamageQuestions:DamageQuestionsAutoAdditionalInputSet:trafficControlsPresent</stringProp>
                        <stringProp name="Argument.value">unknown</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="objFocusId" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">objFocusId</stringProp>
                        <stringProp name="Argument.value">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:AddVehicleButton</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:anyInjuryAuto" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:anyInjuryAuto</stringProp>
                        <stringProp name="Argument.value">false</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="eventSource" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">eventSource</stringProp>
                        <stringProp name="Argument.value">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:AddVehicleButton_act</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="scrollPositions" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">scrollPositions</stringProp>
                        <stringProp name="Argument.value">{&quot;centerPanel&quot;:{&quot;left&quot;:0,&quot;top&quot;:400}}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                  <boolProp name="HTTPSampler.image_parser">true</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">DNT</stringProp>
                        <stringProp name="Header.value">1</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="CNG_TP06_T_Add_Claim_Information_Click_Add_Vehicle -- Unsuccessful nNumber, ${USERNAME}" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="938574094">Vehicle Details</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cFNOLWIZARD0_4 Extractor" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">cFNOLWIZARD0_4</stringProp>
                    <stringProp name="RegexExtractor.regex">Claim&quot;,&quot;eventId&quot;:&quot;FNOLWizard:Summary&quot;,&quot;disabled&quot;:true}],&quot;xtype&quot;:&quot;accordionpanel&quot;,&quot;checksum&quot;:&quot;(.*?)&quot;,</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">null</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cVEHICLE Extractor" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">cVEHICLE</stringProp>
                    <stringProp name="RegexExtractor.regex">Vehicle:(.*?)&quot;,</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">null</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="ResponseOk Extractor" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">ResponseOk</stringProp>
                    <stringProp name="RegexExtractor.regex">Vehicle Details(.*?)</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">null</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ThinkTime - 10" enabled="true">
                  <stringProp name="TestPlan.comments">This transaction will wait for 10 seconds</stringProp>
                </GenericController>
                <hashTree>
                  <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="ThinkTime" enabled="true">
                    <stringProp name="ConstantTimer.delay">10000</stringProp>
                    <stringProp name="TestPlan.comments">   Converting seconds to milliseconds - 10s x 1000</stringProp>
                  </ConstantTimer>
                  <hashTree/>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If CNG_TP06_T_Add_Claim_Information_Click_Add_Vehicle &quot;${ResponseOk}&quot; == &quot;null&quot;" enabled="true">
                  <stringProp name="IfController.condition">&quot;${ResponseOk}&quot; == &quot;null&quot;</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="-CANCELCLAIMADDCLAIMINFORMATION" enabled="true">
                    <stringProp name="TestPlan.comments">This section contains the CANCELCLAIMADDCLAIMINFORMATION part of Loadrunner</stringProp>
                  </GenericController>
                  <hashTree>
                    <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP06_Cancel_Claim_Add_Claim_Information" enabled="true">
                      <boolProp name="TransactionController.includeTimers">false</boolProp>
                      <boolProp name="TransactionController.parent">true</boolProp>
                    </TransactionController>
                    <hashTree>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_13" enabled="true">
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                          <collectionProp name="Arguments.arguments">
                            <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:anyInjuryAuto" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:anyInjuryAuto</stringProp>
                              <stringProp name="Argument.value">false</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:AddressDetailInputSetRef:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:Address_Picker" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:AddressDetailInputSetRef:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:Address_Picker</stringProp>
                              <stringProp name="Argument.value">__new</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="eventSource" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">eventSource</stringProp>
                              <stringProp name="Argument.value">FNOLWizard:Cancel_act</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="TabBar:ClaimTab:ClaimTab_FindClaim" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">TabBar:ClaimTab:ClaimTab_FindClaim</stringProp>
                              <stringProp name="Argument.value"></stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="csrfToken" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">csrfToken</stringProp>
                              <stringProp name="Argument.value"></stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="QuickJump" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">QuickJump</stringProp>
                              <stringProp name="Argument.value"></stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="FNOLWizard:1" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">FNOLWizard:1</stringProp>
                              <stringProp name="Argument.value">${cFNOLWIZARD1_1}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="FNOLWizard:0_toggle" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">FNOLWizard:0_toggle</stringProp>
                              <stringProp name="Argument.value"></stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="FNOLWizard:0" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">FNOLWizard:0</stringProp>
                              <stringProp name="Argument.value">${cFNOLWIZARD0_3}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="FNOLWizard:1_toggle" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">FNOLWizard:1_toggle</stringProp>
                              <stringProp name="Argument.value"></stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:Claim_LossCategory" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:Claim_LossCategory</stringProp>
                              <stringProp name="Argument.value"></stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:Description" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:Description</stringProp>
                              <stringProp name="Argument.value"></stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:Fault" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:Fault</stringProp>
                              <stringProp name="Argument.value"></stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="objFocusId" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">objFocusId</stringProp>
                              <stringProp name="Argument.value">FNOLWizard:Cancel</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="FNOLWizard:FNOLMenuActions" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">FNOLWizard:FNOLMenuActions</stringProp>
                              <stringProp name="Argument.value">${cFNOLMENUACTIONS}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="infoBar" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">infoBar</stringProp>
                              <stringProp name="Argument.value">${cINFOBAR_4}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name=":tabs" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">:tabs</stringProp>
                              <stringProp name="Argument.value">${cTABS}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:AddressDetailInputSetRef:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:State" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:AddressDetailInputSetRef:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:State</stringProp>
                              <stringProp name="Argument.value"></stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:AddressDetailInputSetRef:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:County" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:AddressDetailInputSetRef:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:County</stringProp>
                              <stringProp name="Argument.value"></stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:AddressDetailInputSetRef:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:City" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:AddressDetailInputSetRef:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:City</stringProp>
                              <stringProp name="Argument.value"></stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:AddressDetailInputSetRef:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:AddressLine2" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:AddressDetailInputSetRef:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:AddressLine2</stringProp>
                              <stringProp name="Argument.value"></stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name=":tblinks" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">:tblinks</stringProp>
                              <stringProp name="Argument.value">${cTBLINKS_1}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:Claim_PermissionRequired" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:Claim_PermissionRequired</stringProp>
                              <stringProp name="Argument.value"></stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:AddressDetailInputSetRef:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:Country" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:AddressDetailInputSetRef:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:Country</stringProp>
                              <stringProp name="Argument.value">US</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:AddressDetailInputSetRef:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:PostalCode" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:AddressDetailInputSetRef:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:PostalCode</stringProp>
                              <stringProp name="Argument.value"></stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:AddressDetailInputSetRef:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:AddressLine1" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:AddressDetailInputSetRef:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:AddressLine1</stringProp>
                              <stringProp name="Argument.value"></stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                          </collectionProp>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain"></stringProp>
                        <stringProp name="HTTPSampler.port"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        <stringProp name="HTTPSampler.protocol">https</stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                        <stringProp name="HTTPSampler.method">POST</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                        <boolProp name="HTTPSampler.image_parser">true</boolProp>
                        <boolProp name="HTTPSampler.monitor">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree>
                        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                          <collectionProp name="HeaderManager.headers">
                            <elementProp name="Accept-Language" elementType="Header">
                              <stringProp name="Header.name">DNT</stringProp>
                              <stringProp name="Header.value">1</stringProp>
                            </elementProp>
                          </collectionProp>
                        </HeaderManager>
                        <hashTree/>
                        <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="CNG_TP06_Cancel_Claim_Add_Claim_Information -- Desktop screen not displayed ${POLICYNUMBER} , ${POLEFFDATE} , ${POLEXPDATE} , ${PHONENUMBER} ,${LASTNAME},${FIRSTNAME} ,${STATE}, ${POLICYTYPE},${AGREEMENTSOURCE}" enabled="true">
                          <collectionProp name="Asserion.test_strings">
                            <stringProp name="-252897267">Activities</stringProp>
                          </collectionProp>
                          <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                          <boolProp name="Assertion.assume_success">false</boolProp>
                          <intProp name="Assertion.test_type">16</intProp>
                        </ResponseAssertion>
                        <hashTree/>
                      </hashTree>
                      <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ThinkTime - 10" enabled="true">
                        <stringProp name="TestPlan.comments">This transaction will wait for 10 seconds</stringProp>
                      </GenericController>
                      <hashTree>
                        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="ThinkTime" enabled="true">
                          <stringProp name="ConstantTimer.delay">10000</stringProp>
                          <stringProp name="TestPlan.comments">   Converting seconds to milliseconds - 10s x 1000</stringProp>
                        </ConstantTimer>
                        <hashTree/>
                      </hashTree>
                    </hashTree>
                  </hashTree>
                  <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="-RETURNTODESKTOP" enabled="true">
                    <stringProp name="TestPlan.comments">This section contains the RETURNTODESKTOP part of Loadrunner</stringProp>
                  </GenericController>
                  <hashTree>
                    <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP06_Return_To_Desktop" enabled="true">
                      <boolProp name="TransactionController.includeTimers">false</boolProp>
                      <boolProp name="TransactionController.parent">true</boolProp>
                    </TransactionController>
                    <hashTree>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_66" enabled="true">
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                          <collectionProp name="Arguments.arguments">
                            <elementProp name="Claim:MenuLinks" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">Claim:MenuLinks</stringProp>
                              <stringProp name="Argument.value">${cCLAIMMENULINKS}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="csrfToken" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">csrfToken</stringProp>
                              <stringProp name="Argument.value"></stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="TabBar:ClaimTab:ClaimTab_FindClaim" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">TabBar:ClaimTab:ClaimTab_FindClaim</stringProp>
                              <stringProp name="Argument.value"></stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="QuickJump" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">QuickJump</stringProp>
                              <stringProp name="Argument.value"></stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="Claim:MenuLinks_toggle" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">Claim:MenuLinks_toggle</stringProp>
                              <stringProp name="Argument.value"></stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name=":tblinks" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">:tblinks</stringProp>
                              <stringProp name="Argument.value">${cTBLINKS}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name=":tabs" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">:tabs</stringProp>
                              <stringProp name="Argument.value">${cTABS_1}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="infoBar" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">infoBar</stringProp>
                              <stringProp name="Argument.value">${cINFOBAR_6}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="Claim:ClaimMenuActions" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">Claim:ClaimMenuActions</stringProp>
                              <stringProp name="Argument.value">${cCLAIMMENUACTIONS}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="objFocusId" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">objFocusId</stringProp>
                              <stringProp name="Argument.value">TabBar:DesktopTab</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="eventSource" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">eventSource</stringProp>
                              <stringProp name="Argument.value">TabBar:DesktopTab_act</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                          </collectionProp>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain"></stringProp>
                        <stringProp name="HTTPSampler.port"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        <stringProp name="HTTPSampler.protocol">https</stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                        <stringProp name="HTTPSampler.method">POST</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                        <boolProp name="HTTPSampler.image_parser">true</boolProp>
                        <boolProp name="HTTPSampler.monitor">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree>
                        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                          <collectionProp name="HeaderManager.headers">
                            <elementProp name="Accept-Language" elementType="Header">
                              <stringProp name="Header.name">DNT</stringProp>
                              <stringProp name="Header.value">1</stringProp>
                            </elementProp>
                          </collectionProp>
                        </HeaderManager>
                        <hashTree/>
                        <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="CNG_TP06_Return_To_Desktop -- Desktop screen has not appeared for claim number: ${CLAIMNUMBER}" enabled="true">
                          <collectionProp name="Asserion.test_strings">
                            <stringProp name="1514705186">My activities today</stringProp>
                          </collectionProp>
                          <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                          <boolProp name="Assertion.assume_success">false</boolProp>
                          <intProp name="Assertion.test_type">16</intProp>
                        </ResponseAssertion>
                        <hashTree/>
                        <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cTABS Extractor" enabled="true">
                          <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                          <stringProp name="RegexExtractor.refname">cTABS</stringProp>
                          <stringProp name="RegexExtractor.regex">&quot;id&quot;:&quot;TabBar:VacationTab&quot;,&quot;text&quot;:&quot;Vacation&quot;,&quot;menu&quot;:\{&quot;defaultType&quot;:&quot;gmenuitem&quot;},&quot;xtype&quot;:&quot;gbutton&quot;,&quot;disabled&quot;:true}],&quot;checksum&quot;:&quot;(.*?)&quot;}},\{</stringProp>
                          <stringProp name="RegexExtractor.template">$1$</stringProp>
                          <stringProp name="RegexExtractor.default">null</stringProp>
                          <stringProp name="RegexExtractor.match_number">1</stringProp>
                        </RegexExtractor>
                        <hashTree/>
                      </hashTree>
                      <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ThinkTime - 10" enabled="true">
                        <stringProp name="TestPlan.comments">This transaction will wait for 10 seconds</stringProp>
                      </GenericController>
                      <hashTree>
                        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="ThinkTime" enabled="true">
                          <stringProp name="ConstantTimer.delay">10000</stringProp>
                          <stringProp name="TestPlan.comments">   Converting seconds to milliseconds - 10s x 1000</stringProp>
                        </ConstantTimer>
                        <hashTree/>
                      </hashTree>
                    </hashTree>
                  </hashTree>
                  <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Go to Next loop Iteration" enabled="true">
                    <intProp name="ActionProcessor.action">3</intProp>
                    <intProp name="ActionProcessor.target">0</intProp>
                    <stringProp name="ActionProcessor.duration"></stringProp>
                  </TestAction>
                  <hashTree/>
                </hashTree>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="-ADDVEHICLE" enabled="true">
              <stringProp name="TestPlan.comments">This section contains the ADDVEHICLE part of Loadrunner</stringProp>
            </GenericController>
            <hashTree>
              <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP06_W_Vehicle_Details_Select_Vehicle" enabled="true">
                <boolProp name="TransactionController.includeTimers">false</boolProp>
                <boolProp name="TransactionController.parent">true</boolProp>
              </TransactionController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_17" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_VehicleType" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_VehicleType</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Style" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Style</stringProp>
                        <stringProp name="Argument.value">passengercar</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:SeverityOfDamage" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:SeverityOfDamage</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="TabBar:ClaimTab:ClaimTab_FindClaim" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">TabBar:ClaimTab:ClaimTab_FindClaim</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:collPoint" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:collPoint</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="QuickJump" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">QuickJump</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:childSafetySeatQuestionsInputSet:ChildSafetySeatQuestionsInputSet:safetySeatInVehicle" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:childSafetySeatQuestionsInputSet:ChildSafetySeatQuestionsInputSet:safetySeatInVehicle</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:0_toggle" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:0_toggle</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:existingEstimate" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:existingEstimate</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:1_toggle" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:1_toggle</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name=":tblinks" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">:tblinks</stringProp>
                        <stringProp name="Argument.value">${cTBLINKS_1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:LossParty" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:LossParty</stringProp>
                        <stringProp name="Argument.value">true</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:PreExistingDamage" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:PreExistingDamage</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:incidentOnly" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:incidentOnly</stringProp>
                        <stringProp name="Argument.value">false</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Exposure_AirbagsDeployed" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Exposure_AirbagsDeployed</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Picker" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Picker</stringProp>
                        <stringProp name="Argument.value">Vehicle:${cVEHICLE}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Description" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Description</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:storageFeesCharged" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:storageFeesCharged</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:VehicleLocDuringBusHrs_RangeInput" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:VehicleLocDuringBusHrs_RangeInput</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="objFocusId" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">objFocusId</stringProp>
                        <stringProp name="Argument.value">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Picker</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="eventSource" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">eventSource</stringProp>
                        <stringProp name="Argument.value">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Year_act</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="csrfToken" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">csrfToken</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:1" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:1</stringProp>
                        <stringProp name="Argument.value">${cFNOLWIZARD1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:0" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:0</stringProp>
                        <stringProp name="Argument.value">${cFNOLWIZARD0_4}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="infoBar" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">infoBar</stringProp>
                        <stringProp name="Argument.value">${cINFOBAR_4}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name=":tabs" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">:tabs</stringProp>
                        <stringProp name="Argument.value">${cTABS}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:vehicleTowed" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:vehicleTowed</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Color" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Color</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Model_Dropdown" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Model_Dropdown</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Make_Dropdown" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Make_Dropdown</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Year" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Year</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Owner_Picker" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Owner_Picker</stringProp>
                        <stringProp name="Argument.value">Person:${cPERSON}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_State" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_State</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_LicensePlate" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_LicensePlate</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Mileage" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Mileage</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_VIN" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_VIN</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                  <boolProp name="HTTPSampler.image_parser">true</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">DNT</stringProp>
                        <stringProp name="Header.value">1</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_18" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Color" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Color</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Mileage" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Mileage</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="infoBar" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">infoBar</stringProp>
                        <stringProp name="Argument.value">${cINFOBAR_4}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="TabBar:ClaimTab:ClaimTab_FindClaim" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">TabBar:ClaimTab:ClaimTab_FindClaim</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name=":tabs" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">:tabs</stringProp>
                        <stringProp name="Argument.value">${cTABS}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="QuickJump" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">QuickJump</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name=":tblinks" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">:tblinks</stringProp>
                        <stringProp name="Argument.value">${cTBLINKS_1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:0_toggle" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:0_toggle</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:PreExistingDamage" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:PreExistingDamage</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:1_toggle" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:1_toggle</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="eventSource" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">eventSource</stringProp>
                        <stringProp name="Argument.value">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:NoDriver_act</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:LossParty" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:LossParty</stringProp>
                        <stringProp name="Argument.value">true</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="csrfToken" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">csrfToken</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:incidentOnly" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:incidentOnly</stringProp>
                        <stringProp name="Argument.value">false</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:1" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:1</stringProp>
                        <stringProp name="Argument.value">${cFNOLWIZARD1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Picker" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Picker</stringProp>
                        <stringProp name="Argument.value">Vehicle:${cVEHICLE}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:0" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:0</stringProp>
                        <stringProp name="Argument.value">${cFNOLWIZARD0_4}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Exposure_AirbagsDeployed" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Exposure_AirbagsDeployed</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Description" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Description</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:SeverityOfDamage" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:SeverityOfDamage</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:VehicleLocDuringBusHrs_RangeInput" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:VehicleLocDuringBusHrs_RangeInput</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:vehicleTowed" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:vehicleTowed</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Owner_Picker" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Owner_Picker</stringProp>
                        <stringProp name="Argument.value">Person:${cPERSON}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_State" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_State</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:collPoint" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:collPoint</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:childSafetySeatQuestionsInputSet:ChildSafetySeatQuestionsInputSet:safetySeatInVehicle" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:childSafetySeatQuestionsInputSet:ChildSafetySeatQuestionsInputSet:safetySeatInVehicle</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:existingEstimate" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:existingEstimate</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:storageFeesCharged" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:storageFeesCharged</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_LicensePlate" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_LicensePlate</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                  <boolProp name="HTTPSampler.image_parser">true</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">DNT</stringProp>
                        <stringProp name="Header.value">1</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_19" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Color" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Color</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Mileage" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Mileage</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="infoBar" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">infoBar</stringProp>
                        <stringProp name="Argument.value">${cINFOBAR_4}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="TabBar:ClaimTab:ClaimTab_FindClaim" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">TabBar:ClaimTab:ClaimTab_FindClaim</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name=":tabs" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">:tabs</stringProp>
                        <stringProp name="Argument.value">${cTABS}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="QuickJump" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">QuickJump</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name=":tblinks" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">:tblinks</stringProp>
                        <stringProp name="Argument.value">${cTBLINKS_1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:0_toggle" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:0_toggle</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:PreExistingDamage" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:PreExistingDamage</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:1_toggle" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:1_toggle</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="eventSource" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">eventSource</stringProp>
                        <stringProp name="Argument.value">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_VIN_act</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:LossParty" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:LossParty</stringProp>
                        <stringProp name="Argument.value">true</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="csrfToken" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">csrfToken</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:incidentOnly" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:incidentOnly</stringProp>
                        <stringProp name="Argument.value">false</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:1" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:1</stringProp>
                        <stringProp name="Argument.value">${cFNOLWIZARD1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Picker" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Picker</stringProp>
                        <stringProp name="Argument.value">Vehicle:${cVEHICLE}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:0" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:0</stringProp>
                        <stringProp name="Argument.value">${cFNOLWIZARD0_4}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Exposure_AirbagsDeployed" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Exposure_AirbagsDeployed</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Description" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Description</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:SeverityOfDamage" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:SeverityOfDamage</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:VehicleLocDuringBusHrs_RangeInput" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:VehicleLocDuringBusHrs_RangeInput</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:vehicleTowed" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:vehicleTowed</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Owner_Picker" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Owner_Picker</stringProp>
                        <stringProp name="Argument.value">Person:${cPERSON}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_State" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_State</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:collPoint" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:collPoint</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:childSafetySeatQuestionsInputSet:ChildSafetySeatQuestionsInputSet:safetySeatInVehicle" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:childSafetySeatQuestionsInputSet:ChildSafetySeatQuestionsInputSet:safetySeatInVehicle</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:existingEstimate" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:existingEstimate</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:storageFeesCharged" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:storageFeesCharged</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_LicensePlate" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_LicensePlate</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                  <boolProp name="HTTPSampler.image_parser">true</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">DNT</stringProp>
                        <stringProp name="Header.value">1</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ThinkTime - 10" enabled="true">
                  <stringProp name="TestPlan.comments">This transaction will wait for 10 seconds</stringProp>
                </GenericController>
                <hashTree>
                  <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="ThinkTime" enabled="true">
                    <stringProp name="ConstantTimer.delay">10000</stringProp>
                    <stringProp name="TestPlan.comments">   Converting seconds to milliseconds - 10s x 1000</stringProp>
                  </ConstantTimer>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP06_X_Vehicle_Details_Collision_Point" enabled="true">
                <boolProp name="TransactionController.includeTimers">false</boolProp>
                <boolProp name="TransactionController.parent">true</boolProp>
              </TransactionController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_20" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Color" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Color</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Mileage" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Mileage</stringProp>
                        <stringProp name="Argument.value">10000</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="infoBar" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">infoBar</stringProp>
                        <stringProp name="Argument.value">${cINFOBAR_4}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="TabBar:ClaimTab:ClaimTab_FindClaim" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">TabBar:ClaimTab:ClaimTab_FindClaim</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name=":tabs" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">:tabs</stringProp>
                        <stringProp name="Argument.value">${cTABS}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="QuickJump" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">QuickJump</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name=":tblinks" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">:tblinks</stringProp>
                        <stringProp name="Argument.value">${cTBLINKS_1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:0_toggle" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:0_toggle</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:PreExistingDamage" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:PreExistingDamage</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:1_toggle" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:1_toggle</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="eventSource" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">eventSource</stringProp>
                        <stringProp name="Argument.value">_refresh_</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:LossParty" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:LossParty</stringProp>
                        <stringProp name="Argument.value">true</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="csrfToken" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">csrfToken</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:incidentOnly" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:incidentOnly</stringProp>
                        <stringProp name="Argument.value">false</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:1" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:1</stringProp>
                        <stringProp name="Argument.value">${cFNOLWIZARD1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Picker" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Picker</stringProp>
                        <stringProp name="Argument.value">Vehicle:${cVEHICLE}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:0" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:0</stringProp>
                        <stringProp name="Argument.value">${cFNOLWIZARD0_4}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Exposure_AirbagsDeployed" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Exposure_AirbagsDeployed</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Description" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Description</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:SeverityOfDamage" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:SeverityOfDamage</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:VehicleLocDuringBusHrs_RangeInput" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:VehicleLocDuringBusHrs_RangeInput</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:vehicleTowed" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:vehicleTowed</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Owner_Picker" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Owner_Picker</stringProp>
                        <stringProp name="Argument.value">Person:${cPERSON}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_State" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_State</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:collPoint" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:collPoint</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:childSafetySeatQuestionsInputSet:ChildSafetySeatQuestionsInputSet:safetySeatInVehicle" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:childSafetySeatQuestionsInputSet:ChildSafetySeatQuestionsInputSet:safetySeatInVehicle</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:existingEstimate" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:existingEstimate</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:storageFeesCharged" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:storageFeesCharged</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_LicensePlate" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_LicensePlate</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="objFocusId" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">objFocusId</stringProp>
                        <stringProp name="Argument.value">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:vehicleTowed</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="eventParam" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">eventParam</stringProp>
                        <stringProp name="Argument.value">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Mileage</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                  <boolProp name="HTTPSampler.image_parser">true</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">DNT</stringProp>
                        <stringProp name="Header.value">1</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_21" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Color" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Color</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Mileage" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Mileage</stringProp>
                        <stringProp name="Argument.value">10000</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="infoBar" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">infoBar</stringProp>
                        <stringProp name="Argument.value">${cINFOBAR_4}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="TabBar:ClaimTab:ClaimTab_FindClaim" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">TabBar:ClaimTab:ClaimTab_FindClaim</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name=":tabs" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">:tabs</stringProp>
                        <stringProp name="Argument.value">${cTABS}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="QuickJump" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">QuickJump</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name=":tblinks" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">:tblinks</stringProp>
                        <stringProp name="Argument.value">${cTBLINKS_1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:0_toggle" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:0_toggle</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:PreExistingDamage" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:PreExistingDamage</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:1_toggle" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:1_toggle</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="scrollPositions" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">scrollPositions</stringProp>
                        <stringProp name="Argument.value">{&quot;centerPanel&quot;:{&quot;left&quot;:0,&quot;top&quot;:376}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:LossParty" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:LossParty</stringProp>
                        <stringProp name="Argument.value">true</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="csrfToken" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">csrfToken</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:incidentOnly" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:incidentOnly</stringProp>
                        <stringProp name="Argument.value">false</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:1" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:1</stringProp>
                        <stringProp name="Argument.value">${cFNOLWIZARD1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Picker" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Picker</stringProp>
                        <stringProp name="Argument.value">Vehicle:${cVEHICLE}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:0" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:0</stringProp>
                        <stringProp name="Argument.value">${cFNOLWIZARD0_4}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Exposure_AirbagsDeployed" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Exposure_AirbagsDeployed</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Description" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Description</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:SeverityOfDamage" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:SeverityOfDamage</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:VehicleLocDuringBusHrs_RangeInput" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:VehicleLocDuringBusHrs_RangeInput</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:vehicleTowed" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:vehicleTowed</stringProp>
                        <stringProp name="Argument.value">No</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Owner_Picker" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Owner_Picker</stringProp>
                        <stringProp name="Argument.value">Person:${cPERSON}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_State" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_State</stringProp>
                        <stringProp name="Argument.value">AL</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:collPoint" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:collPoint</stringProp>
                        <stringProp name="Argument.value">12</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:childSafetySeatQuestionsInputSet:ChildSafetySeatQuestionsInputSet:safetySeatInVehicle" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:childSafetySeatQuestionsInputSet:ChildSafetySeatQuestionsInputSet:safetySeatInVehicle</stringProp>
                        <stringProp name="Argument.value">No</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:existingEstimate" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:existingEstimate</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:storageFeesCharged" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:storageFeesCharged</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="objFocusId" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">objFocusId</stringProp>
                        <stringProp name="Argument.value">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:collPoint</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_LicensePlate" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_LicensePlate</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="eventParam" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">eventParam</stringProp>
                        <stringProp name="Argument.value">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:collPoint</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="eventSource" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">eventSource</stringProp>
                        <stringProp name="Argument.value">_refresh_</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                  <boolProp name="HTTPSampler.image_parser">true</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">DNT</stringProp>
                        <stringProp name="Header.value">1</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cADDRESS2 Extractor" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">cADDRESS2</stringProp>
                    <stringProp name="RegexExtractor.regex">Address:(.*?)&quot;,</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">null</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ThinkTime - 10" enabled="true">
                  <stringProp name="TestPlan.comments">This transaction will wait for 10 seconds</stringProp>
                </GenericController>
                <hashTree>
                  <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="ThinkTime" enabled="true">
                    <stringProp name="ConstantTimer.delay">10000</stringProp>
                    <stringProp name="TestPlan.comments">   Converting seconds to milliseconds - 10s x 1000</stringProp>
                  </ConstantTimer>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP06_Y_Vehicle_Details_Severity" enabled="true">
                <boolProp name="TransactionController.includeTimers">false</boolProp>
                <boolProp name="TransactionController.parent">true</boolProp>
              </TransactionController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_22" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Color" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Color</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Mileage" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Mileage</stringProp>
                        <stringProp name="Argument.value">10000</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="infoBar" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">infoBar</stringProp>
                        <stringProp name="Argument.value">${cINFOBAR_4}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="TabBar:ClaimTab:ClaimTab_FindClaim" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">TabBar:ClaimTab:ClaimTab_FindClaim</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name=":tabs" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">:tabs</stringProp>
                        <stringProp name="Argument.value">${cTABS}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="QuickJump" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">QuickJump</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name=":tblinks" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">:tblinks</stringProp>
                        <stringProp name="Argument.value">${cTBLINKS_1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:0_toggle" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:0_toggle</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:PreExistingDamage" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:PreExistingDamage</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:1_toggle" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:1_toggle</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="scrollPositions" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">scrollPositions</stringProp>
                        <stringProp name="Argument.value">{&quot;centerPanel&quot;:{&quot;left&quot;:0,&quot;top&quot;:376}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:LossParty" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:LossParty</stringProp>
                        <stringProp name="Argument.value">true</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="csrfToken" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">csrfToken</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:incidentOnly" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:incidentOnly</stringProp>
                        <stringProp name="Argument.value">false</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:1" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:1</stringProp>
                        <stringProp name="Argument.value">${cFNOLWIZARD1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Picker" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Picker</stringProp>
                        <stringProp name="Argument.value">Vehicle:${cVEHICLE}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:0" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:0</stringProp>
                        <stringProp name="Argument.value">${cFNOLWIZARD0_4}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Exposure_AirbagsDeployed" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Exposure_AirbagsDeployed</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Description" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Description</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:SeverityOfDamage" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:SeverityOfDamage</stringProp>
                        <stringProp name="Argument.value">unknown</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:VehicleLocDuringBusHrs_RangeInput" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:VehicleLocDuringBusHrs_RangeInput</stringProp>
                        <stringProp name="Argument.value">Address:${cADDRESS2}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:vehicleTowed" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:vehicleTowed</stringProp>
                        <stringProp name="Argument.value">No</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Owner_Picker" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Owner_Picker</stringProp>
                        <stringProp name="Argument.value">Person:${cPERSON}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_State" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_State</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:collPoint" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:collPoint</stringProp>
                        <stringProp name="Argument.value">12</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:childSafetySeatQuestionsInputSet:ChildSafetySeatQuestionsInputSet:safetySeatInVehicle" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:childSafetySeatQuestionsInputSet:ChildSafetySeatQuestionsInputSet:safetySeatInVehicle</stringProp>
                        <stringProp name="Argument.value">No</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:existingEstimate" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:existingEstimate</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:storageFeesCharged" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:storageFeesCharged</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="objFocusId" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">objFocusId</stringProp>
                        <stringProp name="Argument.value">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:SeverityOfDamage</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_LicensePlate" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_LicensePlate</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="eventParam" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">eventParam</stringProp>
                        <stringProp name="Argument.value">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:SeverityOfDamage</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="eventSource" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">eventSource</stringProp>
                        <stringProp name="Argument.value">_refresh_</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                  <boolProp name="HTTPSampler.image_parser">true</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">DNT</stringProp>
                        <stringProp name="Header.value">1</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ThinkTime - 10" enabled="true">
                  <stringProp name="TestPlan.comments">This transaction will wait for 10 seconds</stringProp>
                </GenericController>
                <hashTree>
                  <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="ThinkTime" enabled="true">
                    <stringProp name="ConstantTimer.delay">10000</stringProp>
                    <stringProp name="TestPlan.comments">   Converting seconds to milliseconds - 10s x 1000</stringProp>
                  </ConstantTimer>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP06_Z_Vehicle_Details_Airbags_Deployed" enabled="true">
                <boolProp name="TransactionController.includeTimers">false</boolProp>
                <boolProp name="TransactionController.parent">true</boolProp>
              </TransactionController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_23" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Color" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Color</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Mileage" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Mileage</stringProp>
                        <stringProp name="Argument.value">10000</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="infoBar" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">infoBar</stringProp>
                        <stringProp name="Argument.value">${cINFOBAR_4}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="TabBar:ClaimTab:ClaimTab_FindClaim" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">TabBar:ClaimTab:ClaimTab_FindClaim</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name=":tabs" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">:tabs</stringProp>
                        <stringProp name="Argument.value">${cTABS}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="QuickJump" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">QuickJump</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name=":tblinks" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">:tblinks</stringProp>
                        <stringProp name="Argument.value">${cTBLINKS_1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:0_toggle" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:0_toggle</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:PreExistingDamage" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:PreExistingDamage</stringProp>
                        <stringProp name="Argument.value">TP06</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:1_toggle" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:1_toggle</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="scrollPositions" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">scrollPositions</stringProp>
                        <stringProp name="Argument.value">{&quot;centerPanel&quot;:{&quot;left&quot;:0,&quot;top&quot;:376}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:LossParty" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:LossParty</stringProp>
                        <stringProp name="Argument.value">true</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="csrfToken" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">csrfToken</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:incidentOnly" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:incidentOnly</stringProp>
                        <stringProp name="Argument.value">false</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:1" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:1</stringProp>
                        <stringProp name="Argument.value">${cFNOLWIZARD1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Picker" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Picker</stringProp>
                        <stringProp name="Argument.value">Vehicle:${cVEHICLE}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:0" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:0</stringProp>
                        <stringProp name="Argument.value">${cFNOLWIZARD0_4}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Exposure_AirbagsDeployed" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Exposure_AirbagsDeployed</stringProp>
                        <stringProp name="Argument.value">No</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Description" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Description</stringProp>
                        <stringProp name="Argument.value">TP06</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:SeverityOfDamage" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:SeverityOfDamage</stringProp>
                        <stringProp name="Argument.value">unknown</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:VehicleLocDuringBusHrs_RangeInput" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:VehicleLocDuringBusHrs_RangeInput</stringProp>
                        <stringProp name="Argument.value">Address:${cADDRESS2}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:vehicleTowed" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:vehicleTowed</stringProp>
                        <stringProp name="Argument.value">No</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Owner_Picker" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Owner_Picker</stringProp>
                        <stringProp name="Argument.value">Person:${cPERSON}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_State" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_State</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:collPoint" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:collPoint</stringProp>
                        <stringProp name="Argument.value">12</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:childSafetySeatQuestionsInputSet:ChildSafetySeatQuestionsInputSet:safetySeatInVehicle" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:childSafetySeatQuestionsInputSet:ChildSafetySeatQuestionsInputSet:safetySeatInVehicle</stringProp>
                        <stringProp name="Argument.value">No</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:existingEstimate" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:existingEstimate</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:storageFeesCharged" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:storageFeesCharged</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="objFocusId" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">objFocusId</stringProp>
                        <stringProp name="Argument.value">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Exposure_AirbagsDeployed</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_LicensePlate" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_LicensePlate</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="eventParam" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">eventParam</stringProp>
                        <stringProp name="Argument.value">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Exposure_AirbagsDeployed</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="eventSource" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">eventSource</stringProp>
                        <stringProp name="Argument.value">_refresh_</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                  <boolProp name="HTTPSampler.image_parser">true</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">DNT</stringProp>
                        <stringProp name="Header.value">1</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ThinkTime - 10" enabled="true">
                  <stringProp name="TestPlan.comments">This transaction will wait for 10 seconds</stringProp>
                </GenericController>
                <hashTree>
                  <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="ThinkTime" enabled="true">
                    <stringProp name="ConstantTimer.delay">10000</stringProp>
                    <stringProp name="TestPlan.comments">   Converting seconds to milliseconds - 10s x 1000</stringProp>
                  </ConstantTimer>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP06_ZA_Vehicle_Details_Vehicle_Operable" enabled="true">
                <boolProp name="TransactionController.includeTimers">false</boolProp>
                <boolProp name="TransactionController.parent">true</boolProp>
              </TransactionController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_24" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Color" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Color</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Mileage" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Mileage</stringProp>
                        <stringProp name="Argument.value">10000</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name=":tabs" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">:tabs</stringProp>
                        <stringProp name="Argument.value">${cTABS}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="TabBar:ClaimTab:ClaimTab_FindClaim" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">TabBar:ClaimTab:ClaimTab_FindClaim</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name=":tblinks" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">:tblinks</stringProp>
                        <stringProp name="Argument.value">${cTBLINKS_1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="QuickJump" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">QuickJump</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:PreExistingDamage" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:PreExistingDamage</stringProp>
                        <stringProp name="Argument.value">TP06</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:0_toggle" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:0_toggle</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Operable" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Operable</stringProp>
                        <stringProp name="Argument.value">true</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:1_toggle" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:1_toggle</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="csrfToken" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">csrfToken</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:LossParty" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:LossParty</stringProp>
                        <stringProp name="Argument.value">true</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:1" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:1</stringProp>
                        <stringProp name="Argument.value">${cFNOLWIZARD1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:incidentOnly" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:incidentOnly</stringProp>
                        <stringProp name="Argument.value">false</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:0" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:0</stringProp>
                        <stringProp name="Argument.value">${cFNOLWIZARD0_4}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Picker" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Picker</stringProp>
                        <stringProp name="Argument.value">Vehicle:${cVEHICLE}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="infoBar" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">infoBar</stringProp>
                        <stringProp name="Argument.value">${cINFOBAR_4}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Exposure_AirbagsDeployed" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Exposure_AirbagsDeployed</stringProp>
                        <stringProp name="Argument.value">No</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Description" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Description</stringProp>
                        <stringProp name="Argument.value">TP06</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:SeverityOfDamage" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:SeverityOfDamage</stringProp>
                        <stringProp name="Argument.value">unknown</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:VehicleLocDuringBusHrs_RangeInput" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:VehicleLocDuringBusHrs_RangeInput</stringProp>
                        <stringProp name="Argument.value">Address:${cADDRESS2}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:vehicleTowed" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:vehicleTowed</stringProp>
                        <stringProp name="Argument.value">No</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Owner_Picker" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Owner_Picker</stringProp>
                        <stringProp name="Argument.value">Person:${cPERSON}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="objFocusId" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">objFocusId</stringProp>
                        <stringProp name="Argument.value">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Operable_true</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_State" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_State</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:collPoint" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:collPoint</stringProp>
                        <stringProp name="Argument.value">12</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:childSafetySeatQuestionsInputSet:ChildSafetySeatQuestionsInputSet:safetySeatInVehicle" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:childSafetySeatQuestionsInputSet:ChildSafetySeatQuestionsInputSet:safetySeatInVehicle</stringProp>
                        <stringProp name="Argument.value">No</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:existingEstimate" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:existingEstimate</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:storageFeesCharged" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:storageFeesCharged</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="eventParam" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">eventParam</stringProp>
                        <stringProp name="Argument.value">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Operable</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_LicensePlate" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_LicensePlate</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="eventSource" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">eventSource</stringProp>
                        <stringProp name="Argument.value">_refresh_</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="scrollPositions" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">scrollPositions</stringProp>
                        <stringProp name="Argument.value">{&quot;centerPanel&quot;:{&quot;left&quot;:0,&quot;top&quot;:376}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                  <boolProp name="HTTPSampler.image_parser">true</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">DNT</stringProp>
                        <stringProp name="Header.value">1</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ThinkTime - 10" enabled="true">
                  <stringProp name="TestPlan.comments">This transaction will wait for 10 seconds</stringProp>
                </GenericController>
                <hashTree>
                  <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="ThinkTime" enabled="true">
                    <stringProp name="ConstantTimer.delay">10000</stringProp>
                    <stringProp name="TestPlan.comments">   Converting seconds to milliseconds - 10s x 1000</stringProp>
                  </ConstantTimer>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP06_ZB_Vehicle_Details_Add_Driver" enabled="true">
                <boolProp name="TransactionController.includeTimers">false</boolProp>
                <boolProp name="TransactionController.parent">true</boolProp>
              </TransactionController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_25" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Color" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Color</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Mileage" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Mileage</stringProp>
                        <stringProp name="Argument.value">10000</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name=":tabs" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">:tabs</stringProp>
                        <stringProp name="Argument.value">${cTABS}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="TabBar:ClaimTab:ClaimTab_FindClaim" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">TabBar:ClaimTab:ClaimTab_FindClaim</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name=":tblinks" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">:tblinks</stringProp>
                        <stringProp name="Argument.value">${cTBLINKS_1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="QuickJump" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">QuickJump</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:PreExistingDamage" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:PreExistingDamage</stringProp>
                        <stringProp name="Argument.value">TP06</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:0_toggle" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:0_toggle</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Operable" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Operable</stringProp>
                        <stringProp name="Argument.value">true</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:1_toggle" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:1_toggle</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="csrfToken" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">csrfToken</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:LossParty" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:LossParty</stringProp>
                        <stringProp name="Argument.value">true</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:1" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:1</stringProp>
                        <stringProp name="Argument.value">${cFNOLWIZARD1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:incidentOnly" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:incidentOnly</stringProp>
                        <stringProp name="Argument.value">false</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:0" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:0</stringProp>
                        <stringProp name="Argument.value">${cFNOLWIZARD0_4}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Picker" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Picker</stringProp>
                        <stringProp name="Argument.value">Vehicle:${cVEHICLE}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="infoBar" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">infoBar</stringProp>
                        <stringProp name="Argument.value">${cINFOBAR_4}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Exposure_AirbagsDeployed" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Exposure_AirbagsDeployed</stringProp>
                        <stringProp name="Argument.value">No</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Description" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Description</stringProp>
                        <stringProp name="Argument.value">TP06</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:SeverityOfDamage" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:SeverityOfDamage</stringProp>
                        <stringProp name="Argument.value">unknown</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:VehicleLocDuringBusHrs_RangeInput" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:VehicleLocDuringBusHrs_RangeInput</stringProp>
                        <stringProp name="Argument.value">Address:${cADDRESS2}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:vehicleTowed" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:vehicleTowed</stringProp>
                        <stringProp name="Argument.value">No</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Owner_Picker" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Owner_Picker</stringProp>
                        <stringProp name="Argument.value">Person:${cPERSON}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_State" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_State</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:collPoint" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:collPoint</stringProp>
                        <stringProp name="Argument.value">12</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:childSafetySeatQuestionsInputSet:ChildSafetySeatQuestionsInputSet:safetySeatInVehicle" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:childSafetySeatQuestionsInputSet:ChildSafetySeatQuestionsInputSet:safetySeatInVehicle</stringProp>
                        <stringProp name="Argument.value">No</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:existingEstimate" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:existingEstimate</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:storageFeesCharged" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:storageFeesCharged</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="objFocusId" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">objFocusId</stringProp>
                        <stringProp name="Argument.value">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:OccupantLV_tb:AddDriverButton</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_LicensePlate" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_LicensePlate</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="eventSource" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">eventSource</stringProp>
                        <stringProp name="Argument.value">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:OccupantLV_tb:AddDriverButton_act</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="scrollPositions" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">scrollPositions</stringProp>
                        <stringProp name="Argument.value">{&quot;centerPanel&quot;:{&quot;left&quot;:0,&quot;top&quot;:376}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                  <boolProp name="HTTPSampler.image_parser">true</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">DNT</stringProp>
                        <stringProp name="Header.value">1</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="573825610">Driver Details</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="ResponseOk Extractor" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">ResponseOk</stringProp>
                    <stringProp name="RegexExtractor.regex">,&quot;text&quot;:&quot;Driver (.*?)&quot;,&quot;cls&quot;:&quot;x-panel-header-text</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">null</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ThinkTime - 10" enabled="true">
                  <stringProp name="TestPlan.comments">This transaction will wait for 10 seconds</stringProp>
                </GenericController>
                <hashTree>
                  <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="ThinkTime" enabled="true">
                    <stringProp name="ConstantTimer.delay">10000</stringProp>
                    <stringProp name="TestPlan.comments">   Converting seconds to milliseconds - 10s x 1000</stringProp>
                  </ConstantTimer>
                  <hashTree/>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If CNG_TP06_ZB_Vehicle_Details_Add_Driver &quot;${ResponseOk}&quot; == &quot;null&quot;" enabled="true">
                  <stringProp name="IfController.condition">&quot;${ResponseOk}&quot; == &quot;null&quot;</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="-RETURNTOADDCLAIMINFO" enabled="true">
                    <stringProp name="TestPlan.comments">This section contains the RETURNTOADDCLAIMINFO part of Loadrunner</stringProp>
                  </GenericController>
                  <hashTree>
                    <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP06_Vehicle_Details_Return_To_Add_Claim_Info" enabled="true">
                      <boolProp name="TransactionController.includeTimers">false</boolProp>
                      <boolProp name="TransactionController.parent">true</boolProp>
                    </TransactionController>
                    <hashTree>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_23" enabled="true">
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                          <collectionProp name="Arguments.arguments">
                            <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_VehicleType" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_VehicleType</stringProp>
                              <stringProp name="Argument.value"></stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Style" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Style</stringProp>
                              <stringProp name="Argument.value">passengercar</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Description" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Description</stringProp>
                              <stringProp name="Argument.value"></stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="TabBar:ClaimTab:ClaimTab_FindClaim" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">TabBar:ClaimTab:ClaimTab_FindClaim</stringProp>
                              <stringProp name="Argument.value"></stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:SeverityOfDamage" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:SeverityOfDamage</stringProp>
                              <stringProp name="Argument.value"></stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="QuickJump" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">QuickJump</stringProp>
                              <stringProp name="Argument.value"></stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:collPoint" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:collPoint</stringProp>
                              <stringProp name="Argument.value"></stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="FNOLWizard:0_toggle" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">FNOLWizard:0_toggle</stringProp>
                              <stringProp name="Argument.value"></stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:existingEstimate" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:existingEstimate</stringProp>
                              <stringProp name="Argument.value"></stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="FNOLWizard:1_toggle" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">FNOLWizard:1_toggle</stringProp>
                              <stringProp name="Argument.value"></stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name=":tabs" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">:tabs</stringProp>
                              <stringProp name="Argument.value">${cTABS}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:LossParty" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:LossParty</stringProp>
                              <stringProp name="Argument.value">true</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name=":tblinks" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">:tblinks</stringProp>
                              <stringProp name="Argument.value">${cTBLINKS_1}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:incidentOnly" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:incidentOnly</stringProp>
                              <stringProp name="Argument.value">false</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:PreExistingDamage" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:PreExistingDamage</stringProp>
                              <stringProp name="Argument.value"></stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Picker" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Picker</stringProp>
                              <stringProp name="Argument.value">Vehicle:${cVEHICLE}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Exposure_AirbagsDeployed" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Exposure_AirbagsDeployed</stringProp>
                              <stringProp name="Argument.value"></stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:storageFeesCharged" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:storageFeesCharged</stringProp>
                              <stringProp name="Argument.value"></stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:VehicleLocDuringBusHrs_RangeInput" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:VehicleLocDuringBusHrs_RangeInput</stringProp>
                              <stringProp name="Argument.value"></stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="objFocusId" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">objFocusId</stringProp>
                              <stringProp name="Argument.value">FNOLVehicleIncidentPopup:__crumb__</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="eventSource" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">eventSource</stringProp>
                              <stringProp name="Argument.value">FNOLVehicleIncidentPopup:__crumb___act</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="csrfToken" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">csrfToken</stringProp>
                              <stringProp name="Argument.value"></stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="FNOLWizard:1" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">FNOLWizard:1</stringProp>
                              <stringProp name="Argument.value">${cFNOLWIZARD1}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="FNOLWizard:0" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">FNOLWizard:0</stringProp>
                              <stringProp name="Argument.value">${cFNOLWIZARD0_4}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="infoBar" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">infoBar</stringProp>
                              <stringProp name="Argument.value">${cINFOBAR_4}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:vehicleTowed" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:vehicleTowed</stringProp>
                              <stringProp name="Argument.value"></stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Color" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Color</stringProp>
                              <stringProp name="Argument.value"></stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Model_Dropdown" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Model_Dropdown</stringProp>
                              <stringProp name="Argument.value"></stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Make_Dropdown" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Make_Dropdown</stringProp>
                              <stringProp name="Argument.value"></stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Year" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Year</stringProp>
                              <stringProp name="Argument.value"></stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Owner_Picker" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Owner_Picker</stringProp>
                              <stringProp name="Argument.value"></stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_State" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_State</stringProp>
                              <stringProp name="Argument.value"></stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_LicensePlate" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_LicensePlate</stringProp>
                              <stringProp name="Argument.value"></stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Mileage" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Mileage</stringProp>
                              <stringProp name="Argument.value"></stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_VIN" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_VIN</stringProp>
                              <stringProp name="Argument.value"></stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                          </collectionProp>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain"></stringProp>
                        <stringProp name="HTTPSampler.port"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        <stringProp name="HTTPSampler.protocol">https</stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                        <stringProp name="HTTPSampler.method">POST</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                        <boolProp name="HTTPSampler.image_parser">true</boolProp>
                        <boolProp name="HTTPSampler.monitor">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree>
                        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                          <collectionProp name="HeaderManager.headers">
                            <elementProp name="Accept-Language" elementType="Header">
                              <stringProp name="Header.name">DNT</stringProp>
                              <stringProp name="Header.value">1</stringProp>
                            </elementProp>
                          </collectionProp>
                        </HeaderManager>
                        <hashTree/>
                        <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname=" CNG_TP06_Vehicle_Details_Return_To_Add_Claim_Info Add Claim Info screen not displayed , ${POLICYNUMBER} , ${POLEFFDATE} , ${POLEXPDATE} , ${PHONENUMBER} ,${LASTNAME},${FIRSTNAME} ,${STATE}, ${POLICYTYPE},${AGREEMENTSOURCE}" enabled="true">
                          <collectionProp name="Asserion.test_strings">
                            <stringProp name="-1685924503">Add claim information</stringProp>
                          </collectionProp>
                          <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                          <boolProp name="Assertion.assume_success">false</boolProp>
                          <intProp name="Assertion.test_type">16</intProp>
                        </ResponseAssertion>
                        <hashTree/>
                      </hashTree>
                      <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ThinkTime - 10" enabled="true">
                        <stringProp name="TestPlan.comments">This transaction will wait for 10 seconds</stringProp>
                      </GenericController>
                      <hashTree>
                        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="ThinkTime" enabled="true">
                          <stringProp name="ConstantTimer.delay">10000</stringProp>
                          <stringProp name="TestPlan.comments">   Converting seconds to milliseconds - 10s x 1000</stringProp>
                        </ConstantTimer>
                        <hashTree/>
                      </hashTree>
                    </hashTree>
                  </hashTree>
                  <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="-CANCELCLAIMADDCLAIMINFORMATION" enabled="true">
                    <stringProp name="TestPlan.comments">This section contains the CANCELCLAIMADDCLAIMINFORMATION part of Loadrunner</stringProp>
                  </GenericController>
                  <hashTree>
                    <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP06_Cancel_Claim_Add_Claim_Information" enabled="true">
                      <boolProp name="TransactionController.includeTimers">false</boolProp>
                      <boolProp name="TransactionController.parent">true</boolProp>
                    </TransactionController>
                    <hashTree>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_13" enabled="true">
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                          <collectionProp name="Arguments.arguments">
                            <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:anyInjuryAuto" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:anyInjuryAuto</stringProp>
                              <stringProp name="Argument.value">false</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:AddressDetailInputSetRef:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:Address_Picker" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:AddressDetailInputSetRef:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:Address_Picker</stringProp>
                              <stringProp name="Argument.value">__new</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="eventSource" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">eventSource</stringProp>
                              <stringProp name="Argument.value">FNOLWizard:Cancel_act</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="TabBar:ClaimTab:ClaimTab_FindClaim" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">TabBar:ClaimTab:ClaimTab_FindClaim</stringProp>
                              <stringProp name="Argument.value"></stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="csrfToken" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">csrfToken</stringProp>
                              <stringProp name="Argument.value"></stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="QuickJump" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">QuickJump</stringProp>
                              <stringProp name="Argument.value"></stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="FNOLWizard:1" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">FNOLWizard:1</stringProp>
                              <stringProp name="Argument.value">${cFNOLWIZARD1_1}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="FNOLWizard:0_toggle" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">FNOLWizard:0_toggle</stringProp>
                              <stringProp name="Argument.value"></stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="FNOLWizard:0" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">FNOLWizard:0</stringProp>
                              <stringProp name="Argument.value">${cFNOLWIZARD0_3}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="FNOLWizard:1_toggle" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">FNOLWizard:1_toggle</stringProp>
                              <stringProp name="Argument.value"></stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:Claim_LossCategory" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:Claim_LossCategory</stringProp>
                              <stringProp name="Argument.value"></stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:Description" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:Description</stringProp>
                              <stringProp name="Argument.value"></stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:Fault" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:Fault</stringProp>
                              <stringProp name="Argument.value"></stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="objFocusId" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">objFocusId</stringProp>
                              <stringProp name="Argument.value">FNOLWizard:Cancel</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="FNOLWizard:FNOLMenuActions" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">FNOLWizard:FNOLMenuActions</stringProp>
                              <stringProp name="Argument.value">${cFNOLMENUACTIONS}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="infoBar" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">infoBar</stringProp>
                              <stringProp name="Argument.value">${cINFOBAR_4}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name=":tabs" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">:tabs</stringProp>
                              <stringProp name="Argument.value">${cTABS}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:AddressDetailInputSetRef:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:State" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:AddressDetailInputSetRef:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:State</stringProp>
                              <stringProp name="Argument.value"></stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:AddressDetailInputSetRef:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:County" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:AddressDetailInputSetRef:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:County</stringProp>
                              <stringProp name="Argument.value"></stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:AddressDetailInputSetRef:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:City" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:AddressDetailInputSetRef:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:City</stringProp>
                              <stringProp name="Argument.value"></stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:AddressDetailInputSetRef:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:AddressLine2" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:AddressDetailInputSetRef:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:AddressLine2</stringProp>
                              <stringProp name="Argument.value"></stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name=":tblinks" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">:tblinks</stringProp>
                              <stringProp name="Argument.value">${cTBLINKS_1}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:Claim_PermissionRequired" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:Claim_PermissionRequired</stringProp>
                              <stringProp name="Argument.value"></stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:AddressDetailInputSetRef:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:Country" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:AddressDetailInputSetRef:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:Country</stringProp>
                              <stringProp name="Argument.value">US</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:AddressDetailInputSetRef:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:PostalCode" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:AddressDetailInputSetRef:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:PostalCode</stringProp>
                              <stringProp name="Argument.value"></stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:AddressDetailInputSetRef:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:AddressLine1" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:AddressDetailInputSetRef:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:AddressLine1</stringProp>
                              <stringProp name="Argument.value"></stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                          </collectionProp>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain"></stringProp>
                        <stringProp name="HTTPSampler.port"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        <stringProp name="HTTPSampler.protocol">https</stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                        <stringProp name="HTTPSampler.method">POST</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                        <boolProp name="HTTPSampler.image_parser">true</boolProp>
                        <boolProp name="HTTPSampler.monitor">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree>
                        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                          <collectionProp name="HeaderManager.headers">
                            <elementProp name="Accept-Language" elementType="Header">
                              <stringProp name="Header.name">DNT</stringProp>
                              <stringProp name="Header.value">1</stringProp>
                            </elementProp>
                          </collectionProp>
                        </HeaderManager>
                        <hashTree/>
                        <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="CNG_TP06_Cancel_Claim_Add_Claim_Information -- Desktop screen not displayed ${POLICYNUMBER} , ${POLEFFDATE} , ${POLEXPDATE} , ${PHONENUMBER} ,${LASTNAME},${FIRSTNAME} ,${STATE}, ${POLICYTYPE},${AGREEMENTSOURCE}" enabled="true">
                          <collectionProp name="Asserion.test_strings">
                            <stringProp name="-252897267">Activities</stringProp>
                          </collectionProp>
                          <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                          <boolProp name="Assertion.assume_success">false</boolProp>
                          <intProp name="Assertion.test_type">16</intProp>
                        </ResponseAssertion>
                        <hashTree/>
                      </hashTree>
                      <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ThinkTime - 10" enabled="true">
                        <stringProp name="TestPlan.comments">This transaction will wait for 10 seconds</stringProp>
                      </GenericController>
                      <hashTree>
                        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="ThinkTime" enabled="true">
                          <stringProp name="ConstantTimer.delay">10000</stringProp>
                          <stringProp name="TestPlan.comments">   Converting seconds to milliseconds - 10s x 1000</stringProp>
                        </ConstantTimer>
                        <hashTree/>
                      </hashTree>
                    </hashTree>
                  </hashTree>
                  <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="-RETURNTODESKTOP" enabled="true">
                    <stringProp name="TestPlan.comments">This section contains the RETURNTODESKTOP part of Loadrunner</stringProp>
                  </GenericController>
                  <hashTree>
                    <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP06_Return_To_Desktop" enabled="true">
                      <boolProp name="TransactionController.includeTimers">false</boolProp>
                      <boolProp name="TransactionController.parent">true</boolProp>
                    </TransactionController>
                    <hashTree>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_66" enabled="true">
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                          <collectionProp name="Arguments.arguments">
                            <elementProp name="Claim:MenuLinks" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">Claim:MenuLinks</stringProp>
                              <stringProp name="Argument.value">${cCLAIMMENULINKS}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="csrfToken" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">csrfToken</stringProp>
                              <stringProp name="Argument.value"></stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="TabBar:ClaimTab:ClaimTab_FindClaim" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">TabBar:ClaimTab:ClaimTab_FindClaim</stringProp>
                              <stringProp name="Argument.value"></stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="QuickJump" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">QuickJump</stringProp>
                              <stringProp name="Argument.value"></stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="Claim:MenuLinks_toggle" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">Claim:MenuLinks_toggle</stringProp>
                              <stringProp name="Argument.value"></stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name=":tblinks" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">:tblinks</stringProp>
                              <stringProp name="Argument.value">${cTBLINKS}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name=":tabs" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">:tabs</stringProp>
                              <stringProp name="Argument.value">${cTABS_1}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="infoBar" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">infoBar</stringProp>
                              <stringProp name="Argument.value">${cINFOBAR_6}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="Claim:ClaimMenuActions" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">Claim:ClaimMenuActions</stringProp>
                              <stringProp name="Argument.value">${cCLAIMMENUACTIONS}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="objFocusId" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">objFocusId</stringProp>
                              <stringProp name="Argument.value">TabBar:DesktopTab</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="eventSource" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">eventSource</stringProp>
                              <stringProp name="Argument.value">TabBar:DesktopTab_act</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                          </collectionProp>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain"></stringProp>
                        <stringProp name="HTTPSampler.port"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        <stringProp name="HTTPSampler.protocol">https</stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                        <stringProp name="HTTPSampler.method">POST</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                        <boolProp name="HTTPSampler.image_parser">true</boolProp>
                        <boolProp name="HTTPSampler.monitor">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree>
                        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                          <collectionProp name="HeaderManager.headers">
                            <elementProp name="Accept-Language" elementType="Header">
                              <stringProp name="Header.name">DNT</stringProp>
                              <stringProp name="Header.value">1</stringProp>
                            </elementProp>
                          </collectionProp>
                        </HeaderManager>
                        <hashTree/>
                        <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="CNG_TP06_Return_To_Desktop -- Desktop screen has not appeared for claim number: ${CLAIMNUMBER}" enabled="true">
                          <collectionProp name="Asserion.test_strings">
                            <stringProp name="1514705186">My activities today</stringProp>
                          </collectionProp>
                          <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                          <boolProp name="Assertion.assume_success">false</boolProp>
                          <intProp name="Assertion.test_type">16</intProp>
                        </ResponseAssertion>
                        <hashTree/>
                        <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cTABS Extractor" enabled="true">
                          <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                          <stringProp name="RegexExtractor.refname">cTABS</stringProp>
                          <stringProp name="RegexExtractor.regex">&quot;id&quot;:&quot;TabBar:VacationTab&quot;,&quot;text&quot;:&quot;Vacation&quot;,&quot;menu&quot;:\{&quot;defaultType&quot;:&quot;gmenuitem&quot;},&quot;xtype&quot;:&quot;gbutton&quot;,&quot;disabled&quot;:true}],&quot;checksum&quot;:&quot;(.*?)&quot;}},\{</stringProp>
                          <stringProp name="RegexExtractor.template">$1$</stringProp>
                          <stringProp name="RegexExtractor.default">null</stringProp>
                          <stringProp name="RegexExtractor.match_number">1</stringProp>
                        </RegexExtractor>
                        <hashTree/>
                      </hashTree>
                      <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ThinkTime - 10" enabled="true">
                        <stringProp name="TestPlan.comments">This transaction will wait for 10 seconds</stringProp>
                      </GenericController>
                      <hashTree>
                        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="ThinkTime" enabled="true">
                          <stringProp name="ConstantTimer.delay">10000</stringProp>
                          <stringProp name="TestPlan.comments">   Converting seconds to milliseconds - 10s x 1000</stringProp>
                        </ConstantTimer>
                        <hashTree/>
                      </hashTree>
                    </hashTree>
                  </hashTree>
                  <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Test Action" enabled="true">
                    <intProp name="ActionProcessor.action">3</intProp>
                    <intProp name="ActionProcessor.target">0</intProp>
                    <stringProp name="ActionProcessor.duration"></stringProp>
                  </TestAction>
                  <hashTree/>
                </hashTree>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="-ADDDRIVER" enabled="true">
              <stringProp name="TestPlan.comments">This section contains the ADDDRIVER part of Loadrunner</stringProp>
            </GenericController>
            <hashTree>
              <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP06_ZC_Driver_Details_Select_Person" enabled="true">
                <boolProp name="TransactionController.includeTimers">false</boolProp>
                <boolProp name="TransactionController.parent">true</boolProp>
              </TransactionController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_26" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name=":tblinks" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">:tblinks</stringProp>
                        <stringProp name="Argument.value">${cTBLINKS_1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name=":tabs" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">:tabs</stringProp>
                        <stringProp name="Argument.value">${cTABS}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="TabBar:ClaimTab:ClaimTab_FindClaim" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">TabBar:ClaimTab:ClaimTab_FindClaim</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="QuickJump" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">QuickJump</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:0_toggle" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:0_toggle</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:1_toggle" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:1_toggle</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLContactPopup:FNOLContactScreen:Person" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLContactPopup:FNOLContactScreen:Person</stringProp>
                        <stringProp name="Argument.value">Person:${cPERSON}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLContactPopup:FNOLContactScreen:DriverRelationToOwner" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLContactPopup:FNOLContactScreen:DriverRelationToOwner</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLContactPopup:FNOLContactScreen:reason" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLContactPopup:FNOLContactScreen:reason</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="scrollPositions" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">scrollPositions</stringProp>
                        <stringProp name="Argument.value">${\&quot;centerPanel\&quot;:${\&quot;left\&quot;:</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="csrfToken" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">csrfToken</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:1" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:1</stringProp>
                        <stringProp name="Argument.value">${cFNOLWIZARD1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:0" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:0</stringProp>
                        <stringProp name="Argument.value">${cFNOLWIZARD0_4}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="objFocusId" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">objFocusId</stringProp>
                        <stringProp name="Argument.value">FNOLContactPopup:FNOLContactScreen:Person</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="eventParam" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">eventParam</stringProp>
                        <stringProp name="Argument.value">FNOLContactPopup:FNOLContactScreen:Person</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="eventSource" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">eventSource</stringProp>
                        <stringProp name="Argument.value">_refresh_</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="infoBar" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">infoBar</stringProp>
                        <stringProp name="Argument.value">${cINFOBAR_4}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                  <boolProp name="HTTPSampler.image_parser">true</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">DNT</stringProp>
                        <stringProp name="Header.value">1</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ThinkTime - 10" enabled="true">
                  <stringProp name="TestPlan.comments">This transaction will wait for 10 seconds</stringProp>
                </GenericController>
                <hashTree>
                  <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="ThinkTime" enabled="true">
                    <stringProp name="ConstantTimer.delay">10000</stringProp>
                    <stringProp name="TestPlan.comments">   Converting seconds to milliseconds - 10s x 1000</stringProp>
                  </ConstantTimer>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP06_ZD_Driver_Details_Injured" enabled="true">
                <boolProp name="TransactionController.includeTimers">false</boolProp>
                <boolProp name="TransactionController.parent">true</boolProp>
              </TransactionController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_27" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="FNOLContactPopup:FNOLContactScreen:reason" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLContactPopup:FNOLContactScreen:reason</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLContactPopup:FNOLContactScreen:InitialInjured" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLContactPopup:FNOLContactScreen:InitialInjured</stringProp>
                        <stringProp name="Argument.value">No</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="TabBar:ClaimTab:ClaimTab_FindClaim" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">TabBar:ClaimTab:ClaimTab_FindClaim</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="QuickJump" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">QuickJump</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:0_toggle" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:0_toggle</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:1_toggle" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:1_toggle</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLContactPopup:FNOLContactScreen:Person" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLContactPopup:FNOLContactScreen:Person</stringProp>
                        <stringProp name="Argument.value">Person:${cPERSON}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLContactPopup:FNOLContactScreen:MedicareEligible" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLContactPopup:FNOLContactScreen:MedicareEligible</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLContactPopup:FNOLContactScreen:DriverRelationToOwner" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLContactPopup:FNOLContactScreen:DriverRelationToOwner</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="objFocusId" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">objFocusId</stringProp>
                        <stringProp name="Argument.value">FNOLContactPopup:FNOLContactScreen:InitialInjured_option2</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="eventParam" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">eventParam</stringProp>
                        <stringProp name="Argument.value">FNOLContactPopup:FNOLContactScreen:InitialInjured</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="eventSource" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">eventSource</stringProp>
                        <stringProp name="Argument.value">_refresh_</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="infoBar" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">infoBar</stringProp>
                        <stringProp name="Argument.value">${cINFOBAR_4}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name=":tabs" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">:tabs</stringProp>
                        <stringProp name="Argument.value">${cTABS}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name=":tblinks" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">:tblinks</stringProp>
                        <stringProp name="Argument.value">${cTBLINKS_1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLContactPopup:FNOLContactScreen:SeekTreatment" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLContactPopup:FNOLContactScreen:SeekTreatment</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="scrollPositions" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">scrollPositions</stringProp>
                        <stringProp name="Argument.value">${\&quot;centerPanel\&quot;:${\&quot;left\&quot;:</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="csrfToken" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">csrfToken</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:1" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:1</stringProp>
                        <stringProp name="Argument.value">${cFNOLWIZARD1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:0" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:0</stringProp>
                        <stringProp name="Argument.value">${cFNOLWIZARD0_4}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLContactPopup:FNOLContactScreen:ReceivedTreatment" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLContactPopup:FNOLContactScreen:ReceivedTreatment</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                  <boolProp name="HTTPSampler.image_parser">true</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">DNT</stringProp>
                        <stringProp name="Header.value">1</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ThinkTime - 10" enabled="true">
                  <stringProp name="TestPlan.comments">This transaction will wait for 10 seconds</stringProp>
                </GenericController>
                <hashTree>
                  <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="ThinkTime" enabled="true">
                    <stringProp name="ConstantTimer.delay">10000</stringProp>
                    <stringProp name="TestPlan.comments">   Converting seconds to milliseconds - 10s x 1000</stringProp>
                  </ConstantTimer>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP06_ZE_Driver_Details_OK_To_Return_To_Vehicle_Details" enabled="true">
                <boolProp name="TransactionController.includeTimers">false</boolProp>
                <boolProp name="TransactionController.parent">true</boolProp>
              </TransactionController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_28" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="FNOLContactPopup:FNOLContactScreen:reason" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLContactPopup:FNOLContactScreen:reason</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLContactPopup:FNOLContactScreen:InitialInjured" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLContactPopup:FNOLContactScreen:InitialInjured</stringProp>
                        <stringProp name="Argument.value">No</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="TabBar:ClaimTab:ClaimTab_FindClaim" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">TabBar:ClaimTab:ClaimTab_FindClaim</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="QuickJump" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">QuickJump</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:0_toggle" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:0_toggle</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:1_toggle" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:1_toggle</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLContactPopup:FNOLContactScreen:Person" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLContactPopup:FNOLContactScreen:Person</stringProp>
                        <stringProp name="Argument.value">Person:${cPERSON}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLContactPopup:FNOLContactScreen:MedicareEligible" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLContactPopup:FNOLContactScreen:MedicareEligible</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLContactPopup:FNOLContactScreen:DriverRelationToOwner" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLContactPopup:FNOLContactScreen:DriverRelationToOwner</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="objFocusId" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">objFocusId</stringProp>
                        <stringProp name="Argument.value">FNOLContactPopup:FNOLContactScreen:Update</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="eventSource" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">eventSource</stringProp>
                        <stringProp name="Argument.value">FNOLContactPopup:FNOLContactScreen:Update_act</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="infoBar" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">infoBar</stringProp>
                        <stringProp name="Argument.value">${cINFOBAR_4}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name=":tabs" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">:tabs</stringProp>
                        <stringProp name="Argument.value">${cTABS}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name=":tblinks" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">:tblinks</stringProp>
                        <stringProp name="Argument.value">${cTBLINKS_1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLContactPopup:FNOLContactScreen:SeekTreatment" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLContactPopup:FNOLContactScreen:SeekTreatment</stringProp>
                        <stringProp name="Argument.value">No</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="scrollPositions" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">scrollPositions</stringProp>
                        <stringProp name="Argument.value">${\&quot;centerPanel\&quot;:${\&quot;left\&quot;:</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="csrfToken" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">csrfToken</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:1" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:1</stringProp>
                        <stringProp name="Argument.value">${cFNOLWIZARD1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:0" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:0</stringProp>
                        <stringProp name="Argument.value">${cFNOLWIZARD0_4}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLContactPopup:FNOLContactScreen:ReceivedTreatment" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLContactPopup:FNOLContactScreen:ReceivedTreatment</stringProp>
                        <stringProp name="Argument.value">No</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                  <boolProp name="HTTPSampler.image_parser">true</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">DNT</stringProp>
                        <stringProp name="Header.value">1</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="CNG_TP06_ZE_Driver_Details_OK_To_Return_To_Vehicle_Details -- ${POLICYNUMBER} , ${POLEFFDATE} , ${POLEXPDATE} , ${PHONENUMBER} ,${LASTNAME},${FIRSTNAME} ,${STATE}, ${POLICYTYPE},${AGREEMENTSOURCE}" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-830276673">Involved Vehicle Information</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="ResponseOk Extractor" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">ResponseOk</stringProp>
                    <stringProp name="RegexExtractor.regex">Involved Vehicle Information(.*?)</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">null</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ThinkTime - 10" enabled="true">
                  <stringProp name="TestPlan.comments">This transaction will wait for 10 seconds</stringProp>
                </GenericController>
                <hashTree>
                  <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="ThinkTime" enabled="true">
                    <stringProp name="ConstantTimer.delay">10000</stringProp>
                    <stringProp name="TestPlan.comments">   Converting seconds to milliseconds - 10s x 1000</stringProp>
                  </ConstantTimer>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If CNG_TP06_ZE_Driver_Details_OK_To_Return_To_Vehicle_Details &quot;${ResponseOk}&quot; == &quot;null&quot;" enabled="true">
                <stringProp name="IfController.condition">&quot;${ResponseOk}&quot; == &quot;null&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="-RETURNTOVEHICLEDETAILS" enabled="true">
                  <stringProp name="TestPlan.comments">This section contains the RETURNTOVEHICLEDETAILS part of Loadrunner</stringProp>
                </GenericController>
                <hashTree>
                  <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP06_Driver_Details_Return_To_Vehicle_Details" enabled="true">
                    <boolProp name="TransactionController.includeTimers">false</boolProp>
                    <boolProp name="TransactionController.parent">true</boolProp>
                  </TransactionController>
                  <hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_29" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name=":tblinks" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">:tblinks</stringProp>
                            <stringProp name="Argument.value">${cTBLINKS_1}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name=":tabs" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">:tabs</stringProp>
                            <stringProp name="Argument.value">${cTABS}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="TabBar:ClaimTab:ClaimTab_FindClaim" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">TabBar:ClaimTab:ClaimTab_FindClaim</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="QuickJump" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">QuickJump</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:0_toggle" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:0_toggle</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:1_toggle" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:1_toggle</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLContactPopup:FNOLContactScreen:Person" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLContactPopup:FNOLContactScreen:Person</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLContactPopup:FNOLContactScreen:DriverRelationToOwner" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLContactPopup:FNOLContactScreen:DriverRelationToOwner</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLContactPopup:FNOLContactScreen:reason" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLContactPopup:FNOLContactScreen:reason</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="eventSource" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">eventSource</stringProp>
                            <stringProp name="Argument.value">FNOLContactPopup:__crumb___act</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="csrfToken" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">csrfToken</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:1" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:1</stringProp>
                            <stringProp name="Argument.value">${cFNOLWIZARD1}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:0" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:0</stringProp>
                            <stringProp name="Argument.value">${cFNOLWIZARD0_4}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="objFocusId" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">objFocusId</stringProp>
                            <stringProp name="Argument.value">FNOLContactPopup:__crumb__</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="infoBar" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">infoBar</stringProp>
                            <stringProp name="Argument.value">${cINFOBAR_4}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol">https</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                      <stringProp name="HTTPSampler.method">POST</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                      <boolProp name="HTTPSampler.image_parser">true</boolProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="Accept-Language" elementType="Header">
                            <stringProp name="Header.name">DNT</stringProp>
                            <stringProp name="Header.value">1</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                      <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="CNG_TP06_Driver_Details_Return_To_Vehicle_Details -- Vehicle details screen not displayed ${POLICYNUMBER} , ${POLEFFDATE} , ${POLEXPDATE} , ${PHONENUMBER} ,${LASTNAME},${FIRSTNAME} ,${STATE}, ${POLICYTYPE},${AGREEMENTSOURCE}" enabled="true">
                        <collectionProp name="Asserion.test_strings">
                          <stringProp name="938574094">Vehicle Details</stringProp>
                        </collectionProp>
                        <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                        <boolProp name="Assertion.assume_success">false</boolProp>
                        <intProp name="Assertion.test_type">16</intProp>
                      </ResponseAssertion>
                      <hashTree/>
                    </hashTree>
                    <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ThinkTime - 10" enabled="true">
                      <stringProp name="TestPlan.comments">This transaction will wait for 10 seconds</stringProp>
                    </GenericController>
                    <hashTree>
                      <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="ThinkTime" enabled="true">
                        <stringProp name="ConstantTimer.delay">10000</stringProp>
                        <stringProp name="TestPlan.comments">   Converting seconds to milliseconds - 10s x 1000</stringProp>
                      </ConstantTimer>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                </hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="-RETURNTOADDCLAIMINFO" enabled="true">
                  <stringProp name="TestPlan.comments">This section contains the RETURNTOADDCLAIMINFO part of Loadrunner</stringProp>
                </GenericController>
                <hashTree>
                  <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP06_Vehicle_Details_Return_To_Add_Claim_Info" enabled="true">
                    <boolProp name="TransactionController.includeTimers">false</boolProp>
                    <boolProp name="TransactionController.parent">true</boolProp>
                  </TransactionController>
                  <hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_23" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_VehicleType" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_VehicleType</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Style" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Style</stringProp>
                            <stringProp name="Argument.value">passengercar</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Description" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Description</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="TabBar:ClaimTab:ClaimTab_FindClaim" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">TabBar:ClaimTab:ClaimTab_FindClaim</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:SeverityOfDamage" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:SeverityOfDamage</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="QuickJump" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">QuickJump</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:collPoint" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:collPoint</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:0_toggle" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:0_toggle</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:existingEstimate" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:existingEstimate</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:1_toggle" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:1_toggle</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name=":tabs" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">:tabs</stringProp>
                            <stringProp name="Argument.value">${cTABS}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:LossParty" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:LossParty</stringProp>
                            <stringProp name="Argument.value">true</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name=":tblinks" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">:tblinks</stringProp>
                            <stringProp name="Argument.value">${cTBLINKS_1}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:incidentOnly" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:incidentOnly</stringProp>
                            <stringProp name="Argument.value">false</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:PreExistingDamage" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:PreExistingDamage</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Picker" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Picker</stringProp>
                            <stringProp name="Argument.value">Vehicle:${cVEHICLE}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Exposure_AirbagsDeployed" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Exposure_AirbagsDeployed</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:storageFeesCharged" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:storageFeesCharged</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:VehicleLocDuringBusHrs_RangeInput" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:VehicleLocDuringBusHrs_RangeInput</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="objFocusId" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">objFocusId</stringProp>
                            <stringProp name="Argument.value">FNOLVehicleIncidentPopup:__crumb__</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="eventSource" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">eventSource</stringProp>
                            <stringProp name="Argument.value">FNOLVehicleIncidentPopup:__crumb___act</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="csrfToken" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">csrfToken</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:1" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:1</stringProp>
                            <stringProp name="Argument.value">${cFNOLWIZARD1}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:0" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:0</stringProp>
                            <stringProp name="Argument.value">${cFNOLWIZARD0_4}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="infoBar" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">infoBar</stringProp>
                            <stringProp name="Argument.value">${cINFOBAR_4}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:vehicleTowed" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:vehicleTowed</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Color" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Color</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Model_Dropdown" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Model_Dropdown</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Make_Dropdown" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Make_Dropdown</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Year" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Year</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Owner_Picker" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Owner_Picker</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_State" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_State</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_LicensePlate" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_LicensePlate</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Mileage" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Mileage</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_VIN" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_VIN</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol">https</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                      <stringProp name="HTTPSampler.method">POST</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                      <boolProp name="HTTPSampler.image_parser">true</boolProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="Accept-Language" elementType="Header">
                            <stringProp name="Header.name">DNT</stringProp>
                            <stringProp name="Header.value">1</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                      <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname=" CNG_TP06_Vehicle_Details_Return_To_Add_Claim_Info Add Claim Info screen not displayed , ${POLICYNUMBER} , ${POLEFFDATE} , ${POLEXPDATE} , ${PHONENUMBER} ,${LASTNAME},${FIRSTNAME} ,${STATE}, ${POLICYTYPE},${AGREEMENTSOURCE}" enabled="true">
                        <collectionProp name="Asserion.test_strings">
                          <stringProp name="-1685924503">Add claim information</stringProp>
                        </collectionProp>
                        <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                        <boolProp name="Assertion.assume_success">false</boolProp>
                        <intProp name="Assertion.test_type">16</intProp>
                      </ResponseAssertion>
                      <hashTree/>
                    </hashTree>
                    <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ThinkTime - 10" enabled="true">
                      <stringProp name="TestPlan.comments">This transaction will wait for 10 seconds</stringProp>
                    </GenericController>
                    <hashTree>
                      <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="ThinkTime" enabled="true">
                        <stringProp name="ConstantTimer.delay">10000</stringProp>
                        <stringProp name="TestPlan.comments">   Converting seconds to milliseconds - 10s x 1000</stringProp>
                      </ConstantTimer>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                </hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="-CANCELCLAIMADDCLAIMINFORMATION" enabled="true">
                  <stringProp name="TestPlan.comments">This section contains the CANCELCLAIMADDCLAIMINFORMATION part of Loadrunner</stringProp>
                </GenericController>
                <hashTree>
                  <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP06_Cancel_Claim_Add_Claim_Information" enabled="true">
                    <boolProp name="TransactionController.includeTimers">false</boolProp>
                    <boolProp name="TransactionController.parent">true</boolProp>
                  </TransactionController>
                  <hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_13" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:anyInjuryAuto" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:anyInjuryAuto</stringProp>
                            <stringProp name="Argument.value">false</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:AddressDetailInputSetRef:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:Address_Picker" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:AddressDetailInputSetRef:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:Address_Picker</stringProp>
                            <stringProp name="Argument.value">__new</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="eventSource" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">eventSource</stringProp>
                            <stringProp name="Argument.value">FNOLWizard:Cancel_act</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="TabBar:ClaimTab:ClaimTab_FindClaim" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">TabBar:ClaimTab:ClaimTab_FindClaim</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="csrfToken" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">csrfToken</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="QuickJump" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">QuickJump</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:1" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:1</stringProp>
                            <stringProp name="Argument.value">${cFNOLWIZARD1_1}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:0_toggle" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:0_toggle</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:0" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:0</stringProp>
                            <stringProp name="Argument.value">${cFNOLWIZARD0_3}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:1_toggle" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:1_toggle</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:Claim_LossCategory" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:Claim_LossCategory</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:Description" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:Description</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:Fault" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:Fault</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="objFocusId" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">objFocusId</stringProp>
                            <stringProp name="Argument.value">FNOLWizard:Cancel</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:FNOLMenuActions" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:FNOLMenuActions</stringProp>
                            <stringProp name="Argument.value">${cFNOLMENUACTIONS}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="infoBar" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">infoBar</stringProp>
                            <stringProp name="Argument.value">${cINFOBAR_4}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name=":tabs" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">:tabs</stringProp>
                            <stringProp name="Argument.value">${cTABS}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:AddressDetailInputSetRef:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:State" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:AddressDetailInputSetRef:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:State</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:AddressDetailInputSetRef:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:County" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:AddressDetailInputSetRef:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:County</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:AddressDetailInputSetRef:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:City" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:AddressDetailInputSetRef:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:City</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:AddressDetailInputSetRef:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:AddressLine2" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:AddressDetailInputSetRef:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:AddressLine2</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name=":tblinks" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">:tblinks</stringProp>
                            <stringProp name="Argument.value">${cTBLINKS_1}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:Claim_PermissionRequired" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:Claim_PermissionRequired</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:AddressDetailInputSetRef:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:Country" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:AddressDetailInputSetRef:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:Country</stringProp>
                            <stringProp name="Argument.value">US</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:AddressDetailInputSetRef:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:PostalCode" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:AddressDetailInputSetRef:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:PostalCode</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:AddressDetailInputSetRef:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:AddressLine1" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:AddressDetailInputSetRef:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:AddressLine1</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol">https</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                      <stringProp name="HTTPSampler.method">POST</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                      <boolProp name="HTTPSampler.image_parser">true</boolProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="Accept-Language" elementType="Header">
                            <stringProp name="Header.name">DNT</stringProp>
                            <stringProp name="Header.value">1</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                      <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="CNG_TP06_Cancel_Claim_Add_Claim_Information -- Desktop screen not displayed ${POLICYNUMBER} , ${POLEFFDATE} , ${POLEXPDATE} , ${PHONENUMBER} ,${LASTNAME},${FIRSTNAME} ,${STATE}, ${POLICYTYPE},${AGREEMENTSOURCE}" enabled="true">
                        <collectionProp name="Asserion.test_strings">
                          <stringProp name="-252897267">Activities</stringProp>
                        </collectionProp>
                        <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                        <boolProp name="Assertion.assume_success">false</boolProp>
                        <intProp name="Assertion.test_type">16</intProp>
                      </ResponseAssertion>
                      <hashTree/>
                    </hashTree>
                    <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ThinkTime - 10" enabled="true">
                      <stringProp name="TestPlan.comments">This transaction will wait for 10 seconds</stringProp>
                    </GenericController>
                    <hashTree>
                      <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="ThinkTime" enabled="true">
                        <stringProp name="ConstantTimer.delay">10000</stringProp>
                        <stringProp name="TestPlan.comments">   Converting seconds to milliseconds - 10s x 1000</stringProp>
                      </ConstantTimer>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                </hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="-RETURNTODESKTOP" enabled="true">
                  <stringProp name="TestPlan.comments">This section contains the RETURNTODESKTOP part of Loadrunner</stringProp>
                </GenericController>
                <hashTree>
                  <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP06_Return_To_Desktop" enabled="true">
                    <boolProp name="TransactionController.includeTimers">false</boolProp>
                    <boolProp name="TransactionController.parent">true</boolProp>
                  </TransactionController>
                  <hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_66" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="Claim:MenuLinks" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">Claim:MenuLinks</stringProp>
                            <stringProp name="Argument.value">${cCLAIMMENULINKS}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="csrfToken" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">csrfToken</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="TabBar:ClaimTab:ClaimTab_FindClaim" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">TabBar:ClaimTab:ClaimTab_FindClaim</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="QuickJump" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">QuickJump</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="Claim:MenuLinks_toggle" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">Claim:MenuLinks_toggle</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name=":tblinks" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">:tblinks</stringProp>
                            <stringProp name="Argument.value">${cTBLINKS}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name=":tabs" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">:tabs</stringProp>
                            <stringProp name="Argument.value">${cTABS_1}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="infoBar" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">infoBar</stringProp>
                            <stringProp name="Argument.value">${cINFOBAR_6}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="Claim:ClaimMenuActions" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">Claim:ClaimMenuActions</stringProp>
                            <stringProp name="Argument.value">${cCLAIMMENUACTIONS}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="objFocusId" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">objFocusId</stringProp>
                            <stringProp name="Argument.value">TabBar:DesktopTab</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="eventSource" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">eventSource</stringProp>
                            <stringProp name="Argument.value">TabBar:DesktopTab_act</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol">https</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                      <stringProp name="HTTPSampler.method">POST</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                      <boolProp name="HTTPSampler.image_parser">true</boolProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="Accept-Language" elementType="Header">
                            <stringProp name="Header.name">DNT</stringProp>
                            <stringProp name="Header.value">1</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                      <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="CNG_TP06_Return_To_Desktop -- Desktop screen has not appeared for claim number: ${CLAIMNUMBER}" enabled="true">
                        <collectionProp name="Asserion.test_strings">
                          <stringProp name="1514705186">My activities today</stringProp>
                        </collectionProp>
                        <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                        <boolProp name="Assertion.assume_success">false</boolProp>
                        <intProp name="Assertion.test_type">16</intProp>
                      </ResponseAssertion>
                      <hashTree/>
                      <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cTABS Extractor" enabled="true">
                        <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                        <stringProp name="RegexExtractor.refname">cTABS</stringProp>
                        <stringProp name="RegexExtractor.regex">&quot;id&quot;:&quot;TabBar:VacationTab&quot;,&quot;text&quot;:&quot;Vacation&quot;,&quot;menu&quot;:\{&quot;defaultType&quot;:&quot;gmenuitem&quot;},&quot;xtype&quot;:&quot;gbutton&quot;,&quot;disabled&quot;:true}],&quot;checksum&quot;:&quot;(.*?)&quot;}},\{</stringProp>
                        <stringProp name="RegexExtractor.template">$1$</stringProp>
                        <stringProp name="RegexExtractor.default">null</stringProp>
                        <stringProp name="RegexExtractor.match_number">1</stringProp>
                      </RegexExtractor>
                      <hashTree/>
                    </hashTree>
                    <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ThinkTime - 10" enabled="true">
                      <stringProp name="TestPlan.comments">This transaction will wait for 10 seconds</stringProp>
                    </GenericController>
                    <hashTree>
                      <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="ThinkTime" enabled="true">
                        <stringProp name="ConstantTimer.delay">10000</stringProp>
                        <stringProp name="TestPlan.comments">   Converting seconds to milliseconds - 10s x 1000</stringProp>
                      </ConstantTimer>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                </hashTree>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="-THIRDPARTYVEHICLE" enabled="true">
              <stringProp name="TestPlan.comments">This section contains the THIRDPARTYVEHICLE part of Loadrunner</stringProp>
            </GenericController>
            <hashTree>
              <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP06_ZF_Vehicle_Details_OK_To_Return_To_Add_Claim_Information" enabled="true">
                <boolProp name="TransactionController.includeTimers">false</boolProp>
                <boolProp name="TransactionController.parent">true</boolProp>
              </TransactionController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_29" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Color" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Color</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Mileage" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Mileage</stringProp>
                        <stringProp name="Argument.value">10000</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name=":tabs" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">:tabs</stringProp>
                        <stringProp name="Argument.value">${cTABS}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="TabBar:ClaimTab:ClaimTab_FindClaim" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">TabBar:ClaimTab:ClaimTab_FindClaim</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name=":tblinks" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">:tblinks</stringProp>
                        <stringProp name="Argument.value">${cTBLINKS_1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="QuickJump" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">QuickJump</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:PreExistingDamage" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:PreExistingDamage</stringProp>
                        <stringProp name="Argument.value">tp06</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:0_toggle" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:0_toggle</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Operable" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Operable</stringProp>
                        <stringProp name="Argument.value">true</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:1_toggle" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:1_toggle</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="csrfToken" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">csrfToken</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:LossParty" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:LossParty</stringProp>
                        <stringProp name="Argument.value">true</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:1" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:1</stringProp>
                        <stringProp name="Argument.value">${cFNOLWIZARD1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:incidentOnly" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:incidentOnly</stringProp>
                        <stringProp name="Argument.value">false</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:0" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:0</stringProp>
                        <stringProp name="Argument.value">${cFNOLWIZARD0_4}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Picker" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Picker</stringProp>
                        <stringProp name="Argument.value">Vehicle:${cVEHICLE}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="infoBar" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">infoBar</stringProp>
                        <stringProp name="Argument.value">${cINFOBAR_4}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Exposure_AirbagsDeployed" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Exposure_AirbagsDeployed</stringProp>
                        <stringProp name="Argument.value">No</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Description" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Description</stringProp>
                        <stringProp name="Argument.value">TP06</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:SeverityOfDamage" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:SeverityOfDamage</stringProp>
                        <stringProp name="Argument.value">unknown</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:VehicleLocDuringBusHrs_RangeInput" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:VehicleLocDuringBusHrs_RangeInput</stringProp>
                        <stringProp name="Argument.value">Address:${cADDRESS2}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:vehicleTowed" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:vehicleTowed</stringProp>
                        <stringProp name="Argument.value">No</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Owner_Picker" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Owner_Picker</stringProp>
                        <stringProp name="Argument.value">Person:${cPERSON}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_State" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_State</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:collPoint" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:collPoint</stringProp>
                        <stringProp name="Argument.value">12</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:childSafetySeatQuestionsInputSet:ChildSafetySeatQuestionsInputSet:safetySeatInVehicle" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:childSafetySeatQuestionsInputSet:ChildSafetySeatQuestionsInputSet:safetySeatInVehicle</stringProp>
                        <stringProp name="Argument.value">No</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:existingEstimate" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:existingEstimate</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:storageFeesCharged" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:storageFeesCharged</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_LicensePlate" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_LicensePlate</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="objFocusId" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">objFocusId</stringProp>
                        <stringProp name="Argument.value">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Update</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="eventSource" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">eventSource</stringProp>
                        <stringProp name="Argument.value">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Update_act</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                  <boolProp name="HTTPSampler.image_parser">true</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">DNT</stringProp>
                        <stringProp name="Header.value">1</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="CNG_TP06_ZF_Vehicle_Details_OK_To_Return_To_Add_Claim_Information --Unable to return to add claim information screen for username: ${USERNAME} and Policy Number : ${POLICYNUMBER}" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-1491078218">Step 3 of 5: Add claim information</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="ResponseOk Extractor" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">ResponseOk</stringProp>
                    <stringProp name="RegexExtractor.regex">Step 3 of 5: Add claim information(.*?)</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">null</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ThinkTime - 10" enabled="true">
                  <stringProp name="TestPlan.comments">This transaction will wait for 10 seconds</stringProp>
                </GenericController>
                <hashTree>
                  <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="ThinkTime" enabled="true">
                    <stringProp name="ConstantTimer.delay">10000</stringProp>
                    <stringProp name="TestPlan.comments">   Converting seconds to milliseconds - 10s x 1000</stringProp>
                  </ConstantTimer>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If CNG_TP06_ZF_Vehicle_Details_OK_To_Return_To_Add_Claim_Information &quot;${ResponseOk}&quot; == &quot;null&quot;" enabled="true">
                <stringProp name="IfController.condition">&quot;${ResponseOk}&quot; == &quot;null&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="-RETURNTOVEHICLEDETAILS" enabled="true">
                  <stringProp name="TestPlan.comments">This section contains the RETURNTOVEHICLEDETAILS part of Loadrunner</stringProp>
                </GenericController>
                <hashTree>
                  <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP06_Driver_Details_Return_To_Vehicle_Details" enabled="true">
                    <boolProp name="TransactionController.includeTimers">false</boolProp>
                    <boolProp name="TransactionController.parent">true</boolProp>
                  </TransactionController>
                  <hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_29" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name=":tblinks" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">:tblinks</stringProp>
                            <stringProp name="Argument.value">${cTBLINKS_1}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name=":tabs" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">:tabs</stringProp>
                            <stringProp name="Argument.value">${cTABS}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="TabBar:ClaimTab:ClaimTab_FindClaim" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">TabBar:ClaimTab:ClaimTab_FindClaim</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="QuickJump" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">QuickJump</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:0_toggle" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:0_toggle</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:1_toggle" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:1_toggle</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLContactPopup:FNOLContactScreen:Person" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLContactPopup:FNOLContactScreen:Person</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLContactPopup:FNOLContactScreen:DriverRelationToOwner" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLContactPopup:FNOLContactScreen:DriverRelationToOwner</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLContactPopup:FNOLContactScreen:reason" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLContactPopup:FNOLContactScreen:reason</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="eventSource" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">eventSource</stringProp>
                            <stringProp name="Argument.value">FNOLContactPopup:__crumb___act</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="csrfToken" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">csrfToken</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:1" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:1</stringProp>
                            <stringProp name="Argument.value">${cFNOLWIZARD1}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:0" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:0</stringProp>
                            <stringProp name="Argument.value">${cFNOLWIZARD0_4}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="objFocusId" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">objFocusId</stringProp>
                            <stringProp name="Argument.value">FNOLContactPopup:__crumb__</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="infoBar" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">infoBar</stringProp>
                            <stringProp name="Argument.value">${cINFOBAR_4}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol">https</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                      <stringProp name="HTTPSampler.method">POST</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                      <boolProp name="HTTPSampler.image_parser">true</boolProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="Accept-Language" elementType="Header">
                            <stringProp name="Header.name">DNT</stringProp>
                            <stringProp name="Header.value">1</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                      <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="CNG_TP06_Driver_Details_Return_To_Vehicle_Details -- Vehicle details screen not displayed ${POLICYNUMBER} , ${POLEFFDATE} , ${POLEXPDATE} , ${PHONENUMBER} ,${LASTNAME},${FIRSTNAME} ,${STATE}, ${POLICYTYPE},${AGREEMENTSOURCE}" enabled="true">
                        <collectionProp name="Asserion.test_strings">
                          <stringProp name="938574094">Vehicle Details</stringProp>
                        </collectionProp>
                        <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                        <boolProp name="Assertion.assume_success">false</boolProp>
                        <intProp name="Assertion.test_type">16</intProp>
                      </ResponseAssertion>
                      <hashTree/>
                    </hashTree>
                    <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ThinkTime - 10" enabled="true">
                      <stringProp name="TestPlan.comments">This transaction will wait for 10 seconds</stringProp>
                    </GenericController>
                    <hashTree>
                      <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="ThinkTime" enabled="true">
                        <stringProp name="ConstantTimer.delay">10000</stringProp>
                        <stringProp name="TestPlan.comments">   Converting seconds to milliseconds - 10s x 1000</stringProp>
                      </ConstantTimer>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                </hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="-RETURNTOADDCLAIMINFO" enabled="true">
                  <stringProp name="TestPlan.comments">This section contains the RETURNTOADDCLAIMINFO part of Loadrunner</stringProp>
                </GenericController>
                <hashTree>
                  <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP06_Vehicle_Details_Return_To_Add_Claim_Info" enabled="true">
                    <boolProp name="TransactionController.includeTimers">false</boolProp>
                    <boolProp name="TransactionController.parent">true</boolProp>
                  </TransactionController>
                  <hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_23" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_VehicleType" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_VehicleType</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Style" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Style</stringProp>
                            <stringProp name="Argument.value">passengercar</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Description" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Description</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="TabBar:ClaimTab:ClaimTab_FindClaim" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">TabBar:ClaimTab:ClaimTab_FindClaim</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:SeverityOfDamage" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:SeverityOfDamage</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="QuickJump" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">QuickJump</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:collPoint" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:collPoint</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:0_toggle" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:0_toggle</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:existingEstimate" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:existingEstimate</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:1_toggle" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:1_toggle</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name=":tabs" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">:tabs</stringProp>
                            <stringProp name="Argument.value">${cTABS}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:LossParty" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:LossParty</stringProp>
                            <stringProp name="Argument.value">true</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name=":tblinks" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">:tblinks</stringProp>
                            <stringProp name="Argument.value">${cTBLINKS_1}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:incidentOnly" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:incidentOnly</stringProp>
                            <stringProp name="Argument.value">false</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:PreExistingDamage" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:PreExistingDamage</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Picker" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Picker</stringProp>
                            <stringProp name="Argument.value">Vehicle:${cVEHICLE}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Exposure_AirbagsDeployed" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Exposure_AirbagsDeployed</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:storageFeesCharged" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:storageFeesCharged</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:VehicleLocDuringBusHrs_RangeInput" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:VehicleLocDuringBusHrs_RangeInput</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="objFocusId" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">objFocusId</stringProp>
                            <stringProp name="Argument.value">FNOLVehicleIncidentPopup:__crumb__</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="eventSource" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">eventSource</stringProp>
                            <stringProp name="Argument.value">FNOLVehicleIncidentPopup:__crumb___act</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="csrfToken" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">csrfToken</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:1" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:1</stringProp>
                            <stringProp name="Argument.value">${cFNOLWIZARD1}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:0" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:0</stringProp>
                            <stringProp name="Argument.value">${cFNOLWIZARD0_4}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="infoBar" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">infoBar</stringProp>
                            <stringProp name="Argument.value">${cINFOBAR_4}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:vehicleTowed" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:vehicleTowed</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Color" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Color</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Model_Dropdown" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Model_Dropdown</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Make_Dropdown" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Make_Dropdown</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Year" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Year</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Owner_Picker" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Owner_Picker</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_State" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_State</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_LicensePlate" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_LicensePlate</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Mileage" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Mileage</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_VIN" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_VIN</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol">https</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                      <stringProp name="HTTPSampler.method">POST</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                      <boolProp name="HTTPSampler.image_parser">true</boolProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="Accept-Language" elementType="Header">
                            <stringProp name="Header.name">DNT</stringProp>
                            <stringProp name="Header.value">1</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                      <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname=" CNG_TP06_Vehicle_Details_Return_To_Add_Claim_Info Add Claim Info screen not displayed , ${POLICYNUMBER} , ${POLEFFDATE} , ${POLEXPDATE} , ${PHONENUMBER} ,${LASTNAME},${FIRSTNAME} ,${STATE}, ${POLICYTYPE},${AGREEMENTSOURCE}" enabled="true">
                        <collectionProp name="Asserion.test_strings">
                          <stringProp name="-1685924503">Add claim information</stringProp>
                        </collectionProp>
                        <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                        <boolProp name="Assertion.assume_success">false</boolProp>
                        <intProp name="Assertion.test_type">16</intProp>
                      </ResponseAssertion>
                      <hashTree/>
                    </hashTree>
                    <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ThinkTime - 10" enabled="true">
                      <stringProp name="TestPlan.comments">This transaction will wait for 10 seconds</stringProp>
                    </GenericController>
                    <hashTree>
                      <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="ThinkTime" enabled="true">
                        <stringProp name="ConstantTimer.delay">10000</stringProp>
                        <stringProp name="TestPlan.comments">   Converting seconds to milliseconds - 10s x 1000</stringProp>
                      </ConstantTimer>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                </hashTree>
              </hashTree>
              <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP06_ZG_Add_Third_Party_Vehicle" enabled="true">
                <boolProp name="TransactionController.includeTimers">false</boolProp>
                <boolProp name="TransactionController.parent">true</boolProp>
              </TransactionController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_30" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:Fault" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:Fault</stringProp>
                        <stringProp name="Argument.value">1</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:FaultPercent" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:FaultPercent</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="infoBar" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">infoBar</stringProp>
                        <stringProp name="Argument.value">${cINFOBAR_4}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="TabBar:ClaimTab:ClaimTab_FindClaim" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">TabBar:ClaimTab:ClaimTab_FindClaim</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name=":tabs" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">:tabs</stringProp>
                        <stringProp name="Argument.value">${cTABS}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="QuickJump" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">QuickJump</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name=":tblinks" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">:tblinks</stringProp>
                        <stringProp name="Argument.value">${cTBLINKS_1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:0_toggle" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:0_toggle</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:Claim_PermissionRequired" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:Claim_PermissionRequired</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:1_toggle" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:1_toggle</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="csrfToken" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">csrfToken</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:Claim_LossCategory" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:Claim_LossCategory</stringProp>
                        <stringProp name="Argument.value">multiVehicleAccidentAuto</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:1" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:1</stringProp>
                        <stringProp name="Argument.value">${cFNOLWIZARD1_1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:Claim_LossCause" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:Claim_LossCause</stringProp>
                        <stringProp name="Argument.value">headoncollision</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:0" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:0</stringProp>
                        <stringProp name="Argument.value">${cFNOLWIZARD0_3}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:Description" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:Description</stringProp>
                        <stringProp name="Argument.value">TP06</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:FNOLMenuActions" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:FNOLMenuActions</stringProp>
                        <stringProp name="Argument.value">${cFNOLMENUACTIONS}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:AutoAdditionalDamageQuestions:DamageQuestionsAutoAdditionalInputSet:otherVehicleDirection" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:AutoAdditionalDamageQuestions:DamageQuestionsAutoAdditionalInputSet:otherVehicleDirection</stringProp>
                        <stringProp name="Argument.value">straightahead</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:AutoAdditionalDamageQuestions:DamageQuestionsAutoAdditionalInputSet:ctionAvoidAccident" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:AutoAdditionalDamageQuestions:DamageQuestionsAutoAdditionalInputSet:ctionAvoidAccident</stringProp>
                        <stringProp name="Argument.value">appliedbrakes</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:AutoAdditionalDamageQuestions:DamageQuestionsAutoAdditionalInputSet:familiarArea" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:AutoAdditionalDamageQuestions:DamageQuestionsAutoAdditionalInputSet:familiarArea</stringProp>
                        <stringProp name="Argument.value">Yes</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:AutoAdditionalDamageQuestions:DamageQuestionsAutoAdditionalInputSet:weatherConditions" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:AutoAdditionalDamageQuestions:DamageQuestionsAutoAdditionalInputSet:weatherConditions</stringProp>
                        <stringProp name="Argument.value">clear</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:AutoDamageQuestions:DamageQuestionsAutoInputSet:vehicleDamageOtherProperty" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:AutoDamageQuestions:DamageQuestionsAutoInputSet:vehicleDamageOtherProperty</stringProp>
                        <stringProp name="Argument.value">No</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:AutoDamageQuestions:DamageQuestionsAutoInputSet:numberVehiclesInvolved" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:AutoDamageQuestions:DamageQuestionsAutoInputSet:numberVehiclesInvolved</stringProp>
                        <stringProp name="Argument.value">2</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:AddressDetailInputSetRef:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:Address_Picker" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:AddressDetailInputSetRef:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:Address_Picker</stringProp>
                        <stringProp name="Argument.value">Address:${cADDRESS}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:AutoAdditionalDamageQuestions:DamageQuestionsAutoAdditionalInputSet:anyObstructions" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:AutoAdditionalDamageQuestions:DamageQuestionsAutoAdditionalInputSet:anyObstructions</stringProp>
                        <stringProp name="Argument.value">blindspot</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:AutoAdditionalDamageQuestions:DamageQuestionsAutoAdditionalInputSet:insuredSpeed" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:AutoAdditionalDamageQuestions:DamageQuestionsAutoAdditionalInputSet:insuredSpeed</stringProp>
                        <stringProp name="Argument.value">50</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:AutoAdditionalDamageQuestions:DamageQuestionsAutoAdditionalInputSet:numberOfLanes" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:AutoAdditionalDamageQuestions:DamageQuestionsAutoAdditionalInputSet:numberOfLanes</stringProp>
                        <stringProp name="Argument.value">two</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:AutoAdditionalDamageQuestions:DamageQuestionsAutoAdditionalInputSet:trafficControlsPresent" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:AutoAdditionalDamageQuestions:DamageQuestionsAutoAdditionalInputSet:trafficControlsPresent</stringProp>
                        <stringProp name="Argument.value">unknown</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="objFocusId" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">objFocusId</stringProp>
                        <stringProp name="Argument.value">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:AddVehicleButton</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:anyInjuryAuto" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:anyInjuryAuto</stringProp>
                        <stringProp name="Argument.value">false</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="eventSource" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">eventSource</stringProp>
                        <stringProp name="Argument.value">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:AddVehicleButton_act</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="scrollPositions" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">scrollPositions</stringProp>
                        <stringProp name="Argument.value">{&quot;centerPanel&quot;:{&quot;left&quot;:0,&quot;top&quot;:473}}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                  <boolProp name="HTTPSampler.image_parser">true</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">DNT</stringProp>
                        <stringProp name="Header.value">1</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="938574094">Vehicle Details</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="ResponseOk Extractor" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">ResponseOk</stringProp>
                    <stringProp name="RegexExtractor.regex">Vehicle Details(.*?)</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">null</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ThinkTime - 10" enabled="true">
                  <stringProp name="TestPlan.comments">This transaction will wait for 10 seconds</stringProp>
                </GenericController>
                <hashTree>
                  <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="ThinkTime" enabled="true">
                    <stringProp name="ConstantTimer.delay">10000</stringProp>
                    <stringProp name="TestPlan.comments">   Converting seconds to milliseconds - 10s x 1000</stringProp>
                  </ConstantTimer>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If CNG_TP06_ZG_Add_Third_Party_Vehicle &quot;${ResponseOk}&quot; == &quot;null&quot;" enabled="true">
                <stringProp name="IfController.condition">&quot;${ResponseOk}&quot; == &quot;null&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="-CANCELCLAIMADDCLAIMINFORMATION" enabled="true">
                  <stringProp name="TestPlan.comments">This section contains the CANCELCLAIMADDCLAIMINFORMATION part of Loadrunner</stringProp>
                </GenericController>
                <hashTree>
                  <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP06_Cancel_Claim_Add_Claim_Information" enabled="true">
                    <boolProp name="TransactionController.includeTimers">false</boolProp>
                    <boolProp name="TransactionController.parent">true</boolProp>
                  </TransactionController>
                  <hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_13" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:anyInjuryAuto" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:anyInjuryAuto</stringProp>
                            <stringProp name="Argument.value">false</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:AddressDetailInputSetRef:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:Address_Picker" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:AddressDetailInputSetRef:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:Address_Picker</stringProp>
                            <stringProp name="Argument.value">__new</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="eventSource" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">eventSource</stringProp>
                            <stringProp name="Argument.value">FNOLWizard:Cancel_act</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="TabBar:ClaimTab:ClaimTab_FindClaim" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">TabBar:ClaimTab:ClaimTab_FindClaim</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="csrfToken" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">csrfToken</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="QuickJump" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">QuickJump</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:1" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:1</stringProp>
                            <stringProp name="Argument.value">${cFNOLWIZARD1_1}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:0_toggle" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:0_toggle</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:0" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:0</stringProp>
                            <stringProp name="Argument.value">${cFNOLWIZARD0_3}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:1_toggle" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:1_toggle</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:Claim_LossCategory" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:Claim_LossCategory</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:Description" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:Description</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:Fault" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:Fault</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="objFocusId" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">objFocusId</stringProp>
                            <stringProp name="Argument.value">FNOLWizard:Cancel</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:FNOLMenuActions" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:FNOLMenuActions</stringProp>
                            <stringProp name="Argument.value">${cFNOLMENUACTIONS}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="infoBar" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">infoBar</stringProp>
                            <stringProp name="Argument.value">${cINFOBAR_4}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name=":tabs" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">:tabs</stringProp>
                            <stringProp name="Argument.value">${cTABS}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:AddressDetailInputSetRef:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:State" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:AddressDetailInputSetRef:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:State</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:AddressDetailInputSetRef:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:County" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:AddressDetailInputSetRef:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:County</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:AddressDetailInputSetRef:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:City" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:AddressDetailInputSetRef:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:City</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:AddressDetailInputSetRef:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:AddressLine2" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:AddressDetailInputSetRef:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:AddressLine2</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name=":tblinks" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">:tblinks</stringProp>
                            <stringProp name="Argument.value">${cTBLINKS_1}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:Claim_PermissionRequired" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:Claim_PermissionRequired</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:AddressDetailInputSetRef:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:Country" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:AddressDetailInputSetRef:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:Country</stringProp>
                            <stringProp name="Argument.value">US</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:AddressDetailInputSetRef:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:PostalCode" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:AddressDetailInputSetRef:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:PostalCode</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:AddressDetailInputSetRef:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:AddressLine1" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:AddressDetailInputSetRef:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:AddressLine1</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol">https</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                      <stringProp name="HTTPSampler.method">POST</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                      <boolProp name="HTTPSampler.image_parser">true</boolProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="Accept-Language" elementType="Header">
                            <stringProp name="Header.name">DNT</stringProp>
                            <stringProp name="Header.value">1</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                      <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="CNG_TP06_Cancel_Claim_Add_Claim_Information -- Desktop screen not displayed ${POLICYNUMBER} , ${POLEFFDATE} , ${POLEXPDATE} , ${PHONENUMBER} ,${LASTNAME},${FIRSTNAME} ,${STATE}, ${POLICYTYPE},${AGREEMENTSOURCE}" enabled="true">
                        <collectionProp name="Asserion.test_strings">
                          <stringProp name="-252897267">Activities</stringProp>
                        </collectionProp>
                        <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                        <boolProp name="Assertion.assume_success">false</boolProp>
                        <intProp name="Assertion.test_type">16</intProp>
                      </ResponseAssertion>
                      <hashTree/>
                    </hashTree>
                    <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ThinkTime - 10" enabled="true">
                      <stringProp name="TestPlan.comments">This transaction will wait for 10 seconds</stringProp>
                    </GenericController>
                    <hashTree>
                      <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="ThinkTime" enabled="true">
                        <stringProp name="ConstantTimer.delay">10000</stringProp>
                        <stringProp name="TestPlan.comments">   Converting seconds to milliseconds - 10s x 1000</stringProp>
                      </ConstantTimer>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                </hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="-RETURNTODESKTOP" enabled="true">
                  <stringProp name="TestPlan.comments">This section contains the RETURNTODESKTOP part of Loadrunner</stringProp>
                </GenericController>
                <hashTree>
                  <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP06_Return_To_Desktop" enabled="true">
                    <boolProp name="TransactionController.includeTimers">false</boolProp>
                    <boolProp name="TransactionController.parent">true</boolProp>
                  </TransactionController>
                  <hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_66" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="Claim:MenuLinks" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">Claim:MenuLinks</stringProp>
                            <stringProp name="Argument.value">${cCLAIMMENULINKS}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="csrfToken" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">csrfToken</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="TabBar:ClaimTab:ClaimTab_FindClaim" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">TabBar:ClaimTab:ClaimTab_FindClaim</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="QuickJump" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">QuickJump</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="Claim:MenuLinks_toggle" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">Claim:MenuLinks_toggle</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name=":tblinks" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">:tblinks</stringProp>
                            <stringProp name="Argument.value">${cTBLINKS}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name=":tabs" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">:tabs</stringProp>
                            <stringProp name="Argument.value">${cTABS_1}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="infoBar" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">infoBar</stringProp>
                            <stringProp name="Argument.value">${cINFOBAR_6}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="Claim:ClaimMenuActions" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">Claim:ClaimMenuActions</stringProp>
                            <stringProp name="Argument.value">${cCLAIMMENUACTIONS}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="objFocusId" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">objFocusId</stringProp>
                            <stringProp name="Argument.value">TabBar:DesktopTab</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="eventSource" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">eventSource</stringProp>
                            <stringProp name="Argument.value">TabBar:DesktopTab_act</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol">https</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                      <stringProp name="HTTPSampler.method">POST</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                      <boolProp name="HTTPSampler.image_parser">true</boolProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="Accept-Language" elementType="Header">
                            <stringProp name="Header.name">DNT</stringProp>
                            <stringProp name="Header.value">1</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                      <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="CNG_TP06_Return_To_Desktop -- Desktop screen has not appeared for claim number: ${CLAIMNUMBER}" enabled="true">
                        <collectionProp name="Asserion.test_strings">
                          <stringProp name="1514705186">My activities today</stringProp>
                        </collectionProp>
                        <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                        <boolProp name="Assertion.assume_success">false</boolProp>
                        <intProp name="Assertion.test_type">16</intProp>
                      </ResponseAssertion>
                      <hashTree/>
                      <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cTABS Extractor" enabled="true">
                        <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                        <stringProp name="RegexExtractor.refname">cTABS</stringProp>
                        <stringProp name="RegexExtractor.regex">&quot;id&quot;:&quot;TabBar:VacationTab&quot;,&quot;text&quot;:&quot;Vacation&quot;,&quot;menu&quot;:\{&quot;defaultType&quot;:&quot;gmenuitem&quot;},&quot;xtype&quot;:&quot;gbutton&quot;,&quot;disabled&quot;:true}],&quot;checksum&quot;:&quot;(.*?)&quot;}},\{</stringProp>
                        <stringProp name="RegexExtractor.template">$1$</stringProp>
                        <stringProp name="RegexExtractor.default">null</stringProp>
                        <stringProp name="RegexExtractor.match_number">1</stringProp>
                      </RegexExtractor>
                      <hashTree/>
                    </hashTree>
                    <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ThinkTime - 10" enabled="true">
                      <stringProp name="TestPlan.comments">This transaction will wait for 10 seconds</stringProp>
                    </GenericController>
                    <hashTree>
                      <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="ThinkTime" enabled="true">
                        <stringProp name="ConstantTimer.delay">10000</stringProp>
                        <stringProp name="TestPlan.comments">   Converting seconds to milliseconds - 10s x 1000</stringProp>
                      </ConstantTimer>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                </hashTree>
              </hashTree>
              <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP06_ZI_Vehicle_Year" enabled="true">
                <boolProp name="TransactionController.includeTimers">false</boolProp>
                <boolProp name="TransactionController.parent">true</boolProp>
              </TransactionController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_31" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Year" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Year</stringProp>
                        <stringProp name="Argument.value">${YEAR}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Make_Dropdown" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Make_Dropdown</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:PreExistingDamage" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:PreExistingDamage</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="TabBar:ClaimTab:ClaimTab_FindClaim" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">TabBar:ClaimTab:ClaimTab_FindClaim</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Exposure_AirbagsDeployed" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Exposure_AirbagsDeployed</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="QuickJump" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">QuickJump</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Description" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Description</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:0_toggle" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:0_toggle</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:SeverityOfDamage" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:SeverityOfDamage</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:1_toggle" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:1_toggle</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:0" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:0</stringProp>
                        <stringProp name="Argument.value">${cFNOLWIZARD0_4}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:incidentOnly" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:incidentOnly</stringProp>
                        <stringProp name="Argument.value">false</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="infoBar" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">infoBar</stringProp>
                        <stringProp name="Argument.value">${cINFOBAR_4}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Style" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Style</stringProp>
                        <stringProp name="Argument.value">passengercar</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name=":tabs" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">:tabs</stringProp>
                        <stringProp name="Argument.value">${cTABS}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_VIN" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_VIN</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name=":tblinks" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">:tblinks</stringProp>
                        <stringProp name="Argument.value">${cTBLINKS_1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:collPoint" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:collPoint</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:childSafetySeatQuestionsInputSet:ChildSafetySeatQuestionsInputSet:safetySeatInVehicle" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:childSafetySeatQuestionsInputSet:ChildSafetySeatQuestionsInputSet:safetySeatInVehicle</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:existingEstimate" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:existingEstimate</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_State" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_State</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_LicensePlate" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_LicensePlate</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Mileage" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Mileage</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="eventParam" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">eventParam</stringProp>
                        <stringProp name="Argument.value">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Year</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Color" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Color</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:storageFeesCharged" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:storageFeesCharged</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:VehicleLocDuringBusHrs_RangeInput" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:VehicleLocDuringBusHrs_RangeInput</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:vehicleTowed" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:vehicleTowed</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Owner_Picker" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Owner_Picker</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="eventSource" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">eventSource</stringProp>
                        <stringProp name="Argument.value">_refresh_</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Model_Dropdown" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Model_Dropdown</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="csrfToken" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">csrfToken</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:1" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:1</stringProp>
                        <stringProp name="Argument.value">${cFNOLWIZARD1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                  <boolProp name="HTTPSampler.image_parser">true</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">DNT</stringProp>
                        <stringProp name="Header.value">1</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ThinkTime - 10" enabled="true">
                  <stringProp name="TestPlan.comments">This transaction will wait for 10 seconds</stringProp>
                </GenericController>
                <hashTree>
                  <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="ThinkTime" enabled="true">
                    <stringProp name="ConstantTimer.delay">10000</stringProp>
                    <stringProp name="TestPlan.comments">   Converting seconds to milliseconds - 10s x 1000</stringProp>
                  </ConstantTimer>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP06_ZJ_Vehicle_Make" enabled="true">
                <boolProp name="TransactionController.includeTimers">false</boolProp>
                <boolProp name="TransactionController.parent">true</boolProp>
              </TransactionController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_32" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Year" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Year</stringProp>
                        <stringProp name="Argument.value">${YEAR}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Make_Dropdown" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Make_Dropdown</stringProp>
                        <stringProp name="Argument.value">${MAKE}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:PreExistingDamage" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:PreExistingDamage</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="TabBar:ClaimTab:ClaimTab_FindClaim" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">TabBar:ClaimTab:ClaimTab_FindClaim</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Exposure_AirbagsDeployed" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Exposure_AirbagsDeployed</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="QuickJump" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">QuickJump</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Description" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Description</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:0_toggle" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:0_toggle</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:SeverityOfDamage" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:SeverityOfDamage</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:1_toggle" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:1_toggle</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:0" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:0</stringProp>
                        <stringProp name="Argument.value">${cFNOLWIZARD0_4}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:incidentOnly" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:incidentOnly</stringProp>
                        <stringProp name="Argument.value">false</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="infoBar" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">infoBar</stringProp>
                        <stringProp name="Argument.value">${cINFOBAR_4}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Style" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Style</stringProp>
                        <stringProp name="Argument.value">passengercar</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name=":tabs" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">:tabs</stringProp>
                        <stringProp name="Argument.value">${cTABS}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_VIN" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_VIN</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name=":tblinks" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">:tblinks</stringProp>
                        <stringProp name="Argument.value">${cTBLINKS_1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:collPoint" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:collPoint</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:childSafetySeatQuestionsInputSet:ChildSafetySeatQuestionsInputSet:safetySeatInVehicle" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:childSafetySeatQuestionsInputSet:ChildSafetySeatQuestionsInputSet:safetySeatInVehicle</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:existingEstimate" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:existingEstimate</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_State" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_State</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_LicensePlate" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_LicensePlate</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="objFocusId" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">objFocusId</stringProp>
                        <stringProp name="Argument.value">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Make_Dropdown</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Mileage" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Mileage</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="eventParam" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">eventParam</stringProp>
                        <stringProp name="Argument.value">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Make_Dropdown</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Color" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Color</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:storageFeesCharged" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:storageFeesCharged</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:VehicleLocDuringBusHrs_RangeInput" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:VehicleLocDuringBusHrs_RangeInput</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:vehicleTowed" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:vehicleTowed</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Owner_Picker" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Owner_Picker</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="eventSource" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">eventSource</stringProp>
                        <stringProp name="Argument.value">_refresh_</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Model_Dropdown" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Model_Dropdown</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="csrfToken" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">csrfToken</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:1" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:1</stringProp>
                        <stringProp name="Argument.value">${cFNOLWIZARD1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                  <boolProp name="HTTPSampler.image_parser">true</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">DNT</stringProp>
                        <stringProp name="Header.value">1</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ThinkTime - 10" enabled="true">
                  <stringProp name="TestPlan.comments">This transaction will wait for 10 seconds</stringProp>
                </GenericController>
                <hashTree>
                  <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="ThinkTime" enabled="true">
                    <stringProp name="ConstantTimer.delay">10000</stringProp>
                    <stringProp name="TestPlan.comments">   Converting seconds to milliseconds - 10s x 1000</stringProp>
                  </ConstantTimer>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP06_ZK_Vehicle_Model" enabled="true">
                <boolProp name="TransactionController.includeTimers">false</boolProp>
                <boolProp name="TransactionController.parent">true</boolProp>
              </TransactionController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_33" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Year" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Year</stringProp>
                        <stringProp name="Argument.value">${YEAR}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Make_Dropdown" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Make_Dropdown</stringProp>
                        <stringProp name="Argument.value">${MAKE}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:PreExistingDamage" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:PreExistingDamage</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="TabBar:ClaimTab:ClaimTab_FindClaim" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">TabBar:ClaimTab:ClaimTab_FindClaim</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Exposure_AirbagsDeployed" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Exposure_AirbagsDeployed</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="QuickJump" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">QuickJump</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Description" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Description</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:0_toggle" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:0_toggle</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:SeverityOfDamage" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:SeverityOfDamage</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:1_toggle" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:1_toggle</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:0" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:0</stringProp>
                        <stringProp name="Argument.value">${cFNOLWIZARD0_4}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:incidentOnly" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:incidentOnly</stringProp>
                        <stringProp name="Argument.value">false</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="infoBar" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">infoBar</stringProp>
                        <stringProp name="Argument.value">${cINFOBAR_4}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Style" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Style</stringProp>
                        <stringProp name="Argument.value">passengercar</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name=":tabs" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">:tabs</stringProp>
                        <stringProp name="Argument.value">${cTABS}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_VIN" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_VIN</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name=":tblinks" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">:tblinks</stringProp>
                        <stringProp name="Argument.value">${cTBLINKS_1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:collPoint" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:collPoint</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:childSafetySeatQuestionsInputSet:ChildSafetySeatQuestionsInputSet:safetySeatInVehicle" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:childSafetySeatQuestionsInputSet:ChildSafetySeatQuestionsInputSet:safetySeatInVehicle</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:existingEstimate" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:existingEstimate</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_State" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_State</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_LicensePlate" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_LicensePlate</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="objFocusId" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">objFocusId</stringProp>
                        <stringProp name="Argument.value">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Model_Dropdown</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Mileage" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Mileage</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="eventParam" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">eventParam</stringProp>
                        <stringProp name="Argument.value">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Model_Dropdown</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Color" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Color</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:storageFeesCharged" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:storageFeesCharged</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:VehicleLocDuringBusHrs_RangeInput" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:VehicleLocDuringBusHrs_RangeInput</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:vehicleTowed" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:vehicleTowed</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Owner_Picker" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Owner_Picker</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="eventSource" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">eventSource</stringProp>
                        <stringProp name="Argument.value">_refresh_</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Model_Dropdown" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Model_Dropdown</stringProp>
                        <stringProp name="Argument.value">${MODEL}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="csrfToken" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">csrfToken</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:1" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:1</stringProp>
                        <stringProp name="Argument.value">${cFNOLWIZARD1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                  <boolProp name="HTTPSampler.image_parser">true</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">DNT</stringProp>
                        <stringProp name="Header.value">1</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ThinkTime - 10" enabled="true">
                  <stringProp name="TestPlan.comments">This transaction will wait for 10 seconds</stringProp>
                </GenericController>
                <hashTree>
                  <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="ThinkTime" enabled="true">
                    <stringProp name="ConstantTimer.delay">10000</stringProp>
                    <stringProp name="TestPlan.comments">   Converting seconds to milliseconds - 10s x 1000</stringProp>
                  </ConstantTimer>
                  <hashTree/>
                </hashTree>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="-THIRDPARTYDRIVER" enabled="true">
              <stringProp name="TestPlan.comments">This section contains the THIRDPARTYDRIVER part of Loadrunner</stringProp>
            </GenericController>
            <hashTree>
              <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP06_ZL_Add_Third_Party_Driver" enabled="true">
                <boolProp name="TransactionController.includeTimers">false</boolProp>
                <boolProp name="TransactionController.parent">true</boolProp>
              </TransactionController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_34" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Year" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Year</stringProp>
                        <stringProp name="Argument.value">${YEAR}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Make_Dropdown" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Make_Dropdown</stringProp>
                        <stringProp name="Argument.value">${MAKE}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:PreExistingDamage" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:PreExistingDamage</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="TabBar:ClaimTab:ClaimTab_FindClaim" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">TabBar:ClaimTab:ClaimTab_FindClaim</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Exposure_AirbagsDeployed" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Exposure_AirbagsDeployed</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="QuickJump" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">QuickJump</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Description" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Description</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:0_toggle" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:0_toggle</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:SeverityOfDamage" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:SeverityOfDamage</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:1_toggle" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:1_toggle</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:0" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:0</stringProp>
                        <stringProp name="Argument.value">${cFNOLWIZARD0_4}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:incidentOnly" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:incidentOnly</stringProp>
                        <stringProp name="Argument.value">false</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="infoBar" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">infoBar</stringProp>
                        <stringProp name="Argument.value">${cINFOBAR_4}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Style" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Style</stringProp>
                        <stringProp name="Argument.value">passengercar</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name=":tabs" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">:tabs</stringProp>
                        <stringProp name="Argument.value">${cTABS}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_VIN" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_VIN</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name=":tblinks" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">:tblinks</stringProp>
                        <stringProp name="Argument.value">${cTBLINKS_1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:collPoint" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:collPoint</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:childSafetySeatQuestionsInputSet:ChildSafetySeatQuestionsInputSet:safetySeatInVehicle" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:childSafetySeatQuestionsInputSet:ChildSafetySeatQuestionsInputSet:safetySeatInVehicle</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:existingEstimate" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:existingEstimate</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_State" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_State</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_LicensePlate" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_LicensePlate</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Mileage" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Mileage</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="objFocusId" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">objFocusId</stringProp>
                        <stringProp name="Argument.value">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Owner_Picker:ClaimNewCompanyContactPickerMenuItemSet:NewPersonOnlyPickerMenuItemSet_NewPersonMenuItem</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Color" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Color</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:storageFeesCharged" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:storageFeesCharged</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:VehicleLocDuringBusHrs_RangeInput" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:VehicleLocDuringBusHrs_RangeInput</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:vehicleTowed" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:vehicleTowed</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Owner_Picker" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Owner_Picker</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="eventSource" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">eventSource</stringProp>
                        <stringProp name="Argument.value">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Owner_Picker:ClaimNewCompanyContactPickerMenuItemSet:NewPersonOnlyPickerMenuItemSet_NewPersonMenuItem_act</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Model_Dropdown" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Model_Dropdown</stringProp>
                        <stringProp name="Argument.value">${MODEL}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="csrfToken" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">csrfToken</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:1" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:1</stringProp>
                        <stringProp name="Argument.value">${cFNOLWIZARD1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                  <boolProp name="HTTPSampler.image_parser">true</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">DNT</stringProp>
                        <stringProp name="Header.value">1</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor CNG_TP06_ZL_Add_Third_Party_Driver" enabled="true">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey">aa29db4a-3c42-4a10-9b0e-689135a8626e</stringProp>
                    <stringProp name="script">	vars.put(&quot;cFNOLWIZARD0_4_URL2&quot;,java.net.URLDecoder.decode(vars.get(&quot;cFNOLWIZARD0_4&quot;), &quot;UTF-8&quot;));

	vars.put(&quot;cFNOLWIZARD1_URL2&quot;,java.net.URLDecoder.decode(vars.get(&quot;cFNOLWIZARD1&quot;), &quot;UTF-8&quot;));

	vars.put(&quot;cINFOBAR_4_URL2&quot;,java.net.URLDecoder.decode(vars.get(&quot;cINFOBAR_4&quot;), &quot;UTF-8&quot;));


</stringProp>
                  </JSR223PostProcessor>
                  <hashTree/>
                </hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ThinkTime - 10" enabled="true">
                  <stringProp name="TestPlan.comments">This transaction will wait for 10 seconds</stringProp>
                </GenericController>
                <hashTree>
                  <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="ThinkTime" enabled="true">
                    <stringProp name="ConstantTimer.delay">10000</stringProp>
                    <stringProp name="TestPlan.comments">   Converting seconds to milliseconds - 10s x 1000</stringProp>
                  </ConstantTimer>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP06_ZM_Enter_Third_Party_Driver_Details" enabled="true">
                <boolProp name="TransactionController.includeTimers">false</boolProp>
                <boolProp name="TransactionController.parent">true</boolProp>
              </TransactionController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_35" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="renderViewRootOnly" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">renderViewRootOnly</stringProp>
                        <stringProp name="Argument.value">true</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="ajaxRequestInfo" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">[{&quot;viewRootId&quot;:&quot;NewContactPopup:ContactDetailScreen:ContactBasicsDV:PrimaryAddressInputSet:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:City&quot;,&quot;paramMap&quot;:{&quot;viewRootId&quot;:&quot;NewContactPopup:ContactDetailScreen:ContactBasicsDV:PrimaryAddressInputSet:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:City&quot;,&quot;argIds&quot;:&quot;,NewContactPopup:ContactDetailScreen:ContactBasicsDV:PrimaryAddressInputSet:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:County,NewContactPopup:ContactDetailScreen:ContactBasicsDV:PrimaryAddressInputSet:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:State,NewContactPopup:ContactDetailScreen:ContactBasicsDV:PrimaryAddressInputSet:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:PostalCode,NewContactPopup:ContactDetailScreen:ContactBasicsDV:PrimaryAddressInputSet:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:Country&quot;,&quot;query&quot;:&quot;${NEWCITY}&quot;,&quot;page&quot;:1,&quot;start&quot;:0,&quot;limit&quot;:25,&quot;additionalArgs&quot;:[&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;US&quot;]}}]</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">ajaxRequestInfo</stringProp>
                      </elementProp>
                      <elementProp name="csrfToken" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">csrfToken</stringProp>
                      </elementProp>
                      <elementProp name="scrollPositions" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&quot;centerPanel&quot;:{&quot;left&quot;:0,&quot;top&quot;:109}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">scrollPositions</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                  <boolProp name="HTTPSampler.image_parser">true</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">DNT</stringProp>
                        <stringProp name="Header.value">1</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_36" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">renderViewRootOnly=true&amp;ajaxRequestInfo=%5B%7B%22viewRootId%22%3A%22NewContactPopup%3AContactDetailScreen%3AContactBasicsDV%3APrimaryAddressInputSet%3ACCAddressInputSet%3AglobalAddressContainer%3AglobalAddress%3AGlobalAddressInputSet%3ACity%22%2C%22paramMap%22%3A%7B%22viewRootId%22%3A%22NewContactPopup%3AContactDetailScreen%3AContactBasicsDV%3APrimaryAddressInputSet%3ACCAddressInputSet%3AglobalAddressContainer%3AglobalAddress%3AGlobalAddressInputSet%3ACity%22%2C%22argIds%22%3A%22%2CNewContactPopup%3AContactDetailScreen%3AContactBasicsDV%3APrimaryAddressInputSet%3ACCAddressInputSet%3AglobalAddressContainer%3AglobalAddress%3AGlobalAddressInputSet%3ACounty%2CNewContactPopup%3AContactDetailScreen%3AContactBasicsDV%3APrimaryAddressInputSet%3ACCAddressInputSet%3AglobalAddressContainer%3AglobalAddress%3AGlobalAddressInputSet%3AState%2CNewContactPopup%3AContactDetailScreen%3AContactBasicsDV%3APrimaryAddressInputSet%3ACCAddressInputSet%3AglobalAddressContainer%3AglobalAddress%3AGlobalAddressInputSet%3APostalCode%2CNewContactPopup%3AContactDetailScreen%3AContactBasicsDV%3APrimaryAddressInputSet%3ACCAddressInputSet%3AglobalAddressContainer%3AglobalAddress%3AGlobalAddressInputSet%3ACountry%22%2C%22query%22%3A%22${NEWCITY}%22%2C%22page%22%3A1%2C%22start%22%3A0%2C%22limit%22%3A25%2C%22additionalArgs%22%3A%5B%22%22%2C%22%22%2C%22%22%2C%22%22%2C%22US%22%5D%7D%7D%5D&amp;csrfToken=&amp;scrollPositions=%7B%22centerPanel%22%3A%7B%22left%22%3A0%2C%22top%22%3A109%7D%7D</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                  <boolProp name="HTTPSampler.image_parser">true</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">DNT</stringProp>
                        <stringProp name="Header.value">1</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_37" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">ajaxRequestInfo=%5B%7B%22viewRootId%22%3A%22NewContactPopup%3AContactDetailScreen%3AContactBasicsDV%3APrimaryAddressInputSet%3ACCAddressInputSet%3AglobalAddressContainer%3AglobalAddress%3AGlobalAddressInputSet%3ACity%22%2C%22paramMap%22%3A%7B%22postOnChangeTarget%22%3A%22NewContactPopup%3AContactDetailScreen%3AContactBasicsDV%3APrimaryAddressInputSet%3ACCAddressInputSet%3AglobalAddressContainer%22%2C%22skipFocusOnPOC%22%3Atrue%7D%7D%5D&amp;TabBar%3AClaimTab%3AClaimTab_FindClaim=&amp;QuickJump=&amp;FNOLWizard%3A0_toggle=&amp;FNOLWizard%3A1_toggle=&amp;NewContactPopup%3AContactDetailScreen%3AContactBasicsDV%3APersonNameInputSet%3AFirstName=${RANDOMLETTERSFN}&amp;NewContactPopup%3AContactDetailScreen%3AContactBasicsDV%3APersonNameInputSet%3AMiddleName=&amp;NewContactPopup%3AContactDetailScreen%3AContactBasicsDV%3APersonNameInputSet%3ALastName=${RANDOMLETTERSLN}&amp;NewContactPopup%3AContactDetailScreen%3AContactBasicsDV%3APersonNameInputSet%3APrefix=&amp;NewContactPopup%3AContactDetailScreen%3AContactBasicsDV%3APersonNameInputSet%3ASuffix=&amp;NewContactPopup%3AContactDetailScreen%3AContactBasicsDV%3APersonNameInputSet%3AFormerName=&amp;NewContactPopup%3AContactDetailScreen%3AContactBasicsDV%3APersonNameInputSet%3ADeceasedIndEdit=false&amp;NewContactPopup%3AContactDetailScreen%3AContactBasicsDV%3APersonContactInfoInputSet%3AEmailAllowed=false&amp;NewContactPopup%3AContactDetailScreen%3AContactBasicsDV%3APrimaryAddressInputSet%3ACCAddressInputSet%3AglobalAddressContainer%3AglobalAddress%3AGlobalAddressInputSet%3AAddressLine1=${NEWSTREET}&amp;NewContactPopup%3AContactDetailScreen%3AContactBasicsDV%3APrimaryAddressInputSet%3ACCAddressInputSet%3AglobalAddressContainer%3AglobalAddress%3AGlobalAddressInputSet%3AAddressLine2=&amp;NewContactPopup%3AContactDetailScreen%3AContactBasicsDV%3APrimaryAddressInputSet%3ACCAddressInputSet%3AglobalAddressContainer%3AglobalAddress%3AGlobalAddressInputSet%3ACity=${NEWCITY}&amp;NewContactPopup%3AContactDetailScreen%3AContactBasicsDV%3APrimaryAddressInputSet%3ACCAddressInputSet%3AglobalAddressContainer%3AglobalAddress%3AGlobalAddressInputSet%3ACounty=&amp;NewContactPopup%3AContactDetailScreen%3AContactBasicsDV%3APrimaryAddressInputSet%3ACCAddressInputSet%3AglobalAddressContainer%3AglobalAddress%3AGlobalAddressInputSet%3AState=&amp;NewContactPopup%3AContactDetailScreen%3AContactBasicsDV%3APrimaryAddressInputSet%3ACCAddressInputSet%3AglobalAddressContainer%3AglobalAddress%3AGlobalAddressInputSet%3APostalCode=&amp;NewContactPopup%3AContactDetailScreen%3AContactBasicsDV%3APrimaryAddressInputSet%3ACCAddressInputSet%3AglobalAddressContainer%3AglobalAddress%3AGlobalAddressInputSet%3ACountry=US&amp;NewContactPopup%3AContactDetailScreen%3AContactBasicsDV%3APrimaryAddressInputSet%3ACCAddressInputSet%3AglobalAddressContainer%3AglobalAddress%3AGlobalAddressInputSet%3AAddress_AddressType=&amp;NewContactPopup%3AContactDetailScreen%3AContactBasicsDV%3AuseInsuredAddressID=false&amp;NewContactPopup%3AContactDetailScreen%3AContactBasicsDV%3AAdditionalInfoInputSet%3ATaxId1=&amp;NewContactPopup%3AContactDetailScreen%3AContactBasicsDV%3AAdditionalInfoInputSet%3ATaxFilingStatus=&amp;NewContactPopup%3AContactDetailScreen%3AContactBasicsDV%3AAdditionalInfoInputSet%3ADateOfBirth=&amp;NewContactPopup%3AContactDetailScreen%3AContactBasicsDV%3AAdditionalInfoInputSet%3AGender=&amp;NewContactPopup%3AContactDetailScreen%3AContactBasicsDV%3AAdditionalInfoInputSet%3AOccupation=&amp;NewContactPopup%3AContactDetailScreen%3AContactBasicsDV%3AAdditionalInfoInputSet%3AMaritalStatus=&amp;NewContactPopup%3AContactDetailScreen%3AContactBasicsDV%3AAdditionalInfoInputSet%3Adependants=&amp;NewContactPopup%3AContactDetailScreen%3AContactBasicsDV%3AAdditionalInfoInputSet%3AMedicareEligible=&amp;NewContactPopup%3AContactDetailScreen%3AContactBasicsDV%3AAdditionalInfoInputSet%3ADriversLicenseInfoInputSet%3ALicenseNumber=&amp;NewContactPopup%3AContactDetailScreen%3AContactBasicsDV%3AAdditionalInfoInputSet%3ADriversLicenseInfoInputSet%3ALicenseState=&amp;NewContactPopup%3AContactDetailScreen%3AContactBasicsDV%3ANotes=&amp;%3Atblinks=${cTBLINKS_1_URL2}&amp;%3Atabs=${cTABS_URL2}&amp;infoBar=${cINFOBAR_4_URL2}&amp;FNOLWizard%3A0=${cFNOLWIZARD0_4_URL2}&amp;FNOLWizard%3A1=${cFNOLWIZARD1_URL2}&amp;csrfToken=&amp;scrollPositions=%7B%22centerPanel%22%3A%7B%22left%22%3A0%2C%22top%22%3A109%7D%7D</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                  <boolProp name="HTTPSampler.image_parser">true</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">DNT</stringProp>
                        <stringProp name="Header.value">1</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cPOSTALCODE Extractor" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">cPOSTALCODE</stringProp>
                    <stringProp name="RegexExtractor.regex">BasicsDV:PrimaryAddressInputSet:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:Country&quot;,&quot;value&quot;:&quot;(.*?)&quot;,</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">null</stringProp>
                    <stringProp name="RegexExtractor.match_number">3</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_38" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">TabBar%3AClaimTab%3AClaimTab_FindClaim=&amp;QuickJump=&amp;FNOLWizard%3A0_toggle=&amp;FNOLWizard%3A1_toggle=&amp;NewContactPopup%3AContactDetailScreen%3AContactBasicsDV%3APersonNameInputSet%3AFirstName=${RANDOMLETTERSFN}&amp;NewContactPopup%3AContactDetailScreen%3AContactBasicsDV%3APersonNameInputSet%3AMiddleName=&amp;NewContactPopup%3AContactDetailScreen%3AContactBasicsDV%3APersonNameInputSet%3ALastName=${RANDOMLETTERSLN}&amp;NewContactPopup%3AContactDetailScreen%3AContactBasicsDV%3APersonNameInputSet%3APrefix=&amp;NewContactPopup%3AContactDetailScreen%3AContactBasicsDV%3APersonNameInputSet%3ASuffix=&amp;NewContactPopup%3AContactDetailScreen%3AContactBasicsDV%3APersonNameInputSet%3AFormerName=&amp;NewContactPopup%3AContactDetailScreen%3AContactBasicsDV%3APersonNameInputSet%3ADeceasedIndEdit=false&amp;NewContactPopup%3AContactDetailScreen%3AContactBasicsDV%3APersonContactInfoInputSet%3AEmailAllowed=false&amp;NewContactPopup%3AContactDetailScreen%3AContactBasicsDV%3APrimaryAddressInputSet%3ACCAddressInputSet%3AglobalAddressContainer%3AglobalAddress%3AGlobalAddressInputSet%3AAddressLine1=${NEWSTREET}&amp;NewContactPopup%3AContactDetailScreen%3AContactBasicsDV%3APrimaryAddressInputSet%3ACCAddressInputSet%3AglobalAddressContainer%3AglobalAddress%3AGlobalAddressInputSet%3AAddressLine2=&amp;NewContactPopup%3AContactDetailScreen%3AContactBasicsDV%3APrimaryAddressInputSet%3ACCAddressInputSet%3AglobalAddressContainer%3AglobalAddress%3AGlobalAddressInputSet%3ACity=${NEWCITY}&amp;NewContactPopup%3AContactDetailScreen%3AContactBasicsDV%3APrimaryAddressInputSet%3ACCAddressInputSet%3AglobalAddressContainer%3AglobalAddress%3AGlobalAddressInputSet%3ACounty=${NEWCOUNTY}&amp;NewContactPopup%3AContactDetailScreen%3AContactBasicsDV%3APrimaryAddressInputSet%3ACCAddressInputSet%3AglobalAddressContainer%3AglobalAddress%3AGlobalAddressInputSet%3AState=${NEWADDRESSSTATE}&amp;NewContactPopup%3AContactDetailScreen%3AContactBasicsDV%3APrimaryAddressInputSet%3ACCAddressInputSet%3AglobalAddressContainer%3AglobalAddress%3AGlobalAddressInputSet%3APostalCode=${cPOSTALCODE}&amp;NewContactPopup%3AContactDetailScreen%3AContactBasicsDV%3APrimaryAddressInputSet%3ACCAddressInputSet%3AglobalAddressContainer%3AglobalAddress%3AGlobalAddressInputSet%3ACountry=US&amp;NewContactPopup%3AContactDetailScreen%3AContactBasicsDV%3APrimaryAddressInputSet%3ACCAddressInputSet%3AglobalAddressContainer%3AglobalAddress%3AGlobalAddressInputSet%3AAddress_AddressType=&amp;NewContactPopup%3AContactDetailScreen%3AContactBasicsDV%3AuseInsuredAddressID=false&amp;NewContactPopup%3AContactDetailScreen%3AContactBasicsDV%3AAdditionalInfoInputSet%3ATaxId1=&amp;NewContactPopup%3AContactDetailScreen%3AContactBasicsDV%3AAdditionalInfoInputSet%3ATaxFilingStatus=&amp;NewContactPopup%3AContactDetailScreen%3AContactBasicsDV%3AAdditionalInfoInputSet%3ADateOfBirth=&amp;NewContactPopup%3AContactDetailScreen%3AContactBasicsDV%3AAdditionalInfoInputSet%3AGender=&amp;NewContactPopup%3AContactDetailScreen%3AContactBasicsDV%3AAdditionalInfoInputSet%3AOccupation=&amp;NewContactPopup%3AContactDetailScreen%3AContactBasicsDV%3AAdditionalInfoInputSet%3AMaritalStatus=&amp;NewContactPopup%3AContactDetailScreen%3AContactBasicsDV%3AAdditionalInfoInputSet%3Adependants=&amp;NewContactPopup%3AContactDetailScreen%3AContactBasicsDV%3AAdditionalInfoInputSet%3AMedicareEligible=&amp;NewContactPopup%3AContactDetailScreen%3AContactBasicsDV%3AAdditionalInfoInputSet%3ADriversLicenseInfoInputSet%3ALicenseNumber=&amp;NewContactPopup%3AContactDetailScreen%3AContactBasicsDV%3AAdditionalInfoInputSet%3ADriversLicenseInfoInputSet%3ALicenseState=&amp;NewContactPopup%3AContactDetailScreen%3AContactBasicsDV%3ANotes=&amp;%3Atblinks=${cTBLINKS_1_URL2}&amp;%3Atabs=${cTABS_URL2}&amp;infoBar=${cINFOBAR_4_URL2}&amp;FNOLWizard%3A0=${cFNOLWIZARD0_4_URL2}&amp;FNOLWizard%3A1=${cFNOLWIZARD1_URL2}&amp;csrfToken=&amp;eventSource=NewContactPopup%3AContactDetailScreen%3AContactBasicsDV_tb%3AContactDetailToolbarButtonSet%3AToolbarButton_act&amp;objFocusId=NewContactPopup%3AContactDetailScreen%3AContactBasicsDV_tb%3AContactDetailToolbarButtonSet%3AToolbarButton</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                  <boolProp name="HTTPSampler.image_parser">true</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">DNT</stringProp>
                        <stringProp name="Header.value">1</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ThinkTime - 10" enabled="true">
                  <stringProp name="TestPlan.comments">This transaction will wait for 10 seconds</stringProp>
                </GenericController>
                <hashTree>
                  <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="ThinkTime" enabled="true">
                    <stringProp name="ConstantTimer.delay">10000</stringProp>
                    <stringProp name="TestPlan.comments">   Converting seconds to milliseconds - 10s x 1000</stringProp>
                  </ConstantTimer>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP06_ZN_Address_Cleansing_Click_User_Defined" enabled="true">
                <boolProp name="TransactionController.includeTimers">false</boolProp>
                <boolProp name="TransactionController.parent">true</boolProp>
              </TransactionController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_40" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="infoBar" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">infoBar</stringProp>
                        <stringProp name="Argument.value">${cINFOBAR_4}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:0" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:0</stringProp>
                        <stringProp name="Argument.value">${cFNOLWIZARD0_4}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="TabBar:ClaimTab:ClaimTab_FindClaim" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">TabBar:ClaimTab:ClaimTab_FindClaim</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="QuickJump" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">QuickJump</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:0_toggle" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:0_toggle</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:1_toggle" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:1_toggle</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="AddressCleansingPopup:AddressCleansingScreen:AddressCleansingDV:overridereasinid" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">AddressCleansingPopup:AddressCleansingScreen:AddressCleansingDV:overridereasinid</stringProp>
                        <stringProp name="Argument.value">TP06</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name=":tblinks" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">:tblinks</stringProp>
                        <stringProp name="Argument.value">${cTBLINKS_1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name=":tabs" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">:tabs</stringProp>
                        <stringProp name="Argument.value">${cTABS}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="objFocusId" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">objFocusId</stringProp>
                        <stringProp name="Argument.value">AddressCleansingPopup:AddressCleansingScreen:ToolbarButtonid</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="eventSource" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">eventSource</stringProp>
                        <stringProp name="Argument.value">AddressCleansingPopup:AddressCleansingScreen:ToolbarButtonid_act</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="csrfToken" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">csrfToken</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:1" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:1</stringProp>
                        <stringProp name="Argument.value">${cFNOLWIZARD1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                  <boolProp name="HTTPSampler.image_parser">true</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">DNT</stringProp>
                        <stringProp name="Header.value">1</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cPERSON_1 Extractor" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">cPERSON_1</stringProp>
                    <stringProp name="RegexExtractor.regex">Person:-(.*?)&quot;,</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">null</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ThinkTime - 10" enabled="true">
                  <stringProp name="TestPlan.comments">This transaction will wait for 10 seconds</stringProp>
                </GenericController>
                <hashTree>
                  <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="ThinkTime" enabled="true">
                    <stringProp name="ConstantTimer.delay">10000</stringProp>
                    <stringProp name="TestPlan.comments">   Converting seconds to milliseconds - 10s x 1000</stringProp>
                  </ConstantTimer>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP06_ZO_Impact_Point" enabled="true">
                <boolProp name="TransactionController.includeTimers">false</boolProp>
                <boolProp name="TransactionController.parent">true</boolProp>
              </TransactionController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_41" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Year" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Year</stringProp>
                        <stringProp name="Argument.value">2004</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Make_Dropdown" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Make_Dropdown</stringProp>
                        <stringProp name="Argument.value">HOND</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:PreExistingDamage" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:PreExistingDamage</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="TabBar:ClaimTab:ClaimTab_FindClaim" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">TabBar:ClaimTab:ClaimTab_FindClaim</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Exposure_AirbagsDeployed" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Exposure_AirbagsDeployed</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="QuickJump" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">QuickJump</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Description" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Description</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:0_toggle" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:0_toggle</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:SeverityOfDamage" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:SeverityOfDamage</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:1_toggle" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:1_toggle</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:0" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:0</stringProp>
                        <stringProp name="Argument.value">${cFNOLWIZARD0_4}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:incidentOnly" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:incidentOnly</stringProp>
                        <stringProp name="Argument.value">false</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="infoBar" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">infoBar</stringProp>
                        <stringProp name="Argument.value">${cINFOBAR_4}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Style" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Style</stringProp>
                        <stringProp name="Argument.value">passengercar</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name=":tabs" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">:tabs</stringProp>
                        <stringProp name="Argument.value">${cTABS}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_VIN" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_VIN</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name=":tblinks" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">:tblinks</stringProp>
                        <stringProp name="Argument.value">${cTBLINKS_1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:collPoint" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:collPoint</stringProp>
                        <stringProp name="Argument.value">12</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:childSafetySeatQuestionsInputSet:ChildSafetySeatQuestionsInputSet:safetySeatInVehicle" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:childSafetySeatQuestionsInputSet:ChildSafetySeatQuestionsInputSet:safetySeatInVehicle</stringProp>
                        <stringProp name="Argument.value">No</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:existingEstimate" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:existingEstimate</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_State" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_State</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="objFocusId" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">objFocusId</stringProp>
                        <stringProp name="Argument.value">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:collPoint</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_LicensePlate" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_LicensePlate</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="eventParam" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">eventParam</stringProp>
                        <stringProp name="Argument.value">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:collPoint</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Mileage" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Mileage</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="eventSource" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">eventSource</stringProp>
                        <stringProp name="Argument.value">_refresh_</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Color" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Color</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:storageFeesCharged" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:storageFeesCharged</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:VehicleLocDuringBusHrs_RangeInput" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:VehicleLocDuringBusHrs_RangeInput</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:vehicleTowed" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:vehicleTowed</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Owner_Picker" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Owner_Picker</stringProp>
                        <stringProp name="Argument.value">Person:-${cPERSON_1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="scrollPositions" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">scrollPositions</stringProp>
                        <stringProp name="Argument.value">{&quot;centerPanel&quot;:{&quot;left&quot;:0,&quot;top&quot;:322}}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Model_Dropdown" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Model_Dropdown</stringProp>
                        <stringProp name="Argument.value">ACCORD</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="csrfToken" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">csrfToken</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:1" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:1</stringProp>
                        <stringProp name="Argument.value">${cFNOLWIZARD1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                  <boolProp name="HTTPSampler.image_parser">true</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">DNT</stringProp>
                        <stringProp name="Header.value">1</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ThinkTime - 10" enabled="true">
                  <stringProp name="TestPlan.comments">This transaction will wait for 10 seconds</stringProp>
                </GenericController>
                <hashTree>
                  <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="ThinkTime" enabled="true">
                    <stringProp name="ConstantTimer.delay">10000</stringProp>
                    <stringProp name="TestPlan.comments">   Converting seconds to milliseconds - 10s x 1000</stringProp>
                  </ConstantTimer>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP06_ZP_Severity" enabled="true">
                <boolProp name="TransactionController.includeTimers">false</boolProp>
                <boolProp name="TransactionController.parent">true</boolProp>
              </TransactionController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_42" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Year" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Year</stringProp>
                        <stringProp name="Argument.value">2004</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Make_Dropdown" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Make_Dropdown</stringProp>
                        <stringProp name="Argument.value">HOND</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:PreExistingDamage" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:PreExistingDamage</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="TabBar:ClaimTab:ClaimTab_FindClaim" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">TabBar:ClaimTab:ClaimTab_FindClaim</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Exposure_AirbagsDeployed" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Exposure_AirbagsDeployed</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="QuickJump" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">QuickJump</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Description" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Description</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:0_toggle" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:0_toggle</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:SeverityOfDamage" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:SeverityOfDamage</stringProp>
                        <stringProp name="Argument.value">unknown</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:1_toggle" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:1_toggle</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:0" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:0</stringProp>
                        <stringProp name="Argument.value">${cFNOLWIZARD0_4}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:incidentOnly" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:incidentOnly</stringProp>
                        <stringProp name="Argument.value">false</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="infoBar" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">infoBar</stringProp>
                        <stringProp name="Argument.value">${cINFOBAR_4}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Style" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Style</stringProp>
                        <stringProp name="Argument.value">passengercar</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name=":tabs" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">:tabs</stringProp>
                        <stringProp name="Argument.value">${cTABS}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_VIN" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_VIN</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name=":tblinks" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">:tblinks</stringProp>
                        <stringProp name="Argument.value">${cTBLINKS_1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:collPoint" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:collPoint</stringProp>
                        <stringProp name="Argument.value">12</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:childSafetySeatQuestionsInputSet:ChildSafetySeatQuestionsInputSet:safetySeatInVehicle" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:childSafetySeatQuestionsInputSet:ChildSafetySeatQuestionsInputSet:safetySeatInVehicle</stringProp>
                        <stringProp name="Argument.value">No</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:existingEstimate" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:existingEstimate</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_State" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_State</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="objFocusId" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">objFocusId</stringProp>
                        <stringProp name="Argument.value">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:SeverityOfDamage</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_LicensePlate" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_LicensePlate</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="eventParam" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">eventParam</stringProp>
                        <stringProp name="Argument.value">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:SeverityOfDamage</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Mileage" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Mileage</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="eventSource" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">eventSource</stringProp>
                        <stringProp name="Argument.value">_refresh_</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Color" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Color</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:storageFeesCharged" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:storageFeesCharged</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:VehicleLocDuringBusHrs_RangeInput" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:VehicleLocDuringBusHrs_RangeInput</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:vehicleTowed" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:vehicleTowed</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Owner_Picker" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Owner_Picker</stringProp>
                        <stringProp name="Argument.value">Person:-${cPERSON_1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="scrollPositions" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">scrollPositions</stringProp>
                        <stringProp name="Argument.value">{&quot;centerPanel&quot;:{&quot;left&quot;:0,&quot;top&quot;:322}}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Model_Dropdown" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Model_Dropdown</stringProp>
                        <stringProp name="Argument.value">ACCORD</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="csrfToken" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">csrfToken</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:1" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:1</stringProp>
                        <stringProp name="Argument.value">${cFNOLWIZARD1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                  <boolProp name="HTTPSampler.image_parser">true</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">DNT</stringProp>
                        <stringProp name="Header.value">1</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ThinkTime - 10" enabled="true">
                  <stringProp name="TestPlan.comments">This transaction will wait for 10 seconds</stringProp>
                </GenericController>
                <hashTree>
                  <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="ThinkTime" enabled="true">
                    <stringProp name="ConstantTimer.delay">10000</stringProp>
                    <stringProp name="TestPlan.comments">   Converting seconds to milliseconds - 10s x 1000</stringProp>
                  </ConstantTimer>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP06_ZQ_Airbags" enabled="true">
                <boolProp name="TransactionController.includeTimers">false</boolProp>
                <boolProp name="TransactionController.parent">true</boolProp>
              </TransactionController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_43" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Year" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Year</stringProp>
                        <stringProp name="Argument.value">2004</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Make_Dropdown" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Make_Dropdown</stringProp>
                        <stringProp name="Argument.value">HOND</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:PreExistingDamage" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:PreExistingDamage</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="TabBar:ClaimTab:ClaimTab_FindClaim" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">TabBar:ClaimTab:ClaimTab_FindClaim</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Exposure_AirbagsDeployed" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Exposure_AirbagsDeployed</stringProp>
                        <stringProp name="Argument.value">No</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="QuickJump" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">QuickJump</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Description" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Description</stringProp>
                        <stringProp name="Argument.value">TP06</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:0_toggle" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:0_toggle</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:SeverityOfDamage" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:SeverityOfDamage</stringProp>
                        <stringProp name="Argument.value">unknown</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:1_toggle" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:1_toggle</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:0" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:0</stringProp>
                        <stringProp name="Argument.value">${cFNOLWIZARD0_4}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:incidentOnly" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:incidentOnly</stringProp>
                        <stringProp name="Argument.value">false</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="infoBar" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">infoBar</stringProp>
                        <stringProp name="Argument.value">${cINFOBAR_4}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Style" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Style</stringProp>
                        <stringProp name="Argument.value">passengercar</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name=":tabs" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">:tabs</stringProp>
                        <stringProp name="Argument.value">${cTABS}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_VIN" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_VIN</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name=":tblinks" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">:tblinks</stringProp>
                        <stringProp name="Argument.value">${cTBLINKS_1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:collPoint" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:collPoint</stringProp>
                        <stringProp name="Argument.value">12</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:childSafetySeatQuestionsInputSet:ChildSafetySeatQuestionsInputSet:safetySeatInVehicle" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:childSafetySeatQuestionsInputSet:ChildSafetySeatQuestionsInputSet:safetySeatInVehicle</stringProp>
                        <stringProp name="Argument.value">No</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:existingEstimate" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:existingEstimate</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_State" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_State</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="objFocusId" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">objFocusId</stringProp>
                        <stringProp name="Argument.value">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Exposure_AirbagsDeployed</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_LicensePlate" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_LicensePlate</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="eventParam" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">eventParam</stringProp>
                        <stringProp name="Argument.value">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Exposure_AirbagsDeployed</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Mileage" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Mileage</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="eventSource" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">eventSource</stringProp>
                        <stringProp name="Argument.value">_refresh_</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Color" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Color</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:storageFeesCharged" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:storageFeesCharged</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:VehicleLocDuringBusHrs_RangeInput" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:VehicleLocDuringBusHrs_RangeInput</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:vehicleTowed" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:vehicleTowed</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Owner_Picker" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Owner_Picker</stringProp>
                        <stringProp name="Argument.value">Person:-${cPERSON_1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="scrollPositions" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">scrollPositions</stringProp>
                        <stringProp name="Argument.value">{&quot;centerPanel&quot;:{&quot;left&quot;:0,&quot;top&quot;:322}}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Model_Dropdown" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Model_Dropdown</stringProp>
                        <stringProp name="Argument.value">ACCORD</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="csrfToken" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">csrfToken</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:1" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:1</stringProp>
                        <stringProp name="Argument.value">${cFNOLWIZARD1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                  <boolProp name="HTTPSampler.image_parser">true</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">DNT</stringProp>
                        <stringProp name="Header.value">1</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ThinkTime - 10" enabled="true">
                  <stringProp name="TestPlan.comments">This transaction will wait for 10 seconds</stringProp>
                </GenericController>
                <hashTree>
                  <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="ThinkTime" enabled="true">
                    <stringProp name="ConstantTimer.delay">10000</stringProp>
                    <stringProp name="TestPlan.comments">   Converting seconds to milliseconds - 10s x 1000</stringProp>
                  </ConstantTimer>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP06_ZR_Vehicle_Operable" enabled="true">
                <boolProp name="TransactionController.includeTimers">false</boolProp>
                <boolProp name="TransactionController.parent">true</boolProp>
              </TransactionController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_44" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Year" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Year</stringProp>
                        <stringProp name="Argument.value">2004</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Make_Dropdown" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Make_Dropdown</stringProp>
                        <stringProp name="Argument.value">HOND</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Operable" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Operable</stringProp>
                        <stringProp name="Argument.value">true</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="TabBar:ClaimTab:ClaimTab_FindClaim" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">TabBar:ClaimTab:ClaimTab_FindClaim</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Exposure_AirbagsDeployed" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Exposure_AirbagsDeployed</stringProp>
                        <stringProp name="Argument.value">No</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="QuickJump" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">QuickJump</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Description" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Description</stringProp>
                        <stringProp name="Argument.value">TP06</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:0_toggle" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:0_toggle</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:SeverityOfDamage" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:SeverityOfDamage</stringProp>
                        <stringProp name="Argument.value">unknown</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:1_toggle" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:1_toggle</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="infoBar" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">infoBar</stringProp>
                        <stringProp name="Argument.value">${cINFOBAR_4}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:incidentOnly" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:incidentOnly</stringProp>
                        <stringProp name="Argument.value">false</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name=":tabs" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">:tabs</stringProp>
                        <stringProp name="Argument.value">${cTABS}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Style" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Style</stringProp>
                        <stringProp name="Argument.value">passengercar</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name=":tblinks" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">:tblinks</stringProp>
                        <stringProp name="Argument.value">${cTBLINKS_1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_VIN" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_VIN</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:PreExistingDamage" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:PreExistingDamage</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:collPoint" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:collPoint</stringProp>
                        <stringProp name="Argument.value">12</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:childSafetySeatQuestionsInputSet:ChildSafetySeatQuestionsInputSet:safetySeatInVehicle" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:childSafetySeatQuestionsInputSet:ChildSafetySeatQuestionsInputSet:safetySeatInVehicle</stringProp>
                        <stringProp name="Argument.value">No</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="objFocusId" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">objFocusId</stringProp>
                        <stringProp name="Argument.value">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Operable_true</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="eventParam" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">eventParam</stringProp>
                        <stringProp name="Argument.value">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Operable</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="eventSource" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">eventSource</stringProp>
                        <stringProp name="Argument.value">_refresh_</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="scrollPositions" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">scrollPositions</stringProp>
                        <stringProp name="Argument.value">{&quot;centerPanel&quot;:{&quot;left&quot;:0,&quot;top&quot;:322}}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="csrfToken" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">csrfToken</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:1" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:1</stringProp>
                        <stringProp name="Argument.value">${cFNOLWIZARD1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:0" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:0</stringProp>
                        <stringProp name="Argument.value">${cFNOLWIZARD0_4}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:existingEstimate" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:existingEstimate</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_State" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_State</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_LicensePlate" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_LicensePlate</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Mileage" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Mileage</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Color" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Color</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:storageFeesCharged" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:storageFeesCharged</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:VehicleLocDuringBusHrs_RangeInput" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:VehicleLocDuringBusHrs_RangeInput</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:vehicleTowed" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:vehicleTowed</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Owner_Picker" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Owner_Picker</stringProp>
                        <stringProp name="Argument.value">Person:-${cPERSON_1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Model_Dropdown" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Model_Dropdown</stringProp>
                        <stringProp name="Argument.value">ACCORD</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                  <boolProp name="HTTPSampler.image_parser">true</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">DNT</stringProp>
                        <stringProp name="Header.value">1</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ThinkTime - 10" enabled="true">
                  <stringProp name="TestPlan.comments">This transaction will wait for 10 seconds</stringProp>
                </GenericController>
                <hashTree>
                  <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="ThinkTime" enabled="true">
                    <stringProp name="ConstantTimer.delay">10000</stringProp>
                    <stringProp name="TestPlan.comments">   Converting seconds to milliseconds - 10s x 1000</stringProp>
                  </ConstantTimer>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP06_ZS_Add_Third_Party_Driver" enabled="true">
                <boolProp name="TransactionController.includeTimers">false</boolProp>
                <boolProp name="TransactionController.parent">true</boolProp>
              </TransactionController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_45" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Year" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Year</stringProp>
                        <stringProp name="Argument.value">2004</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Make_Dropdown" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Make_Dropdown</stringProp>
                        <stringProp name="Argument.value">HOND</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Operable" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Operable</stringProp>
                        <stringProp name="Argument.value">true</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="TabBar:ClaimTab:ClaimTab_FindClaim" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">TabBar:ClaimTab:ClaimTab_FindClaim</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Exposure_AirbagsDeployed" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Exposure_AirbagsDeployed</stringProp>
                        <stringProp name="Argument.value">No</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="QuickJump" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">QuickJump</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Description" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Description</stringProp>
                        <stringProp name="Argument.value">TP06</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:0_toggle" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:0_toggle</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:SeverityOfDamage" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:SeverityOfDamage</stringProp>
                        <stringProp name="Argument.value">unknown</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:1_toggle" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:1_toggle</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="infoBar" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">infoBar</stringProp>
                        <stringProp name="Argument.value">${cINFOBAR_4}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:incidentOnly" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:incidentOnly</stringProp>
                        <stringProp name="Argument.value">false</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name=":tabs" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">:tabs</stringProp>
                        <stringProp name="Argument.value">${cTABS}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Style" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Style</stringProp>
                        <stringProp name="Argument.value">passengercar</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name=":tblinks" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">:tblinks</stringProp>
                        <stringProp name="Argument.value">${cTBLINKS_1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_VIN" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_VIN</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:PreExistingDamage" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:PreExistingDamage</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:collPoint" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:collPoint</stringProp>
                        <stringProp name="Argument.value">12</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:childSafetySeatQuestionsInputSet:ChildSafetySeatQuestionsInputSet:safetySeatInVehicle" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:childSafetySeatQuestionsInputSet:ChildSafetySeatQuestionsInputSet:safetySeatInVehicle</stringProp>
                        <stringProp name="Argument.value">No</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:existingEstimate" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:existingEstimate</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_State" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_State</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="objFocusId" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">objFocusId</stringProp>
                        <stringProp name="Argument.value">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:OccupantLV_tb:AddDriverButton</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_LicensePlate" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_LicensePlate</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="eventSource" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">eventSource</stringProp>
                        <stringProp name="Argument.value">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:OccupantLV_tb:AddDriverButton_act</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Mileage" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Mileage</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="scrollPositions" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">scrollPositions</stringProp>
                        <stringProp name="Argument.value">{&quot;centerPanel&quot;:{&quot;left&quot;:0,&quot;top&quot;:322}}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Color" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Color</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:storageFeesCharged" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:storageFeesCharged</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:VehicleLocDuringBusHrs_RangeInput" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:VehicleLocDuringBusHrs_RangeInput</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:vehicleTowed" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:vehicleTowed</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Owner_Picker" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Owner_Picker</stringProp>
                        <stringProp name="Argument.value">Person:-${cPERSON_1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="csrfToken" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">csrfToken</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Model_Dropdown" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Model_Dropdown</stringProp>
                        <stringProp name="Argument.value">ACCORD</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:1" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:1</stringProp>
                        <stringProp name="Argument.value">${cFNOLWIZARD1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:0" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:0</stringProp>
                        <stringProp name="Argument.value">${cFNOLWIZARD0_4}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                  <boolProp name="HTTPSampler.image_parser">true</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">DNT</stringProp>
                        <stringProp name="Header.value">1</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ThinkTime - 10" enabled="true">
                  <stringProp name="TestPlan.comments">This transaction will wait for 10 seconds</stringProp>
                </GenericController>
                <hashTree>
                  <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="ThinkTime" enabled="true">
                    <stringProp name="ConstantTimer.delay">10000</stringProp>
                    <stringProp name="TestPlan.comments">   Converting seconds to milliseconds - 10s x 1000</stringProp>
                  </ConstantTimer>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP06_ZT_Select_Driver" enabled="true">
                <boolProp name="TransactionController.includeTimers">false</boolProp>
                <boolProp name="TransactionController.parent">true</boolProp>
              </TransactionController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_46" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name=":tblinks" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">:tblinks</stringProp>
                        <stringProp name="Argument.value">${cTBLINKS_1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name=":tabs" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">:tabs</stringProp>
                        <stringProp name="Argument.value">${cTABS}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="TabBar:ClaimTab:ClaimTab_FindClaim" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">TabBar:ClaimTab:ClaimTab_FindClaim</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="QuickJump" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">QuickJump</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:0_toggle" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:0_toggle</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:1_toggle" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:1_toggle</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLContactPopup:FNOLContactScreen:Person" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLContactPopup:FNOLContactScreen:Person</stringProp>
                        <stringProp name="Argument.value">Person:-${cPERSON_1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLContactPopup:FNOLContactScreen:DriverRelationToOwner" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLContactPopup:FNOLContactScreen:DriverRelationToOwner</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLContactPopup:FNOLContactScreen:reason" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLContactPopup:FNOLContactScreen:reason</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="scrollPositions" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">scrollPositions</stringProp>
                        <stringProp name="Argument.value">{&quot;centerPanel&quot;:{&quot;left&quot;:0,&quot;top&quot;:40}}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="csrfToken" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">csrfToken</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:1" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:1</stringProp>
                        <stringProp name="Argument.value">${cFNOLWIZARD1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:0" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:0</stringProp>
                        <stringProp name="Argument.value">${cFNOLWIZARD0_4}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="objFocusId" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">objFocusId</stringProp>
                        <stringProp name="Argument.value">FNOLContactPopup:FNOLContactScreen:Person</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="eventParam" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">eventParam</stringProp>
                        <stringProp name="Argument.value">FNOLContactPopup:FNOLContactScreen:Person</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="eventSource" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">eventSource</stringProp>
                        <stringProp name="Argument.value">_refresh_</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="infoBar" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">infoBar</stringProp>
                        <stringProp name="Argument.value">${cINFOBAR_4}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                  <boolProp name="HTTPSampler.image_parser">true</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">DNT</stringProp>
                        <stringProp name="Header.value">1</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ThinkTime - 10" enabled="true">
                  <stringProp name="TestPlan.comments">This transaction will wait for 10 seconds</stringProp>
                </GenericController>
                <hashTree>
                  <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="ThinkTime" enabled="true">
                    <stringProp name="ConstantTimer.delay">10000</stringProp>
                    <stringProp name="TestPlan.comments">   Converting seconds to milliseconds - 10s x 1000</stringProp>
                  </ConstantTimer>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP06_ZU_Relation_To_Insured" enabled="true">
                <boolProp name="TransactionController.includeTimers">false</boolProp>
                <boolProp name="TransactionController.parent">true</boolProp>
              </TransactionController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_47" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="FNOLContactPopup:FNOLContactScreen:MedicareEligible" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLContactPopup:FNOLContactScreen:MedicareEligible</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLContactPopup:FNOLContactScreen:DriverRelationToOwner" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLContactPopup:FNOLContactScreen:DriverRelationToOwner</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="TabBar:ClaimTab:ClaimTab_FindClaim" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">TabBar:ClaimTab:ClaimTab_FindClaim</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="QuickJump" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">QuickJump</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:0_toggle" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:0_toggle</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="objFocusId" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">objFocusId</stringProp>
                        <stringProp name="Argument.value">FNOLContactPopup:FNOLContactScreen:Claim_ReportedByType</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:1_toggle" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:1_toggle</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLContactPopup:FNOLContactScreen:Person" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLContactPopup:FNOLContactScreen:Person</stringProp>
                        <stringProp name="Argument.value">Person:-${cPERSON_1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLContactPopup:FNOLContactScreen:relationToInsured" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLContactPopup:FNOLContactScreen:relationToInsured</stringProp>
                        <stringProp name="Argument.value">other</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLContactPopup:FNOLContactScreen:Claim_ReportedByType" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLContactPopup:FNOLContactScreen:Claim_ReportedByType</stringProp>
                        <stringProp name="Argument.value">other</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="eventParam" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">eventParam</stringProp>
                        <stringProp name="Argument.value">FNOLContactPopup:FNOLContactScreen:Claim_ReportedByType</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="eventSource" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">eventSource</stringProp>
                        <stringProp name="Argument.value">_refresh_</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="scrollPositions" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">scrollPositions</stringProp>
                        <stringProp name="Argument.value">{&quot;centerPanel&quot;:{&quot;left&quot;:0,&quot;top&quot;:40}}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name=":tabs" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">:tabs</stringProp>
                        <stringProp name="Argument.value">${cTABS}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name=":tblinks" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">:tblinks</stringProp>
                        <stringProp name="Argument.value">${cTBLINKS_1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLContactPopup:FNOLContactScreen:SeekTreatment" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLContactPopup:FNOLContactScreen:SeekTreatment</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLContactPopup:FNOLContactScreen:ReceivedTreatment" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLContactPopup:FNOLContactScreen:ReceivedTreatment</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="csrfToken" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">csrfToken</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:1" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:1</stringProp>
                        <stringProp name="Argument.value">${cFNOLWIZARD1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:0" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:0</stringProp>
                        <stringProp name="Argument.value">${cFNOLWIZARD0_4}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="infoBar" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">infoBar</stringProp>
                        <stringProp name="Argument.value">${cINFOBAR_4}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLContactPopup:FNOLContactScreen:reason" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLContactPopup:FNOLContactScreen:reason</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                  <boolProp name="HTTPSampler.image_parser">true</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">DNT</stringProp>
                        <stringProp name="Header.value">1</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ThinkTime - 10" enabled="true">
                  <stringProp name="TestPlan.comments">This transaction will wait for 10 seconds</stringProp>
                </GenericController>
                <hashTree>
                  <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="ThinkTime" enabled="true">
                    <stringProp name="ConstantTimer.delay">10000</stringProp>
                    <stringProp name="TestPlan.comments">   Converting seconds to milliseconds - 10s x 1000</stringProp>
                  </ConstantTimer>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP06_ZV_Injured_No" enabled="true">
                <boolProp name="TransactionController.includeTimers">false</boolProp>
                <boolProp name="TransactionController.parent">true</boolProp>
              </TransactionController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_48" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="FNOLContactPopup:FNOLContactScreen:MedicareEligible" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLContactPopup:FNOLContactScreen:MedicareEligible</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLContactPopup:FNOLContactScreen:DriverRelationToOwner" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLContactPopup:FNOLContactScreen:DriverRelationToOwner</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="TabBar:ClaimTab:ClaimTab_FindClaim" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">TabBar:ClaimTab:ClaimTab_FindClaim</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="QuickJump" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">QuickJump</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:0_toggle" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:0_toggle</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:1_toggle" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:1_toggle</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLContactPopup:FNOLContactScreen:Person" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLContactPopup:FNOLContactScreen:Person</stringProp>
                        <stringProp name="Argument.value">Person:-${cPERSON_1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLContactPopup:FNOLContactScreen:relationToInsured" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLContactPopup:FNOLContactScreen:relationToInsured</stringProp>
                        <stringProp name="Argument.value">other</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLContactPopup:FNOLContactScreen:Claim_ReportedByType" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLContactPopup:FNOLContactScreen:Claim_ReportedByType</stringProp>
                        <stringProp name="Argument.value">other</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="objFocusId" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">objFocusId</stringProp>
                        <stringProp name="Argument.value">FNOLContactPopup:FNOLContactScreen:InitialInjured_option2</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="eventParam" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">eventParam</stringProp>
                        <stringProp name="Argument.value">FNOLContactPopup:FNOLContactScreen:InitialInjured</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="eventSource" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">eventSource</stringProp>
                        <stringProp name="Argument.value">_refresh_</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="infoBar" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">infoBar</stringProp>
                        <stringProp name="Argument.value">${cINFOBAR_4}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name=":tabs" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">:tabs</stringProp>
                        <stringProp name="Argument.value">${cTABS}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name=":tblinks" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">:tblinks</stringProp>
                        <stringProp name="Argument.value">${cTBLINKS_1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLContactPopup:FNOLContactScreen:InitialInjured" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLContactPopup:FNOLContactScreen:InitialInjured</stringProp>
                        <stringProp name="Argument.value">No</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="scrollPositions" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">scrollPositions</stringProp>
                        <stringProp name="Argument.value">{&quot;centerPanel&quot;:{&quot;left&quot;:0,&quot;top&quot;:40}}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="csrfToken" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">csrfToken</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:1" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:1</stringProp>
                        <stringProp name="Argument.value">${cFNOLWIZARD1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:0" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:0</stringProp>
                        <stringProp name="Argument.value">${cFNOLWIZARD0_4}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLContactPopup:FNOLContactScreen:reason" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLContactPopup:FNOLContactScreen:reason</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                  <boolProp name="HTTPSampler.image_parser">true</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">DNT</stringProp>
                        <stringProp name="Header.value">1</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ThinkTime - 10" enabled="true">
                  <stringProp name="TestPlan.comments">This transaction will wait for 10 seconds</stringProp>
                </GenericController>
                <hashTree>
                  <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="ThinkTime" enabled="true">
                    <stringProp name="ConstantTimer.delay">10000</stringProp>
                    <stringProp name="TestPlan.comments">   Converting seconds to milliseconds - 10s x 1000</stringProp>
                  </ConstantTimer>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP06_ZW_OK_Return_To_Vehicle_Details" enabled="true">
                <boolProp name="TransactionController.includeTimers">false</boolProp>
                <boolProp name="TransactionController.parent">true</boolProp>
              </TransactionController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_49" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="FNOLContactPopup:FNOLContactScreen:MedicareEligible" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLContactPopup:FNOLContactScreen:MedicareEligible</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLContactPopup:FNOLContactScreen:DriverRelationToOwner" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLContactPopup:FNOLContactScreen:DriverRelationToOwner</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="TabBar:ClaimTab:ClaimTab_FindClaim" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">TabBar:ClaimTab:ClaimTab_FindClaim</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="QuickJump" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">QuickJump</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:0_toggle" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:0_toggle</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:1_toggle" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:1_toggle</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLContactPopup:FNOLContactScreen:Person" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLContactPopup:FNOLContactScreen:Person</stringProp>
                        <stringProp name="Argument.value">Person:-${cPERSON_1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLContactPopup:FNOLContactScreen:relationToInsured" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLContactPopup:FNOLContactScreen:relationToInsured</stringProp>
                        <stringProp name="Argument.value">other</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLContactPopup:FNOLContactScreen:Claim_ReportedByType" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLContactPopup:FNOLContactScreen:Claim_ReportedByType</stringProp>
                        <stringProp name="Argument.value">other</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="objFocusId" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">objFocusId</stringProp>
                        <stringProp name="Argument.value">FNOLContactPopup:FNOLContactScreen:Update</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="eventSource" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">eventSource</stringProp>
                        <stringProp name="Argument.value">FNOLContactPopup:FNOLContactScreen:Update_act</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="infoBar" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">infoBar</stringProp>
                        <stringProp name="Argument.value">${cINFOBAR_4}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name=":tabs" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">:tabs</stringProp>
                        <stringProp name="Argument.value">${cTABS}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name=":tblinks" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">:tblinks</stringProp>
                        <stringProp name="Argument.value">${cTBLINKS_1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLContactPopup:FNOLContactScreen:InitialInjured" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLContactPopup:FNOLContactScreen:InitialInjured</stringProp>
                        <stringProp name="Argument.value">No</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="scrollPositions" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">scrollPositions</stringProp>
                        <stringProp name="Argument.value">{&quot;centerPanel&quot;:{&quot;left&quot;:0,&quot;top&quot;:40}}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="csrfToken" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">csrfToken</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:1" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:1</stringProp>
                        <stringProp name="Argument.value">${cFNOLWIZARD1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:0" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:0</stringProp>
                        <stringProp name="Argument.value">${cFNOLWIZARD0_4}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLContactPopup:FNOLContactScreen:reason" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLContactPopup:FNOLContactScreen:reason</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                  <boolProp name="HTTPSampler.image_parser">true</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">DNT</stringProp>
                        <stringProp name="Header.value">1</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ThinkTime - 10" enabled="true">
                  <stringProp name="TestPlan.comments">This transaction will wait for 10 seconds</stringProp>
                </GenericController>
                <hashTree>
                  <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="ThinkTime" enabled="true">
                    <stringProp name="ConstantTimer.delay">10000</stringProp>
                    <stringProp name="TestPlan.comments">   Converting seconds to milliseconds - 10s x 1000</stringProp>
                  </ConstantTimer>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP06_ZX_Ok_Vehicle" enabled="true">
                <boolProp name="TransactionController.includeTimers">false</boolProp>
                <boolProp name="TransactionController.parent">true</boolProp>
              </TransactionController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_50" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Year" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Year</stringProp>
                        <stringProp name="Argument.value">${YEAR}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Make_Dropdown" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Make_Dropdown</stringProp>
                        <stringProp name="Argument.value">${MAKE}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Operable" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Operable</stringProp>
                        <stringProp name="Argument.value">true</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="TabBar:ClaimTab:ClaimTab_FindClaim" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">TabBar:ClaimTab:ClaimTab_FindClaim</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Exposure_AirbagsDeployed" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Exposure_AirbagsDeployed</stringProp>
                        <stringProp name="Argument.value">No</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="QuickJump" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">QuickJump</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Description" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Description</stringProp>
                        <stringProp name="Argument.value">TP06</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:0_toggle" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:0_toggle</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:SeverityOfDamage" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:SeverityOfDamage</stringProp>
                        <stringProp name="Argument.value">unknown</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:1_toggle" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:1_toggle</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="infoBar" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">infoBar</stringProp>
                        <stringProp name="Argument.value">${cINFOBAR_4}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:incidentOnly" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:incidentOnly</stringProp>
                        <stringProp name="Argument.value">false</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name=":tabs" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">:tabs</stringProp>
                        <stringProp name="Argument.value">${cTABS}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Style" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Style</stringProp>
                        <stringProp name="Argument.value">passengercar</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name=":tblinks" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">:tblinks</stringProp>
                        <stringProp name="Argument.value">${cTBLINKS_1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_VIN" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_VIN</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:PreExistingDamage" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:PreExistingDamage</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:collPoint" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:collPoint</stringProp>
                        <stringProp name="Argument.value">12</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:childSafetySeatQuestionsInputSet:ChildSafetySeatQuestionsInputSet:safetySeatInVehicle" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:childSafetySeatQuestionsInputSet:ChildSafetySeatQuestionsInputSet:safetySeatInVehicle</stringProp>
                        <stringProp name="Argument.value">No</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:existingEstimate" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:existingEstimate</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_State" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_State</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_LicensePlate" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_LicensePlate</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="objFocusId" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">objFocusId</stringProp>
                        <stringProp name="Argument.value">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Update</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Mileage" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Mileage</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="eventSource" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">eventSource</stringProp>
                        <stringProp name="Argument.value">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Update_act</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Color" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Color</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:storageFeesCharged" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:storageFeesCharged</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:VehicleLocDuringBusHrs_RangeInput" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:VehicleLocDuringBusHrs_RangeInput</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:vehicleTowed" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:vehicleTowed</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Owner_Picker" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Owner_Picker</stringProp>
                        <stringProp name="Argument.value">Person:-${cPERSON_1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="csrfToken" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">csrfToken</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Model_Dropdown" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Model_Dropdown</stringProp>
                        <stringProp name="Argument.value">${MODEL}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:1" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:1</stringProp>
                        <stringProp name="Argument.value">${cFNOLWIZARD1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:0" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:0</stringProp>
                        <stringProp name="Argument.value">${cFNOLWIZARD0_4}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                  <boolProp name="HTTPSampler.image_parser">true</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">DNT</stringProp>
                        <stringProp name="Header.value">1</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_51" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Year" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Year</stringProp>
                        <stringProp name="Argument.value">${YEAR}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Make_Dropdown" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Make_Dropdown</stringProp>
                        <stringProp name="Argument.value">${MAKE}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Exposure_AirbagsDeployed" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Exposure_AirbagsDeployed</stringProp>
                        <stringProp name="Argument.value">No</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="TabBar:ClaimTab:ClaimTab_FindClaim" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">TabBar:ClaimTab:ClaimTab_FindClaim</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Description" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Description</stringProp>
                        <stringProp name="Argument.value">TP06</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="QuickJump" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">QuickJump</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:SeverityOfDamage" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:SeverityOfDamage</stringProp>
                        <stringProp name="Argument.value">unknown</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:0_toggle" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:0_toggle</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:collPoint" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:collPoint</stringProp>
                        <stringProp name="Argument.value">12</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:1_toggle" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:1_toggle</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name=":tabs" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">:tabs</stringProp>
                        <stringProp name="Argument.value">${cTABS}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:incidentOnly" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:incidentOnly</stringProp>
                        <stringProp name="Argument.value">false</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name=":tblinks" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">:tblinks</stringProp>
                        <stringProp name="Argument.value">${cTBLINKS_1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Style" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Style</stringProp>
                        <stringProp name="Argument.value">passengercar</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:PreExistingDamage" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:PreExistingDamage</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_VIN" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_VIN</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Operable" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Operable</stringProp>
                        <stringProp name="Argument.value">true</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:childSafetySeatQuestionsInputSet:ChildSafetySeatQuestionsInputSet:safetySeatInVehicle" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:childSafetySeatQuestionsInputSet:ChildSafetySeatQuestionsInputSet:safetySeatInVehicle</stringProp>
                        <stringProp name="Argument.value">No</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:existingEstimate" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:existingEstimate</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:TotalLoss" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:TotalLoss</stringProp>
                        <stringProp name="Argument.value">false</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_State" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_State</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="eventParam" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">eventParam</stringProp>
                        <stringProp name="Argument.value">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Mileage</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_LicensePlate" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_LicensePlate</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="eventSource" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">eventSource</stringProp>
                        <stringProp name="Argument.value">_refresh_</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Mileage" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Mileage</stringProp>
                        <stringProp name="Argument.value">10000</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="csrfToken" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">csrfToken</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Color" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Color</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:storageFeesCharged" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:storageFeesCharged</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:VehicleLocDuringBusHrs_RangeInput" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:VehicleLocDuringBusHrs_RangeInput</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:vehicleTowed" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:vehicleTowed</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Owner_Picker" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Owner_Picker</stringProp>
                        <stringProp name="Argument.value">Person:-${cPERSON_1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:1" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:1</stringProp>
                        <stringProp name="Argument.value">${cFNOLWIZARD1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Model_Dropdown" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Model_Dropdown</stringProp>
                        <stringProp name="Argument.value">${MODEL}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:0" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:0</stringProp>
                        <stringProp name="Argument.value">${cFNOLWIZARD0_4}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="infoBar" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">infoBar</stringProp>
                        <stringProp name="Argument.value">${cINFOBAR_4}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                  <boolProp name="HTTPSampler.image_parser">true</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">DNT</stringProp>
                        <stringProp name="Header.value">1</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_52" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Year" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Year</stringProp>
                        <stringProp name="Argument.value">${YEAR}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Make_Dropdown" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Make_Dropdown</stringProp>
                        <stringProp name="Argument.value">${MAKE}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Operable" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Operable</stringProp>
                        <stringProp name="Argument.value">true</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="TabBar:ClaimTab:ClaimTab_FindClaim" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">TabBar:ClaimTab:ClaimTab_FindClaim</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Exposure_AirbagsDeployed" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Exposure_AirbagsDeployed</stringProp>
                        <stringProp name="Argument.value">No</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="QuickJump" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">QuickJump</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Description" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Description</stringProp>
                        <stringProp name="Argument.value">TP06</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:0_toggle" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:0_toggle</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:SeverityOfDamage" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:SeverityOfDamage</stringProp>
                        <stringProp name="Argument.value">unknown</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:1_toggle" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:1_toggle</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="infoBar" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">infoBar</stringProp>
                        <stringProp name="Argument.value">${cINFOBAR_4}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:incidentOnly" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:incidentOnly</stringProp>
                        <stringProp name="Argument.value">false</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name=":tabs" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">:tabs</stringProp>
                        <stringProp name="Argument.value">${cTABS}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Style" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Style</stringProp>
                        <stringProp name="Argument.value">passengercar</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name=":tblinks" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">:tblinks</stringProp>
                        <stringProp name="Argument.value">${cTBLINKS_1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_VIN" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_VIN</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:PreExistingDamage" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:PreExistingDamage</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:collPoint" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:collPoint</stringProp>
                        <stringProp name="Argument.value">12</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:childSafetySeatQuestionsInputSet:ChildSafetySeatQuestionsInputSet:safetySeatInVehicle" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:childSafetySeatQuestionsInputSet:ChildSafetySeatQuestionsInputSet:safetySeatInVehicle</stringProp>
                        <stringProp name="Argument.value">No</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:existingEstimate" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:existingEstimate</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_State" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_State</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_LicensePlate" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_LicensePlate</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="objFocusId" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">objFocusId</stringProp>
                        <stringProp name="Argument.value">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Update</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Mileage" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Mileage</stringProp>
                        <stringProp name="Argument.value">10000</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="eventSource" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">eventSource</stringProp>
                        <stringProp name="Argument.value">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Update_act</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Color" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Color</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:storageFeesCharged" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:storageFeesCharged</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:VehicleLocDuringBusHrs_RangeInput" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:VehicleLocDuringBusHrs_RangeInput</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:vehicleTowed" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:vehicleTowed</stringProp>
                        <stringProp name="Argument.value">No</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Owner_Picker" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Owner_Picker</stringProp>
                        <stringProp name="Argument.value">Person:-${cPERSON_1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="csrfToken" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">csrfToken</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Model_Dropdown" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Model_Dropdown</stringProp>
                        <stringProp name="Argument.value">${MODEL}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:1" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:1</stringProp>
                        <stringProp name="Argument.value">${cFNOLWIZARD1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:0" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:0</stringProp>
                        <stringProp name="Argument.value">${cFNOLWIZARD0_4}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                  <boolProp name="HTTPSampler.image_parser">true</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">DNT</stringProp>
                        <stringProp name="Header.value">1</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ThinkTime - 10" enabled="true">
                  <stringProp name="TestPlan.comments">This transaction will wait for 10 seconds</stringProp>
                </GenericController>
                <hashTree>
                  <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="ThinkTime" enabled="true">
                    <stringProp name="ConstantTimer.delay">10000</stringProp>
                    <stringProp name="TestPlan.comments">   Converting seconds to milliseconds - 10s x 1000</stringProp>
                  </ConstantTimer>
                  <hashTree/>
                </hashTree>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="-SERVICES" enabled="true">
              <stringProp name="TestPlan.comments">This section contains the SERVICES part of Loadrunner</stringProp>
            </GenericController>
            <hashTree>
              <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP06_ZY_Next_To_Sevices" enabled="true">
                <boolProp name="TransactionController.includeTimers">false</boolProp>
                <boolProp name="TransactionController.parent">true</boolProp>
              </TransactionController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_53" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:Fault" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:Fault</stringProp>
                        <stringProp name="Argument.value">1</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:FaultPercent" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:FaultPercent</stringProp>
                        <stringProp name="Argument.value">100</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="infoBar" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">infoBar</stringProp>
                        <stringProp name="Argument.value">${cINFOBAR_4}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="TabBar:ClaimTab:ClaimTab_FindClaim" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">TabBar:ClaimTab:ClaimTab_FindClaim</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name=":tabs" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">:tabs</stringProp>
                        <stringProp name="Argument.value">${cTABS}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="QuickJump" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">QuickJump</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name=":tblinks" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">:tblinks</stringProp>
                        <stringProp name="Argument.value">${cTBLINKS_1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:0_toggle" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:0_toggle</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:Claim_PermissionRequired" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:Claim_PermissionRequired</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:1_toggle" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:1_toggle</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="csrfToken" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">csrfToken</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:Claim_LossCategory" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:Claim_LossCategory</stringProp>
                        <stringProp name="Argument.value">multiVehicleAccidentAuto</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:1" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:1</stringProp>
                        <stringProp name="Argument.value">${cFNOLWIZARD1_1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:Claim_LossCause" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:Claim_LossCause</stringProp>
                        <stringProp name="Argument.value">headoncollision</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:0" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:0</stringProp>
                        <stringProp name="Argument.value">${cFNOLWIZARD0_3}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:Description" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:Description</stringProp>
                        <stringProp name="Argument.value">TP06</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:FNOLMenuActions" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:FNOLMenuActions</stringProp>
                        <stringProp name="Argument.value">${cFNOLMENUACTIONS}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:AutoAdditionalDamageQuestions:DamageQuestionsAutoAdditionalInputSet:otherVehicleDirection" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:AutoAdditionalDamageQuestions:DamageQuestionsAutoAdditionalInputSet:otherVehicleDirection</stringProp>
                        <stringProp name="Argument.value">straightahead</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:AutoAdditionalDamageQuestions:DamageQuestionsAutoAdditionalInputSet:ctionAvoidAccident" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:AutoAdditionalDamageQuestions:DamageQuestionsAutoAdditionalInputSet:ctionAvoidAccident</stringProp>
                        <stringProp name="Argument.value">appliedbrakes</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:AutoAdditionalDamageQuestions:DamageQuestionsAutoAdditionalInputSet:familiarArea" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:AutoAdditionalDamageQuestions:DamageQuestionsAutoAdditionalInputSet:familiarArea</stringProp>
                        <stringProp name="Argument.value">Yes</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:AutoAdditionalDamageQuestions:DamageQuestionsAutoAdditionalInputSet:weatherConditions" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:AutoAdditionalDamageQuestions:DamageQuestionsAutoAdditionalInputSet:weatherConditions</stringProp>
                        <stringProp name="Argument.value">clear</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:AutoDamageQuestions:DamageQuestionsAutoInputSet:vehicleDamageOtherProperty" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:AutoDamageQuestions:DamageQuestionsAutoInputSet:vehicleDamageOtherProperty</stringProp>
                        <stringProp name="Argument.value">No</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:AutoDamageQuestions:DamageQuestionsAutoInputSet:numberVehiclesInvolved" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:AutoDamageQuestions:DamageQuestionsAutoInputSet:numberVehiclesInvolved</stringProp>
                        <stringProp name="Argument.value">2</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:AddressDetailInputSetRef:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:Address_Picker" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:AddressDetailInputSetRef:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:Address_Picker</stringProp>
                        <stringProp name="Argument.value">Address:${cADDRESS}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:AutoAdditionalDamageQuestions:DamageQuestionsAutoAdditionalInputSet:anyObstructions" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:AutoAdditionalDamageQuestions:DamageQuestionsAutoAdditionalInputSet:anyObstructions</stringProp>
                        <stringProp name="Argument.value">blindspot</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:AutoAdditionalDamageQuestions:DamageQuestionsAutoAdditionalInputSet:insuredSpeed" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:AutoAdditionalDamageQuestions:DamageQuestionsAutoAdditionalInputSet:insuredSpeed</stringProp>
                        <stringProp name="Argument.value">50</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:AutoAdditionalDamageQuestions:DamageQuestionsAutoAdditionalInputSet:numberOfLanes" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:AutoAdditionalDamageQuestions:DamageQuestionsAutoAdditionalInputSet:numberOfLanes</stringProp>
                        <stringProp name="Argument.value">two</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:AutoAdditionalDamageQuestions:DamageQuestionsAutoAdditionalInputSet:trafficControlsPresent" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:AutoAdditionalDamageQuestions:DamageQuestionsAutoAdditionalInputSet:trafficControlsPresent</stringProp>
                        <stringProp name="Argument.value">unknown</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:anyInjuryAuto" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:anyInjuryAuto</stringProp>
                        <stringProp name="Argument.value">false</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="objFocusId" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">objFocusId</stringProp>
                        <stringProp name="Argument.value">FNOLWizard:Next</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="eventSource" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">eventSource</stringProp>
                        <stringProp name="Argument.value">FNOLWizard:Next_act</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                  <boolProp name="HTTPSampler.image_parser">true</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">DNT</stringProp>
                        <stringProp name="Header.value">1</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cFNOLWIZARD0_5 Extractor" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">cFNOLWIZARD0_5</stringProp>
                    <stringProp name="RegexExtractor.regex">Claim&quot;,&quot;eventId&quot;:&quot;FNOLWizard:Summary&quot;,&quot;disabled&quot;:true}],&quot;xtype&quot;:&quot;accordionpanel&quot;,&quot;checksum&quot;:&quot;(.*?)&quot;,</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">null</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ThinkTime - 10" enabled="true">
                  <stringProp name="TestPlan.comments">This transaction will wait for 10 seconds</stringProp>
                </GenericController>
                <hashTree>
                  <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="ThinkTime" enabled="true">
                    <stringProp name="ConstantTimer.delay">10000</stringProp>
                    <stringProp name="TestPlan.comments">   Converting seconds to milliseconds - 10s x 1000</stringProp>
                  </ConstantTimer>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP06_ZZB_Services_Next_To_Assign_Claim" enabled="true">
                <boolProp name="TransactionController.includeTimers">false</boolProp>
                <boolProp name="TransactionController.parent">true</boolProp>
              </TransactionController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_54" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="FNOLWizard:FNOLMenuActions" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:FNOLMenuActions</stringProp>
                        <stringProp name="Argument.value">${cFNOLMENUACTIONS}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:0" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:0</stringProp>
                        <stringProp name="Argument.value">${cFNOLWIZARD0_5}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="TabBar:ClaimTab:ClaimTab_FindClaim" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">TabBar:ClaimTab:ClaimTab_FindClaim</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="QuickJump" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">QuickJump</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:0_toggle" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:0_toggle</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:1_toggle" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:1_toggle</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name=":tblinks" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">:tblinks</stringProp>
                        <stringProp name="Argument.value">${cTBLINKS_1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name=":tabs" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">:tabs</stringProp>
                        <stringProp name="Argument.value">${cTABS}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="infoBar" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">infoBar</stringProp>
                        <stringProp name="Argument.value">${cINFOBAR_4}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="objFocusId" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">objFocusId</stringProp>
                        <stringProp name="Argument.value">FNOLWizard:Next</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="eventSource" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">eventSource</stringProp>
                        <stringProp name="Argument.value">FNOLWizard:Next_act</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="csrfToken" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">csrfToken</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:1" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:1</stringProp>
                        <stringProp name="Argument.value">${cFNOLWIZARD1_1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                  <boolProp name="HTTPSampler.image_parser">true</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">DNT</stringProp>
                        <stringProp name="Header.value">1</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="CNG_TP06_ZZB_Services_Next_To_Assign_Claim -Assign Claim Screen Unsuccessful  ${POLICYNUMBER} , ${POLEFFDATE} , ${POLEXPDATE} , ${PHONENUMBER} ,${LASTNAME},${FIRSTNAME} ,${STATE}, ${POLICYTYPE},${AGREEMENTSOURCE}" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-1917315689">Save and Assign Claim</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cFNOLWIZARD0_6 Extractor" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">cFNOLWIZARD0_6</stringProp>
                    <stringProp name="RegexExtractor.regex">Claim&quot;,&quot;eventId&quot;:&quot;FNOLWizard:Summary&quot;}],&quot;xtype&quot;:&quot;accordionpanel&quot;,&quot;checksum&quot;:&quot;(.*?)&quot;,</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">null</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="ResponseOk Extractor" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">ResponseOk</stringProp>
                    <stringProp name="RegexExtractor.regex">Save and Assign Claim(.*?)</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">null</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ThinkTime - 10" enabled="true">
                  <stringProp name="TestPlan.comments">This transaction will wait for 10 seconds</stringProp>
                </GenericController>
                <hashTree>
                  <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="ThinkTime" enabled="true">
                    <stringProp name="ConstantTimer.delay">10000</stringProp>
                    <stringProp name="TestPlan.comments">   Converting seconds to milliseconds - 10s x 1000</stringProp>
                  </ConstantTimer>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If CNG_TP06_ZZB_Services_Next_To_Assign_Claim &quot;${ResponseOk}&quot; == &quot;null&quot;" enabled="true">
                <stringProp name="IfController.condition">&quot;${ResponseOk}&quot; == &quot;null&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="-CANCELCLAIMSERVICES" enabled="true">
                  <stringProp name="TestPlan.comments">This section contains the CANCELCLAIMSERVICES part of Loadrunner</stringProp>
                </GenericController>
                <hashTree>
                  <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP06_Cancel_Claim_Services" enabled="true">
                    <boolProp name="TransactionController.includeTimers">false</boolProp>
                    <boolProp name="TransactionController.parent">true</boolProp>
                  </TransactionController>
                  <hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_31" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="FNOLWizard:FNOLMenuActions" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:FNOLMenuActions</stringProp>
                            <stringProp name="Argument.value">${cFNOLMENUACTIONS}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:0" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:0</stringProp>
                            <stringProp name="Argument.value">${cFNOLWIZARD0_5}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="TabBar:ClaimTab:ClaimTab_FindClaim" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">TabBar:ClaimTab:ClaimTab_FindClaim</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="QuickJump" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">QuickJump</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:0_toggle" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:0_toggle</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:1_toggle" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:1_toggle</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name=":tblinks" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">:tblinks</stringProp>
                            <stringProp name="Argument.value">${CTBLINKS_1}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name=":tabs" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">:tabs</stringProp>
                            <stringProp name="Argument.value">${cTABS}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="infoBar" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">infoBar</stringProp>
                            <stringProp name="Argument.value">${cINFOBAR_4}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="objFocusId" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">objFocusId</stringProp>
                            <stringProp name="Argument.value">FNOLWizard:Cancel</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="eventSource" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">eventSource</stringProp>
                            <stringProp name="Argument.value">FNOLWizard:Cancel_act</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="csrfToken" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">csrfToken</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:1" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:1</stringProp>
                            <stringProp name="Argument.value">${cFNOLWIZARD1_1}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol">https</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                      <stringProp name="HTTPSampler.method">POST</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                      <boolProp name="HTTPSampler.image_parser">true</boolProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="Accept-Language" elementType="Header">
                            <stringProp name="Header.name">DNT</stringProp>
                            <stringProp name="Header.value">1</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                      <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="CNG_TP06_Cancel_Claim_Services --Desktop screen not displayed ${POLICYNUMBER} , ${POLEFFDATE} , ${POLEXPDATE} , ${PHONENUMBER} ,${LASTNAME},${FIRSTNAME} ,${STATE}, ${POLICYTYPE},${AGREEMENTSOURCE}" enabled="true">
                        <collectionProp name="Asserion.test_strings">
                          <stringProp name="-252897267">Activities</stringProp>
                        </collectionProp>
                        <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                        <boolProp name="Assertion.assume_success">false</boolProp>
                        <intProp name="Assertion.test_type">16</intProp>
                      </ResponseAssertion>
                      <hashTree/>
                    </hashTree>
                    <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ThinkTime - 10" enabled="true">
                      <stringProp name="TestPlan.comments">This transaction will wait for 10 seconds</stringProp>
                    </GenericController>
                    <hashTree>
                      <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="ThinkTime" enabled="true">
                        <stringProp name="ConstantTimer.delay">10000</stringProp>
                        <stringProp name="TestPlan.comments">   Converting seconds to milliseconds - 10s x 1000</stringProp>
                      </ConstantTimer>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                </hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="-RETURNTODESKTOP" enabled="true">
                  <stringProp name="TestPlan.comments">This section contains the RETURNTODESKTOP part of Loadrunner</stringProp>
                </GenericController>
                <hashTree>
                  <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP06_Return_To_Desktop" enabled="true">
                    <boolProp name="TransactionController.includeTimers">false</boolProp>
                    <boolProp name="TransactionController.parent">true</boolProp>
                  </TransactionController>
                  <hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_66" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="Claim:MenuLinks" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">Claim:MenuLinks</stringProp>
                            <stringProp name="Argument.value">${cCLAIMMENULINKS}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="csrfToken" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">csrfToken</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="TabBar:ClaimTab:ClaimTab_FindClaim" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">TabBar:ClaimTab:ClaimTab_FindClaim</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="QuickJump" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">QuickJump</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="Claim:MenuLinks_toggle" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">Claim:MenuLinks_toggle</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name=":tblinks" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">:tblinks</stringProp>
                            <stringProp name="Argument.value">${cTBLINKS}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name=":tabs" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">:tabs</stringProp>
                            <stringProp name="Argument.value">${cTABS_1}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="infoBar" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">infoBar</stringProp>
                            <stringProp name="Argument.value">${cINFOBAR_6}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="Claim:ClaimMenuActions" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">Claim:ClaimMenuActions</stringProp>
                            <stringProp name="Argument.value">${cCLAIMMENUACTIONS}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="objFocusId" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">objFocusId</stringProp>
                            <stringProp name="Argument.value">TabBar:DesktopTab</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="eventSource" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">eventSource</stringProp>
                            <stringProp name="Argument.value">TabBar:DesktopTab_act</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol">https</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                      <stringProp name="HTTPSampler.method">POST</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                      <boolProp name="HTTPSampler.image_parser">true</boolProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="Accept-Language" elementType="Header">
                            <stringProp name="Header.name">DNT</stringProp>
                            <stringProp name="Header.value">1</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                      <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="CNG_TP06_Return_To_Desktop -- Desktop screen has not appeared for claim number: ${CLAIMNUMBER}" enabled="true">
                        <collectionProp name="Asserion.test_strings">
                          <stringProp name="1514705186">My activities today</stringProp>
                        </collectionProp>
                        <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                        <boolProp name="Assertion.assume_success">false</boolProp>
                        <intProp name="Assertion.test_type">16</intProp>
                      </ResponseAssertion>
                      <hashTree/>
                      <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cTABS Extractor" enabled="true">
                        <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                        <stringProp name="RegexExtractor.refname">cTABS</stringProp>
                        <stringProp name="RegexExtractor.regex">&quot;id&quot;:&quot;TabBar:VacationTab&quot;,&quot;text&quot;:&quot;Vacation&quot;,&quot;menu&quot;:\{&quot;defaultType&quot;:&quot;gmenuitem&quot;},&quot;xtype&quot;:&quot;gbutton&quot;,&quot;disabled&quot;:true}],&quot;checksum&quot;:&quot;(.*?)&quot;}},\{</stringProp>
                        <stringProp name="RegexExtractor.template">$1$</stringProp>
                        <stringProp name="RegexExtractor.default">null</stringProp>
                        <stringProp name="RegexExtractor.match_number">1</stringProp>
                      </RegexExtractor>
                      <hashTree/>
                    </hashTree>
                    <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ThinkTime - 10" enabled="true">
                      <stringProp name="TestPlan.comments">This transaction will wait for 10 seconds</stringProp>
                    </GenericController>
                    <hashTree>
                      <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="ThinkTime" enabled="true">
                        <stringProp name="ConstantTimer.delay">10000</stringProp>
                        <stringProp name="TestPlan.comments">   Converting seconds to milliseconds - 10s x 1000</stringProp>
                      </ConstantTimer>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                </hashTree>
                <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Go to Next loop Iteration" enabled="true">
                  <intProp name="ActionProcessor.action">3</intProp>
                  <intProp name="ActionProcessor.target">0</intProp>
                  <stringProp name="ActionProcessor.duration"></stringProp>
                </TestAction>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="-ASSIGNCLAIM" enabled="true">
              <stringProp name="TestPlan.comments">This section contains the ASSIGNCLAIM part of Loadrunner</stringProp>
            </GenericController>
            <hashTree>
              <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP06_ZZC_Finish" enabled="true">
                <boolProp name="TransactionController.includeTimers">false</boolProp>
                <boolProp name="TransactionController.parent">true</boolProp>
              </TransactionController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_55" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="infoBar" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">infoBar</stringProp>
                        <stringProp name="Argument.value">${cINFOBAR_4}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:FNOLMenuActions" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:FNOLMenuActions</stringProp>
                        <stringProp name="Argument.value">${cFNOLMENUACTIONS}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="TabBar:ClaimTab:ClaimTab_FindClaim" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">TabBar:ClaimTab:ClaimTab_FindClaim</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="QuickJump" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">QuickJump</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:0_toggle" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:0_toggle</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:1_toggle" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:1_toggle</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_AssignSaveScreen:Note" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_AssignSaveScreen:Note</stringProp>
                        <stringProp name="Argument.value">TP06</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name=":tblinks" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">:tblinks</stringProp>
                        <stringProp name="Argument.value">${cTBLINKS_1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name=":tabs" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">:tabs</stringProp>
                        <stringProp name="Argument.value">${cTABS}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="objFocusId" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">objFocusId</stringProp>
                        <stringProp name="Argument.value">FNOLWizard:Finish</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="eventSource" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">eventSource</stringProp>
                        <stringProp name="Argument.value">FNOLWizard:Finish_act</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="csrfToken" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">csrfToken</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:1" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:1</stringProp>
                        <stringProp name="Argument.value">${cFNOLWIZARD1_1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FNOLWizard:0" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FNOLWizard:0</stringProp>
                        <stringProp name="Argument.value">${cFNOLWIZARD0_6}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                  <boolProp name="HTTPSampler.image_parser">true</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">DNT</stringProp>
                        <stringProp name="Header.value">1</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="CNG_TP06_ZZC_Finish -Unsuccessful nNumber ${USERNAME}" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-864811787">Set Expectations</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cINFOBAR_5 Extractor" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">cINFOBAR_5</stringProp>
                    <stringProp name="RegexExtractor.regex">\\/span&gt;&quot;,&quot;cls&quot;:&quot;infobar_elem&quot;,&quot;noaction&quot;:1,&quot;disabled&quot;:true}],&quot;checksum&quot;:&quot;(.*?)&quot;},</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">null</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cCLAIMMESSAGENEWMENULINKS Extractor" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">cCLAIMMESSAGENEWMENULINKS</stringProp>
                    <stringProp name="RegexExtractor.regex">Links&quot;:\[],&quot;menuLinks&quot;:\{&quot;id&quot;:&quot;ClaimMessageNew:MenuLinks&quot;,&quot;frame&quot;:false,&quot;cls&quot;:&quot;leftnavmenu&quot;,&quot;xtype&quot;:&quot;accordionpanel&quot;,&quot;checksum&quot;:&quot;(.*?)&quot;,</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">null</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="ResponseOk Extractor" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">ResponseOk</stringProp>
                    <stringProp name="RegexExtractor.regex">Set Expectations(.*?)</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">null</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ThinkTime - 10" enabled="true">
                  <stringProp name="TestPlan.comments">This transaction will wait for 10 seconds</stringProp>
                </GenericController>
                <hashTree>
                  <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="ThinkTime" enabled="true">
                    <stringProp name="ConstantTimer.delay">10000</stringProp>
                    <stringProp name="TestPlan.comments">   Converting seconds to milliseconds - 10s x 1000</stringProp>
                  </ConstantTimer>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If CNG_TP06_ZZC_Finish &quot;${ResponseOk}&quot; == &quot;null&quot;" enabled="true">
                <stringProp name="IfController.condition">&quot;${ResponseOk}&quot; == &quot;null&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="-CANCELCLAIMSAVEANDASSIGN" enabled="true">
                  <stringProp name="TestPlan.comments">This section contains the CANCELCLAIMSAVEANDASSIGN part of Loadrunner</stringProp>
                </GenericController>
                <hashTree>
                  <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP06_Cancel_Claim_Save_And_Assign" enabled="true">
                    <boolProp name="TransactionController.includeTimers">false</boolProp>
                    <boolProp name="TransactionController.parent">true</boolProp>
                  </TransactionController>
                  <hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_64" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="infoBar" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">infoBar</stringProp>
                            <stringProp name="Argument.value">${cINFOBAR_4}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:FNOLMenuActions" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:FNOLMenuActions</stringProp>
                            <stringProp name="Argument.value">${cFNOLMENUACTIONS}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="TabBar:ClaimTab:ClaimTab_FindClaim" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">TabBar:ClaimTab:ClaimTab_FindClaim</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="QuickJump" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">QuickJump</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:0_toggle" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:0_toggle</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:1_toggle" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:1_toggle</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_AssignSaveScreen:Note" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_AssignSaveScreen:Note</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name=":tblinks" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">:tblinks</stringProp>
                            <stringProp name="Argument.value">${cTBLINKS_1}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name=":tabs" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">:tabs</stringProp>
                            <stringProp name="Argument.value">${cTABS}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="objFocusId" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">objFocusId</stringProp>
                            <stringProp name="Argument.value">FNOLWizard:Cancel</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="eventSource" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">eventSource</stringProp>
                            <stringProp name="Argument.value">FNOLWizard:Cancel_act</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="csrfToken" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">csrfToken</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:1" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:1</stringProp>
                            <stringProp name="Argument.value">${cFNOLWIZARD1_1}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="FNOLWizard:0" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">FNOLWizard:0</stringProp>
                            <stringProp name="Argument.value">${cFNOLWIZARD0_6}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol">https</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                      <stringProp name="HTTPSampler.method">POST</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                      <boolProp name="HTTPSampler.image_parser">true</boolProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="Accept-Language" elementType="Header">
                            <stringProp name="Header.name">DNT</stringProp>
                            <stringProp name="Header.value">1</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                      <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="CNG_TP06_Cancel_Claim_Save_And_Assign --Desktop screen not displayed  ${POLICYNUMBER} , ${POLEFFDATE} , ${POLEXPDATE} , ${PHONENUMBER} ,${LASTNAME},${FIRSTNAME} ,${STATE}, ${POLICYTYPE},${AGREEMENTSOURCE}" enabled="true">
                        <collectionProp name="Asserion.test_strings">
                          <stringProp name="-252897267">Activities</stringProp>
                        </collectionProp>
                        <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                        <boolProp name="Assertion.assume_success">false</boolProp>
                        <intProp name="Assertion.test_type">16</intProp>
                      </ResponseAssertion>
                      <hashTree/>
                    </hashTree>
                    <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ThinkTime - 0" enabled="true">
                      <stringProp name="TestPlan.comments">This transaction will wait for 0 seconds</stringProp>
                    </GenericController>
                    <hashTree>
                      <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="ThinkTime" enabled="true">
                        <stringProp name="ConstantTimer.delay">0</stringProp>
                        <stringProp name="TestPlan.comments">   Converting seconds to milliseconds - 0s x 1000</stringProp>
                      </ConstantTimer>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                </hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="-RETURNTODESKTOP" enabled="true">
                  <stringProp name="TestPlan.comments">This section contains the RETURNTODESKTOP part of Loadrunner</stringProp>
                </GenericController>
                <hashTree>
                  <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP06_Return_To_Desktop" enabled="true">
                    <boolProp name="TransactionController.includeTimers">false</boolProp>
                    <boolProp name="TransactionController.parent">true</boolProp>
                  </TransactionController>
                  <hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_66" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="Claim:MenuLinks" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">Claim:MenuLinks</stringProp>
                            <stringProp name="Argument.value">${cCLAIMMENULINKS}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="csrfToken" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">csrfToken</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="TabBar:ClaimTab:ClaimTab_FindClaim" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">TabBar:ClaimTab:ClaimTab_FindClaim</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="QuickJump" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">QuickJump</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="Claim:MenuLinks_toggle" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">Claim:MenuLinks_toggle</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name=":tblinks" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">:tblinks</stringProp>
                            <stringProp name="Argument.value">${cTBLINKS}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name=":tabs" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">:tabs</stringProp>
                            <stringProp name="Argument.value">${cTABS_1}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="infoBar" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">infoBar</stringProp>
                            <stringProp name="Argument.value">${cINFOBAR_6}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="Claim:ClaimMenuActions" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">Claim:ClaimMenuActions</stringProp>
                            <stringProp name="Argument.value">${cCLAIMMENUACTIONS}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="objFocusId" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">objFocusId</stringProp>
                            <stringProp name="Argument.value">TabBar:DesktopTab</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="eventSource" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">eventSource</stringProp>
                            <stringProp name="Argument.value">TabBar:DesktopTab_act</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol">https</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                      <stringProp name="HTTPSampler.method">POST</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                      <boolProp name="HTTPSampler.image_parser">true</boolProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="Accept-Language" elementType="Header">
                            <stringProp name="Header.name">DNT</stringProp>
                            <stringProp name="Header.value">1</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                      <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="CNG_TP06_Return_To_Desktop -- Desktop screen has not appeared for claim number: ${CLAIMNUMBER}" enabled="true">
                        <collectionProp name="Asserion.test_strings">
                          <stringProp name="1514705186">My activities today</stringProp>
                        </collectionProp>
                        <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                        <boolProp name="Assertion.assume_success">false</boolProp>
                        <intProp name="Assertion.test_type">16</intProp>
                      </ResponseAssertion>
                      <hashTree/>
                      <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cTABS Extractor" enabled="true">
                        <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                        <stringProp name="RegexExtractor.refname">cTABS</stringProp>
                        <stringProp name="RegexExtractor.regex">&quot;id&quot;:&quot;TabBar:VacationTab&quot;,&quot;text&quot;:&quot;Vacation&quot;,&quot;menu&quot;:\{&quot;defaultType&quot;:&quot;gmenuitem&quot;},&quot;xtype&quot;:&quot;gbutton&quot;,&quot;disabled&quot;:true}],&quot;checksum&quot;:&quot;(.*?)&quot;}},\{</stringProp>
                        <stringProp name="RegexExtractor.template">$1$</stringProp>
                        <stringProp name="RegexExtractor.default">null</stringProp>
                        <stringProp name="RegexExtractor.match_number">1</stringProp>
                      </RegexExtractor>
                      <hashTree/>
                    </hashTree>
                    <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ThinkTime - 10" enabled="true">
                      <stringProp name="TestPlan.comments">This transaction will wait for 10 seconds</stringProp>
                    </GenericController>
                    <hashTree>
                      <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="ThinkTime" enabled="true">
                        <stringProp name="ConstantTimer.delay">10000</stringProp>
                        <stringProp name="TestPlan.comments">   Converting seconds to milliseconds - 10s x 1000</stringProp>
                      </ConstantTimer>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                </hashTree>
                <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Test Action" enabled="true">
                  <intProp name="ActionProcessor.action">3</intProp>
                  <intProp name="ActionProcessor.target">0</intProp>
                  <stringProp name="ActionProcessor.duration"></stringProp>
                </TestAction>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="-VIEWNEWCLAIM" enabled="true">
              <stringProp name="TestPlan.comments">This section contains the VIEWNEWCLAIM part of Loadrunner</stringProp>
            </GenericController>
            <hashTree>
              <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP06_ZZD_View_Claim_Summary_Information" enabled="true">
                <boolProp name="TransactionController.includeTimers">false</boolProp>
                <boolProp name="TransactionController.parent">true</boolProp>
              </TransactionController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_56" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="csrfToken" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">csrfToken</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="eventSource" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">eventSource</stringProp>
                        <stringProp name="Argument.value">NewClaimSaved:NewClaimSavedScreen:NewClaimSavedDV:GoToTheClaim_act</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="TabBar:ClaimTab:ClaimTab_FindClaim" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">TabBar:ClaimTab:ClaimTab_FindClaim</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="QuickJump" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">QuickJump</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="ClaimMessageNew:MenuLinks_toggle" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">ClaimMessageNew:MenuLinks_toggle</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name=":tblinks" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">:tblinks</stringProp>
                        <stringProp name="Argument.value">${cTBLINKS_1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name=":tabs" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">:tabs</stringProp>
                        <stringProp name="Argument.value">${cTABS}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="infoBar" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">infoBar</stringProp>
                        <stringProp name="Argument.value">${cINFOBAR_5}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="ClaimMessageNew:MenuLinks" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">ClaimMessageNew:MenuLinks</stringProp>
                        <stringProp name="Argument.value">${cCLAIMMESSAGENEWMENULINKS}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="objFocusId" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">objFocusId</stringProp>
                        <stringProp name="Argument.value">NewClaimSaved:NewClaimSavedScreen:NewClaimSavedDV:GoToTheClaim</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                  <boolProp name="HTTPSampler.image_parser">true</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">DNT</stringProp>
                        <stringProp name="Header.value">1</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-192987258">Summary</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="NewClaimNumber Extractor" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">NewClaimNumber</stringProp>
                    <stringProp name="RegexExtractor.regex">Claim \((.*?)\)</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">null</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cTABS_1 Extractor" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">cTABS_1</stringProp>
                    <stringProp name="RegexExtractor.regex">&quot;id&quot;:&quot;TabBar:VacationTab&quot;,&quot;text&quot;:&quot;Vacation&quot;,&quot;menu&quot;:\{&quot;defaultType&quot;:&quot;gmenuitem&quot;},&quot;xtype&quot;:&quot;gbutton&quot;,&quot;disabled&quot;:true}],&quot;checksum&quot;:&quot;(.*?)&quot;}},\{</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">null</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cINFOBAR_6 Extractor" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">cINFOBAR_6</stringProp>
                    <stringProp name="RegexExtractor.regex">\\/span&gt;&quot;,&quot;cls&quot;:&quot;infobar_elem&quot;,&quot;noaction&quot;:1,&quot;disabled&quot;:true}],&quot;checksum&quot;:&quot;(.*?)&quot;},</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">null</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cCLAIMMENUACTIONS Extractor" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">cCLAIMMENUACTIONS</stringProp>
                    <stringProp name="RegexExtractor.regex">ctions&quot;,&quot;menu&quot;:\{&quot;numEntriesPerColumn&quot;:3,&quot;flattened&quot;:true,&quot;defaultType&quot;:&quot;gmenuitem&quot;},&quot;xtype&quot;:&quot;gbutton&quot;,&quot;noaction&quot;:1,&quot;checksum&quot;:&quot;(.*?)&quot;,</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">null</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cCLAIMMENULINKS Extractor" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">cCLAIMMENULINKS</stringProp>
                    <stringProp name="RegexExtractor.regex"> &quot;xtype&quot;:&quot;accordionpanel&quot;,&quot;checksum&quot;:&quot;(.*?)&quot;,</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">null</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor CNG_TP06_ZZD_View_Claim_Summary_Information" enabled="true">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey">aa29db4a-3c42-4a10-9b0e-689135a8626e</stringProp>
                    <stringProp name="script">	vars.put(&quot;cCLAIMMENULINKS_URL2&quot;,java.net.URLDecoder.decode(vars.get(&quot;cCLAIMMENULINKS&quot;), &quot;UTF-8&quot;));
	vars.put(&quot;cINFOBAR_6_URL2&quot;,java.net.URLDecoder.decode(vars.get(&quot;cINFOBAR_6&quot;), &quot;UTF-8&quot;));
	vars.put(&quot;cTABS_1_URL2&quot;,java.net.URLDecoder.decode(vars.get(&quot;cTABS_1&quot;), &quot;UTF-8&quot;));
</stringProp>
                  </JSR223PostProcessor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="ResponseOk Extractor" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">ResponseOk</stringProp>
                    <stringProp name="RegexExtractor.regex">Summary(.*?)</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">null</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ThinkTime - 10" enabled="true">
                  <stringProp name="TestPlan.comments">This transaction will wait for 10 seconds</stringProp>
                </GenericController>
                <hashTree>
                  <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="ThinkTime" enabled="true">
                    <stringProp name="ConstantTimer.delay">10000</stringProp>
                    <stringProp name="TestPlan.comments">   Converting seconds to milliseconds - 10s x 1000</stringProp>
                  </ConstantTimer>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If CNG_TP06_ZZD_View_Claim_Summary_Information &quot;${ResponseOk}&quot; == &quot;null&quot;" enabled="true">
                <stringProp name="IfController.condition">&quot;${ResponseOk}&quot; == &quot;null&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="-RETURNTODESKTOP" enabled="true">
                  <stringProp name="TestPlan.comments">This section contains the RETURNTODESKTOP part of Loadrunner</stringProp>
                </GenericController>
                <hashTree>
                  <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP06_Return_To_Desktop" enabled="true">
                    <boolProp name="TransactionController.includeTimers">false</boolProp>
                    <boolProp name="TransactionController.parent">true</boolProp>
                  </TransactionController>
                  <hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_66" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="Claim:MenuLinks" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">Claim:MenuLinks</stringProp>
                            <stringProp name="Argument.value">${cCLAIMMENULINKS}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="csrfToken" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">csrfToken</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="TabBar:ClaimTab:ClaimTab_FindClaim" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">TabBar:ClaimTab:ClaimTab_FindClaim</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="QuickJump" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">QuickJump</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="Claim:MenuLinks_toggle" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">Claim:MenuLinks_toggle</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name=":tblinks" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">:tblinks</stringProp>
                            <stringProp name="Argument.value">${cTBLINKS}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name=":tabs" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">:tabs</stringProp>
                            <stringProp name="Argument.value">${cTABS_1}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="infoBar" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">infoBar</stringProp>
                            <stringProp name="Argument.value">${cINFOBAR_6}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="Claim:ClaimMenuActions" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">Claim:ClaimMenuActions</stringProp>
                            <stringProp name="Argument.value">${cCLAIMMENUACTIONS}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="objFocusId" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">objFocusId</stringProp>
                            <stringProp name="Argument.value">TabBar:DesktopTab</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="eventSource" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">eventSource</stringProp>
                            <stringProp name="Argument.value">TabBar:DesktopTab_act</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol">https</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                      <stringProp name="HTTPSampler.method">POST</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                      <boolProp name="HTTPSampler.image_parser">true</boolProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="Accept-Language" elementType="Header">
                            <stringProp name="Header.name">DNT</stringProp>
                            <stringProp name="Header.value">1</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                      <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="CNG_TP06_Return_To_Desktop -- Desktop screen has not appeared for claim number: ${CLAIMNUMBER}" enabled="true">
                        <collectionProp name="Asserion.test_strings">
                          <stringProp name="1514705186">My activities today</stringProp>
                        </collectionProp>
                        <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                        <boolProp name="Assertion.assume_success">false</boolProp>
                        <intProp name="Assertion.test_type">16</intProp>
                      </ResponseAssertion>
                      <hashTree/>
                      <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cTABS Extractor" enabled="true">
                        <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                        <stringProp name="RegexExtractor.refname">cTABS</stringProp>
                        <stringProp name="RegexExtractor.regex">&quot;id&quot;:&quot;TabBar:VacationTab&quot;,&quot;text&quot;:&quot;Vacation&quot;,&quot;menu&quot;:\{&quot;defaultType&quot;:&quot;gmenuitem&quot;},&quot;xtype&quot;:&quot;gbutton&quot;,&quot;disabled&quot;:true}],&quot;checksum&quot;:&quot;(.*?)&quot;}},\{</stringProp>
                        <stringProp name="RegexExtractor.template">$1$</stringProp>
                        <stringProp name="RegexExtractor.default">null</stringProp>
                        <stringProp name="RegexExtractor.match_number">1</stringProp>
                      </RegexExtractor>
                      <hashTree/>
                    </hashTree>
                    <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ThinkTime - 10" enabled="true">
                      <stringProp name="TestPlan.comments">This transaction will wait for 10 seconds</stringProp>
                    </GenericController>
                    <hashTree>
                      <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="ThinkTime" enabled="true">
                        <stringProp name="ConstantTimer.delay">10000</stringProp>
                        <stringProp name="TestPlan.comments">   Converting seconds to milliseconds - 10s x 1000</stringProp>
                      </ConstantTimer>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                </hashTree>
                <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Test Action" enabled="true">
                  <intProp name="ActionProcessor.action">3</intProp>
                  <intProp name="ActionProcessor.target">0</intProp>
                  <stringProp name="ActionProcessor.duration"></stringProp>
                </TestAction>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="-LOSSDETAILS" enabled="true">
              <stringProp name="TestPlan.comments">This section contains the LOSSDETAILS part of Loadrunner</stringProp>
            </GenericController>
            <hashTree>
              <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP06_ZZE_Summary_Loss_Details" enabled="true">
                <boolProp name="TransactionController.includeTimers">false</boolProp>
                <boolProp name="TransactionController.parent">true</boolProp>
              </TransactionController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_57" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="Claim:MenuLinks" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">Claim:MenuLinks</stringProp>
                        <stringProp name="Argument.value">${cCLAIMMENULINKS}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="csrfToken" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">csrfToken</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="TabBar:ClaimTab:ClaimTab_FindClaim" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">TabBar:ClaimTab:ClaimTab_FindClaim</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="QuickJump" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">QuickJump</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="Claim:MenuLinks_toggle" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">Claim:MenuLinks_toggle</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name=":tblinks" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">:tblinks</stringProp>
                        <stringProp name="Argument.value">${cTBLINKS}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name=":tabs" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">:tabs</stringProp>
                        <stringProp name="Argument.value">${cTABS_1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="infoBar" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">infoBar</stringProp>
                        <stringProp name="Argument.value">${cINFOBAR_6}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="Claim:ClaimMenuActions" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">Claim:ClaimMenuActions</stringProp>
                        <stringProp name="Argument.value">${cCLAIMMENUACTIONS}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="eventSource" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">eventSource</stringProp>
                        <stringProp name="Argument.value">Claim:MenuLinks:Claim_ClaimLossDetailsGroup:ClaimLossDetailsGroup_ClaimLossDetails_act</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                  <boolProp name="HTTPSampler.image_parser">true</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">DNT</stringProp>
                        <stringProp name="Header.value">1</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="CNG_TP06_ZZE_Summary_Loss_Details -  Unable to view loss details screen ${USERNAME}" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-338071995">Loss Details</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="ResponseOk Extractor" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">ResponseOk</stringProp>
                    <stringProp name="RegexExtractor.regex">Loss Details(.*?)</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">null</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ThinkTime - 10" enabled="true">
                  <stringProp name="TestPlan.comments">This transaction will wait for 10 seconds</stringProp>
                </GenericController>
                <hashTree>
                  <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="ThinkTime" enabled="true">
                    <stringProp name="ConstantTimer.delay">10000</stringProp>
                    <stringProp name="TestPlan.comments">   Converting seconds to milliseconds - 10s x 1000</stringProp>
                  </ConstantTimer>
                  <hashTree/>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If CNG_TP06_ZZE_Summary_Loss_Details &quot;${ResponseOk}&quot; == &quot;null&quot;" enabled="true">
                  <stringProp name="IfController.condition">&quot;${ResponseOk}&quot; == &quot;null&quot;</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="-RETURNTODESKTOP" enabled="true">
                    <stringProp name="TestPlan.comments">This section contains the RETURNTODESKTOP part of Loadrunner</stringProp>
                  </GenericController>
                  <hashTree>
                    <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP06_Return_To_Desktop" enabled="true">
                      <boolProp name="TransactionController.includeTimers">false</boolProp>
                      <boolProp name="TransactionController.parent">true</boolProp>
                    </TransactionController>
                    <hashTree>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_66" enabled="true">
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                          <collectionProp name="Arguments.arguments">
                            <elementProp name="Claim:MenuLinks" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">Claim:MenuLinks</stringProp>
                              <stringProp name="Argument.value">${cCLAIMMENULINKS}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="csrfToken" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">csrfToken</stringProp>
                              <stringProp name="Argument.value"></stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="TabBar:ClaimTab:ClaimTab_FindClaim" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">TabBar:ClaimTab:ClaimTab_FindClaim</stringProp>
                              <stringProp name="Argument.value"></stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="QuickJump" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">QuickJump</stringProp>
                              <stringProp name="Argument.value"></stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="Claim:MenuLinks_toggle" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">Claim:MenuLinks_toggle</stringProp>
                              <stringProp name="Argument.value"></stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name=":tblinks" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">:tblinks</stringProp>
                              <stringProp name="Argument.value">${cTBLINKS}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name=":tabs" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">:tabs</stringProp>
                              <stringProp name="Argument.value">${cTABS_1}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="infoBar" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">infoBar</stringProp>
                              <stringProp name="Argument.value">${cINFOBAR_6}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="Claim:ClaimMenuActions" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">Claim:ClaimMenuActions</stringProp>
                              <stringProp name="Argument.value">${cCLAIMMENUACTIONS}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="objFocusId" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">objFocusId</stringProp>
                              <stringProp name="Argument.value">TabBar:DesktopTab</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="eventSource" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">eventSource</stringProp>
                              <stringProp name="Argument.value">TabBar:DesktopTab_act</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                          </collectionProp>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain"></stringProp>
                        <stringProp name="HTTPSampler.port"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        <stringProp name="HTTPSampler.protocol">https</stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                        <stringProp name="HTTPSampler.method">POST</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                        <boolProp name="HTTPSampler.image_parser">true</boolProp>
                        <boolProp name="HTTPSampler.monitor">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree>
                        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                          <collectionProp name="HeaderManager.headers">
                            <elementProp name="Accept-Language" elementType="Header">
                              <stringProp name="Header.name">DNT</stringProp>
                              <stringProp name="Header.value">1</stringProp>
                            </elementProp>
                          </collectionProp>
                        </HeaderManager>
                        <hashTree/>
                        <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="CNG_TP06_Return_To_Desktop -- Desktop screen has not appeared for claim number: ${CLAIMNUMBER}" enabled="true">
                          <collectionProp name="Asserion.test_strings">
                            <stringProp name="1514705186">My activities today</stringProp>
                          </collectionProp>
                          <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                          <boolProp name="Assertion.assume_success">false</boolProp>
                          <intProp name="Assertion.test_type">16</intProp>
                        </ResponseAssertion>
                        <hashTree/>
                        <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cTABS Extractor" enabled="true">
                          <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                          <stringProp name="RegexExtractor.refname">cTABS</stringProp>
                          <stringProp name="RegexExtractor.regex">&quot;id&quot;:&quot;TabBar:VacationTab&quot;,&quot;text&quot;:&quot;Vacation&quot;,&quot;menu&quot;:\{&quot;defaultType&quot;:&quot;gmenuitem&quot;},&quot;xtype&quot;:&quot;gbutton&quot;,&quot;disabled&quot;:true}],&quot;checksum&quot;:&quot;(.*?)&quot;}},\{</stringProp>
                          <stringProp name="RegexExtractor.template">$1$</stringProp>
                          <stringProp name="RegexExtractor.default">null</stringProp>
                          <stringProp name="RegexExtractor.match_number">1</stringProp>
                        </RegexExtractor>
                        <hashTree/>
                      </hashTree>
                      <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ThinkTime - 10" enabled="true">
                        <stringProp name="TestPlan.comments">This transaction will wait for 10 seconds</stringProp>
                      </GenericController>
                      <hashTree>
                        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="ThinkTime" enabled="true">
                          <stringProp name="ConstantTimer.delay">10000</stringProp>
                          <stringProp name="TestPlan.comments">   Converting seconds to milliseconds - 10s x 1000</stringProp>
                        </ConstantTimer>
                        <hashTree/>
                      </hashTree>
                    </hashTree>
                  </hashTree>
                  <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Test Action" enabled="true">
                    <intProp name="ActionProcessor.action">3</intProp>
                    <intProp name="ActionProcessor.target">0</intProp>
                    <stringProp name="ActionProcessor.duration"></stringProp>
                  </TestAction>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP06_ZZF_Loss_Details_Click_Vehicle_Make" enabled="true">
                <boolProp name="TransactionController.includeTimers">false</boolProp>
                <boolProp name="TransactionController.parent">true</boolProp>
              </TransactionController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_58" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="Claim:MenuLinks" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">Claim:MenuLinks</stringProp>
                        <stringProp name="Argument.value">${cCLAIMMENULINKS}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="csrfToken" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">csrfToken</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="TabBar:ClaimTab:ClaimTab_FindClaim" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">TabBar:ClaimTab:ClaimTab_FindClaim</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="QuickJump" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">QuickJump</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="Claim:MenuLinks_toggle" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">Claim:MenuLinks_toggle</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name=":tblinks" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">:tblinks</stringProp>
                        <stringProp name="Argument.value">${cTBLINKS}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name=":tabs" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">:tabs</stringProp>
                        <stringProp name="Argument.value">${cTABS_1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="infoBar" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">infoBar</stringProp>
                        <stringProp name="Argument.value">${cINFOBAR_6}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="Claim:ClaimMenuActions" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">Claim:ClaimMenuActions</stringProp>
                        <stringProp name="Argument.value">${cCLAIMMENUACTIONS}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="objFocusId" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">objFocusId</stringProp>
                        <stringProp name="Argument.value">ClaimLossDetails:ClaimLossDetailsScreen:LossDetailsPanelSet:LossDetailsCardCV:LossDetailsDV:EditableVehicleIncidentsLV:0:Make</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="eventSource" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">eventSource</stringProp>
                        <stringProp name="Argument.value">ClaimLossDetails:ClaimLossDetailsScreen:LossDetailsPanelSet:LossDetailsCardCV:LossDetailsDV:EditableVehicleIncidentsLV:0:Make_act</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                  <boolProp name="HTTPSampler.image_parser">true</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">DNT</stringProp>
                        <stringProp name="Header.value">1</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="CNG_TP06_ZZF_Loss_Details_Click_Vehicle_Make - Unable to view the vehicle incident screen,${USERNAME}" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-1926721658">Vehicle Incident</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="ResponseOk Extractor" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">ResponseOk</stringProp>
                    <stringProp name="RegexExtractor.regex">Vehicle Incident(.*?)</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">null</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ThinkTime - 10" enabled="true">
                  <stringProp name="TestPlan.comments">This transaction will wait for 10 seconds</stringProp>
                </GenericController>
                <hashTree>
                  <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="ThinkTime" enabled="true">
                    <stringProp name="ConstantTimer.delay">10000</stringProp>
                    <stringProp name="TestPlan.comments">   Converting seconds to milliseconds - 10s x 1000</stringProp>
                  </ConstantTimer>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If CNG_TP06_ZZF_Loss_Details_Click_Vehicle_Make &quot;${ResponseOk}&quot; == &quot;null&quot;" enabled="true">
                <stringProp name="IfController.condition">&quot;${ResponseOk}&quot; == &quot;null&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="-RETURNTODESKTOP" enabled="true">
                  <stringProp name="TestPlan.comments">This section contains the RETURNTODESKTOP part of Loadrunner</stringProp>
                </GenericController>
                <hashTree>
                  <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP06_Return_To_Desktop" enabled="true">
                    <boolProp name="TransactionController.includeTimers">false</boolProp>
                    <boolProp name="TransactionController.parent">true</boolProp>
                  </TransactionController>
                  <hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_66" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="Claim:MenuLinks" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">Claim:MenuLinks</stringProp>
                            <stringProp name="Argument.value">${cCLAIMMENULINKS}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="csrfToken" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">csrfToken</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="TabBar:ClaimTab:ClaimTab_FindClaim" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">TabBar:ClaimTab:ClaimTab_FindClaim</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="QuickJump" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">QuickJump</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="Claim:MenuLinks_toggle" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">Claim:MenuLinks_toggle</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name=":tblinks" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">:tblinks</stringProp>
                            <stringProp name="Argument.value">${cTBLINKS}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name=":tabs" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">:tabs</stringProp>
                            <stringProp name="Argument.value">${cTABS_1}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="infoBar" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">infoBar</stringProp>
                            <stringProp name="Argument.value">${cINFOBAR_6}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="Claim:ClaimMenuActions" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">Claim:ClaimMenuActions</stringProp>
                            <stringProp name="Argument.value">${cCLAIMMENUACTIONS}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="objFocusId" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">objFocusId</stringProp>
                            <stringProp name="Argument.value">TabBar:DesktopTab</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="eventSource" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">eventSource</stringProp>
                            <stringProp name="Argument.value">TabBar:DesktopTab_act</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol">https</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                      <stringProp name="HTTPSampler.method">POST</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                      <boolProp name="HTTPSampler.image_parser">true</boolProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="Accept-Language" elementType="Header">
                            <stringProp name="Header.name">DNT</stringProp>
                            <stringProp name="Header.value">1</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                      <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="CNG_TP06_Return_To_Desktop -- Desktop screen has not appeared for claim number: ${CLAIMNUMBER}" enabled="true">
                        <collectionProp name="Asserion.test_strings">
                          <stringProp name="1514705186">My activities today</stringProp>
                        </collectionProp>
                        <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                        <boolProp name="Assertion.assume_success">false</boolProp>
                        <intProp name="Assertion.test_type">16</intProp>
                      </ResponseAssertion>
                      <hashTree/>
                      <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cTABS Extractor" enabled="true">
                        <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                        <stringProp name="RegexExtractor.refname">cTABS</stringProp>
                        <stringProp name="RegexExtractor.regex">&quot;id&quot;:&quot;TabBar:VacationTab&quot;,&quot;text&quot;:&quot;Vacation&quot;,&quot;menu&quot;:\{&quot;defaultType&quot;:&quot;gmenuitem&quot;},&quot;xtype&quot;:&quot;gbutton&quot;,&quot;disabled&quot;:true}],&quot;checksum&quot;:&quot;(.*?)&quot;}},\{</stringProp>
                        <stringProp name="RegexExtractor.template">$1$</stringProp>
                        <stringProp name="RegexExtractor.default">null</stringProp>
                        <stringProp name="RegexExtractor.match_number">1</stringProp>
                      </RegexExtractor>
                      <hashTree/>
                    </hashTree>
                    <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ThinkTime - 10" enabled="true">
                      <stringProp name="TestPlan.comments">This transaction will wait for 10 seconds</stringProp>
                    </GenericController>
                    <hashTree>
                      <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="ThinkTime" enabled="true">
                        <stringProp name="ConstantTimer.delay">10000</stringProp>
                        <stringProp name="TestPlan.comments">   Converting seconds to milliseconds - 10s x 1000</stringProp>
                      </ConstantTimer>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                </hashTree>
                <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Test Action" enabled="true">
                  <intProp name="ActionProcessor.action">3</intProp>
                  <intProp name="ActionProcessor.target">0</intProp>
                  <stringProp name="ActionProcessor.duration"></stringProp>
                </TestAction>
                <hashTree/>
              </hashTree>
              <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP06_ZZG_Vehicle_Incident_Click_Driver_Name" enabled="true">
                <boolProp name="TransactionController.includeTimers">false</boolProp>
                <boolProp name="TransactionController.parent">true</boolProp>
              </TransactionController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_59" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="csrfToken" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">csrfToken</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="eventSource" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">eventSource</stringProp>
                        <stringProp name="Argument.value">VehicleIncidentPopup:EditVehicleIncidentScreen:VehicleIncidentDetailsPanelSet:InvolvedVehiclePanelSet:OccupantLV:0:name_act</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="TabBar:ClaimTab:ClaimTab_FindClaim" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">TabBar:ClaimTab:ClaimTab_FindClaim</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="QuickJump" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">QuickJump</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="Claim:MenuLinks_toggle" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">Claim:MenuLinks_toggle</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name=":tblinks" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">:tblinks</stringProp>
                        <stringProp name="Argument.value">${cTBLINKS}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name=":tabs" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">:tabs</stringProp>
                        <stringProp name="Argument.value">${cTABS_1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="infoBar" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">infoBar</stringProp>
                        <stringProp name="Argument.value">${cINFOBAR_6}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="Claim:MenuLinks" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">Claim:MenuLinks</stringProp>
                        <stringProp name="Argument.value">${cCLAIMMENULINKS}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="objFocusId" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">objFocusId</stringProp>
                        <stringProp name="Argument.value">VehicleIncidentPopup:EditVehicleIncidentScreen:VehicleIncidentDetailsPanelSet:InvolvedVehiclePanelSet:OccupantLV:0:name</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                  <boolProp name="HTTPSampler.image_parser">true</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">DNT</stringProp>
                        <stringProp name="Header.value">1</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="CNG_TP06_ZZG_Vehicle_Incident_Click_Driver_Name - Unable to display driver details screen for username,${USERNAME}" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="573825610">Driver Details</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="ResponseOk Extractor" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">ResponseOk</stringProp>
                    <stringProp name="RegexExtractor.regex">Driver Details(.*?)</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">null</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ThinkTime - 10" enabled="true">
                  <stringProp name="TestPlan.comments">This transaction will wait for 10 seconds</stringProp>
                </GenericController>
                <hashTree>
                  <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="ThinkTime" enabled="true">
                    <stringProp name="ConstantTimer.delay">10000</stringProp>
                    <stringProp name="TestPlan.comments">   Converting seconds to milliseconds - 10s x 1000</stringProp>
                  </ConstantTimer>
                  <hashTree/>
                </hashTree>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="-DRIVERDETAILS" enabled="true">
              <stringProp name="TestPlan.comments">This section contains the DRIVERDETAILS part of Loadrunner</stringProp>
            </GenericController>
            <hashTree>
              <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP06_ZZH_Driver_Details_Click_Edit" enabled="true">
                <boolProp name="TransactionController.includeTimers">false</boolProp>
                <boolProp name="TransactionController.parent">true</boolProp>
              </TransactionController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_60" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="csrfToken" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">csrfToken</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="eventSource" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">eventSource</stringProp>
                        <stringProp name="Argument.value">PostFNOLContactPopup:FNOLContactScreen:Edit_act</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="TabBar:ClaimTab:ClaimTab_FindClaim" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">TabBar:ClaimTab:ClaimTab_FindClaim</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="QuickJump" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">QuickJump</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="Claim:MenuLinks_toggle" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">Claim:MenuLinks_toggle</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name=":tblinks" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">:tblinks</stringProp>
                        <stringProp name="Argument.value">${cTBLINKS}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name=":tabs" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">:tabs</stringProp>
                        <stringProp name="Argument.value">${cTABS_1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="infoBar" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">infoBar</stringProp>
                        <stringProp name="Argument.value">${cINFOBAR_6}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="Claim:MenuLinks" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">Claim:MenuLinks</stringProp>
                        <stringProp name="Argument.value">${cCLAIMMENULINKS}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="objFocusId" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">objFocusId</stringProp>
                        <stringProp name="Argument.value">PostFNOLContactPopup:FNOLContactScreen:Edit</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                  <boolProp name="HTTPSampler.image_parser">true</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">DNT</stringProp>
                        <stringProp name="Header.value">1</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ThinkTime - 10" enabled="true">
                  <stringProp name="TestPlan.comments">This transaction will wait for 10 seconds</stringProp>
                </GenericController>
                <hashTree>
                  <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="ThinkTime" enabled="true">
                    <stringProp name="ConstantTimer.delay">10000</stringProp>
                    <stringProp name="TestPlan.comments">   Converting seconds to milliseconds - 10s x 1000</stringProp>
                  </ConstantTimer>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP06_ZZI_Driver_Details_Injured" enabled="true">
                <boolProp name="TransactionController.includeTimers">false</boolProp>
                <boolProp name="TransactionController.parent">true</boolProp>
              </TransactionController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_61" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="PostFNOLContactPopup:FNOLContactScreen:ContactDV:DriverRelationToOwner" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">PostFNOLContactPopup:FNOLContactScreen:ContactDV:DriverRelationToOwner</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="PostFNOLContactPopup:FNOLContactScreen:ContactDV:reason" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">PostFNOLContactPopup:FNOLContactScreen:ContactDV:reason</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="TabBar:ClaimTab:ClaimTab_FindClaim" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">TabBar:ClaimTab:ClaimTab_FindClaim</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="QuickJump" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">QuickJump</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="Claim:MenuLinks_toggle" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">Claim:MenuLinks_toggle</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="PostFNOLContactPopup:FNOLContactScreen:ContactDV:DriverPickUp" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">PostFNOLContactPopup:FNOLContactScreen:ContactDV:DriverPickUp</stringProp>
                        <stringProp name="Argument.value">Person:${cPERSON}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="PostFNOLContactPopup:FNOLContactScreen:ContactDV:InsuredRelation" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">PostFNOLContactPopup:FNOLContactScreen:ContactDV:InsuredRelation</stringProp>
                        <stringProp name="Argument.value">self</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="PostFNOLContactPopup:FNOLContactScreen:ContactDV:ReporterRelation" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">PostFNOLContactPopup:FNOLContactScreen:ContactDV:ReporterRelation</stringProp>
                        <stringProp name="Argument.value">self</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="PostFNOLContactPopup:FNOLContactScreen:ContactDV:MedicareEligible" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">PostFNOLContactPopup:FNOLContactScreen:ContactDV:MedicareEligible</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="objFocusId" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">objFocusId</stringProp>
                        <stringProp name="Argument.value">PostFNOLContactPopup:FNOLContactScreen:ContactDV:InjuredBoolean_true</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="eventParam" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">eventParam</stringProp>
                        <stringProp name="Argument.value">PostFNOLContactPopup:FNOLContactScreen:ContactDV:InjuredBoolean</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name=":tabs" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">:tabs</stringProp>
                        <stringProp name="Argument.value">${cTABS_1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name=":tblinks" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">:tblinks</stringProp>
                        <stringProp name="Argument.value">${cTBLINKS_1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="PostFNOLContactPopup:FNOLContactScreen:ContactDV:ReceivedTreatment" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">PostFNOLContactPopup:FNOLContactScreen:ContactDV:ReceivedTreatment</stringProp>
                        <stringProp name="Argument.value">No</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="PostFNOLContactPopup:FNOLContactScreen:ContactDV:SoughtTreatment" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">PostFNOLContactPopup:FNOLContactScreen:ContactDV:SoughtTreatment</stringProp>
                        <stringProp name="Argument.value">No</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="eventSource" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">eventSource</stringProp>
                        <stringProp name="Argument.value">_refresh_</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="csrfToken" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">csrfToken</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="Claim:MenuLinks" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">Claim:MenuLinks</stringProp>
                        <stringProp name="Argument.value">${cCLAIMMENULINKS}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="infoBar" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">infoBar</stringProp>
                        <stringProp name="Argument.value">${cINFOBAR_6}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="PostFNOLContactPopup:FNOLContactScreen:ContactDV:InjuredBoolean" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">PostFNOLContactPopup:FNOLContactScreen:ContactDV:InjuredBoolean</stringProp>
                        <stringProp name="Argument.value">true</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                  <boolProp name="HTTPSampler.image_parser">true</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">DNT</stringProp>
                        <stringProp name="Header.value">1</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ThinkTime - 10" enabled="true">
                  <stringProp name="TestPlan.comments">This transaction will wait for 10 seconds</stringProp>
                </GenericController>
                <hashTree>
                  <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="ThinkTime" enabled="true">
                    <stringProp name="ConstantTimer.delay">10000</stringProp>
                    <stringProp name="TestPlan.comments">   Converting seconds to milliseconds - 10s x 1000</stringProp>
                  </ConstantTimer>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP06_ZZJ_Driver_Details_Click_Update" enabled="true">
                <boolProp name="TransactionController.includeTimers">false</boolProp>
                <boolProp name="TransactionController.parent">true</boolProp>
              </TransactionController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_62" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name"></stringProp>
                        <stringProp name="Argument.value">&amp;QuickJump=&amp;Claim%3AMenuLinks_toggle=&amp;PostFNOLContactPopup%3AFNOLContactScreen%3AContactDV%3ADriverPickUp=Person%3A${cPERSON}&amp;PostFNOLContactPopup%3AFNOLContactScreen%3AContactDV%3AInsuredRelation=self&amp;PostFNOLContactPopup%3AFNOLContactScreen%3AContactDV%3AReporterRelation=self&amp;PostFNOLContactPopup%3AFNOLContactScreen%3AContactDV%3AMedicareEligible=Unknown&amp;PostFNOLContactPopup%3AFNOLContactScreen%3AContactDV%3ADriverRelationToOwner=&amp;PostFNOLContactPopup%3AFNOLContactScreen%3AContactDV%3Areason=&amp;PostFNOLContactPopup%3AFNOLContactScreen%3AContactDV%3AInjuredBoolean=true&amp;PostFNOLContactPopup%3AFNOLContactScreen%3AContactDV%3ADetailedInjuryType=97&amp;PostFNOLContactPopup%3AFNOLContactScreen%3AContactDV%3AInjuryDescription=Cut%20Hand&amp;PostFNOLContactPopup%3AFNOLContactScreen%3AContactDV%3ASoughtTreatment=No&amp;PostFNOLContactPopup%3AFNOLContactScreen%3AContactDV%3AReceivedTreatment=No&amp;%3Atblinks=${cTBLINKS_1_URL2}&amp;%3Atabs=${cTABS_1_URL2}&amp;infoBar=${cINFOBAR_6_URL2}&amp;Claim%3AMenuLinks=${cCLAIMMENULINKS_URL2}&amp;csrfToken=&amp;eventSource=_refresh_&amp;eventParam=PostFNOLContactPopup%3AFNOLContactScreen%3AContactDV%3AMedicareEligible&amp;objFocusId=PostFNOLContactPopup%3AFNOLContactScreen%3AContactDV%3AMedicareEligible</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                  <boolProp name="HTTPSampler.image_parser">true</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">DNT</stringProp>
                        <stringProp name="Header.value">1</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="CNG_TP06_ZZJ_Driver_Details_Click_Update - Unable to return to vehicle incident screen for username,${USERNAME}" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-1926721658">Vehicle Incident</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <ResultAction guiclass="ResultActionGui" testclass="ResultAction" testname="Result Status Action Handler" enabled="true">
                    <intProp name="OnError.action">4</intProp>
                  </ResultAction>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="ResponseOk Extractor" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">ResponseOk</stringProp>
                    <stringProp name="RegexExtractor.regex">Vehicle Incident(.*?)</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">null</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_63" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name"></stringProp>
                        <stringProp name="Argument.value">&amp;QuickJump=&amp;Claim%3AMenuLinks_toggle=&amp;PostFNOLContactPopup%3AFNOLContactScreen%3AContactDV%3ADriverPickUp=Person%3A${cPERSON}&amp;PostFNOLContactPopup%3AFNOLContactScreen%3AContactDV%3AInsuredRelation=self&amp;PostFNOLContactPopup%3AFNOLContactScreen%3AContactDV%3AReporterRelation=self&amp;PostFNOLContactPopup%3AFNOLContactScreen%3AContactDV%3AMedicareEligible=Unknown&amp;PostFNOLContactPopup%3AFNOLContactScreen%3AContactDV%3ADriverRelationToOwner=&amp;PostFNOLContactPopup%3AFNOLContactScreen%3AContactDV%3Areason=&amp;PostFNOLContactPopup%3AFNOLContactScreen%3AContactDV%3AInjuredBoolean=true&amp;PostFNOLContactPopup%3AFNOLContactScreen%3AContactDV%3ADetailedInjuryType=97&amp;PostFNOLContactPopup%3AFNOLContactScreen%3AContactDV%3AInjuryDescription=Cut%20Hand&amp;PostFNOLContactPopup%3AFNOLContactScreen%3AContactDV%3ASoughtTreatment=No&amp;PostFNOLContactPopup%3AFNOLContactScreen%3AContactDV%3AReceivedTreatment=No&amp;%3Atblinks=${cTBLINKS_1_URL2}&amp;%3Atabs=${cTABS_1_URL2}&amp;infoBar=${cINFOBAR_6_URL2}&amp;Claim%3AMenuLinks=${cCLAIMMENULINKS_URL2}&amp;csrfToken=&amp;eventSource=PostFNOLContactPopup%3AFNOLContactScreen%3AUpdate_act&amp;objFocusId=PostFNOLContactPopup%3AFNOLContactScreen%3AUpdate</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                  <boolProp name="HTTPSampler.image_parser">true</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">DNT</stringProp>
                        <stringProp name="Header.value">1</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ThinkTime - 10" enabled="true">
                  <stringProp name="TestPlan.comments">This transaction will wait for 10 seconds</stringProp>
                </GenericController>
                <hashTree>
                  <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="ThinkTime" enabled="true">
                    <stringProp name="ConstantTimer.delay">10000</stringProp>
                    <stringProp name="TestPlan.comments">   Converting seconds to milliseconds - 10s x 1000</stringProp>
                  </ConstantTimer>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If CNG_TP06_ZZJ_Driver_Details_Click_Update &quot;${ResponseOk}&quot; == &quot;null&quot;" enabled="true">
                <stringProp name="IfController.condition">&quot;${ResponseOk}&quot; == &quot;null&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="-DRIVERDETAILSCANCEL" enabled="true">
                  <stringProp name="TestPlan.comments">This section contains the DRIVERDETAILSCANCEL part of Loadrunner</stringProp>
                </GenericController>
                <hashTree>
                  <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP06_Driver_Details_Click_Cancel" enabled="true">
                    <boolProp name="TransactionController.includeTimers">false</boolProp>
                    <boolProp name="TransactionController.parent">true</boolProp>
                  </TransactionController>
                  <hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_74" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="PostFNOLContactPopup:FNOLContactScreen:ContactDV:DriverRelationToOwner" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">PostFNOLContactPopup:FNOLContactScreen:ContactDV:DriverRelationToOwner</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="PostFNOLContactPopup:FNOLContactScreen:ContactDV:reason" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">PostFNOLContactPopup:FNOLContactScreen:ContactDV:reason</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="TabBar:ClaimTab:ClaimTab_FindClaim" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">TabBar:ClaimTab:ClaimTab_FindClaim</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="QuickJump" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">QuickJump</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="Claim:MenuLinks_toggle" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">Claim:MenuLinks_toggle</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="PostFNOLContactPopup:FNOLContactScreen:ContactDV:DriverPickUp" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">PostFNOLContactPopup:FNOLContactScreen:ContactDV:DriverPickUp</stringProp>
                            <stringProp name="Argument.value">Person:${cPERSON}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="PostFNOLContactPopup:FNOLContactScreen:ContactDV:InsuredRelation" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">PostFNOLContactPopup:FNOLContactScreen:ContactDV:InsuredRelation</stringProp>
                            <stringProp name="Argument.value">self</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="PostFNOLContactPopup:FNOLContactScreen:ContactDV:ReporterRelation" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">PostFNOLContactPopup:FNOLContactScreen:ContactDV:ReporterRelation</stringProp>
                            <stringProp name="Argument.value">self</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="PostFNOLContactPopup:FNOLContactScreen:ContactDV:MedicareEligible" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">PostFNOLContactPopup:FNOLContactScreen:ContactDV:MedicareEligible</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="objFocusId" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">objFocusId</stringProp>
                            <stringProp name="Argument.value">PostFNOLContactPopup:FNOLContactScreen:Cancel</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name=":tabs" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">:tabs</stringProp>
                            <stringProp name="Argument.value">${cTABS_1}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name=":tblinks" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">:tblinks</stringProp>
                            <stringProp name="Argument.value">${cTBLINKS_1}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="PostFNOLContactPopup:FNOLContactScreen:ContactDV:ReceivedTreatment" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">PostFNOLContactPopup:FNOLContactScreen:ContactDV:ReceivedTreatment</stringProp>
                            <stringProp name="Argument.value">No</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="PostFNOLContactPopup:FNOLContactScreen:ContactDV:SoughtTreatment" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">PostFNOLContactPopup:FNOLContactScreen:ContactDV:SoughtTreatment</stringProp>
                            <stringProp name="Argument.value">No</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="eventSource" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">eventSource</stringProp>
                            <stringProp name="Argument.value">PostFNOLContactPopup:FNOLContactScreen:Cancel_act</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="csrfToken" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">csrfToken</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="Claim:MenuLinks" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">Claim:MenuLinks</stringProp>
                            <stringProp name="Argument.value">${cCLAIMMENULINKS}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="infoBar" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">infoBar</stringProp>
                            <stringProp name="Argument.value">${cINFOBAR_6}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="PostFNOLContactPopup:FNOLContactScreen:ContactDV:InjuredBoolean" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">PostFNOLContactPopup:FNOLContactScreen:ContactDV:InjuredBoolean</stringProp>
                            <stringProp name="Argument.value">false</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol">https</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                      <stringProp name="HTTPSampler.method">POST</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                      <boolProp name="HTTPSampler.image_parser">true</boolProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="Accept-Language" elementType="Header">
                            <stringProp name="Header.name">DNT</stringProp>
                            <stringProp name="Header.value">1</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                    </hashTree>
                    <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ThinkTime - 10" enabled="true">
                      <stringProp name="TestPlan.comments">This transaction will wait for 10 seconds</stringProp>
                    </GenericController>
                    <hashTree>
                      <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="ThinkTime" enabled="true">
                        <stringProp name="ConstantTimer.delay">10000</stringProp>
                        <stringProp name="TestPlan.comments">   Converting seconds to milliseconds - 10s x 1000</stringProp>
                      </ConstantTimer>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                </hashTree>
                <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Test Action" enabled="true">
                  <intProp name="ActionProcessor.action">3</intProp>
                  <intProp name="ActionProcessor.target">0</intProp>
                  <stringProp name="ActionProcessor.duration"></stringProp>
                </TestAction>
                <hashTree/>
              </hashTree>
              <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP06_ZZK_Vehicle_Incident_OK_To_Loss_Details" enabled="true">
                <boolProp name="TransactionController.includeTimers">false</boolProp>
                <boolProp name="TransactionController.parent">true</boolProp>
              </TransactionController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_64" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="csrfToken" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">csrfToken</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="eventSource" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">eventSource</stringProp>
                        <stringProp name="Argument.value">VehicleIncidentPopup:__crumb___act</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="TabBar:ClaimTab:ClaimTab_FindClaim" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">TabBar:ClaimTab:ClaimTab_FindClaim</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="QuickJump" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">QuickJump</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="Claim:MenuLinks_toggle" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">Claim:MenuLinks_toggle</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name=":tblinks" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">:tblinks</stringProp>
                        <stringProp name="Argument.value">${cTBLINKS}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name=":tabs" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">:tabs</stringProp>
                        <stringProp name="Argument.value">${cTABS_1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="infoBar" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">infoBar</stringProp>
                        <stringProp name="Argument.value">${cINFOBAR_6}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="Claim:MenuLinks" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">Claim:MenuLinks</stringProp>
                        <stringProp name="Argument.value">${cCLAIMMENULINKS}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="objFocusId" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">objFocusId</stringProp>
                        <stringProp name="Argument.value">VehicleIncidentPopup:__crumb__</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                  <boolProp name="HTTPSampler.image_parser">true</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">DNT</stringProp>
                        <stringProp name="Header.value">1</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="CNG_TP06_ZZK_Vehicle_Incident_OK_To_Loss_Details- Unsuccessful nNumber, ${USERNAME}" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-338071995">Loss Details</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <ResultAction guiclass="ResultActionGui" testclass="ResultAction" testname="Result Status Action Handler" enabled="true">
                    <intProp name="OnError.action">4</intProp>
                  </ResultAction>
                  <hashTree/>
                </hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ThinkTime - 10" enabled="true">
                  <stringProp name="TestPlan.comments">This transaction will wait for 10 seconds</stringProp>
                </GenericController>
                <hashTree>
                  <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="ThinkTime" enabled="true">
                    <stringProp name="ConstantTimer.delay">10000</stringProp>
                    <stringProp name="TestPlan.comments">   Converting seconds to milliseconds - 10s x 1000</stringProp>
                  </ConstantTimer>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP06_ZZL_Loss_Details_Return_To_Summary" enabled="true">
                <boolProp name="TransactionController.includeTimers">false</boolProp>
                <boolProp name="TransactionController.parent">true</boolProp>
              </TransactionController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_65" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="Claim:MenuLinks" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">Claim:MenuLinks</stringProp>
                        <stringProp name="Argument.value">${cCLAIMMENULINKS}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="csrfToken" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">csrfToken</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="TabBar:ClaimTab:ClaimTab_FindClaim" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">TabBar:ClaimTab:ClaimTab_FindClaim</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="QuickJump" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">QuickJump</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="Claim:MenuLinks_toggle" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">Claim:MenuLinks_toggle</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name=":tblinks" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">:tblinks</stringProp>
                        <stringProp name="Argument.value">${cTBLINKS}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name=":tabs" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">:tabs</stringProp>
                        <stringProp name="Argument.value">${cTABS_1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="infoBar" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">infoBar</stringProp>
                        <stringProp name="Argument.value">${cINFOBAR_6}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="Claim:ClaimMenuActions" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">Claim:ClaimMenuActions</stringProp>
                        <stringProp name="Argument.value">${cCLAIMMENUACTIONS}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="eventSource" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">eventSource</stringProp>
                        <stringProp name="Argument.value">Claim:MenuLinks:Claim_ClaimSummaryGroup:ClaimSummaryGroup_ClaimSummary_act</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                  <boolProp name="HTTPSampler.image_parser">true</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">DNT</stringProp>
                        <stringProp name="Header.value">1</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="CNG_TP06_ZZL_Loss_Details_Return_To_Summary - Unsuccessful nNumber,${USERNAME}" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-192987258">Summary</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <ResultAction guiclass="ResultActionGui" testclass="ResultAction" testname="Result Status Action Handler" enabled="true">
                    <intProp name="OnError.action">4</intProp>
                  </ResultAction>
                  <hashTree/>
                </hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ThinkTime - 10" enabled="true">
                  <stringProp name="TestPlan.comments">This transaction will wait for 10 seconds</stringProp>
                </GenericController>
                <hashTree>
                  <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="ThinkTime" enabled="true">
                    <stringProp name="ConstantTimer.delay">10000</stringProp>
                    <stringProp name="TestPlan.comments">   Converting seconds to milliseconds - 10s x 1000</stringProp>
                  </ConstantTimer>
                  <hashTree/>
                </hashTree>
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="-CANCELCLAIMBASICINFORMATION" enabled="false">
          <stringProp name="TestPlan.comments">This section contains the CANCELCLAIMBASICINFORMATION part of Loadrunner</stringProp>
        </GenericController>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP06_Cancel_Claim_Basic_Information" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_10" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_BasicInfoScreen:PanelRow:NewClaimPeopleDV:Claim_ReportedByType" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_BasicInfoScreen:PanelRow:NewClaimPeopleDV:Claim_ReportedByType</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_BasicInfoScreen:PanelRow:NewClaimPeopleDV:Notification_ReportedDate" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_BasicInfoScreen:PanelRow:NewClaimPeopleDV:Notification_ReportedDate</stringProp>
                    <stringProp name="Argument.value">${DATE}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="TabBar:ClaimTab:ClaimTab_FindClaim" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">TabBar:ClaimTab:ClaimTab_FindClaim</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="QuickJump" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">QuickJump</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="FNOLWizard:0_toggle" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">FNOLWizard:0_toggle</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="FNOLWizard:1_toggle" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">FNOLWizard:1_toggle</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_BasicInfoScreen:PanelRow:NewClaimPeopleDV:HowReported" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_BasicInfoScreen:PanelRow:NewClaimPeopleDV:HowReported</stringProp>
                    <stringProp name="Argument.value">phone</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_BasicInfoScreen:PanelRow:NewClaimPeopleDV:ReportRecorded" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_BasicInfoScreen:PanelRow:NewClaimPeopleDV:ReportRecorded</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_BasicInfoScreen:PanelRow:NewClaimPeopleDV:ReportedBy_NameNew" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_BasicInfoScreen:PanelRow:NewClaimPeopleDV:ReportedBy_NameNew</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="objFocusId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">objFocusId</stringProp>
                    <stringProp name="Argument.value">FNOLWizard:Cancel</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="FNOLWizard:FNOLMenuActions" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">FNOLWizard:FNOLMenuActions</stringProp>
                    <stringProp name="Argument.value">${cFNOLMENUACTIONS}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="infoBar" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">infoBar</stringProp>
                    <stringProp name="Argument.value">${cINFOBAR_4}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name=":tabs" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">:tabs</stringProp>
                    <stringProp name="Argument.value">${cTABS}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name=":tblinks" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">:tblinks</stringProp>
                    <stringProp name="Argument.value">${cTBLINKS_1}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="eventSource" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">eventSource</stringProp>
                    <stringProp name="Argument.value">FNOLWizard:Cancel_act</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="csrfToken" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">csrfToken</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="FNOLWizard:1" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">FNOLWizard:1</stringProp>
                    <stringProp name="Argument.value">cFNOLWIZARD1_1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="FNOLWizard:0" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">FNOLWizard:0</stringProp>
                    <stringProp name="Argument.value">${cFNOLWIZARD0_2}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_BasicInfoScreen:PanelRow:NewClaimPeopleDV:HiddenInsured" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_BasicInfoScreen:PanelRow:NewClaimPeopleDV:HiddenInsured</stringProp>
                    <stringProp name="Argument.value">Person:${PERSON}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <boolProp name="HTTPSampler.image_parser">true</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">DNT</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="CNG_TP06_Cancel_Claim_Basic_Information - Desktop screen not displayed  ${POLICYNUMBER} , ${POLEFFDATE} , ${POLEXPDATE} , ${PHONENUMBER} ,${LASTNAME},${FIRSTNAME} ,${STATE}, ${POLICYTYPE},${AGREEMENTSOURCE}" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-252897267">Activities</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ThinkTime - 10" enabled="true">
              <stringProp name="TestPlan.comments">This transaction will wait for 10 seconds</stringProp>
            </GenericController>
            <hashTree>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="ThinkTime" enabled="true">
                <stringProp name="ConstantTimer.delay">10000</stringProp>
                <stringProp name="TestPlan.comments">   Converting seconds to milliseconds - 10s x 1000</stringProp>
              </ConstantTimer>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="-CANCELCLAIMADDCLAIMINFORMATION" enabled="false">
          <stringProp name="TestPlan.comments">This section contains the CANCELCLAIMADDCLAIMINFORMATION part of Loadrunner</stringProp>
        </GenericController>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP06_Cancel_Claim_Add_Claim_Information" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_13" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:anyInjuryAuto" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:anyInjuryAuto</stringProp>
                    <stringProp name="Argument.value">false</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:AddressDetailInputSetRef:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:Address_Picker" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:AddressDetailInputSetRef:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:Address_Picker</stringProp>
                    <stringProp name="Argument.value">__new</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="eventSource" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">eventSource</stringProp>
                    <stringProp name="Argument.value">FNOLWizard:Cancel_act</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="TabBar:ClaimTab:ClaimTab_FindClaim" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">TabBar:ClaimTab:ClaimTab_FindClaim</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="csrfToken" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">csrfToken</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="QuickJump" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">QuickJump</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="FNOLWizard:1" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">FNOLWizard:1</stringProp>
                    <stringProp name="Argument.value">${cFNOLWIZARD1_1}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="FNOLWizard:0_toggle" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">FNOLWizard:0_toggle</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="FNOLWizard:0" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">FNOLWizard:0</stringProp>
                    <stringProp name="Argument.value">${cFNOLWIZARD0_3}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="FNOLWizard:1_toggle" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">FNOLWizard:1_toggle</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:Claim_LossCategory" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:Claim_LossCategory</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:Description" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:Description</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:Fault" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:Fault</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="objFocusId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">objFocusId</stringProp>
                    <stringProp name="Argument.value">FNOLWizard:Cancel</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="FNOLWizard:FNOLMenuActions" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">FNOLWizard:FNOLMenuActions</stringProp>
                    <stringProp name="Argument.value">${cFNOLMENUACTIONS}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="infoBar" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">infoBar</stringProp>
                    <stringProp name="Argument.value">${cINFOBAR_4}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name=":tabs" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">:tabs</stringProp>
                    <stringProp name="Argument.value">${cTABS}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:AddressDetailInputSetRef:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:State" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:AddressDetailInputSetRef:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:State</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:AddressDetailInputSetRef:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:County" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:AddressDetailInputSetRef:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:County</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:AddressDetailInputSetRef:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:City" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:AddressDetailInputSetRef:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:City</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:AddressDetailInputSetRef:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:AddressLine2" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:AddressDetailInputSetRef:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:AddressLine2</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name=":tblinks" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">:tblinks</stringProp>
                    <stringProp name="Argument.value">${cTBLINKS_1}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:Claim_PermissionRequired" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:Claim_PermissionRequired</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:AddressDetailInputSetRef:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:Country" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:AddressDetailInputSetRef:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:Country</stringProp>
                    <stringProp name="Argument.value">US</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:AddressDetailInputSetRef:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:PostalCode" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:AddressDetailInputSetRef:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:PostalCode</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:AddressDetailInputSetRef:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:AddressLine1" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_NewLossDetailScreen:LossDetailsPanel:FNOLWizard_NewLossDetailsPanelSet:LossDetailsAddressDV:AddressDetailInputSetRef:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:AddressLine1</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <boolProp name="HTTPSampler.image_parser">true</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">DNT</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="CNG_TP06_Cancel_Claim_Add_Claim_Information -- Desktop screen not displayed ${POLICYNUMBER} , ${POLEFFDATE} , ${POLEXPDATE} , ${PHONENUMBER} ,${LASTNAME},${FIRSTNAME} ,${STATE}, ${POLICYTYPE},${AGREEMENTSOURCE}" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-252897267">Activities</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ThinkTime - 10" enabled="true">
              <stringProp name="TestPlan.comments">This transaction will wait for 10 seconds</stringProp>
            </GenericController>
            <hashTree>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="ThinkTime" enabled="true">
                <stringProp name="ConstantTimer.delay">10000</stringProp>
                <stringProp name="TestPlan.comments">   Converting seconds to milliseconds - 10s x 1000</stringProp>
              </ConstantTimer>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="-CANCELCLAIMSERVICES" enabled="false">
          <stringProp name="TestPlan.comments">This section contains the CANCELCLAIMSERVICES part of Loadrunner</stringProp>
        </GenericController>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP06_Cancel_Claim_Services" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_31" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="FNOLWizard:FNOLMenuActions" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">FNOLWizard:FNOLMenuActions</stringProp>
                    <stringProp name="Argument.value">${cFNOLMENUACTIONS}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="FNOLWizard:0" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">FNOLWizard:0</stringProp>
                    <stringProp name="Argument.value">${cFNOLWIZARD0_5}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="TabBar:ClaimTab:ClaimTab_FindClaim" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">TabBar:ClaimTab:ClaimTab_FindClaim</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="QuickJump" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">QuickJump</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="FNOLWizard:0_toggle" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">FNOLWizard:0_toggle</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="FNOLWizard:1_toggle" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">FNOLWizard:1_toggle</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name=":tblinks" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">:tblinks</stringProp>
                    <stringProp name="Argument.value">${CTBLINKS_1}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name=":tabs" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">:tabs</stringProp>
                    <stringProp name="Argument.value">${cTABS}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="infoBar" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">infoBar</stringProp>
                    <stringProp name="Argument.value">${cINFOBAR_4}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="objFocusId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">objFocusId</stringProp>
                    <stringProp name="Argument.value">FNOLWizard:Cancel</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="eventSource" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">eventSource</stringProp>
                    <stringProp name="Argument.value">FNOLWizard:Cancel_act</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="csrfToken" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">csrfToken</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="FNOLWizard:1" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">FNOLWizard:1</stringProp>
                    <stringProp name="Argument.value">${cFNOLWIZARD1_1}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <boolProp name="HTTPSampler.image_parser">true</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">DNT</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="CNG_TP06_Cancel_Claim_Services --Desktop screen not displayed ${POLICYNUMBER} , ${POLEFFDATE} , ${POLEXPDATE} , ${PHONENUMBER} ,${LASTNAME},${FIRSTNAME} ,${STATE}, ${POLICYTYPE},${AGREEMENTSOURCE}" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-252897267">Activities</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ThinkTime - 10" enabled="true">
              <stringProp name="TestPlan.comments">This transaction will wait for 10 seconds</stringProp>
            </GenericController>
            <hashTree>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="ThinkTime" enabled="true">
                <stringProp name="ConstantTimer.delay">10000</stringProp>
                <stringProp name="TestPlan.comments">   Converting seconds to milliseconds - 10s x 1000</stringProp>
              </ConstantTimer>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="-CANCELCLAIMSAVEANDASSIGN" enabled="false">
          <stringProp name="TestPlan.comments">This section contains the CANCELCLAIMSAVEANDASSIGN part of Loadrunner</stringProp>
        </GenericController>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP06_Cancel_Claim_Save_And_Assign" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_64" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="infoBar" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">infoBar</stringProp>
                    <stringProp name="Argument.value">${cINFOBAR_4}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="FNOLWizard:FNOLMenuActions" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">FNOLWizard:FNOLMenuActions</stringProp>
                    <stringProp name="Argument.value">${cFNOLMENUACTIONS}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="TabBar:ClaimTab:ClaimTab_FindClaim" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">TabBar:ClaimTab:ClaimTab_FindClaim</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="QuickJump" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">QuickJump</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="FNOLWizard:0_toggle" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">FNOLWizard:0_toggle</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="FNOLWizard:1_toggle" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">FNOLWizard:1_toggle</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="FNOLWizard:FNOLWizardStepSet:FNOLWizard_AssignSaveScreen:Note" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">FNOLWizard:FNOLWizardStepSet:FNOLWizard_AssignSaveScreen:Note</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name=":tblinks" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">:tblinks</stringProp>
                    <stringProp name="Argument.value">${cTBLINKS_1}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name=":tabs" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">:tabs</stringProp>
                    <stringProp name="Argument.value">${cTABS}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="objFocusId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">objFocusId</stringProp>
                    <stringProp name="Argument.value">FNOLWizard:Cancel</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="eventSource" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">eventSource</stringProp>
                    <stringProp name="Argument.value">FNOLWizard:Cancel_act</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="csrfToken" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">csrfToken</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="FNOLWizard:1" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">FNOLWizard:1</stringProp>
                    <stringProp name="Argument.value">${cFNOLWIZARD1_1}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="FNOLWizard:0" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">FNOLWizard:0</stringProp>
                    <stringProp name="Argument.value">${cFNOLWIZARD0_6}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <boolProp name="HTTPSampler.image_parser">true</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">DNT</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="CNG_TP06_Cancel_Claim_Save_And_Assign --Desktop screen not displayed  ${POLICYNUMBER} , ${POLEFFDATE} , ${POLEXPDATE} , ${PHONENUMBER} ,${LASTNAME},${FIRSTNAME} ,${STATE}, ${POLICYTYPE},${AGREEMENTSOURCE}" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-252897267">Activities</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ThinkTime - 0" enabled="true">
              <stringProp name="TestPlan.comments">This transaction will wait for 0 seconds</stringProp>
            </GenericController>
            <hashTree>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="ThinkTime" enabled="true">
                <stringProp name="ConstantTimer.delay">0</stringProp>
                <stringProp name="TestPlan.comments">   Converting seconds to milliseconds - 0s x 1000</stringProp>
              </ConstantTimer>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="-DRIVERDETAILSCANCEL" enabled="false">
          <stringProp name="TestPlan.comments">This section contains the DRIVERDETAILSCANCEL part of Loadrunner</stringProp>
        </GenericController>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP06_Driver_Details_Click_Cancel" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_74" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="PostFNOLContactPopup:FNOLContactScreen:ContactDV:DriverRelationToOwner" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">PostFNOLContactPopup:FNOLContactScreen:ContactDV:DriverRelationToOwner</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="PostFNOLContactPopup:FNOLContactScreen:ContactDV:reason" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">PostFNOLContactPopup:FNOLContactScreen:ContactDV:reason</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="TabBar:ClaimTab:ClaimTab_FindClaim" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">TabBar:ClaimTab:ClaimTab_FindClaim</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="QuickJump" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">QuickJump</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="Claim:MenuLinks_toggle" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">Claim:MenuLinks_toggle</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="PostFNOLContactPopup:FNOLContactScreen:ContactDV:DriverPickUp" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">PostFNOLContactPopup:FNOLContactScreen:ContactDV:DriverPickUp</stringProp>
                    <stringProp name="Argument.value">Person:${cPERSON}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="PostFNOLContactPopup:FNOLContactScreen:ContactDV:InsuredRelation" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">PostFNOLContactPopup:FNOLContactScreen:ContactDV:InsuredRelation</stringProp>
                    <stringProp name="Argument.value">self</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="PostFNOLContactPopup:FNOLContactScreen:ContactDV:ReporterRelation" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">PostFNOLContactPopup:FNOLContactScreen:ContactDV:ReporterRelation</stringProp>
                    <stringProp name="Argument.value">self</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="PostFNOLContactPopup:FNOLContactScreen:ContactDV:MedicareEligible" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">PostFNOLContactPopup:FNOLContactScreen:ContactDV:MedicareEligible</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="objFocusId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">objFocusId</stringProp>
                    <stringProp name="Argument.value">PostFNOLContactPopup:FNOLContactScreen:Cancel</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name=":tabs" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">:tabs</stringProp>
                    <stringProp name="Argument.value">${cTABS_1}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name=":tblinks" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">:tblinks</stringProp>
                    <stringProp name="Argument.value">${cTBLINKS_1}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="PostFNOLContactPopup:FNOLContactScreen:ContactDV:ReceivedTreatment" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">PostFNOLContactPopup:FNOLContactScreen:ContactDV:ReceivedTreatment</stringProp>
                    <stringProp name="Argument.value">No</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="PostFNOLContactPopup:FNOLContactScreen:ContactDV:SoughtTreatment" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">PostFNOLContactPopup:FNOLContactScreen:ContactDV:SoughtTreatment</stringProp>
                    <stringProp name="Argument.value">No</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="eventSource" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">eventSource</stringProp>
                    <stringProp name="Argument.value">PostFNOLContactPopup:FNOLContactScreen:Cancel_act</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="csrfToken" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">csrfToken</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="Claim:MenuLinks" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">Claim:MenuLinks</stringProp>
                    <stringProp name="Argument.value">${cCLAIMMENULINKS}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="infoBar" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">infoBar</stringProp>
                    <stringProp name="Argument.value">${cINFOBAR_6}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="PostFNOLContactPopup:FNOLContactScreen:ContactDV:InjuredBoolean" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">PostFNOLContactPopup:FNOLContactScreen:ContactDV:InjuredBoolean</stringProp>
                    <stringProp name="Argument.value">false</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <boolProp name="HTTPSampler.image_parser">true</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">DNT</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ThinkTime - 10" enabled="true">
              <stringProp name="TestPlan.comments">This transaction will wait for 10 seconds</stringProp>
            </GenericController>
            <hashTree>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="ThinkTime" enabled="true">
                <stringProp name="ConstantTimer.delay">10000</stringProp>
                <stringProp name="TestPlan.comments">   Converting seconds to milliseconds - 10s x 1000</stringProp>
              </ConstantTimer>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="-RETURNTOADDCLAIMINFO" enabled="false">
          <stringProp name="TestPlan.comments">This section contains the RETURNTOADDCLAIMINFO part of Loadrunner</stringProp>
        </GenericController>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP06_Vehicle_Details_Return_To_Add_Claim_Info" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_23" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_VehicleType" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_VehicleType</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Style" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Style</stringProp>
                    <stringProp name="Argument.value">passengercar</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Description" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Description</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="TabBar:ClaimTab:ClaimTab_FindClaim" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">TabBar:ClaimTab:ClaimTab_FindClaim</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:SeverityOfDamage" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:SeverityOfDamage</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="QuickJump" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">QuickJump</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:collPoint" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:collPoint</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="FNOLWizard:0_toggle" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">FNOLWizard:0_toggle</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:existingEstimate" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:existingEstimate</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="FNOLWizard:1_toggle" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">FNOLWizard:1_toggle</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name=":tabs" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">:tabs</stringProp>
                    <stringProp name="Argument.value">${cTABS}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:LossParty" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:LossParty</stringProp>
                    <stringProp name="Argument.value">true</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name=":tblinks" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">:tblinks</stringProp>
                    <stringProp name="Argument.value">${cTBLINKS_1}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:incidentOnly" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:incidentOnly</stringProp>
                    <stringProp name="Argument.value">false</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:PreExistingDamage" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:PreExistingDamage</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Picker" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Picker</stringProp>
                    <stringProp name="Argument.value">Vehicle:${cVEHICLE}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Exposure_AirbagsDeployed" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Exposure_AirbagsDeployed</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:storageFeesCharged" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:storageFeesCharged</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:VehicleLocDuringBusHrs_RangeInput" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:VehicleLocDuringBusHrs_RangeInput</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="objFocusId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">objFocusId</stringProp>
                    <stringProp name="Argument.value">FNOLVehicleIncidentPopup:__crumb__</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="eventSource" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">eventSource</stringProp>
                    <stringProp name="Argument.value">FNOLVehicleIncidentPopup:__crumb___act</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="csrfToken" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">csrfToken</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="FNOLWizard:1" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">FNOLWizard:1</stringProp>
                    <stringProp name="Argument.value">${cFNOLWIZARD1}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="FNOLWizard:0" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">FNOLWizard:0</stringProp>
                    <stringProp name="Argument.value">${cFNOLWIZARD0_4}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="infoBar" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">infoBar</stringProp>
                    <stringProp name="Argument.value">${cINFOBAR_4}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:vehicleTowed" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:vehicleTowed</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Color" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Color</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Model_Dropdown" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Model_Dropdown</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Make_Dropdown" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Make_Dropdown</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Year" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Year</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Owner_Picker" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Owner_Picker</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_State" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_State</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_LicensePlate" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_LicensePlate</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Mileage" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_Mileage</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_VIN" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">FNOLVehicleIncidentPopup:FNOLVehicleIncidentScreen:Vehicle_VIN</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <boolProp name="HTTPSampler.image_parser">true</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">DNT</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname=" CNG_TP06_Vehicle_Details_Return_To_Add_Claim_Info Add Claim Info screen not displayed , ${POLICYNUMBER} , ${POLEFFDATE} , ${POLEXPDATE} , ${PHONENUMBER} ,${LASTNAME},${FIRSTNAME} ,${STATE}, ${POLICYTYPE},${AGREEMENTSOURCE}" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1685924503">Add claim information</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ThinkTime - 10" enabled="true">
              <stringProp name="TestPlan.comments">This transaction will wait for 10 seconds</stringProp>
            </GenericController>
            <hashTree>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="ThinkTime" enabled="true">
                <stringProp name="ConstantTimer.delay">10000</stringProp>
                <stringProp name="TestPlan.comments">   Converting seconds to milliseconds - 10s x 1000</stringProp>
              </ConstantTimer>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="-RETURNTODESKTOP" enabled="false">
          <stringProp name="TestPlan.comments">This section contains the RETURNTODESKTOP part of Loadrunner</stringProp>
        </GenericController>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP06_Return_To_Desktop" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_66" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="Claim:MenuLinks" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">Claim:MenuLinks</stringProp>
                    <stringProp name="Argument.value">${cCLAIMMENULINKS}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="csrfToken" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">csrfToken</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="TabBar:ClaimTab:ClaimTab_FindClaim" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">TabBar:ClaimTab:ClaimTab_FindClaim</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="QuickJump" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">QuickJump</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="Claim:MenuLinks_toggle" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">Claim:MenuLinks_toggle</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name=":tblinks" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">:tblinks</stringProp>
                    <stringProp name="Argument.value">${cTBLINKS}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name=":tabs" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">:tabs</stringProp>
                    <stringProp name="Argument.value">${cTABS_1}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="infoBar" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">infoBar</stringProp>
                    <stringProp name="Argument.value">${cINFOBAR_6}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="Claim:ClaimMenuActions" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">Claim:ClaimMenuActions</stringProp>
                    <stringProp name="Argument.value">${cCLAIMMENUACTIONS}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="objFocusId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">objFocusId</stringProp>
                    <stringProp name="Argument.value">TabBar:DesktopTab</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="eventSource" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">eventSource</stringProp>
                    <stringProp name="Argument.value">TabBar:DesktopTab_act</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <boolProp name="HTTPSampler.image_parser">true</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">DNT</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="CNG_TP06_Return_To_Desktop -- Desktop screen has not appeared for claim number: ${CLAIMNUMBER}" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1514705186">My activities today</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cTABS Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">cTABS</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;id&quot;:&quot;TabBar:VacationTab&quot;,&quot;text&quot;:&quot;Vacation&quot;,&quot;menu&quot;:\{&quot;defaultType&quot;:&quot;gmenuitem&quot;},&quot;xtype&quot;:&quot;gbutton&quot;,&quot;disabled&quot;:true}],&quot;checksum&quot;:&quot;(.*?)&quot;}},\{</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">null</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ThinkTime - 10" enabled="true">
              <stringProp name="TestPlan.comments">This transaction will wait for 10 seconds</stringProp>
            </GenericController>
            <hashTree>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="ThinkTime" enabled="true">
                <stringProp name="ConstantTimer.delay">10000</stringProp>
                <stringProp name="TestPlan.comments">   Converting seconds to milliseconds - 10s x 1000</stringProp>
              </ConstantTimer>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="-RETURNTOVEHICLEDETAILS" enabled="false">
          <stringProp name="TestPlan.comments">This section contains the RETURNTOVEHICLEDETAILS part of Loadrunner</stringProp>
        </GenericController>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP06_Driver_Details_Return_To_Vehicle_Details" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_29" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name=":tblinks" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">:tblinks</stringProp>
                    <stringProp name="Argument.value">${cTBLINKS_1}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name=":tabs" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">:tabs</stringProp>
                    <stringProp name="Argument.value">${cTABS}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="TabBar:ClaimTab:ClaimTab_FindClaim" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">TabBar:ClaimTab:ClaimTab_FindClaim</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="QuickJump" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">QuickJump</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="FNOLWizard:0_toggle" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">FNOLWizard:0_toggle</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="FNOLWizard:1_toggle" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">FNOLWizard:1_toggle</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="FNOLContactPopup:FNOLContactScreen:Person" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">FNOLContactPopup:FNOLContactScreen:Person</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="FNOLContactPopup:FNOLContactScreen:DriverRelationToOwner" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">FNOLContactPopup:FNOLContactScreen:DriverRelationToOwner</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="FNOLContactPopup:FNOLContactScreen:reason" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">FNOLContactPopup:FNOLContactScreen:reason</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="eventSource" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">eventSource</stringProp>
                    <stringProp name="Argument.value">FNOLContactPopup:__crumb___act</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="csrfToken" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">csrfToken</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="FNOLWizard:1" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">FNOLWizard:1</stringProp>
                    <stringProp name="Argument.value">${cFNOLWIZARD1}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="FNOLWizard:0" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">FNOLWizard:0</stringProp>
                    <stringProp name="Argument.value">${cFNOLWIZARD0_4}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="objFocusId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">objFocusId</stringProp>
                    <stringProp name="Argument.value">FNOLContactPopup:__crumb__</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="infoBar" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">infoBar</stringProp>
                    <stringProp name="Argument.value">${cINFOBAR_4}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <boolProp name="HTTPSampler.image_parser">true</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">DNT</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="CNG_TP06_Driver_Details_Return_To_Vehicle_Details -- Vehicle details screen not displayed ${POLICYNUMBER} , ${POLEFFDATE} , ${POLEXPDATE} , ${PHONENUMBER} ,${LASTNAME},${FIRSTNAME} ,${STATE}, ${POLICYTYPE},${AGREEMENTSOURCE}" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="938574094">Vehicle Details</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ThinkTime - 10" enabled="true">
              <stringProp name="TestPlan.comments">This transaction will wait for 10 seconds</stringProp>
            </GenericController>
            <hashTree>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="ThinkTime" enabled="true">
                <stringProp name="ConstantTimer.delay">10000</stringProp>
                <stringProp name="TestPlan.comments">   Converting seconds to milliseconds - 10s x 1000</stringProp>
              </ConstantTimer>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="-LOGOUT" enabled="true">
          <stringProp name="TestPlan.comments">This section contains the LOGOUT part of Loadrunner</stringProp>
        </GenericController>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP06_ZZL_Logout" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_132" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">TabBar%3AClaimTab%3AClaimTab_FindClaim=&amp;QuickJump=&amp;Desktop%3AMenuLinks_toggle=&amp;DesktopActivities%3ADesktopActivitiesScreen%3ADesktopActivitiesLV%3ADesktopActivitiesFilter=AndFilter%2FMy%20activities%20today&amp;%3Atblinks=${cTBLINKS_URL2}&amp;%3Atabs=${cTABS_URL2}&amp;Desktop%3ADesktopMenuActions=${cDESKTOPMENUACTIONS_URL2}&amp;Desktop%3AMenuLinks=${cDESKTOPMENULINKS_URL2}&amp;csrfToken=&amp;eventSource=TabBar%3ALogoutTabBarLink_act&amp;objFocusId=TabBar%3ALogoutTabBarLink</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <boolProp name="HTTPSampler.image_parser">true</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">DNT</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1822264439">GENERAL_MSG_CAT_SSL_ERROR</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">20</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PMClaimCenterLogout.fcc" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/LMAuth/PMClaimCenterLogout.fcc</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <boolProp name="HTTPSampler.image_parser">true</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">DNT</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
