<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="2.9" jmeter="3.0 r1743807">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="TF_TP21_010_CSW_Export" enabled="true"/>
      <hashTree>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="CookieManager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">true</boolProp>
        </CookieManager>
        <hashTree/>
        <CacheManager guiclass="CacheManagerGui" testclass="CacheManager" testname="HTTP Cache Manager" enabled="true">
          <boolProp name="clearEachIteration">true</boolProp>
          <boolProp name="useExpires">false</boolProp>
        </CacheManager>
        <hashTree/>
        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="ThinkTime" enabled="true">
          <stringProp name="ConstantTimer.delay">${CNG_TP21_CSW_Export_ThinkTime}</stringProp>
          <stringProp name="TestPlan.comments">   Converting seconds to milliseconds - 1s x 1000</stringProp>
        </ConstantTimer>
        <hashTree/>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Pacing" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">${CNG_TP22_Agero_Policy_Search_Pacing}</stringProp>
        </TestAction>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="TP21_010_CSW_Export" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable" enabled="true">
            <stringProp name="variableName">GlobalRandomVariable</stringProp>
            <stringProp name="outputFormat"></stringProp>
            <stringProp name="minimumValue">1</stringProp>
            <stringProp name="maximumValue">100</stringProp>
            <stringProp name="randomSeed"></stringProp>
            <boolProp name="perThread">true</boolProp>
          </RandomVariableConfig>
          <hashTree/>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="${GlobalRandomVariable} &lt;= 50" enabled="true">
            <stringProp name="IfController.condition">${GlobalRandomVariable} &lt;= 50</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <stringProp name="TestPlan.comments">${GlobalRandomVariable} &lt;= 50</stringProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Pol_Serv_EService_PolcySearch1" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:ns=&quot;http://lmig.com/standardHeader/2008/07/01&quot; xmlns:icsw=&quot;http://CSWMediationLibrary/iCSW&quot; xmlns:csw=&quot;http://CSWMediationLibrary&quot;&gt;   &lt;soapenv:Header/&gt;   &lt;soapenv:Body&gt;      &lt;icsw:getClaimCountByPolicy&gt;         &lt;csw:PolicyNumberInputBO&gt;            &lt;!--1 or more repetitions:--&gt;            &lt;csw:PolicyNumbersBO&gt;               &lt;csw:policynumber&gt;${polNum1}&lt;/csw:policynumber&gt;            &lt;/csw:PolicyNumbersBO&gt;            &lt;csw:PolicyNumbersBO&gt;               &lt;csw:policynumber&gt;${polNum2}&lt;/csw:policynumber&gt;            &lt;/csw:PolicyNumbersBO&gt;         &lt;/csw:PolicyNumberInputBO&gt;      &lt;/icsw:getClaimCountByPolicy&gt;   &lt;/soapenv:Body&gt;&lt;/soapenv:Envelope&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_CWS}/CSWMediationModuleWeb/sca/iCSWWSExport</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <boolProp name="HTTPSampler.image_parser">true</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">SOAPAction</stringProp>
                    <stringProp name="Header.value">https://${GV_HOSTNAME_CWS}/CSWMediationModuleWeb/sca/iCSWWSExport</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">content-type</stringProp>
                    <stringProp name="Header.value">text/xml</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor TP21_010_CSW_Export" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">27dbf407-2138-4f53-b9a0-da3c6853de2e</stringProp>
                <stringProp name="script">import java.io.File;
import java.io.FileReader;
import java.io.LineNumberReader;
import java.util.Random;
 try
 { 

FileReader fileReader = new FileReader(new File(vars.get(&quot;test_path&quot;)+&quot;..&quot;+vars.get(&quot;PATH_SEP&quot;)+&quot;Scripts&quot;+vars.get(&quot;PATH_SEP&quot;)+&quot;JMX_CNG_TP21_CSW_Export&quot;+vars.get(&quot;PATH_SEP&quot;)+&quot;TP21.csv&quot;));
LineNumberReader lineReader = new LineNumberReader(fileReader);
int linenumber = 0;

String Str;
Str=lineReader.readLine();
while (Str != null){
	Str=lineReader.readLine();
	vars.put(&quot;PolicyNumber&quot;+linenumber.toString(),Str);

   linenumber++;
}

//log.info(&quot;the value of line is &quot;+linenumber);
linenumber--; // do not include header row
int j=0;
//log.info(&quot;tehre vares  &quot;+j);
for(int i=1 ; i&lt;=8; i++)
{
	j=(int) (Math.random()*linenumber);
	//log.info(&quot;Tehre valuse of j &quot;+j);
	vars.put(&quot;polNum&quot;+i.toString(),vars.get(&quot;PolicyNumber&quot;+j.toString()));
	//log.info(&quot;valuse of ff &quot;+vars.get(&quot;polNum&quot;+i.toString()));
} 
lineReader.close();
}

catch(Throwable ex)
{
	//log.error(&quot;Failed to do this or that&quot;, ex);
	
}
</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Pol_Serv_EService_PolcySearch2 -HTTP Reponse 200 but ${polNum1} details not returned by server" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1235620868">${polNum1}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Pol_Serv_EService_PolcySearch2 -HTTP Reponse 200 but ${polNum2} details not returned by server" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1235620837">${polNum2}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="${GlobalRandomVariable} &gt; 50 &amp;&amp; ${GlobalRandomVariable} &lt;= 75" enabled="true">
            <stringProp name="IfController.condition">${GlobalRandomVariable} &gt; 50 &amp;&amp; ${GlobalRandomVariable} &lt;= 75</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <stringProp name="TestPlan.comments">${GlobalRandomVariable} &gt; 50 &amp;&amp; ${GlobalRandomVariable} &lt;= 75</stringProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Pol_Serv_EService_PolcySearch2" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:ns=&quot;http://lmig.com/standardHeader/2008/07/01&quot; xmlns:icsw=&quot;http://CSWMediationLibrary/iCSW&quot; xmlns:csw=&quot;http://CSWMediationLibrary&quot;&gt;   &lt;soapenv:Header/&gt;   &lt;soapenv:Body&gt;      &lt;icsw:getClaimCountByPolicy&gt;         &lt;csw:PolicyNumberInputBO&gt;            &lt;!--1 or more repetitions:--&gt;            &lt;csw:PolicyNumbersBO&gt;               &lt;csw:policynumber&gt;${polNum1}&lt;/csw:policynumber&gt;            &lt;/csw:PolicyNumbersBO&gt;            &lt;csw:PolicyNumbersBO&gt;               &lt;csw:policynumber&gt;${polNum2}&lt;/csw:policynumber&gt;            &lt;/csw:PolicyNumbersBO&gt;            &lt;csw:PolicyNumbersBO&gt;               &lt;csw:policynumber&gt;${polNum3}&lt;/csw:policynumber&gt;            &lt;/csw:PolicyNumbersBO&gt;            &lt;csw:PolicyNumbersBO&gt;               &lt;csw:policynumber&gt;${polNum4}&lt;/csw:policynumber&gt;            &lt;/csw:PolicyNumbersBO&gt;         &lt;/csw:PolicyNumberInputBO&gt;      &lt;/icsw:getClaimCountByPolicy&gt;   &lt;/soapenv:Body&gt;&lt;/soapenv:Envelope&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_CWS}/CSWMediationModuleWeb/sca/iCSWWSExport</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <boolProp name="HTTPSampler.image_parser">true</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">SOAPAction</stringProp>
                    <stringProp name="Header.value">https://${GV_HOSTNAME_CWS}/CSWMediationModuleWeb/sca/iCSWWSExport</stringProp>
                  </elementProp>
                  <elementProp name="content-type" elementType="Header">
                    <stringProp name="Header.name">content-type</stringProp>
                    <stringProp name="Header.value">text/xml</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor Pol_Serv_EService_PolcySearch2" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">27dbf407-2138-4f53-b9a0-da3c6853de2e</stringProp>
                <stringProp name="script">import java.io.File;
import java.io.FileReader;
import java.io.LineNumberReader;
import java.util.Random;
 try
 { 
FileReader fileReader = new FileReader(new File(vars.get(&quot;test_path&quot;)+&quot;..&quot;+vars.get(&quot;PATH_SEP&quot;)+&quot;Scripts&quot;+vars.get(&quot;PATH_SEP&quot;)+&quot;JMX_CNG_TP21_CSW_Export&quot;+vars.get(&quot;PATH_SEP&quot;)+&quot;TP21.csv&quot;));
LineNumberReader lineReader = new LineNumberReader(fileReader);
int linenumber = 0;

String Str;
Str=lineReader.readLine();
while (Str != null){
	Str=lineReader.readLine();
	vars.put(&quot;PolicyNumber&quot;+linenumber.toString(),Str);
//	log.info(&quot;the value of &quot;+ vars.get(&quot;PolicyNumber&quot;+linenumber.toString()));
   linenumber++;
}

//log.info(&quot;the value of line is &quot;+linenumber);
linenumber--; // do not include header row
int j=0;
//log.info(&quot;tehre vares  &quot;+j);
for(int i=1 ; i&lt;=8; i++)
{
	j=(int) (Math.random()*linenumber);
	//log.info(&quot;Tehre valuse of j &quot;+j);
	vars.put(&quot;polNum&quot;+i.toString(),vars.get(&quot;PolicyNumber&quot;+j.toString()));
	//log.info(&quot;valuse of ff &quot;+vars.get(&quot;polNum&quot;+i.toString()));
} 
lineReader.close();
}

catch(Throwable ex)
{
	//log.error(&quot;Failed to do this or that&quot;, ex);
	
}
</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Pol_Serv_EService_PolcySearch2 -HTTP Reponse 200 but ${polNum2} details not returned by server" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1235620837">${polNum2}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Pol_Serv_EService_PolcySearch2 -HTTP Reponse 200 but ${polNum1} details not returned by server" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1235620868">${polNum1}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Pol_Serv_EService_PolcySearch2 -HTTP Reponse 200 but ${polNum3} details not returned by server" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1235620806">${polNum3}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Pol_Serv_EService_PolcySearch2 -HTTP Reponse 200 but ${polNum4} details not returned by server" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1235620775">${polNum4}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="${GlobalRandomVariable} &gt; 75" enabled="true">
            <stringProp name="IfController.condition">${GlobalRandomVariable} &gt; 75</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <stringProp name="TestPlan.comments">${GlobalRandomVariable} &gt; 75</stringProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Pol_Serv_EService_PolcySearch3" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:ns=&quot;http://lmig.com/standardHeader/2008/07/01&quot; xmlns:icsw=&quot;http://CSWMediationLibrary/iCSW&quot; xmlns:csw=&quot;http://CSWMediationLibrary&quot;&gt;   &lt;soapenv:Header/&gt;   &lt;soapenv:Body&gt;      &lt;icsw:getClaimCountByPolicy&gt;         &lt;csw:PolicyNumberInputBO&gt;            &lt;!--1 or more repetitions:--&gt;            &lt;csw:PolicyNumbersBO&gt;               &lt;csw:policynumber&gt;${polNum1}&lt;/csw:policynumber&gt;            &lt;/csw:PolicyNumbersBO&gt;            &lt;csw:PolicyNumbersBO&gt;               &lt;csw:policynumber&gt;${polNum2}&lt;/csw:policynumber&gt;            &lt;/csw:PolicyNumbersBO&gt;            &lt;csw:PolicyNumbersBO&gt;               &lt;csw:policynumber&gt;${polNum3}&lt;/csw:policynumber&gt;            &lt;/csw:PolicyNumbersBO&gt;            &lt;csw:PolicyNumbersBO&gt;               &lt;csw:policynumber&gt;${polNum4}&lt;/csw:policynumber&gt;            &lt;/csw:PolicyNumbersBO&gt;            &lt;csw:PolicyNumbersBO&gt;               &lt;csw:policynumber&gt;${polNum5}&lt;/csw:policynumber&gt;            &lt;/csw:PolicyNumbersBO&gt;            &lt;csw:PolicyNumbersBO&gt;               &lt;csw:policynumber&gt;${polNum6}&lt;/csw:policynumber&gt;            &lt;/csw:PolicyNumbersBO&gt;            &lt;csw:PolicyNumbersBO&gt;               &lt;csw:policynumber&gt;${polNum7}&lt;/csw:policynumber&gt;            &lt;/csw:PolicyNumbersBO&gt;            &lt;csw:PolicyNumbersBO&gt;               &lt;csw:policynumber&gt;${polNum8}&lt;/csw:policynumber&gt;            &lt;/csw:PolicyNumbersBO&gt;         &lt;/csw:PolicyNumberInputBO&gt;      &lt;/icsw:getClaimCountByPolicy&gt;   &lt;/soapenv:Body&gt;&lt;/soapenv:Envelope&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_CWS}/CSWMediationModuleWeb/sca/iCSWWSExport</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
              <boolProp name="HTTPSampler.image_parser">true</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor Pol_Serv_EService_PolcySearch3" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">27dbf407-2138-4f53-b9a0-da3c6853de2e</stringProp>
                <stringProp name="script">import java.io.File;
import java.io.FileReader;
import java.io.LineNumberReader;
import java.util.Random;
 try
 { 
FileReader fileReader = new FileReader(new File(vars.get(&quot;test_path&quot;)+&quot;..&quot;+vars.get(&quot;PATH_SEP&quot;)+&quot;Scripts&quot;+vars.get(&quot;PATH_SEP&quot;)+&quot;JMX_CNG_TP21_CSW_Export&quot;+vars.get(&quot;PATH_SEP&quot;)+&quot;TP21.csv&quot;));
LineNumberReader lineReader = new LineNumberReader(fileReader);
int linenumber = 0;

String Str;
Str=lineReader.readLine();
while (Str != null){
	Str=lineReader.readLine();
	vars.put(&quot;PolicyNumber&quot;+linenumber.toString(),Str);
//	log.info(&quot;the value of &quot;+ vars.get(&quot;PolicyNumber&quot;+linenumber.toString()));
   linenumber++;
}

//log.info(&quot;the value of line is &quot;+linenumber);
linenumber--; // do not include header row
int j=0;
//log.info(&quot;tehre vares  &quot;+j);
for(int i=1 ; i&lt;=8; i++)
{
	j=(int) (Math.random()*linenumber);
	//log.info(&quot;Tehre valuse of j &quot;+j);
	vars.put(&quot;polNum&quot;+i.toString(),vars.get(&quot;PolicyNumber&quot;+j.toString()));
	//log.info(&quot;valuse of ff &quot;+vars.get(&quot;polNum&quot;+i.toString()));
} 
lineReader.close();
}

catch(Throwable ex)
{
	//log.error(&quot;Failed to do this or that&quot;, ex);
	
}
</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">SOAPAction</stringProp>
                    <stringProp name="Header.value">https://${GV_HOSTNAME_CWS}/CSWMediationModuleWeb/sca/iCSWWSExport</stringProp>
                  </elementProp>
                  <elementProp name="content-type" elementType="Header">
                    <stringProp name="Header.name">content-type</stringProp>
                    <stringProp name="Header.value">text/xml</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Pol_Serv_EService_PolcySearch2 -HTTP Reponse 200 but ${polNum2} details not returned by server" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1235620837">${polNum2}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Pol_Serv_EService_PolcySearch2 -HTTP Reponse 200 but ${polNum1} details not returned by server" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1235620868">${polNum1}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Pol_Serv_EService_PolcySearch2 -HTTP Reponse 200 but ${polNum3} details not returned by server" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1235620806">${polNum3}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Pol_Serv_EService_PolcySearch2 -HTTP Reponse 200 but ${polNum4} details not returned by server" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1235620775">${polNum4}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Pol_Serv_EService_PolcySearch2 -HTTP Reponse 200 but ${polNum5} details not returned by server" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1235620744">${polNum5}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Pol_Serv_EService_PolcySearch2 -HTTP Reponse 200 but ${polNum6} details not returned by server" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1235620713">${polNum6}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Pol_Serv_EService_PolcySearch2 -HTTP Reponse 200 but ${polNum7} details not returned by server" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1235620682">${polNum7}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Pol_Serv_EService_PolcySearch2 -HTTP Reponse 200 but ${polNum8} details not returned by server" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1235620651">${polNum8}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="false">
            <stringProp name="BeanShellSampler.query">log.info(&quot;The value of polNum1&quot; +vars.get(&quot;polNum1&quot;));
log.info(&quot;The value of polNum2&quot; +vars.get(&quot;polNum2&quot;));
log.info(&quot;The value of polNum3&quot; +vars.get(&quot;polNum3&quot;));
log.info(&quot;The value of polNum4&quot; +vars.get(&quot;polNum4&quot;));
log.info(&quot;The value of polNum5&quot; +vars.get(&quot;polNum5&quot;));
log.info(&quot;The value of polNum6&quot; +vars.get(&quot;polNum6&quot;));
log.info(&quot;The value of polNum7&quot; +vars.get(&quot;polNum7&quot;));
log.info(&quot;The value of polNum8&quot; +vars.get(&quot;polNum8&quot;));
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
        </hashTree>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
