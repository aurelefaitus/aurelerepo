<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="2.9" jmeter="3.0 r1743807">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="CNG_TP86_Workplan_Activity_Edits" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="TF_CNG_TP86_Workplan_Activity_Edits" enabled="true"/>
      <hashTree>
        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="ThinkTime" enabled="true">
          <stringProp name="ConstantTimer.delay">${CNG_TP86_Workplan_Activity_Edits_ThinkTime}</stringProp>
        </ConstantTimer>
        <hashTree/>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">true</boolProp>
        </CookieManager>
        <hashTree/>
        <CacheManager guiclass="CacheManagerGui" testclass="CacheManager" testname="Cache Manager" enabled="true">
          <boolProp name="clearEachIteration">true</boolProp>
          <boolProp name="useExpires">true</boolProp>
        </CacheManager>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="nNumbers CSV Data Set Config" enabled="true">
          <stringProp name="filename">${test_path}..${PATH_SEP}Scripts${PATH_SEP}JMX_CNG_TP86_Workplan_Activity_Edits${PATH_SEP}nNumbers.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">USERNAME,PASSWORD</stringProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
          <stringProp name="TestPlan.comments">USERNAME,PASSWORD</stringProp>
        </CSVDataSet>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="--LOGIN" enabled="true"/>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP86_A_Launch_Browser" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_1" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${GV_HOSTNAME_NAVIGATOR}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/cc/ClaimCenter.do</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="TestPlan.comments">Detected the start of a redirect chain</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-GB</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.1; Trident/5.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E; InfoPath.3; Tablet PC 2.0)</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate</stringProp>
                  </elementProp>
                  <elementProp name="Pragma" elementType="Header">
                    <stringProp name="Header.name">Pragma</stringProp>
                    <stringProp name="Header.value">No-Cache</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-683626894">Please log in using your Enterprise ID and password</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="SiteMinderCount" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">SiteMinderCount</stringProp>
                <stringProp name="RegexExtractor.regex">Please log in using your Enterp(.*?)se ID and password</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">null</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cSMAGENTNAME Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">cSMAGENTNAME</stringProp>
                <stringProp name="RegexExtractor.regex">SMAGENTNAME=(.*?)&amp;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">null</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cTYPE Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">cTYPE</stringProp>
                <stringProp name="RegexExtractor.regex">TYPE=(.*?)&amp;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">null</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cREALMOID Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">cREALMOID</stringProp>
                <stringProp name="RegexExtractor.regex">REALMOID=(.*?)&amp;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">null</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If &quot;${SiteMinderCount}&quot; != &quot;null&quot;" enabled="true">
            <stringProp name="IfController.condition">&quot;${SiteMinderCount}&quot; != &quot;null&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP86_B_Login" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="LMAuth/PMClaimCenterLogin.fcc" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="USER" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">USER</stringProp>
                      <stringProp name="Argument.value">${USERNAME}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="PASSWORD" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">PASSWORD</stringProp>
                      <stringProp name="Argument.value">${PASSWORD}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="target" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">target</stringProp>
                      <stringProp name="Argument.value">http://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="smauthreason" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">smauthreason</stringProp>
                      <stringProp name="Argument.value">0</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${GV_HOSTNAME_NAVIGATOR}</stringProp>
                <stringProp name="HTTPSampler.port">443</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">iso-8859-1</stringProp>
                <stringProp name="HTTPSampler.path">/LMAuth/PMClaimCenterLogin.fcc?TYPE=${cTYPE}&amp;cREALMOID=${cREALMOID}&amp;cGUID=&amp;cSMAUTHREASON=0&amp;cMETHOD=GET&amp;cAgentName=${cSMAGENTNAME}&amp;TARGET=-SM-http%3a%2f%2fperf--pmclaimcenter--internal%2elibertyec%2ecom%2fcc%2fClaimCenter%2edo</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="TestPlan.comments">Detected the start of a redirect chain</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-GB</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">*/*</stringProp>
                    </elementProp>
                    <elementProp name="User-Agent" elementType="Header">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.1; Trident/5.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E; InfoPath.3; Tablet PC 2.0)</stringProp>
                    </elementProp>
                    <elementProp name="DNT" elementType="Header">
                      <stringProp name="Header.name">DNT</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                    <elementProp name="Pragma" elementType="Header">
                      <stringProp name="Header.name">Pragma</stringProp>
                      <stringProp name="Header.value">No-Cache</stringProp>
                    </elementProp>
                    <elementProp name="Cache-Control" elementType="Header">
                      <stringProp name="Header.name">Cache-Control</stringProp>
                      <stringProp name="Header.value">no-cache</stringProp>
                    </elementProp>
                    <elementProp name="Referer" elementType="Header">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">https://${GV_HOSTNAME_NAVIGATOR}/LMAuth/PMClaimCenterLogin.fcc?TYPE=33554433&amp;cREALMOID=06-770c2cb2-c5ac-106a-ab80-83ed2ffd0cb3&amp;cGUID=&amp;cSMAUTHREASON=0&amp;cMETHOD=GET&amp;cAgentName=-SM-J%2bwETtWyJJx3Ux3bq4E3hhUrIkVgqa6O6VgZo%2bnbfwuyrOQ0QTs1aLbQLLpILro%2b&amp;TARGET=-SM-http%3a%2f%2fperf--pmclaimcenter--internal%2elibertyec%2ecom%2fcc%2fClaimCenter%2edo</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Encoding" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate</stringProp>
                    </elementProp>
                    <elementProp name="UA-CPU" elementType="Header">
                      <stringProp name="Header.name">UA-CPU</stringProp>
                      <stringProp name="Header.value">AMD64</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="nNumber unable to Login, ${USERNAME}" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-252897267">Activities</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="nNumber unable to Login, ${USERNAME}" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-927154469">User not setup in ClaimCenter</stringProp>
                    <stringProp name="-27349170">Internal Server Error</stringProp>
                    <stringProp name="1822264439">GENERAL_MSG_CAT_SSL_ERROR</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">20</intProp>
                  <stringProp name="Assertion.scope">all</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cDESKTOPMENUACTIONS Extractor" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">cDESKTOPMENUACTIONS</stringProp>
                  <stringProp name="RegexExtractor.regex">Profile\&quot;\}\],\&quot;defaultType\&quot;:\&quot;gmenuitem\&quot;\},\&quot;xtype\&quot;:\&quot;gbutton\&quot;,\&quot;noaction\&quot;:1,\&quot;checksum\&quot;:\&quot;(.*?)\&quot;,</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">null</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cTBLINKS Extractor" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">cTBLINKS</stringProp>
                  <stringProp name="RegexExtractor.regex">uitem\&quot;,\&quot;shortcut\&quot;:\&quot;Z\&quot;\}\],\&quot;defaultType\&quot;:\&quot;gmenuitem\&quot;\},\&quot;noaction\&quot;:1,\&quot;xtype\&quot;:\&quot;gbutton\&quot;,\&quot;iconCls\&quot;:\&quot;g-preferences-icon\&quot;\}\],\&quot;checksum\&quot;:\&quot;(.*?)\&quot;\},</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">null</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cTABS Extractor" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">cTABS</stringProp>
                  <stringProp name="RegexExtractor.regex">\&quot;id\&quot;:\&quot;TabBar:VacationTab\&quot;,\&quot;text\&quot;:\&quot;Vacation\&quot;,\&quot;menu\&quot;:\{\&quot;defaultType\&quot;:\&quot;gmenuitem\&quot;\},\&quot;xtype\&quot;:\&quot;gbutton\&quot;,\&quot;disabled\&quot;:true\}\],\&quot;checksum\&quot;:\&quot;(.*?)\&quot;\}\},\{</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">null</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cINFOBAR Extractor" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">cINFOBAR</stringProp>
                  <stringProp name="RegexExtractor.regex">topActivitiesScreen:0\&quot;,\&quot;text\&quot;:\&quot;Activities\&quot;,\&quot;cls\&quot;:\&quot;x-panel-header-text\&quot;,\&quot;xtype\&quot;:\&quot;box\&quot;\}\]\}\]\},\&quot;infoBar\&quot;:\{\&quot;hidden\&quot;:true,\&quot;checksum\&quot;:\&quot;(.*?)\&quot;\},</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">null</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cDESKTOPMENULINKS Extractor" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">cDESKTOPMENULINKS</stringProp>
                  <stringProp name="RegexExtractor.regex">Report\&quot;,\&quot;eventId\&quot;:\&quot;Desktop:MenuLinks:Desktop_MarketingReport\&quot;\}\],\&quot;xtype\&quot;:\&quot;accordionpanel\&quot;,\&quot;checksum\&quot;:\&quot;(.*?)\&quot;,</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">null</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
                <ResultAction guiclass="ResultActionGui" testclass="ResultAction" testname="Result Status Action Handler" enabled="true">
                  <intProp name="OnError.action">4</intProp>
                </ResultAction>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="--LOOP" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </LoopController>
        <hashTree>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CLAIM_NUMBER CSV Data Set Config" enabled="true">
            <stringProp name="filename">${test_path}..${PATH_SEP}Scripts${PATH_SEP}JMX_CNG_TP86_Workplan_Activity_Edits${PATH_SEP}CLAIM_NUMBER.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames">CLAIMNUMBER</stringProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
            <stringProp name="TestPlan.comments">CLAIMNUMBER</stringProp>
          </CSVDataSet>
          <hashTree/>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="PacingTime" enabled="true">
            <intProp name="ActionProcessor.action">1</intProp>
            <intProp name="ActionProcessor.target">0</intProp>
            <stringProp name="ActionProcessor.duration">${CNG_TP86_Workplan_Activity_Edits_Pacing}</stringProp>
          </TestAction>
          <hashTree/>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If &quot;${CLAIMNUMBER}&quot;!=&quot;CLAIMNUMBER&quot;" enabled="true">
            <stringProp name="IfController.condition">&quot;${CLAIMNUMBER}&quot;!=&quot;CLAIM_NUMBER&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="RAND_NUMBER {1,100}" enabled="true">
              <stringProp name="variableName">RAND_NUMBER</stringProp>
              <stringProp name="outputFormat"></stringProp>
              <stringProp name="minimumValue">1</stringProp>
              <stringProp name="maximumValue">100</stringProp>
              <stringProp name="randomSeed"></stringProp>
              <boolProp name="perThread">true</boolProp>
            </RandomVariableConfig>
            <hashTree/>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="-SEARCHCLAIM" enabled="true">
              <stringProp name="TestPlan.comments">This section contains the SEARCHCLAIM part of Loadrunner</stringProp>
            </GenericController>
            <hashTree>
              <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP86_C_Activities_Claim_Search" enabled="true">
                <boolProp name="TransactionController.includeTimers">false</boolProp>
                <boolProp name="TransactionController.parent">true</boolProp>
              </TransactionController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_2" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="TabBar:ClaimTab:ClaimTab_FindClaim" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">TabBar:ClaimTab:ClaimTab_FindClaim</stringProp>
                        <stringProp name="Argument.value">${CLAIMNUMBER}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="QuickJump" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">QuickJump</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="Desktop:MenuLinks_toggle" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">Desktop:MenuLinks_toggle</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="DesktopActivities:DesktopActivitiesScreen:DesktopActivitiesLV:DesktopActivitiesFilter" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">DesktopActivities:DesktopActivitiesScreen:DesktopActivitiesLV:DesktopActivitiesFilter</stringProp>
                        <stringProp name="Argument.value">AndFilter/My activities today</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name=":tblinks" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">:tblinks</stringProp>
                        <stringProp name="Argument.value">${cTBLINKS}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name=":tabs" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">:tabs</stringProp>
                        <stringProp name="Argument.value">${cTABS}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="infoBar" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">infoBar</stringProp>
                        <stringProp name="Argument.value">${cINFOBAR}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="Desktop:DesktopMenuActions" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">Desktop:DesktopMenuActions</stringProp>
                        <stringProp name="Argument.value">${cDESKTOPMENUACTIONS}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="Desktop:MenuLinks" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">Desktop:MenuLinks</stringProp>
                        <stringProp name="Argument.value">${cDESKTOPMENULINKS}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="csrfToken" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">csrfToken</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                      <elementProp name="eventSource" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">eventSource</stringProp>
                        <stringProp name="Argument.value">TabBar:ClaimTab:ClaimTab_FindClaim_Button_act</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${GV_HOSTNAME_NAVIGATOR}</stringProp>
                  <stringProp name="HTTPSampler.port">443</stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">/cc/ClaimCenter.do</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Content-Type" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">Accept-Language</stringProp>
                        <stringProp name="Header.value">en-GB</stringProp>
                      </elementProp>
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">*/*</stringProp>
                      </elementProp>
                      <elementProp name="User-Agent" elementType="Header">
                        <stringProp name="Header.name">User-Agent</stringProp>
                        <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko</stringProp>
                      </elementProp>
                      <elementProp name="DNT" elementType="Header">
                        <stringProp name="Header.name">DNT</stringProp>
                        <stringProp name="Header.value">1</stringProp>
                      </elementProp>
                      <elementProp name="Pragma" elementType="Header">
                        <stringProp name="Header.name">Pragma</stringProp>
                        <stringProp name="Header.value">No-Cache</stringProp>
                      </elementProp>
                      <elementProp name="Referer" elementType="Header">
                        <stringProp name="Header.name">Referer</stringProp>
                        <stringProp name="Header.value">https://${GV_HOSTNAME_NAVIGATOR}/cc/resources/themes/Titanium/resources/</stringProp>
                      </elementProp>
                      <elementProp name="X-Requested-With" elementType="Header">
                        <stringProp name="Header.name">X-Requested-With</stringProp>
                        <stringProp name="Header.value">XMLHttpRequest</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Encoding" elementType="Header">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value">gzip, deflate</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cTABS_1 Extractor" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">cTABS_1</stringProp>
                    <stringProp name="RegexExtractor.regex">\&quot;id\&quot;:\&quot;TabBar:VacationTab\&quot;,\&quot;text\&quot;:\&quot;Vacation\&quot;,\&quot;menu\&quot;:\{\&quot;defaultType\&quot;:\&quot;gmenuitem\&quot;\},\&quot;xtype\&quot;:\&quot;gbutton\&quot;,\&quot;disabled\&quot;:true\}\],\&quot;checksum\&quot;:\&quot;(.*?)\&quot;\}\},\{</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">null</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                    <stringProp name="Sample.scope">all</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cINFOBAR_1 Extractor" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">cINFOBAR_1</stringProp>
                    <stringProp name="RegexExtractor.regex">/span&gt;\&quot;,\&quot;cls\&quot;:\&quot;infobar_elem\&quot;,\&quot;noaction\&quot;:1,\&quot;disabled\&quot;:true\}\],\&quot;checksum\&quot;:\&quot;(.*?)\&quot;\},</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">null</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                    <stringProp name="Sample.scope">all</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cCLAIMMENUACTIONS Extractor" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">cCLAIMMENUACTIONS</stringProp>
                    <stringProp name="RegexExtractor.regex">ctions\&quot;,\&quot;menu\&quot;:\{\&quot;numEntriesPerColumn\&quot;:3,\&quot;flattened\&quot;:true,\&quot;defaultType\&quot;:\&quot;gmenuitem\&quot;\},\&quot;xtype\&quot;:\&quot;gbutton\&quot;,\&quot;noaction\&quot;:1,\&quot;checksum\&quot;:\&quot;(.*?)\&quot;,</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">null</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                    <stringProp name="Sample.scope">all</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cCLAIMMENULINKS Extractor" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">cCLAIMMENULINKS</stringProp>
                    <stringProp name="RegexExtractor.regex">\&quot;eventId\&quot;:\&quot;Claim:MenuLinks:Claim_ClaimCalendarGroup:ClaimCalendarGroup_ClaimCalendar\&quot;\}\]\}\],\&quot;xtype\&quot;:\&quot;accordionpanel\&quot;,\&quot;checksum\&quot;:\&quot;(.*?)\&quot;,</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">null</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                    <stringProp name="Sample.scope">all</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ThinkTime - 10" enabled="true">
                  <stringProp name="TestPlan.comments">This transaction will wait for 10 seconds</stringProp>
                </GenericController>
                <hashTree>
                  <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="ThinkTime" enabled="true">
                    <stringProp name="ConstantTimer.delay">10000</stringProp>
                    <stringProp name="TestPlan.comments">   Converting seconds to milliseconds - 10s x 1000</stringProp>
                  </ConstantTimer>
                  <hashTree/>
                </hashTree>
              </hashTree>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If ${RAND_NUMBER}&gt;0&amp;&amp;${RAND_NUMBER}&lt;=70" enabled="true">
              <stringProp name="IfController.condition">${RAND_NUMBER} &gt;0 &amp;&amp; ${RAND_NUMBER}&lt;=100</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="-PARTIESINVOLVED" enabled="true">
                <stringProp name="TestPlan.comments">This section contains the PARTIESINVOLVED part of Loadrunner</stringProp>
              </GenericController>
              <hashTree>
                <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP86_D_Click_Parties_Involved" enabled="true">
                  <boolProp name="TransactionController.includeTimers">false</boolProp>
                  <boolProp name="TransactionController.parent">true</boolProp>
                </TransactionController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_3" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="Claim:MenuLinks" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.name">Claim:MenuLinks</stringProp>
                          <stringProp name="Argument.value">${cCLAIMMENULINKS}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="csrfToken" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">csrfToken</stringProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="TabBar:ClaimTab:ClaimTab_FindClaim" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.name">TabBar:ClaimTab:ClaimTab_FindClaim</stringProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="QuickJump" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">QuickJump</stringProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="Claim:MenuLinks_toggle" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.name">Claim:MenuLinks_toggle</stringProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name=":tblinks" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.name">:tblinks</stringProp>
                          <stringProp name="Argument.value">${cTBLINKS}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name=":tabs" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.name">:tabs</stringProp>
                          <stringProp name="Argument.value">${cTABS_1}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="infoBar" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.name">infoBar</stringProp>
                          <stringProp name="Argument.value">${cINFOBAR_1}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="Claim:ClaimMenuActions" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.name">Claim:ClaimMenuActions</stringProp>
                          <stringProp name="Argument.value">${cCLAIMMENUACTIONS}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="eventSource" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.name">eventSource</stringProp>
                          <stringProp name="Argument.value">Claim:MenuLinks:Claim_ClaimPartiesGroup:ClaimPartiesGroup_ClaimContacts_act</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <boolProp name="HTTPSampler.image_parser">true</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="CNG_TP86_D_Click_Parties_Involved - Parties Involved screen not displayed for claim, ${CLAIMNUMBER}" enabled="true">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="-502807437">Contacts</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">2</intProp>
                      <stringProp name="Assertion.scope">all</stringProp>
                    </ResponseAssertion>
                    <hashTree/>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="Content-Type" elementType="Header">
                          <stringProp name="Header.name">Content-Type</stringProp>
                          <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                        </elementProp>
                        <elementProp name="Accept-Language" elementType="Header">
                          <stringProp name="Header.name">Accept-Language</stringProp>
                          <stringProp name="Header.value">en-GB</stringProp>
                        </elementProp>
                        <elementProp name="Accept" elementType="Header">
                          <stringProp name="Header.name">Accept</stringProp>
                          <stringProp name="Header.value">*/*</stringProp>
                        </elementProp>
                        <elementProp name="User-Agent" elementType="Header">
                          <stringProp name="Header.name">User-Agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko</stringProp>
                        </elementProp>
                        <elementProp name="DNT" elementType="Header">
                          <stringProp name="Header.name">DNT</stringProp>
                          <stringProp name="Header.value">1</stringProp>
                        </elementProp>
                        <elementProp name="Pragma" elementType="Header">
                          <stringProp name="Header.name">Pragma</stringProp>
                          <stringProp name="Header.value">No-Cache</stringProp>
                        </elementProp>
                        <elementProp name="Referer" elementType="Header">
                          <stringProp name="Header.name">Referer</stringProp>
                          <stringProp name="Header.value">https://${GV_HOSTNAME_NAVIGATOR}/cc/resources/themes/Titanium/resources/</stringProp>
                        </elementProp>
                        <elementProp name="X-Requested-With" elementType="Header">
                          <stringProp name="Header.name">X-Requested-With</stringProp>
                          <stringProp name="Header.value">XMLHttpRequest</stringProp>
                        </elementProp>
                        <elementProp name="Accept-Encoding" elementType="Header">
                          <stringProp name="Header.name">Accept-Encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="PartiesInvolvedScreenCount Extractor" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">PartiesInvolvedScreenCount</stringProp>
                      <stringProp name="RegexExtractor.regex">Cont(.*?)cts</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">null</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                      <stringProp name="Sample.scope">all</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Condition CNG_TP86_D_Click_Parties_Involved" enabled="true">
                  <stringProp name="IfController.condition">&quot;${PartiesInvolvedScreenCount}&quot;==&quot;null&quot;</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                  <stringProp name="TestPlan.comments">If &quot;${PartiesInvolvedScreenCount}&quot;==&quot;null&quot;</stringProp>
                </IfController>
                <hashTree>
                  <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Test Action" enabled="true">
                    <intProp name="ActionProcessor.action">3</intProp>
                    <intProp name="ActionProcessor.target">0</intProp>
                    <stringProp name="ActionProcessor.duration"></stringProp>
                  </TestAction>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="-WORKPLAN" enabled="true">
                <stringProp name="TestPlan.comments">This section contains the WORKPLAN part of Loadrunner</stringProp>
              </GenericController>
              <hashTree>
                <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP86_E_Click_Workplan" enabled="true">
                  <boolProp name="TransactionController.includeTimers">false</boolProp>
                  <boolProp name="TransactionController.parent">true</boolProp>
                </TransactionController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_4" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="Claim:ClaimMenuActions" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.name">Claim:ClaimMenuActions</stringProp>
                          <stringProp name="Argument.value">${cCLAIMMENUACTIONS}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="Claim:MenuLinks" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.name">Claim:MenuLinks</stringProp>
                          <stringProp name="Argument.value">${cCLAIMMENULINKS}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="TabBar:ClaimTab:ClaimTab_FindClaim" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.name">TabBar:ClaimTab:ClaimTab_FindClaim</stringProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="QuickJump" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">QuickJump</stringProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="Claim:MenuLinks_toggle" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.name">Claim:MenuLinks_toggle</stringProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:PeopleInvolvedDetailedLV:PeopleInvolvedDetailedFilter" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.name">ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:PeopleInvolvedDetailedLV:PeopleInvolvedDetailedFilter</stringProp>
                          <stringProp name="Argument.value">CoreFilters.AllFilter/All</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name=":tblinks" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.name">:tblinks</stringProp>
                          <stringProp name="Argument.value">${cTBLINKS}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name=":tabs" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.name">:tabs</stringProp>
                          <stringProp name="Argument.value">${cTABS_1}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="infoBar" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.name">infoBar</stringProp>
                          <stringProp name="Argument.value">${cINFOBAR_1}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="eventSource" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.name">eventSource</stringProp>
                          <stringProp name="Argument.value">Claim:MenuLinks:Claim_ClaimWorkplan_act</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="csrfToken" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">csrfToken</stringProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
                    <boolProp name="HTTPSampler.image_parser">true</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="CNG_TP86_E_Click_Workplan - Workplan screen not displayed for claim, ${CLAIMNUMBER}" enabled="true">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="100320730">Workplan</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">2</intProp>
                      <stringProp name="Assertion.scope">all</stringProp>
                    </ResponseAssertion>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cDUEDATE Extractor" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">cDUEDATE</stringProp>
                      <stringProp name="RegexExtractor.regex">\{\&quot;text\&quot;:\&quot;([0-9][0-9]/[0-9][0-9]/[0-9][0-9][0-9][0-9])\&quot;,</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">null</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                      <stringProp name="Sample.scope">all</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="Content-Type" elementType="Header">
                          <stringProp name="Header.name">Content-Type</stringProp>
                          <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                        </elementProp>
                        <elementProp name="Accept-Language" elementType="Header">
                          <stringProp name="Header.name">Accept-Language</stringProp>
                          <stringProp name="Header.value">en-GB</stringProp>
                        </elementProp>
                        <elementProp name="Accept" elementType="Header">
                          <stringProp name="Header.name">Accept</stringProp>
                          <stringProp name="Header.value">*/*</stringProp>
                        </elementProp>
                        <elementProp name="User-Agent" elementType="Header">
                          <stringProp name="Header.name">User-Agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko</stringProp>
                        </elementProp>
                        <elementProp name="DNT" elementType="Header">
                          <stringProp name="Header.name">DNT</stringProp>
                          <stringProp name="Header.value">1</stringProp>
                        </elementProp>
                        <elementProp name="Pragma" elementType="Header">
                          <stringProp name="Header.name">Pragma</stringProp>
                          <stringProp name="Header.value">No-Cache</stringProp>
                        </elementProp>
                        <elementProp name="Referer" elementType="Header">
                          <stringProp name="Header.name">Referer</stringProp>
                          <stringProp name="Header.value">https://${GV_HOSTNAME_NAVIGATOR}/cc/resources/themes/Titanium/resources/</stringProp>
                        </elementProp>
                        <elementProp name="X-Requested-With" elementType="Header">
                          <stringProp name="Header.name">X-Requested-With</stringProp>
                          <stringProp name="Header.value">XMLHttpRequest</stringProp>
                        </elementProp>
                        <elementProp name="Accept-Encoding" elementType="Header">
                          <stringProp name="Header.name">Accept-Encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="WorkplanScreenCount Extractor" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">WorkplanScreenCount</stringProp>
                      <stringProp name="RegexExtractor.regex">Workplan(.*?)</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">null</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                      <stringProp name="Sample.scope">all</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                  </hashTree>
                  <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Condition CNG_TP86_E_Click_Workplan" enabled="true">
                    <stringProp name="IfController.condition">&quot;${WorkplanScreenCount}&quot;==&quot;null&quot;</stringProp>
                    <boolProp name="IfController.evaluateAll">false</boolProp>
                    <stringProp name="TestPlan.comments">If &quot;${WorkplanScreenCount}&quot;==&quot;null&quot;</stringProp>
                  </IfController>
                  <hashTree>
                    <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Test Action" enabled="true">
                      <intProp name="ActionProcessor.action">3</intProp>
                      <intProp name="ActionProcessor.target">0</intProp>
                      <stringProp name="ActionProcessor.duration"></stringProp>
                    </TestAction>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP86_F_Click_Subject" enabled="true">
                  <boolProp name="TransactionController.includeTimers">false</boolProp>
                  <boolProp name="TransactionController.parent">true</boolProp>
                </TransactionController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_5" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="TabBar:ClaimTab:ClaimTab_FindClaim" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.name">TabBar:ClaimTab:ClaimTab_FindClaim</stringProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="QuickJump" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">QuickJump</stringProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="Claim:MenuLinks_toggle" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.name">Claim:MenuLinks_toggle</stringProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="ClaimWorkplan:ClaimWorkplanScreen:WorkplanLV:WorkplanFilter" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.name">ClaimWorkplan:ClaimWorkplanScreen:WorkplanLV:WorkplanFilter</stringProp>
                          <stringProp name="Argument.value">AndFilter/All open activities</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name=":tblinks" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.name">:tblinks</stringProp>
                          <stringProp name="Argument.value">${cTBLINKS}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name=":tabs" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.name">:tabs</stringProp>
                          <stringProp name="Argument.value">${cTABS_1}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="infoBar" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.name">infoBar</stringProp>
                          <stringProp name="Argument.value">${cINFOBAR_1}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="Claim:ClaimMenuActions" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.name">Claim:ClaimMenuActions</stringProp>
                          <stringProp name="Argument.value">${cCLAIMMENUACTIONS}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="Claim:MenuLinks" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.name">Claim:MenuLinks</stringProp>
                          <stringProp name="Argument.value">${cCLAIMMENULINKS}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="csrfToken" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">csrfToken</stringProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="eventSource" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.name">eventSource</stringProp>
                          <stringProp name="Argument.value">ClaimWorkplan:ClaimWorkplanScreen:WorkplanLV:0:Subject_act</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="objFocusId" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.name">objFocusId</stringProp>
                          <stringProp name="Argument.value">ClaimWorkplan:ClaimWorkplanScreen:WorkplanLV:0:Subject</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${GV_HOSTNAME_NAVIGATOR}</stringProp>
                    <stringProp name="HTTPSampler.port">443</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                    <stringProp name="HTTPSampler.path">/cc/ClaimCenter.do</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="Content-Type" elementType="Header">
                          <stringProp name="Header.name">Content-Type</stringProp>
                          <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                        </elementProp>
                        <elementProp name="Accept-Language" elementType="Header">
                          <stringProp name="Header.name">Accept-Language</stringProp>
                          <stringProp name="Header.value">en-GB</stringProp>
                        </elementProp>
                        <elementProp name="Accept" elementType="Header">
                          <stringProp name="Header.name">Accept</stringProp>
                          <stringProp name="Header.value">*/*</stringProp>
                        </elementProp>
                        <elementProp name="User-Agent" elementType="Header">
                          <stringProp name="Header.name">User-Agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko</stringProp>
                        </elementProp>
                        <elementProp name="DNT" elementType="Header">
                          <stringProp name="Header.name">DNT</stringProp>
                          <stringProp name="Header.value">1</stringProp>
                        </elementProp>
                        <elementProp name="Pragma" elementType="Header">
                          <stringProp name="Header.name">Pragma</stringProp>
                          <stringProp name="Header.value">No-Cache</stringProp>
                        </elementProp>
                        <elementProp name="Referer" elementType="Header">
                          <stringProp name="Header.name">Referer</stringProp>
                          <stringProp name="Header.value">https://${GV_HOSTNAME_NAVIGATOR}/cc/resources/themes/Titanium/resources/</stringProp>
                        </elementProp>
                        <elementProp name="X-Requested-With" elementType="Header">
                          <stringProp name="Header.name">X-Requested-With</stringProp>
                          <stringProp name="Header.value">XMLHttpRequest</stringProp>
                        </elementProp>
                        <elementProp name="Accept-Encoding" elementType="Header">
                          <stringProp name="Header.name">Accept-Encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cCLAIM_1 Extractor" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">cCLAIM_1</stringProp>
                      <stringProp name="RegexExtractor.regex">\[\[&quot;Claim:(.*?)\&quot;,</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">null</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                      <stringProp name="Sample.scope">all</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cTBLINKS_1 Extractor" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">cTBLINKS_1</stringProp>
                      <stringProp name="RegexExtractor.regex">ator\.\&quot;,\&quot;shortcut\&quot;:\&quot;Z\&quot;\}\],\&quot;defaultType\&quot;:\&quot;gmenuitem\&quot;\},\&quot;noaction\&quot;:1,\&quot;xtype\&quot;:\&quot;gbutton\&quot;,\&quot;iconCls\&quot;:\&quot;g-preferences-icon\&quot;\}\],\&quot;checksum\&quot;:\&quot;(.*?)\&quot;\},</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">null</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                      <stringProp name="Sample.scope">all</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cEXPOSURE Extractor" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">cEXPOSURE</stringProp>
                      <stringProp name="RegexExtractor.regex">\[&quot;Exposure:(.*?)\&quot;,</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">null</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                      <stringProp name="Sample.scope">all</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="CNG_TP86_F_Click_Subject - Activity screen not displayed for username ${USERNAME} and claimnumber ${CLAIMNUMBER}" enabled="true">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="1314699751">Activity Detail for Claim</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">2</intProp>
                      <stringProp name="Assertion.scope">all</stringProp>
                    </ResponseAssertion>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="ActivitySubjectCount Extractor" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">ActivitySubjectCount</stringProp>
                      <stringProp name="RegexExtractor.regex">Activity Detail f(.*?)r Claim</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">null</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                      <stringProp name="Sample.scope">all</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="CompleteButton Extractor" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">CompleteButton</stringProp>
                      <stringProp name="RegexExtractor.regex">CompleteB(.*?)tton</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">null</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                      <stringProp name="Sample.scope">all</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="AssignButton Extractor" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">AssignButton</stringProp>
                      <stringProp name="RegexExtractor.regex">AssignB(.*?)tton</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">null</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                      <stringProp name="Sample.scope">all</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                  </hashTree>
                  <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ThinkTime - 10" enabled="true">
                    <stringProp name="TestPlan.comments">This transaction will wait for 10 seconds</stringProp>
                  </GenericController>
                  <hashTree>
                    <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="ThinkTime" enabled="true">
                      <stringProp name="ConstantTimer.delay">10000</stringProp>
                      <stringProp name="TestPlan.comments">   Converting seconds to milliseconds - 10s x 1000</stringProp>
                    </ConstantTimer>
                    <hashTree/>
                  </hashTree>
                  <IfController guiclass="IfControllerPanel" testclass="IfController" testname="CNG_TP86_F_Click_Subject" enabled="true">
                    <stringProp name="IfController.condition">&quot;${ActivitySubjectCount}&quot;==&quot;null&quot;</stringProp>
                    <boolProp name="IfController.evaluateAll">false</boolProp>
                    <stringProp name="TestPlan.comments">If &quot;${ActivitySubjectCount}&quot;==&quot;null&quot;</stringProp>
                  </IfController>
                  <hashTree>
                    <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="-RETURNTODESKTOP" enabled="true">
                      <stringProp name="TestPlan.comments">This section contains the RETURNTODESKTOP part of Loadrunner</stringProp>
                    </GenericController>
                    <hashTree>
                      <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP86_Return_To_Desktop" enabled="true">
                        <boolProp name="TransactionController.includeTimers">false</boolProp>
                        <boolProp name="TransactionController.parent">true</boolProp>
                      </TransactionController>
                      <hashTree>
                        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_22" enabled="false">
                          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                            <collectionProp name="Arguments.arguments">
                              <elementProp name="" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                <stringProp name="Argument.name"></stringProp>
                                <stringProp name="Argument.value">&amp;QuickJump=&amp;Claim%3AMenuLinks_toggle=&amp;ClaimWorkplan%3AClaimWorkplanScreen%3AWorkplanLV%3AWorkplanFilter=AndFilter%2FAll%20open%20activities&amp;%3Atblinks=${cTBLINKS_URL2}&amp;%3Atabs=${cTABS_1_URL2}&amp;infoBar=${cINFOBAR_1_URL2}&amp;Claim%3AClaimMenuActions=${cCLAIMMENUACTIONS_URL2}&amp;Claim%3AMenuLinks=${cCLAIMMENULINKS_URL2}&amp;csrfToken=&amp;eventSource=TabBar%3ADesktopTab_act&amp;objFocusId=TabBar%3ADesktopTab</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                            </collectionProp>
                          </elementProp>
                          <stringProp name="HTTPSampler.domain"></stringProp>
                          <stringProp name="HTTPSampler.port"></stringProp>
                          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                          <stringProp name="HTTPSampler.response_timeout"></stringProp>
                          <stringProp name="HTTPSampler.protocol">https</stringProp>
                          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                          <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                          <stringProp name="HTTPSampler.method">POST</stringProp>
                          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                          <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
                          <boolProp name="HTTPSampler.image_parser">true</boolProp>
                          <boolProp name="HTTPSampler.monitor">false</boolProp>
                          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                        </HTTPSamplerProxy>
                        <hashTree>
                          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                            <collectionProp name="HeaderManager.headers">
                              <elementProp name="Accept-Language" elementType="Header">
                                <stringProp name="Header.name"></stringProp>
                                <stringProp name="Header.value"></stringProp>
                              </elementProp>
                              <elementProp name="Accept-Language" elementType="Header">
                                <stringProp name="Header.name">DNT</stringProp>
                                <stringProp name="Header.value">1</stringProp>
                              </elementProp>
                              <elementProp name="Accept-Language" elementType="Header">
                                <stringProp name="Header.name">X-Requested-With</stringProp>
                                <stringProp name="Header.value">XMLHttpRequest</stringProp>
                              </elementProp>
                            </collectionProp>
                          </HeaderManager>
                          <hashTree/>
                          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                            <collectionProp name="Asserion.test_strings">
                              <stringProp name="-252897267">Activities</stringProp>
                            </collectionProp>
                            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                            <boolProp name="Assertion.assume_success">false</boolProp>
                            <intProp name="Assertion.test_type">16</intProp>
                          </ResponseAssertion>
                          <hashTree/>
                          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cTABS" enabled="true">
                            <stringProp name="TestPlan.comments">&quot;ParamName=cTABS&quot;|&quot;RegExp=\&quot;id\&quot;:\&quot;TabBar:VacationTab\&quot;|\&quot;text\&quot;:\&quot;Vacation\&quot;|\&quot;menu\&quot;:\\{\&quot;defaultType\&quot;:\&quot;gmenuitem\&quot;},\&quot;xtype\&quot;:\&quot;gbutton\&quot;|\&quot;disabled\&quot;:true}],\&quot;checksum\&quot;:\&quot;(.*?)\&quot;}},\\{&quot;|SEARCH_FILTERS,&quot;Scope=Body&quot;|&quot;IgnoreRedirections=No&quot;|</stringProp>
                            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                            <stringProp name="RegexExtractor.refname">cTABS</stringProp>
                            <stringProp name="RegexExtractor.regex">\&quot;id\&quot;:\&quot;TabBar:VacationTab\</stringProp>
                            <stringProp name="RegexExtractor.template">$1$</stringProp>
                            <stringProp name="RegexExtractor.default">null</stringProp>
                            <stringProp name="RegexExtractor.match_number">1</stringProp>
                          </RegexExtractor>
                          <hashTree/>
                        </hashTree>
                        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_22" enabled="true">
                          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                            <collectionProp name="Arguments.arguments">
                              <elementProp name="TabBar:ClaimTab:ClaimTab_FindClaim" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">TabBar:ClaimTab:ClaimTab_FindClaim</stringProp>
                                <stringProp name="Argument.value"></stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="QuickJump" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                <stringProp name="Argument.name">QuickJump</stringProp>
                                <stringProp name="Argument.value"></stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="Claim:MenuLinks_toggle" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">Claim:MenuLinks_toggle</stringProp>
                                <stringProp name="Argument.value"></stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="ClaimWorkplan:ClaimWorkplanScreen:WorkplanLV:WorkplanFilter" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">ClaimWorkplan:ClaimWorkplanScreen:WorkplanLV:WorkplanFilter</stringProp>
                                <stringProp name="Argument.value">AndFilter/All open activities</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name=":tblinks" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">:tblinks</stringProp>
                                <stringProp name="Argument.value">${cTBLINKS}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name=":tabs" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">:tabs</stringProp>
                                <stringProp name="Argument.value">${cTABS_1}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="infoBar" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">infoBar</stringProp>
                                <stringProp name="Argument.value">${cINFOBAR_1}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="Claim:ClaimMenuActions" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">Claim:ClaimMenuActions</stringProp>
                                <stringProp name="Argument.value">${cCLAIMMENUACTIONS}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="Claim:MenuLinks" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">Claim:MenuLinks</stringProp>
                                <stringProp name="Argument.value">${cCLAIMMENULINKS}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="csrfToken" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                <stringProp name="Argument.name">csrfToken</stringProp>
                                <stringProp name="Argument.value"></stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="eventSource" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">eventSource</stringProp>
                                <stringProp name="Argument.value">TabBar:DesktopTab_act</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="objFocusId" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">objFocusId</stringProp>
                                <stringProp name="Argument.value">TabBar:DesktopTab</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                            </collectionProp>
                          </elementProp>
                          <stringProp name="HTTPSampler.domain">${GV_HOSTNAME_NAVIGATOR}</stringProp>
                          <stringProp name="HTTPSampler.port">443</stringProp>
                          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                          <stringProp name="HTTPSampler.response_timeout"></stringProp>
                          <stringProp name="HTTPSampler.protocol">https</stringProp>
                          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                          <stringProp name="HTTPSampler.path">/cc/ClaimCenter.do</stringProp>
                          <stringProp name="HTTPSampler.method">POST</stringProp>
                          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                          <boolProp name="HTTPSampler.monitor">false</boolProp>
                          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                        </HTTPSamplerProxy>
                        <hashTree>
                          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                            <collectionProp name="HeaderManager.headers">
                              <elementProp name="Content-Type" elementType="Header">
                                <stringProp name="Header.name">Content-Type</stringProp>
                                <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                              </elementProp>
                              <elementProp name="Accept-Language" elementType="Header">
                                <stringProp name="Header.name">Accept-Language</stringProp>
                                <stringProp name="Header.value">en-GB</stringProp>
                              </elementProp>
                              <elementProp name="Accept" elementType="Header">
                                <stringProp name="Header.name">Accept</stringProp>
                                <stringProp name="Header.value">*/*</stringProp>
                              </elementProp>
                              <elementProp name="User-Agent" elementType="Header">
                                <stringProp name="Header.name">User-Agent</stringProp>
                                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko</stringProp>
                              </elementProp>
                              <elementProp name="DNT" elementType="Header">
                                <stringProp name="Header.name">DNT</stringProp>
                                <stringProp name="Header.value">1</stringProp>
                              </elementProp>
                              <elementProp name="Pragma" elementType="Header">
                                <stringProp name="Header.name">Pragma</stringProp>
                                <stringProp name="Header.value">No-Cache</stringProp>
                              </elementProp>
                              <elementProp name="Referer" elementType="Header">
                                <stringProp name="Header.name">Referer</stringProp>
                                <stringProp name="Header.value">https://${GV_HOSTNAME_NAVIGATOR}/cc/resources/themes/Titanium/resources/</stringProp>
                              </elementProp>
                              <elementProp name="X-Requested-With" elementType="Header">
                                <stringProp name="Header.name">X-Requested-With</stringProp>
                                <stringProp name="Header.value">XMLHttpRequest</stringProp>
                              </elementProp>
                              <elementProp name="Accept-Encoding" elementType="Header">
                                <stringProp name="Header.name">Accept-Encoding</stringProp>
                                <stringProp name="Header.value">gzip, deflate</stringProp>
                              </elementProp>
                            </collectionProp>
                          </HeaderManager>
                          <hashTree/>
                        </hashTree>
                        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ThinkTime - 10" enabled="true">
                          <stringProp name="TestPlan.comments">This transaction will wait for 10 seconds</stringProp>
                        </GenericController>
                        <hashTree>
                          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="ThinkTime" enabled="true">
                            <stringProp name="ConstantTimer.delay">10000</stringProp>
                            <stringProp name="TestPlan.comments">   Converting seconds to milliseconds - 10s x 1000</stringProp>
                          </ConstantTimer>
                          <hashTree/>
                        </hashTree>
                      </hashTree>
                    </hashTree>
                    <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Test Action" enabled="true">
                      <intProp name="ActionProcessor.action">3</intProp>
                      <intProp name="ActionProcessor.target">0</intProp>
                      <stringProp name="ActionProcessor.duration"></stringProp>
                    </TestAction>
                    <hashTree/>
                  </hashTree>
                </hashTree>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="-CANCELACTIVITY" enabled="true">
                <stringProp name="TestPlan.comments">This section contains the CANCELACTIVITY part of Loadrunner</stringProp>
              </GenericController>
              <hashTree>
                <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP86_G_Click_Cancel" enabled="true">
                  <boolProp name="TransactionController.includeTimers">false</boolProp>
                  <boolProp name="TransactionController.parent">true</boolProp>
                </TransactionController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_6" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="TabBar:ClaimTab:ClaimTab_FindClaim" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.name">TabBar:ClaimTab:ClaimTab_FindClaim</stringProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="QuickJump" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">QuickJump</stringProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="Claim:MenuLinks_toggle" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.name">Claim:MenuLinks_toggle</stringProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="ClaimWorkplan:ClaimWorkplanScreen:WorkplanLV:WorkplanFilter" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.name">ClaimWorkplan:ClaimWorkplanScreen:WorkplanLV:WorkplanFilter</stringProp>
                          <stringProp name="Argument.value">AndFilter/All open activities</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="ActivityDetailWorksheet:ActivityDetailScreen:ActivityDV:ActivityDetailsInputSet:Activity_Subject_Extension" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">ActivityDetailWorksheet:ActivityDetailScreen:ActivityDV:ActivityDetailsInputSet:Activity_Subject_Extension</stringProp>
                        </elementProp>
                        <elementProp name="ActivityDetailWorksheet:ActivityDetailScreen:ActivityDV:ActivityDetailsInputSet:Activity_Description" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.name">ActivityDetailWorksheet:ActivityDetailScreen:ActivityDV:ActivityDetailsInputSet:Activity_Description</stringProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="ActivityDetailWorksheet:ActivityDetailScreen:ActivityDV:ActivityDetailsInputSet:RelatedTo" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.name">ActivityDetailWorksheet:ActivityDetailScreen:ActivityDV:ActivityDetailsInputSet:RelatedTo</stringProp>
                          <stringProp name="Argument.value">Exposure:${cEXPOSURE}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="ActivityDetailWorksheet:ActivityDetailScreen:ActivityDV:ActivityDetailsInputSet:Activity_DueDate" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.name">ActivityDetailWorksheet:ActivityDetailScreen:ActivityDV:ActivityDetailsInputSet:Activity_DueDate</stringProp>
                          <stringProp name="Argument.value">${cDUEDATE}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="ActivityDetailWorksheet:ActivityDetailScreen:ActivityDV:ActivityDetailsInputSet:categoryForCustomActivity" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.name">ActivityDetailWorksheet:ActivityDetailScreen:ActivityDV:ActivityDetailsInputSet:categoryForCustomActivity</stringProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="ActivityDetailWorksheet:ActivityDetailScreen:ActivityDV:ActivityDetailsInputSet:Activity_Mandatory" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.name">ActivityDetailWorksheet:ActivityDetailScreen:ActivityDV:ActivityDetailsInputSet:Activity_Mandatory</stringProp>
                          <stringProp name="Argument.value">true</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="ActivityDetailWorksheet:ActivityDetailScreen:ActivityDV:ActivityNoteInputSet:PropertyTopic" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.name">ActivityDetailWorksheet:ActivityDetailScreen:ActivityDV:ActivityNoteInputSet:PropertyTopic</stringProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="ActivityDetailWorksheet:ActivityDetailScreen:ActivityDV:ActivityNoteInputSet:Subject" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.name">ActivityDetailWorksheet:ActivityDetailScreen:ActivityDV:ActivityNoteInputSet:Subject</stringProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="ActivityDetailWorksheet:ActivityDetailScreen:ActivityDV:ActivityNoteInputSet:RelatedTo" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.name">ActivityDetailWorksheet:ActivityDetailScreen:ActivityDV:ActivityNoteInputSet:RelatedTo</stringProp>
                          <stringProp name="Argument.value">Claim:${cCLAIM_1}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="ActivityDetailWorksheet:ActivityDetailScreen:ActivityDV:ActivityNoteInputSet:Text" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.name">ActivityDetailWorksheet:ActivityDetailScreen:ActivityDV:ActivityNoteInputSet:Text</stringProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name=":tblinks" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.name">:tblinks</stringProp>
                          <stringProp name="Argument.value">${cTBLINKS_1}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name=":tabs" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.name">:tabs</stringProp>
                          <stringProp name="Argument.value">${cTABS_1}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="infoBar" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.name">infoBar</stringProp>
                          <stringProp name="Argument.value">${cINFOBAR_1}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="Claim:ClaimMenuActions" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.name">Claim:ClaimMenuActions</stringProp>
                          <stringProp name="Argument.value">${cCLAIMMENUACTIONS}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="Claim:MenuLinks" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.name">Claim:MenuLinks</stringProp>
                          <stringProp name="Argument.value">${cCLAIMMENULINKS}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="csrfToken" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">csrfToken</stringProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="eventSource" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.name">eventSource</stringProp>
                          <stringProp name="Argument.value">ActivityDetailWorksheet:ActivityDetailScreen:ActivityDetailScreen_CancelButton_act</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="objFocusId" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.name">objFocusId</stringProp>
                          <stringProp name="Argument.value">ActivityDetailWorksheet:ActivityDetailScreen:ActivityDetailScreen_CancelButton</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${GV_HOSTNAME_NAVIGATOR}</stringProp>
                    <stringProp name="HTTPSampler.port">443</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                    <stringProp name="HTTPSampler.path">/cc/ClaimCenter.do</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="Content-Type" elementType="Header">
                          <stringProp name="Header.name">Content-Type</stringProp>
                          <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                        </elementProp>
                        <elementProp name="Accept-Language" elementType="Header">
                          <stringProp name="Header.name">Accept-Language</stringProp>
                          <stringProp name="Header.value">en-GB</stringProp>
                        </elementProp>
                        <elementProp name="Accept" elementType="Header">
                          <stringProp name="Header.name">Accept</stringProp>
                          <stringProp name="Header.value">*/*</stringProp>
                        </elementProp>
                        <elementProp name="User-Agent" elementType="Header">
                          <stringProp name="Header.name">User-Agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko</stringProp>
                        </elementProp>
                        <elementProp name="DNT" elementType="Header">
                          <stringProp name="Header.name">DNT</stringProp>
                          <stringProp name="Header.value">1</stringProp>
                        </elementProp>
                        <elementProp name="Pragma" elementType="Header">
                          <stringProp name="Header.name">Pragma</stringProp>
                          <stringProp name="Header.value">No-Cache</stringProp>
                        </elementProp>
                        <elementProp name="Referer" elementType="Header">
                          <stringProp name="Header.name">Referer</stringProp>
                          <stringProp name="Header.value">https://${GV_HOSTNAME_NAVIGATOR}/cc/resources/themes/Titanium/resources/</stringProp>
                        </elementProp>
                        <elementProp name="X-Requested-With" elementType="Header">
                          <stringProp name="Header.name">X-Requested-With</stringProp>
                          <stringProp name="Header.value">XMLHttpRequest</stringProp>
                        </elementProp>
                        <elementProp name="Accept-Encoding" elementType="Header">
                          <stringProp name="Header.name">Accept-Encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                  </hashTree>
                  <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ThinkTime - 10" enabled="true">
                    <stringProp name="TestPlan.comments">This transaction will wait for 10 seconds</stringProp>
                  </GenericController>
                  <hashTree>
                    <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="ThinkTime" enabled="true">
                      <stringProp name="ConstantTimer.delay">10000</stringProp>
                      <stringProp name="TestPlan.comments">   Converting seconds to milliseconds - 10s x 1000</stringProp>
                    </ConstantTimer>
                    <hashTree/>
                  </hashTree>
                </hashTree>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="-WORKPLAN" enabled="true">
                <stringProp name="TestPlan.comments">This section contains the WORKPLAN part of Loadrunner</stringProp>
              </GenericController>
              <hashTree>
                <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP86_E_Click_Workplan" enabled="true">
                  <boolProp name="TransactionController.includeTimers">false</boolProp>
                  <boolProp name="TransactionController.parent">true</boolProp>
                </TransactionController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_4" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="Claim:ClaimMenuActions" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.name">Claim:ClaimMenuActions</stringProp>
                          <stringProp name="Argument.value">${cCLAIMMENUACTIONS}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="Claim:MenuLinks" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.name">Claim:MenuLinks</stringProp>
                          <stringProp name="Argument.value">${cCLAIMMENULINKS}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="TabBar:ClaimTab:ClaimTab_FindClaim" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.name">TabBar:ClaimTab:ClaimTab_FindClaim</stringProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="QuickJump" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">QuickJump</stringProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="Claim:MenuLinks_toggle" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.name">Claim:MenuLinks_toggle</stringProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:PeopleInvolvedDetailedLV:PeopleInvolvedDetailedFilter" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.name">ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:PeopleInvolvedDetailedLV:PeopleInvolvedDetailedFilter</stringProp>
                          <stringProp name="Argument.value">CoreFilters.AllFilter/All</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name=":tblinks" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.name">:tblinks</stringProp>
                          <stringProp name="Argument.value">${cTBLINKS}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name=":tabs" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.name">:tabs</stringProp>
                          <stringProp name="Argument.value">${cTABS_1}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="infoBar" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.name">infoBar</stringProp>
                          <stringProp name="Argument.value">${cINFOBAR_1}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="eventSource" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.name">eventSource</stringProp>
                          <stringProp name="Argument.value">Claim:MenuLinks:Claim_ClaimWorkplan_act</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="csrfToken" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">csrfToken</stringProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
                    <boolProp name="HTTPSampler.image_parser">true</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="CNG_TP86_E_Click_Workplan - Workplan screen not displayed for claim, ${CLAIMNUMBER}" enabled="true">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="100320730">Workplan</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">2</intProp>
                      <stringProp name="Assertion.scope">all</stringProp>
                    </ResponseAssertion>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cDUEDATE Extractor" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">cDUEDATE</stringProp>
                      <stringProp name="RegexExtractor.regex">\{\&quot;text\&quot;:\&quot;([0-9][0-9]/[0-9][0-9]/[0-9][0-9][0-9][0-9])\&quot;,</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">null</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                      <stringProp name="Sample.scope">all</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="Content-Type" elementType="Header">
                          <stringProp name="Header.name">Content-Type</stringProp>
                          <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                        </elementProp>
                        <elementProp name="Accept-Language" elementType="Header">
                          <stringProp name="Header.name">Accept-Language</stringProp>
                          <stringProp name="Header.value">en-GB</stringProp>
                        </elementProp>
                        <elementProp name="Accept" elementType="Header">
                          <stringProp name="Header.name">Accept</stringProp>
                          <stringProp name="Header.value">*/*</stringProp>
                        </elementProp>
                        <elementProp name="User-Agent" elementType="Header">
                          <stringProp name="Header.name">User-Agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko</stringProp>
                        </elementProp>
                        <elementProp name="DNT" elementType="Header">
                          <stringProp name="Header.name">DNT</stringProp>
                          <stringProp name="Header.value">1</stringProp>
                        </elementProp>
                        <elementProp name="Pragma" elementType="Header">
                          <stringProp name="Header.name">Pragma</stringProp>
                          <stringProp name="Header.value">No-Cache</stringProp>
                        </elementProp>
                        <elementProp name="Referer" elementType="Header">
                          <stringProp name="Header.name">Referer</stringProp>
                          <stringProp name="Header.value">https://${GV_HOSTNAME_NAVIGATOR}/cc/resources/themes/Titanium/resources/</stringProp>
                        </elementProp>
                        <elementProp name="X-Requested-With" elementType="Header">
                          <stringProp name="Header.name">X-Requested-With</stringProp>
                          <stringProp name="Header.value">XMLHttpRequest</stringProp>
                        </elementProp>
                        <elementProp name="Accept-Encoding" elementType="Header">
                          <stringProp name="Header.name">Accept-Encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="WorkplanScreenCount Extractor" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">WorkplanScreenCount</stringProp>
                      <stringProp name="RegexExtractor.regex">Workplan(.*?)</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">null</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                  </hashTree>
                  <IfController guiclass="IfControllerPanel" testclass="IfController" testname="if CNG_TP86_E_Click_Workplan" enabled="true">
                    <stringProp name="IfController.condition">&quot;${WorkplanScreenCount}&quot;==&quot;null&quot;</stringProp>
                    <boolProp name="IfController.evaluateAll">false</boolProp>
                    <stringProp name="TestPlan.comments">If &quot;${WorkplanScreenCount}&quot;==&quot;null&quot;</stringProp>
                  </IfController>
                  <hashTree>
                    <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Test Action" enabled="true">
                      <intProp name="ActionProcessor.action">3</intProp>
                      <intProp name="ActionProcessor.target">0</intProp>
                      <stringProp name="ActionProcessor.duration"></stringProp>
                    </TestAction>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP86_F_Click_Subject" enabled="true">
                  <boolProp name="TransactionController.includeTimers">false</boolProp>
                  <boolProp name="TransactionController.parent">true</boolProp>
                </TransactionController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_5" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="TabBar:ClaimTab:ClaimTab_FindClaim" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.name">TabBar:ClaimTab:ClaimTab_FindClaim</stringProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="QuickJump" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">QuickJump</stringProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="Claim:MenuLinks_toggle" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.name">Claim:MenuLinks_toggle</stringProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="ClaimWorkplan:ClaimWorkplanScreen:WorkplanLV:WorkplanFilter" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.name">ClaimWorkplan:ClaimWorkplanScreen:WorkplanLV:WorkplanFilter</stringProp>
                          <stringProp name="Argument.value">AndFilter/All open activities</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name=":tblinks" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.name">:tblinks</stringProp>
                          <stringProp name="Argument.value">${cTBLINKS}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name=":tabs" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.name">:tabs</stringProp>
                          <stringProp name="Argument.value">${cTABS_1}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="infoBar" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.name">infoBar</stringProp>
                          <stringProp name="Argument.value">${cINFOBAR_1}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="Claim:ClaimMenuActions" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.name">Claim:ClaimMenuActions</stringProp>
                          <stringProp name="Argument.value">${cCLAIMMENUACTIONS}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="Claim:MenuLinks" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.name">Claim:MenuLinks</stringProp>
                          <stringProp name="Argument.value">${cCLAIMMENULINKS}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="csrfToken" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">csrfToken</stringProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="eventSource" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.name">eventSource</stringProp>
                          <stringProp name="Argument.value">ClaimWorkplan:ClaimWorkplanScreen:WorkplanLV:0:Subject_act</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="objFocusId" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.name">objFocusId</stringProp>
                          <stringProp name="Argument.value">ClaimWorkplan:ClaimWorkplanScreen:WorkplanLV:0:Subject</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${GV_HOSTNAME_NAVIGATOR}</stringProp>
                    <stringProp name="HTTPSampler.port">443</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                    <stringProp name="HTTPSampler.path">/cc/ClaimCenter.do</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="Content-Type" elementType="Header">
                          <stringProp name="Header.name">Content-Type</stringProp>
                          <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                        </elementProp>
                        <elementProp name="Accept-Language" elementType="Header">
                          <stringProp name="Header.name">Accept-Language</stringProp>
                          <stringProp name="Header.value">en-GB</stringProp>
                        </elementProp>
                        <elementProp name="Accept" elementType="Header">
                          <stringProp name="Header.name">Accept</stringProp>
                          <stringProp name="Header.value">*/*</stringProp>
                        </elementProp>
                        <elementProp name="User-Agent" elementType="Header">
                          <stringProp name="Header.name">User-Agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko</stringProp>
                        </elementProp>
                        <elementProp name="DNT" elementType="Header">
                          <stringProp name="Header.name">DNT</stringProp>
                          <stringProp name="Header.value">1</stringProp>
                        </elementProp>
                        <elementProp name="Pragma" elementType="Header">
                          <stringProp name="Header.name">Pragma</stringProp>
                          <stringProp name="Header.value">No-Cache</stringProp>
                        </elementProp>
                        <elementProp name="Referer" elementType="Header">
                          <stringProp name="Header.name">Referer</stringProp>
                          <stringProp name="Header.value">https://${GV_HOSTNAME_NAVIGATOR}/cc/resources/themes/Titanium/resources/</stringProp>
                        </elementProp>
                        <elementProp name="X-Requested-With" elementType="Header">
                          <stringProp name="Header.name">X-Requested-With</stringProp>
                          <stringProp name="Header.value">XMLHttpRequest</stringProp>
                        </elementProp>
                        <elementProp name="Accept-Encoding" elementType="Header">
                          <stringProp name="Header.name">Accept-Encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cCLAIM_1 Extractor" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">cCLAIM_1</stringProp>
                      <stringProp name="RegexExtractor.regex">\[\[&quot;Claim:(.*?)\&quot;,</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">null</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                      <stringProp name="Sample.scope">all</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cTBLINKS_1 Extractor" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">cTBLINKS_1</stringProp>
                      <stringProp name="RegexExtractor.regex">ator\.\&quot;,\&quot;shortcut\&quot;:\&quot;Z\&quot;\}\],\&quot;defaultType\&quot;:\&quot;gmenuitem\&quot;\},\&quot;noaction\&quot;:1,\&quot;xtype\&quot;:\&quot;gbutton\&quot;,\&quot;iconCls\&quot;:\&quot;g-preferences-icon\&quot;\}\],\&quot;checksum\&quot;:\&quot;(.*?)\&quot;\},</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">null</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                      <stringProp name="Sample.scope">all</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cEXPOSURE Extractor" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">cEXPOSURE</stringProp>
                      <stringProp name="RegexExtractor.regex">\[&quot;Exposure:(.*?)\&quot;,</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">null</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                      <stringProp name="Sample.scope">all</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="CNG_TP86_F_Click_Subject - Activity screen not displayed for username ${USERNAME} and claimnumber ${CLAIMNUMBER}" enabled="true">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="1314699751">Activity Detail for Claim</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">16</intProp>
                      <stringProp name="Assertion.scope">all</stringProp>
                    </ResponseAssertion>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="ActivitySubjectCount Extractor" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">ActivitySubjectCount</stringProp>
                      <stringProp name="RegexExtractor.regex">Activity Detail f(.*?)r Claim</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">null</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                      <stringProp name="Sample.scope">all</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="CompleteButton Extractor" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">CompleteButton</stringProp>
                      <stringProp name="RegexExtractor.regex">CompleteB(.*?)tton</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">null</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                      <stringProp name="Sample.scope">all</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="AssignButton Extractor" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">AssignButton</stringProp>
                      <stringProp name="RegexExtractor.regex">AssignB(.*?)tton</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">null</stringProp>
                      <stringProp name="RegexExtractor.match_number">-1</stringProp>
                      <stringProp name="Sample.scope">all</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Activity_Subject Extractor" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">Activity_Subject</stringProp>
                      <stringProp name="RegexExtractor.regex">Activity_Subject&quot;(.*?)value&quot;:&quot;(.*?)&quot;</stringProp>
                      <stringProp name="RegexExtractor.template">$2$</stringProp>
                      <stringProp name="RegexExtractor.default">null</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                      <stringProp name="Sample.scope">all</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Activity_Description Extractor" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">Activity_Description</stringProp>
                      <stringProp name="RegexExtractor.regex">Activity_Description&quot;(.*?)value&quot;:&quot;(.*?)&quot;</stringProp>
                      <stringProp name="RegexExtractor.template">$2$</stringProp>
                      <stringProp name="RegexExtractor.default">null</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                      <stringProp name="Sample.scope">all</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                  </hashTree>
                  <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ThinkTime - 10" enabled="true">
                    <stringProp name="TestPlan.comments">This transaction will wait for 10 seconds</stringProp>
                  </GenericController>
                  <hashTree>
                    <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="ThinkTime" enabled="true">
                      <stringProp name="ConstantTimer.delay">10000</stringProp>
                      <stringProp name="TestPlan.comments">   Converting seconds to milliseconds - 10s x 1000</stringProp>
                    </ConstantTimer>
                    <hashTree/>
                  </hashTree>
                  <IfController guiclass="IfControllerPanel" testclass="IfController" testname="  CNG_TP86_F_Click_Subject " enabled="true">
                    <stringProp name="IfController.condition">&quot;${ActivitySubjectCount}&quot;==&quot;null&quot;</stringProp>
                    <boolProp name="IfController.evaluateAll">false</boolProp>
                    <stringProp name="TestPlan.comments">If &quot;${ActivitySubjectCount}&quot;==&quot;null&quot;</stringProp>
                  </IfController>
                  <hashTree>
                    <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="-RETURNTODESKTOP" enabled="true">
                      <stringProp name="TestPlan.comments">This section contains the RETURNTODESKTOP part of Loadrunner</stringProp>
                    </GenericController>
                    <hashTree>
                      <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP86_Return_To_Desktop" enabled="true">
                        <boolProp name="TransactionController.includeTimers">false</boolProp>
                        <boolProp name="TransactionController.parent">true</boolProp>
                      </TransactionController>
                      <hashTree>
                        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_22" enabled="false">
                          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                            <collectionProp name="Arguments.arguments">
                              <elementProp name="" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                <stringProp name="Argument.name"></stringProp>
                                <stringProp name="Argument.value">&amp;QuickJump=&amp;Claim%3AMenuLinks_toggle=&amp;ClaimWorkplan%3AClaimWorkplanScreen%3AWorkplanLV%3AWorkplanFilter=AndFilter%2FAll%20open%20activities&amp;%3Atblinks=${cTBLINKS_URL2}&amp;%3Atabs=${cTABS_1_URL2}&amp;infoBar=${cINFOBAR_1_URL2}&amp;Claim%3AClaimMenuActions=${cCLAIMMENUACTIONS_URL2}&amp;Claim%3AMenuLinks=${cCLAIMMENULINKS_URL2}&amp;csrfToken=&amp;eventSource=TabBar%3ADesktopTab_act&amp;objFocusId=TabBar%3ADesktopTab</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                            </collectionProp>
                          </elementProp>
                          <stringProp name="HTTPSampler.domain"></stringProp>
                          <stringProp name="HTTPSampler.port"></stringProp>
                          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                          <stringProp name="HTTPSampler.response_timeout"></stringProp>
                          <stringProp name="HTTPSampler.protocol">https</stringProp>
                          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                          <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                          <stringProp name="HTTPSampler.method">POST</stringProp>
                          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                          <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
                          <boolProp name="HTTPSampler.image_parser">true</boolProp>
                          <boolProp name="HTTPSampler.monitor">false</boolProp>
                          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                        </HTTPSamplerProxy>
                        <hashTree>
                          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                            <collectionProp name="HeaderManager.headers">
                              <elementProp name="Accept-Language" elementType="Header">
                                <stringProp name="Header.name"></stringProp>
                                <stringProp name="Header.value"></stringProp>
                              </elementProp>
                              <elementProp name="Accept-Language" elementType="Header">
                                <stringProp name="Header.name">DNT</stringProp>
                                <stringProp name="Header.value">1</stringProp>
                              </elementProp>
                              <elementProp name="Accept-Language" elementType="Header">
                                <stringProp name="Header.name">X-Requested-With</stringProp>
                                <stringProp name="Header.value">XMLHttpRequest</stringProp>
                              </elementProp>
                            </collectionProp>
                          </HeaderManager>
                          <hashTree/>
                          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                            <collectionProp name="Asserion.test_strings">
                              <stringProp name="-252897267">Activities</stringProp>
                            </collectionProp>
                            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                            <boolProp name="Assertion.assume_success">false</boolProp>
                            <intProp name="Assertion.test_type">16</intProp>
                          </ResponseAssertion>
                          <hashTree/>
                          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cTABS" enabled="true">
                            <stringProp name="TestPlan.comments">&quot;ParamName=cTABS&quot;|&quot;RegExp=\&quot;id\&quot;:\&quot;TabBar:VacationTab\&quot;|\&quot;text\&quot;:\&quot;Vacation\&quot;|\&quot;menu\&quot;:\\{\&quot;defaultType\&quot;:\&quot;gmenuitem\&quot;},\&quot;xtype\&quot;:\&quot;gbutton\&quot;|\&quot;disabled\&quot;:true}],\&quot;checksum\&quot;:\&quot;(.*?)\&quot;}},\\{&quot;|SEARCH_FILTERS,&quot;Scope=Body&quot;|&quot;IgnoreRedirections=No&quot;|</stringProp>
                            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                            <stringProp name="RegexExtractor.refname">cTABS</stringProp>
                            <stringProp name="RegexExtractor.regex">\&quot;id\&quot;:\&quot;TabBar:VacationTab\</stringProp>
                            <stringProp name="RegexExtractor.template">$1$</stringProp>
                            <stringProp name="RegexExtractor.default">null</stringProp>
                            <stringProp name="RegexExtractor.match_number">1</stringProp>
                          </RegexExtractor>
                          <hashTree/>
                        </hashTree>
                        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_22" enabled="true">
                          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                            <collectionProp name="Arguments.arguments">
                              <elementProp name="TabBar:ClaimTab:ClaimTab_FindClaim" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">TabBar:ClaimTab:ClaimTab_FindClaim</stringProp>
                                <stringProp name="Argument.value"></stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="QuickJump" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                <stringProp name="Argument.name">QuickJump</stringProp>
                                <stringProp name="Argument.value"></stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="Claim:MenuLinks_toggle" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">Claim:MenuLinks_toggle</stringProp>
                                <stringProp name="Argument.value"></stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="ClaimWorkplan:ClaimWorkplanScreen:WorkplanLV:WorkplanFilter" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">ClaimWorkplan:ClaimWorkplanScreen:WorkplanLV:WorkplanFilter</stringProp>
                                <stringProp name="Argument.value">AndFilter/All open activities</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name=":tblinks" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">:tblinks</stringProp>
                                <stringProp name="Argument.value">${cTBLINKS}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name=":tabs" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">:tabs</stringProp>
                                <stringProp name="Argument.value">${cTABS_1}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="infoBar" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">infoBar</stringProp>
                                <stringProp name="Argument.value">${cINFOBAR_1}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="Claim:ClaimMenuActions" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">Claim:ClaimMenuActions</stringProp>
                                <stringProp name="Argument.value">${cCLAIMMENUACTIONS}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="Claim:MenuLinks" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">Claim:MenuLinks</stringProp>
                                <stringProp name="Argument.value">${cCLAIMMENULINKS}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="csrfToken" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                <stringProp name="Argument.name">csrfToken</stringProp>
                                <stringProp name="Argument.value"></stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="eventSource" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">eventSource</stringProp>
                                <stringProp name="Argument.value">TabBar:DesktopTab_act</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="objFocusId" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">objFocusId</stringProp>
                                <stringProp name="Argument.value">TabBar:DesktopTab</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                            </collectionProp>
                          </elementProp>
                          <stringProp name="HTTPSampler.domain">${GV_HOSTNAME_NAVIGATOR}</stringProp>
                          <stringProp name="HTTPSampler.port">443</stringProp>
                          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                          <stringProp name="HTTPSampler.response_timeout"></stringProp>
                          <stringProp name="HTTPSampler.protocol">https</stringProp>
                          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                          <stringProp name="HTTPSampler.path">/cc/ClaimCenter.do</stringProp>
                          <stringProp name="HTTPSampler.method">POST</stringProp>
                          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                          <boolProp name="HTTPSampler.monitor">false</boolProp>
                          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                        </HTTPSamplerProxy>
                        <hashTree>
                          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                            <collectionProp name="HeaderManager.headers">
                              <elementProp name="Content-Type" elementType="Header">
                                <stringProp name="Header.name">Content-Type</stringProp>
                                <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                              </elementProp>
                              <elementProp name="Accept-Language" elementType="Header">
                                <stringProp name="Header.name">Accept-Language</stringProp>
                                <stringProp name="Header.value">en-GB</stringProp>
                              </elementProp>
                              <elementProp name="Accept" elementType="Header">
                                <stringProp name="Header.name">Accept</stringProp>
                                <stringProp name="Header.value">*/*</stringProp>
                              </elementProp>
                              <elementProp name="User-Agent" elementType="Header">
                                <stringProp name="Header.name">User-Agent</stringProp>
                                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko</stringProp>
                              </elementProp>
                              <elementProp name="DNT" elementType="Header">
                                <stringProp name="Header.name">DNT</stringProp>
                                <stringProp name="Header.value">1</stringProp>
                              </elementProp>
                              <elementProp name="Pragma" elementType="Header">
                                <stringProp name="Header.name">Pragma</stringProp>
                                <stringProp name="Header.value">No-Cache</stringProp>
                              </elementProp>
                              <elementProp name="Referer" elementType="Header">
                                <stringProp name="Header.name">Referer</stringProp>
                                <stringProp name="Header.value">https://${GV_HOSTNAME_NAVIGATOR}/cc/resources/themes/Titanium/resources/</stringProp>
                              </elementProp>
                              <elementProp name="X-Requested-With" elementType="Header">
                                <stringProp name="Header.name">X-Requested-With</stringProp>
                                <stringProp name="Header.value">XMLHttpRequest</stringProp>
                              </elementProp>
                              <elementProp name="Accept-Encoding" elementType="Header">
                                <stringProp name="Header.name">Accept-Encoding</stringProp>
                                <stringProp name="Header.value">gzip, deflate</stringProp>
                              </elementProp>
                            </collectionProp>
                          </HeaderManager>
                          <hashTree/>
                        </hashTree>
                        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ThinkTime - 10" enabled="true">
                          <stringProp name="TestPlan.comments">This transaction will wait for 10 seconds</stringProp>
                        </GenericController>
                        <hashTree>
                          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="ThinkTime" enabled="true">
                            <stringProp name="ConstantTimer.delay">10000</stringProp>
                            <stringProp name="TestPlan.comments">   Converting seconds to milliseconds - 10s x 1000</stringProp>
                          </ConstantTimer>
                          <hashTree/>
                        </hashTree>
                      </hashTree>
                    </hashTree>
                    <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Test Action" enabled="true">
                      <intProp name="ActionProcessor.action">3</intProp>
                      <intProp name="ActionProcessor.target">0</intProp>
                      <stringProp name="ActionProcessor.duration"></stringProp>
                    </TestAction>
                    <hashTree/>
                  </hashTree>
                </hashTree>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="-ASSIGNACTIVITY" enabled="true">
                <stringProp name="TestPlan.comments">This section contains the ASSIGNACTIVITY part of Loadrunner</stringProp>
              </GenericController>
              <hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="-ASSIGNACTIVITY If ${AssignButton_matchNr}&lt;=2" enabled="true">
                  <stringProp name="IfController.condition">${AssignButton_matchNr}&lt;=2</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="-CANCELACTIVITY" enabled="true">
                    <stringProp name="TestPlan.comments">This section contains the CANCELACTIVITY part of Loadrunner</stringProp>
                  </GenericController>
                  <hashTree>
                    <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP86_G_Click_Cancel" enabled="true">
                      <boolProp name="TransactionController.includeTimers">false</boolProp>
                      <boolProp name="TransactionController.parent">true</boolProp>
                    </TransactionController>
                    <hashTree>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_6" enabled="true">
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                          <collectionProp name="Arguments.arguments">
                            <elementProp name="TabBar:ClaimTab:ClaimTab_FindClaim" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">TabBar:ClaimTab:ClaimTab_FindClaim</stringProp>
                              <stringProp name="Argument.value"></stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="QuickJump" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">QuickJump</stringProp>
                              <stringProp name="Argument.value"></stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="Claim:MenuLinks_toggle" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">Claim:MenuLinks_toggle</stringProp>
                              <stringProp name="Argument.value"></stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="ClaimWorkplan:ClaimWorkplanScreen:WorkplanLV:WorkplanFilter" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">ClaimWorkplan:ClaimWorkplanScreen:WorkplanLV:WorkplanFilter</stringProp>
                              <stringProp name="Argument.value">AndFilter/All open activities</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="ActivityDetailWorksheet:ActivityDetailScreen:ActivityDV:ActivityDetailsInputSet:Activity_Subject_Extension" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.value"></stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              <stringProp name="Argument.name">ActivityDetailWorksheet:ActivityDetailScreen:ActivityDV:ActivityDetailsInputSet:Activity_Subject_Extension</stringProp>
                            </elementProp>
                            <elementProp name="ActivityDetailWorksheet:ActivityDetailScreen:ActivityDV:ActivityDetailsInputSet:Activity_Description" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">ActivityDetailWorksheet:ActivityDetailScreen:ActivityDV:ActivityDetailsInputSet:Activity_Description</stringProp>
                              <stringProp name="Argument.value"></stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="ActivityDetailWorksheet:ActivityDetailScreen:ActivityDV:ActivityDetailsInputSet:RelatedTo" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">ActivityDetailWorksheet:ActivityDetailScreen:ActivityDV:ActivityDetailsInputSet:RelatedTo</stringProp>
                              <stringProp name="Argument.value">Exposure:${cEXPOSURE}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="ActivityDetailWorksheet:ActivityDetailScreen:ActivityDV:ActivityDetailsInputSet:Activity_DueDate" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">ActivityDetailWorksheet:ActivityDetailScreen:ActivityDV:ActivityDetailsInputSet:Activity_DueDate</stringProp>
                              <stringProp name="Argument.value">${cDUEDATE}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="ActivityDetailWorksheet:ActivityDetailScreen:ActivityDV:ActivityDetailsInputSet:categoryForCustomActivity" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">ActivityDetailWorksheet:ActivityDetailScreen:ActivityDV:ActivityDetailsInputSet:categoryForCustomActivity</stringProp>
                              <stringProp name="Argument.value"></stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="ActivityDetailWorksheet:ActivityDetailScreen:ActivityDV:ActivityDetailsInputSet:Activity_Mandatory" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">ActivityDetailWorksheet:ActivityDetailScreen:ActivityDV:ActivityDetailsInputSet:Activity_Mandatory</stringProp>
                              <stringProp name="Argument.value">true</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="ActivityDetailWorksheet:ActivityDetailScreen:ActivityDV:ActivityNoteInputSet:PropertyTopic" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">ActivityDetailWorksheet:ActivityDetailScreen:ActivityDV:ActivityNoteInputSet:PropertyTopic</stringProp>
                              <stringProp name="Argument.value"></stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="ActivityDetailWorksheet:ActivityDetailScreen:ActivityDV:ActivityNoteInputSet:Subject" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">ActivityDetailWorksheet:ActivityDetailScreen:ActivityDV:ActivityNoteInputSet:Subject</stringProp>
                              <stringProp name="Argument.value"></stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="ActivityDetailWorksheet:ActivityDetailScreen:ActivityDV:ActivityNoteInputSet:RelatedTo" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">ActivityDetailWorksheet:ActivityDetailScreen:ActivityDV:ActivityNoteInputSet:RelatedTo</stringProp>
                              <stringProp name="Argument.value">Claim:${cCLAIM_1}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="ActivityDetailWorksheet:ActivityDetailScreen:ActivityDV:ActivityNoteInputSet:Text" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">ActivityDetailWorksheet:ActivityDetailScreen:ActivityDV:ActivityNoteInputSet:Text</stringProp>
                              <stringProp name="Argument.value"></stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name=":tblinks" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">:tblinks</stringProp>
                              <stringProp name="Argument.value">${cTBLINKS_1}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name=":tabs" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">:tabs</stringProp>
                              <stringProp name="Argument.value">${cTABS_1}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="infoBar" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">infoBar</stringProp>
                              <stringProp name="Argument.value">${cINFOBAR_1}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="Claim:ClaimMenuActions" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">Claim:ClaimMenuActions</stringProp>
                              <stringProp name="Argument.value">${cCLAIMMENUACTIONS}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="Claim:MenuLinks" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">Claim:MenuLinks</stringProp>
                              <stringProp name="Argument.value">${cCLAIMMENULINKS}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="csrfToken" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">csrfToken</stringProp>
                              <stringProp name="Argument.value"></stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="eventSource" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">eventSource</stringProp>
                              <stringProp name="Argument.value">ActivityDetailWorksheet:ActivityDetailScreen:ActivityDetailScreen_CancelButton_act</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="objFocusId" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">objFocusId</stringProp>
                              <stringProp name="Argument.value">ActivityDetailWorksheet:ActivityDetailScreen:ActivityDetailScreen_CancelButton</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                          </collectionProp>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain">${GV_HOSTNAME_NAVIGATOR}</stringProp>
                        <stringProp name="HTTPSampler.port">443</stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        <stringProp name="HTTPSampler.protocol">https</stringProp>
                        <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                        <stringProp name="HTTPSampler.path">/cc/ClaimCenter.do</stringProp>
                        <stringProp name="HTTPSampler.method">POST</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                        <boolProp name="HTTPSampler.monitor">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree>
                        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                          <collectionProp name="HeaderManager.headers">
                            <elementProp name="Content-Type" elementType="Header">
                              <stringProp name="Header.name">Content-Type</stringProp>
                              <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                            </elementProp>
                            <elementProp name="Accept-Language" elementType="Header">
                              <stringProp name="Header.name">Accept-Language</stringProp>
                              <stringProp name="Header.value">en-GB</stringProp>
                            </elementProp>
                            <elementProp name="Accept" elementType="Header">
                              <stringProp name="Header.name">Accept</stringProp>
                              <stringProp name="Header.value">*/*</stringProp>
                            </elementProp>
                            <elementProp name="User-Agent" elementType="Header">
                              <stringProp name="Header.name">User-Agent</stringProp>
                              <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko</stringProp>
                            </elementProp>
                            <elementProp name="DNT" elementType="Header">
                              <stringProp name="Header.name">DNT</stringProp>
                              <stringProp name="Header.value">1</stringProp>
                            </elementProp>
                            <elementProp name="Pragma" elementType="Header">
                              <stringProp name="Header.name">Pragma</stringProp>
                              <stringProp name="Header.value">No-Cache</stringProp>
                            </elementProp>
                            <elementProp name="Referer" elementType="Header">
                              <stringProp name="Header.name">Referer</stringProp>
                              <stringProp name="Header.value">https://${GV_HOSTNAME_NAVIGATOR}/cc/resources/themes/Titanium/resources/</stringProp>
                            </elementProp>
                            <elementProp name="X-Requested-With" elementType="Header">
                              <stringProp name="Header.name">X-Requested-With</stringProp>
                              <stringProp name="Header.value">XMLHttpRequest</stringProp>
                            </elementProp>
                            <elementProp name="Accept-Encoding" elementType="Header">
                              <stringProp name="Header.name">Accept-Encoding</stringProp>
                              <stringProp name="Header.value">gzip, deflate</stringProp>
                            </elementProp>
                          </collectionProp>
                        </HeaderManager>
                        <hashTree/>
                        <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="AssignActivitesScreenCount Extractor" enabled="true">
                          <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                          <stringProp name="RegexExtractor.refname">AssignActivitesScreenCount</stringProp>
                          <stringProp name="RegexExtractor.regex">Assign Activ(.*?)ties</stringProp>
                          <stringProp name="RegexExtractor.template">$1$</stringProp>
                          <stringProp name="RegexExtractor.default">null</stringProp>
                          <stringProp name="RegexExtractor.match_number">1</stringProp>
                          <stringProp name="Sample.scope">all</stringProp>
                        </RegexExtractor>
                        <hashTree/>
                      </hashTree>
                    </hashTree>
                  </hashTree>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname=" -ASSIGNACTIVITY If ${AssignButton_matchNr}&gt;2" enabled="true">
                  <stringProp name="IfController.condition">${AssignButton_matchNr}&gt;2</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP86_I_Click_Activity_Detail_Assign" enabled="true">
                    <boolProp name="TransactionController.includeTimers">false</boolProp>
                    <boolProp name="TransactionController.parent">true</boolProp>
                  </TransactionController>
                  <hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_14" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="TabBar:ClaimTab:ClaimTab_FindClaim" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">TabBar:ClaimTab:ClaimTab_FindClaim</stringProp>
                          </elementProp>
                          <elementProp name="QuickJump" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">QuickJump</stringProp>
                          </elementProp>
                          <elementProp name="Claim:MenuLinks_toggle" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">Claim:MenuLinks_toggle</stringProp>
                          </elementProp>
                          <elementProp name="ClaimWorkplan:ClaimWorkplanScreen:WorkplanLV:WorkplanFilter" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.value">AndFilter/All open activities</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">ClaimWorkplan:ClaimWorkplanScreen:WorkplanLV:WorkplanFilter</stringProp>
                          </elementProp>
                          <elementProp name="ActivityDetailWorksheet:ActivityDetailScreen:ActivityDV:ActivityDetailsInputSet:Activity_Subject" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.value">${Activity_Subject}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">ActivityDetailWorksheet:ActivityDetailScreen:ActivityDV:ActivityDetailsInputSet:Activity_Subject</stringProp>
                          </elementProp>
                          <elementProp name="ActivityDetailWorksheet:ActivityDetailScreen:ActivityDV:ActivityDetailsInputSet:Activity_Subject_Extension" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">ActivityDetailWorksheet:ActivityDetailScreen:ActivityDV:ActivityDetailsInputSet:Activity_Subject_Extension</stringProp>
                          </elementProp>
                          <elementProp name="ActivityDetailWorksheet:ActivityDetailScreen:ActivityDV:ActivityDetailsInputSet:Activity_Description" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.value">${Activity_Description}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">ActivityDetailWorksheet:ActivityDetailScreen:ActivityDV:ActivityDetailsInputSet:Activity_Description</stringProp>
                          </elementProp>
                          <elementProp name="ActivityDetailWorksheet:ActivityDetailScreen:ActivityDV:ActivityDetailsInputSet:RelatedTo" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.value">Exposure:${cEXPOSURE}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">ActivityDetailWorksheet:ActivityDetailScreen:ActivityDV:ActivityDetailsInputSet:RelatedTo</stringProp>
                          </elementProp>
                          <elementProp name="ActivityDetailWorksheet:ActivityDetailScreen:ActivityDV:ActivityDetailsInputSet:Activity_DueDate" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.value">${cDUEDATE}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">ActivityDetailWorksheet:ActivityDetailScreen:ActivityDV:ActivityDetailsInputSet:Activity_DueDate</stringProp>
                          </elementProp>
                          <elementProp name="ActivityDetailWorksheet:ActivityDetailScreen:ActivityDV:ActivityDetailsInputSet:categoryForCustomActivity" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">ActivityDetailWorksheet:ActivityDetailScreen:ActivityDV:ActivityDetailsInputSet:categoryForCustomActivity</stringProp>
                          </elementProp>
                          <elementProp name="ActivityDetailWorksheet:ActivityDetailScreen:ActivityDV:ActivityDetailsInputSet:Activity_Priority" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.value">normal</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">ActivityDetailWorksheet:ActivityDetailScreen:ActivityDV:ActivityDetailsInputSet:Activity_Priority</stringProp>
                          </elementProp>
                          <elementProp name="ActivityDetailWorksheet:ActivityDetailScreen:ActivityDV:ActivityDetailsInputSet:Activity_Mandatory" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.value">false</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">ActivityDetailWorksheet:ActivityDetailScreen:ActivityDV:ActivityDetailsInputSet:Activity_Mandatory</stringProp>
                          </elementProp>
                          <elementProp name="ActivityDetailWorksheet:ActivityDetailScreen:ActivityDV:ActivityNoteInputSet:PropertyTopic" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">ActivityDetailWorksheet:ActivityDetailScreen:ActivityDV:ActivityNoteInputSet:PropertyTopic</stringProp>
                          </elementProp>
                          <elementProp name="ActivityDetailWorksheet:ActivityDetailScreen:ActivityDV:ActivityNoteInputSet:Subject" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">ActivityDetailWorksheet:ActivityDetailScreen:ActivityDV:ActivityNoteInputSet:Subject</stringProp>
                          </elementProp>
                          <elementProp name="ActivityDetailWorksheet:ActivityDetailScreen:ActivityDV:ActivityNoteInputSet:RelatedTo" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.value">Exposure:${cEXPOSURE}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">ActivityDetailWorksheet:ActivityDetailScreen:ActivityDV:ActivityNoteInputSet:RelatedTo</stringProp>
                          </elementProp>
                          <elementProp name="ActivityDetailWorksheet:ActivityDetailScreen:ActivityDV:ActivityNoteInputSet:Text" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">ActivityDetailWorksheet:ActivityDetailScreen:ActivityDV:ActivityNoteInputSet:Text</stringProp>
                          </elementProp>
                          <elementProp name=":tblinks" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.value">${cTBLINKS_1}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">:tblinks</stringProp>
                          </elementProp>
                          <elementProp name=":tabs" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.value">${cTABS_1}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">:tabs</stringProp>
                          </elementProp>
                          <elementProp name="infoBar" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.value">${cINFOBAR_1}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">infoBar</stringProp>
                          </elementProp>
                          <elementProp name="Claim:ClaimMenuActions" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.value">${cCLAIMMENUACTIONS}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">Claim:ClaimMenuActions</stringProp>
                          </elementProp>
                          <elementProp name="Claim:MenuLinks" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.value">${cCLAIMMENULINKS}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">Claim:MenuLinks</stringProp>
                          </elementProp>
                          <elementProp name="csrfToken" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">csrfToken</stringProp>
                          </elementProp>
                          <elementProp name="eventSource" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.value">ActivityDetailWorksheet:ActivityDetailScreen:ActivityDetailScreen_AssignButton_act</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">eventSource</stringProp>
                          </elementProp>
                          <elementProp name="objFocusId" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.value">ActivityDetailWorksheet:ActivityDetailScreen:ActivityDetailScreen_AssignButton</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">objFocusId</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain">${GV_HOSTNAME_NAVIGATOR}</stringProp>
                      <stringProp name="HTTPSampler.port">443</stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol">https</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                      <stringProp name="HTTPSampler.path">/cc/ClaimCenter.do</stringProp>
                      <stringProp name="HTTPSampler.method">POST</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="Content-Type" elementType="Header">
                            <stringProp name="Header.name">Content-Type</stringProp>
                            <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                          </elementProp>
                          <elementProp name="Accept-Language" elementType="Header">
                            <stringProp name="Header.name">Accept-Language</stringProp>
                            <stringProp name="Header.value">en-GB</stringProp>
                          </elementProp>
                          <elementProp name="Accept" elementType="Header">
                            <stringProp name="Header.name">Accept</stringProp>
                            <stringProp name="Header.value">*/*</stringProp>
                          </elementProp>
                          <elementProp name="User-Agent" elementType="Header">
                            <stringProp name="Header.name">User-Agent</stringProp>
                            <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko</stringProp>
                          </elementProp>
                          <elementProp name="DNT" elementType="Header">
                            <stringProp name="Header.name">DNT</stringProp>
                            <stringProp name="Header.value">1</stringProp>
                          </elementProp>
                          <elementProp name="Pragma" elementType="Header">
                            <stringProp name="Header.name">Pragma</stringProp>
                            <stringProp name="Header.value">No-Cache</stringProp>
                          </elementProp>
                          <elementProp name="Referer" elementType="Header">
                            <stringProp name="Header.name">Referer</stringProp>
                            <stringProp name="Header.value">https://${GV_HOSTNAME_NAVIGATOR}/cc/resources/themes/Titanium/resources/</stringProp>
                          </elementProp>
                          <elementProp name="X-Requested-With" elementType="Header">
                            <stringProp name="Header.name">X-Requested-With</stringProp>
                            <stringProp name="Header.value">XMLHttpRequest</stringProp>
                          </elementProp>
                          <elementProp name="Accept-Encoding" elementType="Header">
                            <stringProp name="Header.name">Accept-Encoding</stringProp>
                            <stringProp name="Header.value">gzip, deflate</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                      <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="AssignActivitesScreenCount Extractor" enabled="true">
                        <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                        <stringProp name="RegexExtractor.refname">AssignActivitesScreenCount</stringProp>
                        <stringProp name="RegexExtractor.regex">Assign Activ(.*?)ties</stringProp>
                        <stringProp name="RegexExtractor.template">$1$</stringProp>
                        <stringProp name="RegexExtractor.default">null</stringProp>
                        <stringProp name="RegexExtractor.match_number">1</stringProp>
                        <stringProp name="Sample.scope">all</stringProp>
                      </RegexExtractor>
                      <hashTree/>
                    </hashTree>
                    <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ThinkTime - 10" enabled="true">
                      <stringProp name="TestPlan.comments">This transaction will wait for 10 seconds</stringProp>
                    </GenericController>
                    <hashTree>
                      <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="ThinkTime" enabled="true">
                        <stringProp name="ConstantTimer.delay">10000</stringProp>
                        <stringProp name="TestPlan.comments">   Converting seconds to milliseconds - 10s x 1000</stringProp>
                      </ConstantTimer>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                  <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP86_J_Click_Assign" enabled="true">
                    <boolProp name="TransactionController.includeTimers">false</boolProp>
                    <boolProp name="TransactionController.parent">true</boolProp>
                  </TransactionController>
                  <hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_15" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="TabBar:ClaimTab:ClaimTab_FindClaim" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">TabBar:ClaimTab:ClaimTab_FindClaim</stringProp>
                          </elementProp>
                          <elementProp name="QuickJump" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">QuickJump</stringProp>
                          </elementProp>
                          <elementProp name="Claim:MenuLinks_toggle" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">Claim:MenuLinks_toggle</stringProp>
                          </elementProp>
                          <elementProp name="AssignmentPopup.SelectionType_Radio" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.value">AssignActivitiesPopup:AssignmentPopupScreen:userSearch:AssignmentPopupDV:FromList_Choice</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">AssignmentPopup.SelectionType_Radio</stringProp>
                          </elementProp>
                          <elementProp name="AssignActivitiesPopup:AssignmentPopupScreen:userSearch:AssignmentPopupDV:SelectFromList" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.value">Use automated assignment</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">AssignActivitiesPopup:AssignmentPopupScreen:userSearch:AssignmentPopupDV:SelectFromList</stringProp>
                          </elementProp>
                          <elementProp name="AssignActivitiesPopup:AssignmentPopupScreen:userSearch:UserSearchDV:SearchFor" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.value">User</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">AssignActivitiesPopup:AssignmentPopupScreen:userSearch:UserSearchDV:SearchFor</stringProp>
                          </elementProp>
                          <elementProp name=":tblinks" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.value">${cTBLINKS_1}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">:tblinks</stringProp>
                          </elementProp>
                          <elementProp name=":tabs" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.value">${cTABS_1}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">:tabs</stringProp>
                          </elementProp>
                          <elementProp name="infoBar" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.value">${cINFOBAR_1}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">infoBar</stringProp>
                          </elementProp>
                          <elementProp name="Claim:MenuLinks" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.value">${cCLAIMMENULINKS}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">Claim:MenuLinks</stringProp>
                          </elementProp>
                          <elementProp name="csrfToken" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">csrfToken</stringProp>
                          </elementProp>
                          <elementProp name="eventSource" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.value">AssignActivitiesPopup:AssignmentPopupScreen:userSearch:AssignmentPopupDV:AssignmentPopupScreen_ButtonButton_act</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">eventSource</stringProp>
                          </elementProp>
                          <elementProp name="objFocusId" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.value">AssignActivitiesPopup:AssignmentPopupScreen:userSearch:AssignmentPopupDV:AssignmentPopupScreen_ButtonButton</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">objFocusId</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain">${GV_HOSTNAME_NAVIGATOR}</stringProp>
                      <stringProp name="HTTPSampler.port">443</stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol">https</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                      <stringProp name="HTTPSampler.path">/cc/ClaimCenter.do</stringProp>
                      <stringProp name="HTTPSampler.method">POST</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="Content-Type" elementType="Header">
                            <stringProp name="Header.name">Content-Type</stringProp>
                            <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                          </elementProp>
                          <elementProp name="Accept-Language" elementType="Header">
                            <stringProp name="Header.name">Accept-Language</stringProp>
                            <stringProp name="Header.value">en-GB</stringProp>
                          </elementProp>
                          <elementProp name="Accept" elementType="Header">
                            <stringProp name="Header.name">Accept</stringProp>
                            <stringProp name="Header.value">*/*</stringProp>
                          </elementProp>
                          <elementProp name="User-Agent" elementType="Header">
                            <stringProp name="Header.name">User-Agent</stringProp>
                            <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko</stringProp>
                          </elementProp>
                          <elementProp name="DNT" elementType="Header">
                            <stringProp name="Header.name">DNT</stringProp>
                            <stringProp name="Header.value">1</stringProp>
                          </elementProp>
                          <elementProp name="Pragma" elementType="Header">
                            <stringProp name="Header.name">Pragma</stringProp>
                            <stringProp name="Header.value">No-Cache</stringProp>
                          </elementProp>
                          <elementProp name="Referer" elementType="Header">
                            <stringProp name="Header.name">Referer</stringProp>
                            <stringProp name="Header.value">https://${GV_HOSTNAME_NAVIGATOR}/cc/resources/themes/Titanium/resources/</stringProp>
                          </elementProp>
                          <elementProp name="X-Requested-With" elementType="Header">
                            <stringProp name="Header.name">X-Requested-With</stringProp>
                            <stringProp name="Header.value">XMLHttpRequest</stringProp>
                          </elementProp>
                          <elementProp name="Accept-Encoding" elementType="Header">
                            <stringProp name="Header.name">Accept-Encoding</stringProp>
                            <stringProp name="Header.value">gzip, deflate</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                    </hashTree>
                    <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ThinkTime - 10" enabled="true">
                      <stringProp name="TestPlan.comments">This transaction will wait for 10 seconds</stringProp>
                    </GenericController>
                    <hashTree>
                      <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="ThinkTime" enabled="true">
                        <stringProp name="ConstantTimer.delay">10000</stringProp>
                        <stringProp name="TestPlan.comments">   Converting seconds to milliseconds - 10s x 1000</stringProp>
                      </ConstantTimer>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                  <IfController guiclass="IfControllerPanel" testclass="IfController" testname=" CNG_TP86_J_Click_Assign If &quot;${AssignActivitesScreenCount}&quot;==&quot;null&quot;" enabled="true">
                    <stringProp name="IfController.condition">&quot;${AssignActivitesScreenCount}&quot;==&quot;null&quot;</stringProp>
                    <boolProp name="IfController.evaluateAll">false</boolProp>
                  </IfController>
                  <hashTree>
                    <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="-RETURNTODESKTOP" enabled="true">
                      <stringProp name="TestPlan.comments">This section contains the RETURNTODESKTOP part of Loadrunner</stringProp>
                    </GenericController>
                    <hashTree>
                      <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP86_Return_To_Desktop" enabled="true">
                        <boolProp name="TransactionController.includeTimers">false</boolProp>
                        <boolProp name="TransactionController.parent">true</boolProp>
                      </TransactionController>
                      <hashTree>
                        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_22" enabled="true">
                          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                            <collectionProp name="Arguments.arguments">
                              <elementProp name="TabBar:ClaimTab:ClaimTab_FindClaim" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">TabBar:ClaimTab:ClaimTab_FindClaim</stringProp>
                                <stringProp name="Argument.value"></stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="QuickJump" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                <stringProp name="Argument.name">QuickJump</stringProp>
                                <stringProp name="Argument.value"></stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="Claim:MenuLinks_toggle" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">Claim:MenuLinks_toggle</stringProp>
                                <stringProp name="Argument.value"></stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="ClaimWorkplan:ClaimWorkplanScreen:WorkplanLV:WorkplanFilter" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">ClaimWorkplan:ClaimWorkplanScreen:WorkplanLV:WorkplanFilter</stringProp>
                                <stringProp name="Argument.value">AndFilter/All open activities</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name=":tblinks" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">:tblinks</stringProp>
                                <stringProp name="Argument.value">${cTBLINKS}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name=":tabs" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">:tabs</stringProp>
                                <stringProp name="Argument.value">${cTABS_1}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="infoBar" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">infoBar</stringProp>
                                <stringProp name="Argument.value">${cINFOBAR_1}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="Claim:ClaimMenuActions" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">Claim:ClaimMenuActions</stringProp>
                                <stringProp name="Argument.value">${cCLAIMMENUACTIONS}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="Claim:MenuLinks" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">Claim:MenuLinks</stringProp>
                                <stringProp name="Argument.value">${cCLAIMMENULINKS}</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="csrfToken" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                <stringProp name="Argument.name">csrfToken</stringProp>
                                <stringProp name="Argument.value"></stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="eventSource" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">eventSource</stringProp>
                                <stringProp name="Argument.value">TabBar:DesktopTab_act</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                              <elementProp name="objFocusId" elementType="HTTPArgument">
                                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                                <stringProp name="Argument.name">objFocusId</stringProp>
                                <stringProp name="Argument.value">TabBar:DesktopTab</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              </elementProp>
                            </collectionProp>
                          </elementProp>
                          <stringProp name="HTTPSampler.domain">${GV_HOSTNAME_NAVIGATOR}</stringProp>
                          <stringProp name="HTTPSampler.port">443</stringProp>
                          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                          <stringProp name="HTTPSampler.response_timeout"></stringProp>
                          <stringProp name="HTTPSampler.protocol">https</stringProp>
                          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                          <stringProp name="HTTPSampler.path">/cc/ClaimCenter.do</stringProp>
                          <stringProp name="HTTPSampler.method">POST</stringProp>
                          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                          <boolProp name="HTTPSampler.monitor">false</boolProp>
                          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                        </HTTPSamplerProxy>
                        <hashTree>
                          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                            <collectionProp name="HeaderManager.headers">
                              <elementProp name="Content-Type" elementType="Header">
                                <stringProp name="Header.name">Content-Type</stringProp>
                                <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                              </elementProp>
                              <elementProp name="Accept-Language" elementType="Header">
                                <stringProp name="Header.name">Accept-Language</stringProp>
                                <stringProp name="Header.value">en-GB</stringProp>
                              </elementProp>
                              <elementProp name="Accept" elementType="Header">
                                <stringProp name="Header.name">Accept</stringProp>
                                <stringProp name="Header.value">*/*</stringProp>
                              </elementProp>
                              <elementProp name="User-Agent" elementType="Header">
                                <stringProp name="Header.name">User-Agent</stringProp>
                                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko</stringProp>
                              </elementProp>
                              <elementProp name="DNT" elementType="Header">
                                <stringProp name="Header.name">DNT</stringProp>
                                <stringProp name="Header.value">1</stringProp>
                              </elementProp>
                              <elementProp name="Pragma" elementType="Header">
                                <stringProp name="Header.name">Pragma</stringProp>
                                <stringProp name="Header.value">No-Cache</stringProp>
                              </elementProp>
                              <elementProp name="Referer" elementType="Header">
                                <stringProp name="Header.name">Referer</stringProp>
                                <stringProp name="Header.value">https://${GV_HOSTNAME_NAVIGATOR}/cc/resources/themes/Titanium/resources/</stringProp>
                              </elementProp>
                              <elementProp name="X-Requested-With" elementType="Header">
                                <stringProp name="Header.name">X-Requested-With</stringProp>
                                <stringProp name="Header.value">XMLHttpRequest</stringProp>
                              </elementProp>
                              <elementProp name="Accept-Encoding" elementType="Header">
                                <stringProp name="Header.name">Accept-Encoding</stringProp>
                                <stringProp name="Header.value">gzip, deflate</stringProp>
                              </elementProp>
                            </collectionProp>
                          </HeaderManager>
                          <hashTree/>
                        </hashTree>
                        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ThinkTime - 10" enabled="true">
                          <stringProp name="TestPlan.comments">This transaction will wait for 10 seconds</stringProp>
                        </GenericController>
                        <hashTree>
                          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="ThinkTime" enabled="true">
                            <stringProp name="ConstantTimer.delay">10000</stringProp>
                            <stringProp name="TestPlan.comments">   Converting seconds to milliseconds - 10s x 1000</stringProp>
                          </ConstantTimer>
                          <hashTree/>
                        </hashTree>
                      </hashTree>
                    </hashTree>
                    <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Test Action" enabled="true">
                      <intProp name="ActionProcessor.action">3</intProp>
                      <intProp name="ActionProcessor.target">0</intProp>
                      <stringProp name="ActionProcessor.duration"></stringProp>
                    </TestAction>
                    <hashTree/>
                  </hashTree>
                </hashTree>
              </hashTree>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If ${RAND_NUMBER}&gt;0&amp;&amp;${RAND_NUMBER}&lt;=100" enabled="true">
              <stringProp name="IfController.condition">${RAND_NUMBER}&gt;0&amp;&amp;${RAND_NUMBER}&lt;=100</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="-PARTIESINVOLVED" enabled="true">
                <stringProp name="TestPlan.comments">This section contains the PARTIESINVOLVED part of Loadrunner</stringProp>
              </GenericController>
              <hashTree>
                <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP86_D_Click_Parties_Involved" enabled="true">
                  <boolProp name="TransactionController.includeTimers">false</boolProp>
                  <boolProp name="TransactionController.parent">true</boolProp>
                </TransactionController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_3" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="Claim:MenuLinks" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.name">Claim:MenuLinks</stringProp>
                          <stringProp name="Argument.value">${cCLAIMMENULINKS}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="csrfToken" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">csrfToken</stringProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="TabBar:ClaimTab:ClaimTab_FindClaim" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.name">TabBar:ClaimTab:ClaimTab_FindClaim</stringProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="QuickJump" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">QuickJump</stringProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="Claim:MenuLinks_toggle" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.name">Claim:MenuLinks_toggle</stringProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name=":tblinks" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.name">:tblinks</stringProp>
                          <stringProp name="Argument.value">${cTBLINKS}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name=":tabs" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.name">:tabs</stringProp>
                          <stringProp name="Argument.value">${cTABS_1}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="infoBar" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.name">infoBar</stringProp>
                          <stringProp name="Argument.value">${cINFOBAR_1}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="Claim:ClaimMenuActions" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.name">Claim:ClaimMenuActions</stringProp>
                          <stringProp name="Argument.value">${cCLAIMMENUACTIONS}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="eventSource" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.name">eventSource</stringProp>
                          <stringProp name="Argument.value">Claim:MenuLinks:Claim_ClaimPartiesGroup:ClaimPartiesGroup_ClaimContacts_act</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <boolProp name="HTTPSampler.image_parser">true</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="Content-Type" elementType="Header">
                          <stringProp name="Header.name">Content-Type</stringProp>
                          <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                        </elementProp>
                        <elementProp name="Accept-Language" elementType="Header">
                          <stringProp name="Header.name">Accept-Language</stringProp>
                          <stringProp name="Header.value">en-GB</stringProp>
                        </elementProp>
                        <elementProp name="Accept" elementType="Header">
                          <stringProp name="Header.name">Accept</stringProp>
                          <stringProp name="Header.value">*/*</stringProp>
                        </elementProp>
                        <elementProp name="User-Agent" elementType="Header">
                          <stringProp name="Header.name">User-Agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko</stringProp>
                        </elementProp>
                        <elementProp name="DNT" elementType="Header">
                          <stringProp name="Header.name">DNT</stringProp>
                          <stringProp name="Header.value">1</stringProp>
                        </elementProp>
                        <elementProp name="Pragma" elementType="Header">
                          <stringProp name="Header.name">Pragma</stringProp>
                          <stringProp name="Header.value">No-Cache</stringProp>
                        </elementProp>
                        <elementProp name="Referer" elementType="Header">
                          <stringProp name="Header.name">Referer</stringProp>
                          <stringProp name="Header.value">https://${GV_HOSTNAME_NAVIGATOR}/cc/resources/themes/Titanium/resources/</stringProp>
                        </elementProp>
                        <elementProp name="X-Requested-With" elementType="Header">
                          <stringProp name="Header.name">X-Requested-With</stringProp>
                          <stringProp name="Header.value">XMLHttpRequest</stringProp>
                        </elementProp>
                        <elementProp name="Accept-Encoding" elementType="Header">
                          <stringProp name="Header.name">Accept-Encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="PartiesInvolvedScreenCount Extractor" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">PartiesInvolvedScreenCount</stringProp>
                      <stringProp name="RegexExtractor.regex">Cont(.*?)cts</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">null</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                      <stringProp name="Sample.scope">all</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="CNG_TP86_D_Click_Parties_Involved - Parties Involved screen not displayed for claim, ${CLAIMNUMBER}" enabled="true">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="-502807437">Contacts</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">2</intProp>
                      <stringProp name="Assertion.scope">all</stringProp>
                    </ResponseAssertion>
                    <hashTree/>
                  </hashTree>
                  <IfController guiclass="IfControllerPanel" testclass="IfController" testname="CNG_TP86_D_Click_Parties_Involved If &quot;${PartiesInvolvedScreenCount}&quot;==&quot;null&quot;" enabled="true">
                    <stringProp name="IfController.condition">&quot;${PartiesInvolvedScreenCount}&quot;==&quot;null&quot;</stringProp>
                    <boolProp name="IfController.evaluateAll">false</boolProp>
                  </IfController>
                  <hashTree>
                    <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Test Action" enabled="true">
                      <intProp name="ActionProcessor.action">3</intProp>
                      <intProp name="ActionProcessor.target">0</intProp>
                      <stringProp name="ActionProcessor.duration"></stringProp>
                    </TestAction>
                    <hashTree/>
                  </hashTree>
                </hashTree>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="-WORKPLAN" enabled="true">
                <stringProp name="TestPlan.comments">This section contains the WORKPLAN part of Loadrunner</stringProp>
              </GenericController>
              <hashTree>
                <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP86_E_Click_Workplan" enabled="true">
                  <boolProp name="TransactionController.includeTimers">false</boolProp>
                  <boolProp name="TransactionController.parent">true</boolProp>
                </TransactionController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_4" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="Claim:ClaimMenuActions" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.name">Claim:ClaimMenuActions</stringProp>
                          <stringProp name="Argument.value">${cCLAIMMENUACTIONS}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="Claim:MenuLinks" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.name">Claim:MenuLinks</stringProp>
                          <stringProp name="Argument.value">${cCLAIMMENULINKS}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="TabBar:ClaimTab:ClaimTab_FindClaim" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.name">TabBar:ClaimTab:ClaimTab_FindClaim</stringProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="QuickJump" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">QuickJump</stringProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="Claim:MenuLinks_toggle" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.name">Claim:MenuLinks_toggle</stringProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:PeopleInvolvedDetailedLV:PeopleInvolvedDetailedFilter" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.name">ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:PeopleInvolvedDetailedLV:PeopleInvolvedDetailedFilter</stringProp>
                          <stringProp name="Argument.value">CoreFilters.AllFilter/All</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name=":tblinks" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.name">:tblinks</stringProp>
                          <stringProp name="Argument.value">${cTBLINKS}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name=":tabs" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.name">:tabs</stringProp>
                          <stringProp name="Argument.value">${cTABS_1}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="infoBar" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.name">infoBar</stringProp>
                          <stringProp name="Argument.value">${cINFOBAR_1}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="eventSource" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.name">eventSource</stringProp>
                          <stringProp name="Argument.value">Claim:MenuLinks:Claim_ClaimWorkplan_act</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="csrfToken" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">csrfToken</stringProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                    <boolProp name="HTTPSampler.image_parser">true</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="CNG_TP86_E_Click_Workplan - Workplan screen not displayed for claim, ${CLAIMNUMBER}" enabled="true">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="100320730">Workplan</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">2</intProp>
                      <stringProp name="Assertion.scope">all</stringProp>
                    </ResponseAssertion>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cDUEDATE Extractor" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">cDUEDATE</stringProp>
                      <stringProp name="RegexExtractor.regex">\{\&quot;text\&quot;:\&quot;([0-9][0-9]/[0-9][0-9]/[0-9][0-9][0-9][0-9])\&quot;,</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">null</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                      <stringProp name="Sample.scope">all</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="Content-Type" elementType="Header">
                          <stringProp name="Header.name">Content-Type</stringProp>
                          <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                        </elementProp>
                        <elementProp name="Accept-Language" elementType="Header">
                          <stringProp name="Header.name">Accept-Language</stringProp>
                          <stringProp name="Header.value">en-GB</stringProp>
                        </elementProp>
                        <elementProp name="Accept" elementType="Header">
                          <stringProp name="Header.name">Accept</stringProp>
                          <stringProp name="Header.value">*/*</stringProp>
                        </elementProp>
                        <elementProp name="User-Agent" elementType="Header">
                          <stringProp name="Header.name">User-Agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko</stringProp>
                        </elementProp>
                        <elementProp name="DNT" elementType="Header">
                          <stringProp name="Header.name">DNT</stringProp>
                          <stringProp name="Header.value">1</stringProp>
                        </elementProp>
                        <elementProp name="Pragma" elementType="Header">
                          <stringProp name="Header.name">Pragma</stringProp>
                          <stringProp name="Header.value">No-Cache</stringProp>
                        </elementProp>
                        <elementProp name="Referer" elementType="Header">
                          <stringProp name="Header.name">Referer</stringProp>
                          <stringProp name="Header.value">https://${GV_HOSTNAME_NAVIGATOR}/cc/resources/themes/Titanium/resources/</stringProp>
                        </elementProp>
                        <elementProp name="X-Requested-With" elementType="Header">
                          <stringProp name="Header.name">X-Requested-With</stringProp>
                          <stringProp name="Header.value">XMLHttpRequest</stringProp>
                        </elementProp>
                        <elementProp name="Accept-Encoding" elementType="Header">
                          <stringProp name="Header.name">Accept-Encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="WorkplanScreenCount Extractor" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">WorkplanScreenCount</stringProp>
                      <stringProp name="RegexExtractor.regex">Workplan(.*?)</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">null</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                      <stringProp name="Sample.scope">all</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                  </hashTree>
                  <IfController guiclass="IfControllerPanel" testclass="IfController" testname=" CNG_TP86_E_Click_Workplan If &quot;${WorkplanScreenCount}&quot;==&quot;null&quot;" enabled="true">
                    <stringProp name="IfController.condition">&quot;${WorkplanScreenCount}&quot;==&quot;null&quot;</stringProp>
                    <boolProp name="IfController.evaluateAll">false</boolProp>
                  </IfController>
                  <hashTree>
                    <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Test Action" enabled="true">
                      <intProp name="ActionProcessor.action">3</intProp>
                      <intProp name="ActionProcessor.target">0</intProp>
                      <stringProp name="ActionProcessor.duration"></stringProp>
                    </TestAction>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP86_F_Click_Subject" enabled="true">
                  <boolProp name="TransactionController.includeTimers">false</boolProp>
                  <boolProp name="TransactionController.parent">true</boolProp>
                </TransactionController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_5" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="TabBar:ClaimTab:ClaimTab_FindClaim" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.name">TabBar:ClaimTab:ClaimTab_FindClaim</stringProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="QuickJump" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">QuickJump</stringProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="Claim:MenuLinks_toggle" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.name">Claim:MenuLinks_toggle</stringProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="ClaimWorkplan:ClaimWorkplanScreen:WorkplanLV:WorkplanFilter" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.name">ClaimWorkplan:ClaimWorkplanScreen:WorkplanLV:WorkplanFilter</stringProp>
                          <stringProp name="Argument.value">AndFilter/All open activities</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name=":tblinks" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.name">:tblinks</stringProp>
                          <stringProp name="Argument.value">${cTBLINKS}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name=":tabs" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.name">:tabs</stringProp>
                          <stringProp name="Argument.value">${cTABS_1}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="infoBar" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.name">infoBar</stringProp>
                          <stringProp name="Argument.value">${cINFOBAR_1}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="Claim:ClaimMenuActions" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.name">Claim:ClaimMenuActions</stringProp>
                          <stringProp name="Argument.value">${cCLAIMMENUACTIONS}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="Claim:MenuLinks" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.name">Claim:MenuLinks</stringProp>
                          <stringProp name="Argument.value">${cCLAIMMENULINKS}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="csrfToken" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">csrfToken</stringProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="eventSource" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.name">eventSource</stringProp>
                          <stringProp name="Argument.value">ClaimWorkplan:ClaimWorkplanScreen:WorkplanLV:0:Subject_act</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="objFocusId" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.name">objFocusId</stringProp>
                          <stringProp name="Argument.value">ClaimWorkplan:ClaimWorkplanScreen:WorkplanLV:0:Subject</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${GV_HOSTNAME_NAVIGATOR}</stringProp>
                    <stringProp name="HTTPSampler.port">443</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                    <stringProp name="HTTPSampler.path">/cc/ClaimCenter.do</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="Content-Type" elementType="Header">
                          <stringProp name="Header.name">Content-Type</stringProp>
                          <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                        </elementProp>
                        <elementProp name="Accept-Language" elementType="Header">
                          <stringProp name="Header.name">Accept-Language</stringProp>
                          <stringProp name="Header.value">en-GB</stringProp>
                        </elementProp>
                        <elementProp name="Accept" elementType="Header">
                          <stringProp name="Header.name">Accept</stringProp>
                          <stringProp name="Header.value">*/*</stringProp>
                        </elementProp>
                        <elementProp name="User-Agent" elementType="Header">
                          <stringProp name="Header.name">User-Agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko</stringProp>
                        </elementProp>
                        <elementProp name="DNT" elementType="Header">
                          <stringProp name="Header.name">DNT</stringProp>
                          <stringProp name="Header.value">1</stringProp>
                        </elementProp>
                        <elementProp name="Pragma" elementType="Header">
                          <stringProp name="Header.name">Pragma</stringProp>
                          <stringProp name="Header.value">No-Cache</stringProp>
                        </elementProp>
                        <elementProp name="Referer" elementType="Header">
                          <stringProp name="Header.name">Referer</stringProp>
                          <stringProp name="Header.value">https://${GV_HOSTNAME_NAVIGATOR}/cc/resources/themes/Titanium/resources/</stringProp>
                        </elementProp>
                        <elementProp name="X-Requested-With" elementType="Header">
                          <stringProp name="Header.name">X-Requested-With</stringProp>
                          <stringProp name="Header.value">XMLHttpRequest</stringProp>
                        </elementProp>
                        <elementProp name="Accept-Encoding" elementType="Header">
                          <stringProp name="Header.name">Accept-Encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cCLAIM_1 Extractor" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">cCLAIM_1</stringProp>
                      <stringProp name="RegexExtractor.regex">\[\[&quot;Claim:(.*?)\&quot;,</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">null</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                      <stringProp name="Sample.scope">all</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cTBLINKS_1 Extractor" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">cTBLINKS_1</stringProp>
                      <stringProp name="RegexExtractor.regex">ator\.\&quot;,\&quot;shortcut\&quot;:\&quot;Z\&quot;\}\],\&quot;defaultType\&quot;:\&quot;gmenuitem\&quot;\},\&quot;noaction\&quot;:1,\&quot;xtype\&quot;:\&quot;gbutton\&quot;,\&quot;iconCls\&quot;:\&quot;g-preferences-icon\&quot;\}\],\&quot;checksum\&quot;:\&quot;(.*?)\&quot;\},</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">null</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                      <stringProp name="Sample.scope">all</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cEXPOSURE Extractor" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">cEXPOSURE</stringProp>
                      <stringProp name="RegexExtractor.regex">\[&quot;Exposure:(.*?)\&quot;,</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">null</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                      <stringProp name="Sample.scope">all</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="CNG_TP86_F_Click_Subject - Activity screen not displayed for username ${USERNAME} and claimnumber ${CLAIMNUMBER}" enabled="true">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="1314699751">Activity Detail for Claim</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">2</intProp>
                      <stringProp name="Assertion.scope">all</stringProp>
                    </ResponseAssertion>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="ActivitySubjectCount Extractor" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">ActivitySubjectCount</stringProp>
                      <stringProp name="RegexExtractor.regex">Activity Detail f(.*?)r Claim</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">null</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                      <stringProp name="Sample.scope">all</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="CompleteButton Extractor" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">CompleteButton</stringProp>
                      <stringProp name="RegexExtractor.regex">CompleteB(.*?)tton</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">null</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                      <stringProp name="Sample.scope">all</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                  </hashTree>
                </hashTree>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="-UPDATEACTIVITY" enabled="true">
                <stringProp name="TestPlan.comments">This section contains the UPDATEACTIVITY part of Loadrunner</stringProp>
              </GenericController>
              <hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname=" -UPDATEACTIVITY If &quot;${CompleteButton}&quot;!=&quot;null&quot;" enabled="true">
                  <stringProp name="IfController.condition">&quot;${CompleteButton}&quot; != &quot;null&quot;</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP86_H_Click_Update" enabled="true">
                    <boolProp name="TransactionController.includeTimers">false</boolProp>
                    <boolProp name="TransactionController.parent">true</boolProp>
                  </TransactionController>
                  <hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_10" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="TabBar:ClaimTab:ClaimTab_FindClaim" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">TabBar:ClaimTab:ClaimTab_FindClaim</stringProp>
                          </elementProp>
                          <elementProp name="QuickJump" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">QuickJump</stringProp>
                          </elementProp>
                          <elementProp name="Claim:MenuLinks_toggle" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">Claim:MenuLinks_toggle</stringProp>
                          </elementProp>
                          <elementProp name="ClaimWorkplan:ClaimWorkplanScreen:WorkplanLV:WorkplanFilter" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.value">AndFilter/All open activities</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">ClaimWorkplan:ClaimWorkplanScreen:WorkplanLV:WorkplanFilter</stringProp>
                          </elementProp>
                          <elementProp name="ActivityDetailWorksheet:ActivityDetailScreen:ActivityDV:ActivityDetailsInputSet:Activity_Subject_Extension" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.value">${__time(dd-MM-yyyy-hh-mm-ss)}_TP86</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">ActivityDetailWorksheet:ActivityDetailScreen:ActivityDV:ActivityDetailsInputSet:Activity_Subject_Extension</stringProp>
                          </elementProp>
                          <elementProp name="ActivityDetailWorksheet:ActivityDetailScreen:ActivityDV:ActivityDetailsInputSet:Activity_Description" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.value">hello</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">ActivityDetailWorksheet:ActivityDetailScreen:ActivityDV:ActivityDetailsInputSet:Activity_Description</stringProp>
                          </elementProp>
                          <elementProp name="ActivityDetailWorksheet:ActivityDetailScreen:ActivityDV:ActivityDetailsInputSet:RelatedTo" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.value">Exposure:${cEXPOSURE}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">ActivityDetailWorksheet:ActivityDetailScreen:ActivityDV:ActivityDetailsInputSet:RelatedTo</stringProp>
                          </elementProp>
                          <elementProp name="ActivityDetailWorksheet:ActivityDetailScreen:ActivityDV:ActivityDetailsInputSet:Activity_DueDate" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.value">${cDUEDATE}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">ActivityDetailWorksheet:ActivityDetailScreen:ActivityDV:ActivityDetailsInputSet:Activity_DueDate</stringProp>
                          </elementProp>
                          <elementProp name="ActivityDetailWorksheet:ActivityDetailScreen:ActivityDV:ActivityDetailsInputSet:categoryForCustomActivity" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">ActivityDetailWorksheet:ActivityDetailScreen:ActivityDV:ActivityDetailsInputSet:categoryForCustomActivity</stringProp>
                          </elementProp>
                          <elementProp name="ActivityDetailWorksheet:ActivityDetailScreen:ActivityDV:ActivityDetailsInputSet:Activity_Mandatory" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.value">true</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">ActivityDetailWorksheet:ActivityDetailScreen:ActivityDV:ActivityDetailsInputSet:Activity_Mandatory</stringProp>
                          </elementProp>
                          <elementProp name="ActivityDetailWorksheet:ActivityDetailScreen:ActivityDV:ActivityNoteInputSet:PropertyTopic" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">ActivityDetailWorksheet:ActivityDetailScreen:ActivityDV:ActivityNoteInputSet:PropertyTopic</stringProp>
                          </elementProp>
                          <elementProp name="ActivityDetailWorksheet:ActivityDetailScreen:ActivityDV:ActivityNoteInputSet:Subject" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">ActivityDetailWorksheet:ActivityDetailScreen:ActivityDV:ActivityNoteInputSet:Subject</stringProp>
                          </elementProp>
                          <elementProp name="ActivityDetailWorksheet:ActivityDetailScreen:ActivityDV:ActivityNoteInputSet:RelatedTo" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.value">Exposure:${cEXPOSURE}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">ActivityDetailWorksheet:ActivityDetailScreen:ActivityDV:ActivityNoteInputSet:RelatedTo</stringProp>
                          </elementProp>
                          <elementProp name="ActivityDetailWorksheet:ActivityDetailScreen:ActivityDV:ActivityNoteInputSet:Text" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">ActivityDetailWorksheet:ActivityDetailScreen:ActivityDV:ActivityNoteInputSet:Text</stringProp>
                          </elementProp>
                          <elementProp name=":tblinks" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.value">${cTBLINKS_1}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">:tblinks</stringProp>
                          </elementProp>
                          <elementProp name=":tabs" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.value">${cTABS_1}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">:tabs</stringProp>
                          </elementProp>
                          <elementProp name="infoBar" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.value">${cINFOBAR_1}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">infoBar</stringProp>
                          </elementProp>
                          <elementProp name="Claim:ClaimMenuActions" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.value">${cCLAIMMENUACTIONS}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">Claim:ClaimMenuActions</stringProp>
                          </elementProp>
                          <elementProp name="Claim:MenuLinks" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.value">${cCLAIMMENULINKS}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">Claim:MenuLinks</stringProp>
                          </elementProp>
                          <elementProp name="csrfToken" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">csrfToken</stringProp>
                          </elementProp>
                          <elementProp name="scrollPositions" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.value">{&quot;centerPanel&quot;:{&quot;left&quot;:0,&quot;top&quot;:11}}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">scrollPositions</stringProp>
                          </elementProp>
                          <elementProp name="eventSource" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.value">ActivityDetailWorksheet:ActivityDetailScreen:ActivityDetailScreen_UpdateButton_act</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">eventSource</stringProp>
                          </elementProp>
                          <elementProp name="objFocusId" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.value">ActivityDetailWorksheet:ActivityDetailScreen:ActivityDetailScreen_UpdateButton</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">objFocusId</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain">${GV_HOSTNAME_NAVIGATOR}</stringProp>
                      <stringProp name="HTTPSampler.port">443</stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol">https</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                      <stringProp name="HTTPSampler.path">/cc/ClaimCenter.do</stringProp>
                      <stringProp name="HTTPSampler.method">POST</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="Content-Type" elementType="Header">
                            <stringProp name="Header.name">Content-Type</stringProp>
                            <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                          </elementProp>
                          <elementProp name="Accept-Language" elementType="Header">
                            <stringProp name="Header.name">Accept-Language</stringProp>
                            <stringProp name="Header.value">en-GB</stringProp>
                          </elementProp>
                          <elementProp name="Accept" elementType="Header">
                            <stringProp name="Header.name">Accept</stringProp>
                            <stringProp name="Header.value">*/*</stringProp>
                          </elementProp>
                          <elementProp name="User-Agent" elementType="Header">
                            <stringProp name="Header.name">User-Agent</stringProp>
                            <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko</stringProp>
                          </elementProp>
                          <elementProp name="DNT" elementType="Header">
                            <stringProp name="Header.name">DNT</stringProp>
                            <stringProp name="Header.value">1</stringProp>
                          </elementProp>
                          <elementProp name="Pragma" elementType="Header">
                            <stringProp name="Header.name">Pragma</stringProp>
                            <stringProp name="Header.value">No-Cache</stringProp>
                          </elementProp>
                          <elementProp name="Referer" elementType="Header">
                            <stringProp name="Header.name">Referer</stringProp>
                            <stringProp name="Header.value">https://${GV_HOSTNAME_NAVIGATOR}/cc/resources/themes/Titanium/resources/</stringProp>
                          </elementProp>
                          <elementProp name="X-Requested-With" elementType="Header">
                            <stringProp name="Header.name">X-Requested-With</stringProp>
                            <stringProp name="Header.value">XMLHttpRequest</stringProp>
                          </elementProp>
                          <elementProp name="Accept-Encoding" elementType="Header">
                            <stringProp name="Header.name">Accept-Encoding</stringProp>
                            <stringProp name="Header.value">gzip, deflate</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                      <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="CNG_TP86_H_Click_Update - Update Error for , ${USERNAME}" enabled="true">
                        <collectionProp name="Asserion.test_strings">
                          <stringProp name="1635854416">error_icon</stringProp>
                        </collectionProp>
                        <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                        <boolProp name="Assertion.assume_success">false</boolProp>
                        <intProp name="Assertion.test_type">20</intProp>
                        <stringProp name="Assertion.scope">all</stringProp>
                      </ResponseAssertion>
                      <hashTree/>
                    </hashTree>
                    <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ThinkTime - 10" enabled="true">
                      <stringProp name="TestPlan.comments">This transaction will wait for 10 seconds</stringProp>
                    </GenericController>
                    <hashTree>
                      <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="ThinkTime" enabled="true">
                        <stringProp name="ConstantTimer.delay">10000</stringProp>
                        <stringProp name="TestPlan.comments">   Converting seconds to milliseconds - 10s x 1000</stringProp>
                      </ConstantTimer>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                </hashTree>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="-WORKPLAN" enabled="true">
                <stringProp name="TestPlan.comments">This section contains the WORKPLAN part of Loadrunner</stringProp>
              </GenericController>
              <hashTree>
                <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP86_E_Click_Workplan" enabled="true">
                  <boolProp name="TransactionController.includeTimers">false</boolProp>
                  <boolProp name="TransactionController.parent">true</boolProp>
                </TransactionController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_4" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="Claim:ClaimMenuActions" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.name">Claim:ClaimMenuActions</stringProp>
                          <stringProp name="Argument.value">${cCLAIMMENUACTIONS}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="Claim:MenuLinks" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.name">Claim:MenuLinks</stringProp>
                          <stringProp name="Argument.value">${cCLAIMMENULINKS}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="TabBar:ClaimTab:ClaimTab_FindClaim" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.name">TabBar:ClaimTab:ClaimTab_FindClaim</stringProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="QuickJump" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">QuickJump</stringProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="Claim:MenuLinks_toggle" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.name">Claim:MenuLinks_toggle</stringProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:PeopleInvolvedDetailedLV:PeopleInvolvedDetailedFilter" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.name">ClaimContacts:ClaimContactsScreen:PeopleInvolvedDetailedListDetail:PeopleInvolvedDetailedLV:PeopleInvolvedDetailedFilter</stringProp>
                          <stringProp name="Argument.value">CoreFilters.AllFilter/All</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name=":tblinks" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.name">:tblinks</stringProp>
                          <stringProp name="Argument.value">${cTBLINKS}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name=":tabs" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.name">:tabs</stringProp>
                          <stringProp name="Argument.value">${cTABS_1}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="infoBar" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.name">infoBar</stringProp>
                          <stringProp name="Argument.value">${cINFOBAR_1}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="eventSource" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.name">eventSource</stringProp>
                          <stringProp name="Argument.value">Claim:MenuLinks:Claim_ClaimWorkplan_act</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="csrfToken" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">csrfToken</stringProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
                    <boolProp name="HTTPSampler.image_parser">true</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="CNG_TP86_E_Click_Workplan - Workplan screen not displayed for claim, ${CLAIMNUMBER}" enabled="true">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="100320730">Workplan</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">2</intProp>
                      <stringProp name="Assertion.scope">all</stringProp>
                    </ResponseAssertion>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cDUEDATE Extractor" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">cDUEDATE</stringProp>
                      <stringProp name="RegexExtractor.regex">\{\&quot;text\&quot;:\&quot;([0-9][0-9]/[0-9][0-9]/[0-9][0-9][0-9][0-9])\&quot;,</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">null</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                      <stringProp name="Sample.scope">all</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="Content-Type" elementType="Header">
                          <stringProp name="Header.name">Content-Type</stringProp>
                          <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                        </elementProp>
                        <elementProp name="Accept-Language" elementType="Header">
                          <stringProp name="Header.name">Accept-Language</stringProp>
                          <stringProp name="Header.value">en-GB</stringProp>
                        </elementProp>
                        <elementProp name="Accept" elementType="Header">
                          <stringProp name="Header.name">Accept</stringProp>
                          <stringProp name="Header.value">*/*</stringProp>
                        </elementProp>
                        <elementProp name="User-Agent" elementType="Header">
                          <stringProp name="Header.name">User-Agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko</stringProp>
                        </elementProp>
                        <elementProp name="DNT" elementType="Header">
                          <stringProp name="Header.name">DNT</stringProp>
                          <stringProp name="Header.value">1</stringProp>
                        </elementProp>
                        <elementProp name="Pragma" elementType="Header">
                          <stringProp name="Header.name">Pragma</stringProp>
                          <stringProp name="Header.value">No-Cache</stringProp>
                        </elementProp>
                        <elementProp name="Referer" elementType="Header">
                          <stringProp name="Header.name">Referer</stringProp>
                          <stringProp name="Header.value">https://${GV_HOSTNAME_NAVIGATOR}/cc/resources/themes/Titanium/resources/</stringProp>
                        </elementProp>
                        <elementProp name="X-Requested-With" elementType="Header">
                          <stringProp name="Header.name">X-Requested-With</stringProp>
                          <stringProp name="Header.value">XMLHttpRequest</stringProp>
                        </elementProp>
                        <elementProp name="Accept-Encoding" elementType="Header">
                          <stringProp name="Header.name">Accept-Encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="WorkplanScreenCount Extractor" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">WorkplanScreenCount</stringProp>
                      <stringProp name="RegexExtractor.regex">Workplan(.*?)</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">null</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                      <stringProp name="Sample.scope">all</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                  </hashTree>
                  <IfController guiclass="IfControllerPanel" testclass="IfController" testname=" CNG_TP86_E_Click_Workplan If &quot;${WorkplanScreenCount}&quot;==&quot;null&quot;" enabled="true">
                    <stringProp name="IfController.condition">&quot;${WorkplanScreenCount}&quot;==&quot;null&quot;</stringProp>
                    <boolProp name="IfController.evaluateAll">false</boolProp>
                  </IfController>
                  <hashTree>
                    <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Test Action" enabled="true">
                      <intProp name="ActionProcessor.action">3</intProp>
                      <intProp name="ActionProcessor.target">0</intProp>
                      <stringProp name="ActionProcessor.duration"></stringProp>
                    </TestAction>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP86_F_Click_Subject" enabled="true">
                  <boolProp name="TransactionController.includeTimers">false</boolProp>
                  <boolProp name="TransactionController.parent">true</boolProp>
                </TransactionController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_5" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="TabBar:ClaimTab:ClaimTab_FindClaim" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.name">TabBar:ClaimTab:ClaimTab_FindClaim</stringProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="QuickJump" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">QuickJump</stringProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="Claim:MenuLinks_toggle" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.name">Claim:MenuLinks_toggle</stringProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="ClaimWorkplan:ClaimWorkplanScreen:WorkplanLV:WorkplanFilter" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.name">ClaimWorkplan:ClaimWorkplanScreen:WorkplanLV:WorkplanFilter</stringProp>
                          <stringProp name="Argument.value">AndFilter/All open activities</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name=":tblinks" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.name">:tblinks</stringProp>
                          <stringProp name="Argument.value">${cTBLINKS}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name=":tabs" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.name">:tabs</stringProp>
                          <stringProp name="Argument.value">${cTABS_1}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="infoBar" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.name">infoBar</stringProp>
                          <stringProp name="Argument.value">${cINFOBAR_1}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="Claim:ClaimMenuActions" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.name">Claim:ClaimMenuActions</stringProp>
                          <stringProp name="Argument.value">${cCLAIMMENUACTIONS}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="Claim:MenuLinks" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.name">Claim:MenuLinks</stringProp>
                          <stringProp name="Argument.value">${cCLAIMMENULINKS}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="csrfToken" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.name">csrfToken</stringProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="eventSource" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.name">eventSource</stringProp>
                          <stringProp name="Argument.value">ClaimWorkplan:ClaimWorkplanScreen:WorkplanLV:0:Subject_act</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="objFocusId" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.name">objFocusId</stringProp>
                          <stringProp name="Argument.value">ClaimWorkplan:ClaimWorkplanScreen:WorkplanLV:0:Subject</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${GV_HOSTNAME_NAVIGATOR}</stringProp>
                    <stringProp name="HTTPSampler.port">443</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                    <stringProp name="HTTPSampler.path">/cc/ClaimCenter.do</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="Content-Type" elementType="Header">
                          <stringProp name="Header.name">Content-Type</stringProp>
                          <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                        </elementProp>
                        <elementProp name="Accept-Language" elementType="Header">
                          <stringProp name="Header.name">Accept-Language</stringProp>
                          <stringProp name="Header.value">en-GB</stringProp>
                        </elementProp>
                        <elementProp name="Accept" elementType="Header">
                          <stringProp name="Header.name">Accept</stringProp>
                          <stringProp name="Header.value">*/*</stringProp>
                        </elementProp>
                        <elementProp name="User-Agent" elementType="Header">
                          <stringProp name="Header.name">User-Agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko</stringProp>
                        </elementProp>
                        <elementProp name="DNT" elementType="Header">
                          <stringProp name="Header.name">DNT</stringProp>
                          <stringProp name="Header.value">1</stringProp>
                        </elementProp>
                        <elementProp name="Pragma" elementType="Header">
                          <stringProp name="Header.name">Pragma</stringProp>
                          <stringProp name="Header.value">No-Cache</stringProp>
                        </elementProp>
                        <elementProp name="Referer" elementType="Header">
                          <stringProp name="Header.name">Referer</stringProp>
                          <stringProp name="Header.value">https://${GV_HOSTNAME_NAVIGATOR}/cc/resources/themes/Titanium/resources/</stringProp>
                        </elementProp>
                        <elementProp name="X-Requested-With" elementType="Header">
                          <stringProp name="Header.name">X-Requested-With</stringProp>
                          <stringProp name="Header.value">XMLHttpRequest</stringProp>
                        </elementProp>
                        <elementProp name="Accept-Encoding" elementType="Header">
                          <stringProp name="Header.name">Accept-Encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cCLAIM_1 Extractor" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">cCLAIM_1</stringProp>
                      <stringProp name="RegexExtractor.regex">\[\[&quot;Claim:(.*?)\&quot;,</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">null</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                      <stringProp name="Sample.scope">all</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cTBLINKS_1 Extractor" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">cTBLINKS_1</stringProp>
                      <stringProp name="RegexExtractor.regex">ator\.\&quot;,\&quot;shortcut\&quot;:\&quot;Z\&quot;\}\],\&quot;defaultType\&quot;:\&quot;gmenuitem\&quot;\},\&quot;noaction\&quot;:1,\&quot;xtype\&quot;:\&quot;gbutton\&quot;,\&quot;iconCls\&quot;:\&quot;g-preferences-icon\&quot;\}\],\&quot;checksum\&quot;:\&quot;(.*?)\&quot;\},</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">null</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                      <stringProp name="Sample.scope">all</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cEXPOSURE Extractor" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">cEXPOSURE</stringProp>
                      <stringProp name="RegexExtractor.regex">\[&quot;Exposure:(.*?)\&quot;,</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">null</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                      <stringProp name="Sample.scope">all</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="CNG_TP86_F_Click_Subject - Activity screen not displayed for username ${USERNAME} and claimnumber ${CLAIMNUMBER}" enabled="true">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="1314699751">Activity Detail for Claim</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">2</intProp>
                      <stringProp name="Assertion.scope">all</stringProp>
                    </ResponseAssertion>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="ActivitySubjectCount Extractor" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">ActivitySubjectCount</stringProp>
                      <stringProp name="RegexExtractor.regex">Activity Detail f(.*?)r Claim</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">null</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                      <stringProp name="Sample.scope">all</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="CompleteButton Extractor" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">CompleteButton</stringProp>
                      <stringProp name="RegexExtractor.regex">CompleteB(.*?)tton</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">null</stringProp>
                      <stringProp name="RegexExtractor.match_number">-1</stringProp>
                      <stringProp name="Sample.scope">all</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                  </hashTree>
                  <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ThinkTime - 10" enabled="true">
                    <stringProp name="TestPlan.comments">This transaction will wait for 10 seconds</stringProp>
                  </GenericController>
                  <hashTree>
                    <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="ThinkTime" enabled="true">
                      <stringProp name="ConstantTimer.delay">10000</stringProp>
                      <stringProp name="TestPlan.comments">   Converting seconds to milliseconds - 10s x 1000</stringProp>
                    </ConstantTimer>
                    <hashTree/>
                  </hashTree>
                </hashTree>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="-COMPLETEACTIVITY" enabled="true">
                <stringProp name="TestPlan.comments">This section contains the COMPLETEACTIVITY part of Loadrunner</stringProp>
              </GenericController>
              <hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname=" -COMPLETEACTIVITY If ${CompleteButton_matchNr}&lt;=2" enabled="true">
                  <stringProp name="IfController.condition">${CompleteButton_matchNr}&lt;=2</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="-CANCELACTIVITY" enabled="true">
                    <stringProp name="TestPlan.comments">This section contains the CANCELACTIVITY part of Loadrunner</stringProp>
                  </GenericController>
                  <hashTree>
                    <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP86_G_Click_Cancel" enabled="true">
                      <boolProp name="TransactionController.includeTimers">false</boolProp>
                      <boolProp name="TransactionController.parent">true</boolProp>
                    </TransactionController>
                    <hashTree>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_6" enabled="true">
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                          <collectionProp name="Arguments.arguments">
                            <elementProp name="TabBar:ClaimTab:ClaimTab_FindClaim" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">TabBar:ClaimTab:ClaimTab_FindClaim</stringProp>
                              <stringProp name="Argument.value"></stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="QuickJump" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">QuickJump</stringProp>
                              <stringProp name="Argument.value"></stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="Claim:MenuLinks_toggle" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">Claim:MenuLinks_toggle</stringProp>
                              <stringProp name="Argument.value"></stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="ClaimWorkplan:ClaimWorkplanScreen:WorkplanLV:WorkplanFilter" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">ClaimWorkplan:ClaimWorkplanScreen:WorkplanLV:WorkplanFilter</stringProp>
                              <stringProp name="Argument.value">AndFilter/All open activities</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="ActivityDetailWorksheet:ActivityDetailScreen:ActivityDV:ActivityDetailsInputSet:Activity_Subject_Extension" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.value"></stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              <stringProp name="Argument.name">ActivityDetailWorksheet:ActivityDetailScreen:ActivityDV:ActivityDetailsInputSet:Activity_Subject_Extension</stringProp>
                            </elementProp>
                            <elementProp name="ActivityDetailWorksheet:ActivityDetailScreen:ActivityDV:ActivityDetailsInputSet:Activity_Description" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">ActivityDetailWorksheet:ActivityDetailScreen:ActivityDV:ActivityDetailsInputSet:Activity_Description</stringProp>
                              <stringProp name="Argument.value"></stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="ActivityDetailWorksheet:ActivityDetailScreen:ActivityDV:ActivityDetailsInputSet:RelatedTo" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">ActivityDetailWorksheet:ActivityDetailScreen:ActivityDV:ActivityDetailsInputSet:RelatedTo</stringProp>
                              <stringProp name="Argument.value">Exposure:${cEXPOSURE}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="ActivityDetailWorksheet:ActivityDetailScreen:ActivityDV:ActivityDetailsInputSet:Activity_DueDate" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">ActivityDetailWorksheet:ActivityDetailScreen:ActivityDV:ActivityDetailsInputSet:Activity_DueDate</stringProp>
                              <stringProp name="Argument.value">${cDUEDATE}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="ActivityDetailWorksheet:ActivityDetailScreen:ActivityDV:ActivityDetailsInputSet:categoryForCustomActivity" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">ActivityDetailWorksheet:ActivityDetailScreen:ActivityDV:ActivityDetailsInputSet:categoryForCustomActivity</stringProp>
                              <stringProp name="Argument.value"></stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="ActivityDetailWorksheet:ActivityDetailScreen:ActivityDV:ActivityDetailsInputSet:Activity_Mandatory" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">ActivityDetailWorksheet:ActivityDetailScreen:ActivityDV:ActivityDetailsInputSet:Activity_Mandatory</stringProp>
                              <stringProp name="Argument.value">true</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="ActivityDetailWorksheet:ActivityDetailScreen:ActivityDV:ActivityNoteInputSet:PropertyTopic" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">ActivityDetailWorksheet:ActivityDetailScreen:ActivityDV:ActivityNoteInputSet:PropertyTopic</stringProp>
                              <stringProp name="Argument.value"></stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="ActivityDetailWorksheet:ActivityDetailScreen:ActivityDV:ActivityNoteInputSet:Subject" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">ActivityDetailWorksheet:ActivityDetailScreen:ActivityDV:ActivityNoteInputSet:Subject</stringProp>
                              <stringProp name="Argument.value"></stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="ActivityDetailWorksheet:ActivityDetailScreen:ActivityDV:ActivityNoteInputSet:RelatedTo" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">ActivityDetailWorksheet:ActivityDetailScreen:ActivityDV:ActivityNoteInputSet:RelatedTo</stringProp>
                              <stringProp name="Argument.value">Claim:${cCLAIM_1}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="ActivityDetailWorksheet:ActivityDetailScreen:ActivityDV:ActivityNoteInputSet:Text" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">ActivityDetailWorksheet:ActivityDetailScreen:ActivityDV:ActivityNoteInputSet:Text</stringProp>
                              <stringProp name="Argument.value"></stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name=":tblinks" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">:tblinks</stringProp>
                              <stringProp name="Argument.value">${cTBLINKS_1}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name=":tabs" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">:tabs</stringProp>
                              <stringProp name="Argument.value">${cTABS_1}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="infoBar" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">infoBar</stringProp>
                              <stringProp name="Argument.value">${cINFOBAR_1}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="Claim:ClaimMenuActions" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">Claim:ClaimMenuActions</stringProp>
                              <stringProp name="Argument.value">${cCLAIMMENUACTIONS}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="Claim:MenuLinks" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">Claim:MenuLinks</stringProp>
                              <stringProp name="Argument.value">${cCLAIMMENULINKS}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="csrfToken" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.name">csrfToken</stringProp>
                              <stringProp name="Argument.value"></stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="eventSource" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">eventSource</stringProp>
                              <stringProp name="Argument.value">ActivityDetailWorksheet:ActivityDetailScreen:ActivityDetailScreen_CancelButton_act</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                            <elementProp name="objFocusId" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.name">objFocusId</stringProp>
                              <stringProp name="Argument.value">ActivityDetailWorksheet:ActivityDetailScreen:ActivityDetailScreen_CancelButton</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            </elementProp>
                          </collectionProp>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain">${GV_HOSTNAME_NAVIGATOR}</stringProp>
                        <stringProp name="HTTPSampler.port">443</stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        <stringProp name="HTTPSampler.protocol">https</stringProp>
                        <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                        <stringProp name="HTTPSampler.path">/cc/ClaimCenter.do</stringProp>
                        <stringProp name="HTTPSampler.method">POST</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                        <boolProp name="HTTPSampler.monitor">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree>
                        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                          <collectionProp name="HeaderManager.headers">
                            <elementProp name="Content-Type" elementType="Header">
                              <stringProp name="Header.name">Content-Type</stringProp>
                              <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                            </elementProp>
                            <elementProp name="Accept-Language" elementType="Header">
                              <stringProp name="Header.name">Accept-Language</stringProp>
                              <stringProp name="Header.value">en-GB</stringProp>
                            </elementProp>
                            <elementProp name="Accept" elementType="Header">
                              <stringProp name="Header.name">Accept</stringProp>
                              <stringProp name="Header.value">*/*</stringProp>
                            </elementProp>
                            <elementProp name="User-Agent" elementType="Header">
                              <stringProp name="Header.name">User-Agent</stringProp>
                              <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko</stringProp>
                            </elementProp>
                            <elementProp name="DNT" elementType="Header">
                              <stringProp name="Header.name">DNT</stringProp>
                              <stringProp name="Header.value">1</stringProp>
                            </elementProp>
                            <elementProp name="Pragma" elementType="Header">
                              <stringProp name="Header.name">Pragma</stringProp>
                              <stringProp name="Header.value">No-Cache</stringProp>
                            </elementProp>
                            <elementProp name="Referer" elementType="Header">
                              <stringProp name="Header.name">Referer</stringProp>
                              <stringProp name="Header.value">https://${GV_HOSTNAME_NAVIGATOR}/cc/resources/themes/Titanium/resources/</stringProp>
                            </elementProp>
                            <elementProp name="X-Requested-With" elementType="Header">
                              <stringProp name="Header.name">X-Requested-With</stringProp>
                              <stringProp name="Header.value">XMLHttpRequest</stringProp>
                            </elementProp>
                            <elementProp name="Accept-Encoding" elementType="Header">
                              <stringProp name="Header.name">Accept-Encoding</stringProp>
                              <stringProp name="Header.value">gzip, deflate</stringProp>
                            </elementProp>
                          </collectionProp>
                        </HeaderManager>
                        <hashTree/>
                      </hashTree>
                      <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ThinkTime - 10" enabled="true">
                        <stringProp name="TestPlan.comments">This transaction will wait for 10 seconds</stringProp>
                      </GenericController>
                      <hashTree>
                        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="ThinkTime" enabled="true">
                          <stringProp name="ConstantTimer.delay">10000</stringProp>
                          <stringProp name="TestPlan.comments">   Converting seconds to milliseconds - 10s x 1000</stringProp>
                        </ConstantTimer>
                        <hashTree/>
                      </hashTree>
                    </hashTree>
                  </hashTree>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname=" -COMPLETEACTIVITY If ${CompleteButton_matchNr}&gt;2" enabled="true">
                  <stringProp name="IfController.condition">${CompleteButton_matchNr}&gt;2</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP86_K_Click_Complete" enabled="true">
                    <boolProp name="TransactionController.includeTimers">false</boolProp>
                    <boolProp name="TransactionController.parent">true</boolProp>
                  </TransactionController>
                  <hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_21" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="TabBar:ClaimTab:ClaimTab_FindClaim" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">TabBar:ClaimTab:ClaimTab_FindClaim</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="QuickJump" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">QuickJump</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="Claim:MenuLinks_toggle" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">Claim:MenuLinks_toggle</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="ClaimWorkplan:ClaimWorkplanScreen:WorkplanLV:WorkplanFilter" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">ClaimWorkplan:ClaimWorkplanScreen:WorkplanLV:WorkplanFilter</stringProp>
                            <stringProp name="Argument.value">AndFilter/All open activities</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="ActivityDetailWorksheet:ActivityDetailScreen:ActivityDV:ActivityDetailsInputSet:Activity_Description" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">ActivityDetailWorksheet:ActivityDetailScreen:ActivityDV:ActivityDetailsInputSet:Activity_Description</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="ActivityDetailWorksheet:ActivityDetailScreen:ActivityDV:ActivityDetailsInputSet:RelatedTo" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">ActivityDetailWorksheet:ActivityDetailScreen:ActivityDV:ActivityDetailsInputSet:RelatedTo</stringProp>
                            <stringProp name="Argument.value">Exposure:${cEXPOSURE}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="ActivityDetailWorksheet:ActivityDetailScreen:ActivityDV:ActivityDetailsInputSet:Activity_DueDate" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">ActivityDetailWorksheet:ActivityDetailScreen:ActivityDV:ActivityDetailsInputSet:Activity_DueDate</stringProp>
                            <stringProp name="Argument.value">${cDUEDATE}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="ActivityDetailWorksheet:ActivityDetailScreen:ActivityDV:ActivityDetailsInputSet:categoryForCustomActivity" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">ActivityDetailWorksheet:ActivityDetailScreen:ActivityDV:ActivityDetailsInputSet:categoryForCustomActivity</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="ActivityDetailWorksheet:ActivityDetailScreen:ActivityDV:ActivityDetailsInputSet:Activity_Mandatory" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">ActivityDetailWorksheet:ActivityDetailScreen:ActivityDV:ActivityDetailsInputSet:Activity_Mandatory</stringProp>
                            <stringProp name="Argument.value">true</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="ActivityDetailWorksheet:ActivityDetailScreen:ActivityDV:ActivityNoteInputSet:PropertyTopic" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">ActivityDetailWorksheet:ActivityDetailScreen:ActivityDV:ActivityNoteInputSet:PropertyTopic</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="ActivityDetailWorksheet:ActivityDetailScreen:ActivityDV:ActivityNoteInputSet:Subject" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">ActivityDetailWorksheet:ActivityDetailScreen:ActivityDV:ActivityNoteInputSet:Subject</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="ActivityDetailWorksheet:ActivityDetailScreen:ActivityDV:ActivityNoteInputSet:RelatedTo" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">ActivityDetailWorksheet:ActivityDetailScreen:ActivityDV:ActivityNoteInputSet:RelatedTo</stringProp>
                            <stringProp name="Argument.value">Exposure:${cEXPOSURE}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="ActivityDetailWorksheet:ActivityDetailScreen:ActivityDV:ActivityNoteInputSet:Text" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">ActivityDetailWorksheet:ActivityDetailScreen:ActivityDV:ActivityNoteInputSet:Text</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name=":tblinks" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">:tblinks</stringProp>
                            <stringProp name="Argument.value">${cTBLINKS_1}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name=":tabs" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">:tabs</stringProp>
                            <stringProp name="Argument.value">${cTABS_1}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="infoBar" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">infoBar</stringProp>
                            <stringProp name="Argument.value">${cINFOBAR_1}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="Claim:ClaimMenuActions" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">Claim:ClaimMenuActions</stringProp>
                            <stringProp name="Argument.value">${cCLAIMMENUACTIONS}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="Claim:MenuLinks" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">Claim:MenuLinks</stringProp>
                            <stringProp name="Argument.value">${cCLAIMMENULINKS}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="csrfToken" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.name">csrfToken</stringProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="eventSource" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">eventSource</stringProp>
                            <stringProp name="Argument.value">ActivityDetailWorksheet:ActivityDetailScreen:ActivityDetailScreen_CompleteButton_act</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                          <elementProp name="objFocusId" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.name">objFocusId</stringProp>
                            <stringProp name="Argument.value">ActivityDetailWorksheet:ActivityDetailScreen:ActivityDetailScreen_CompleteButton</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain">${GV_HOSTNAME_NAVIGATOR}</stringProp>
                      <stringProp name="HTTPSampler.port">443</stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol">https</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                      <stringProp name="HTTPSampler.path">/cc/ClaimCenter.do</stringProp>
                      <stringProp name="HTTPSampler.method">POST</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="Content-Type" elementType="Header">
                            <stringProp name="Header.name">Content-Type</stringProp>
                            <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                          </elementProp>
                          <elementProp name="Accept-Language" elementType="Header">
                            <stringProp name="Header.name">Accept-Language</stringProp>
                            <stringProp name="Header.value">en-GB</stringProp>
                          </elementProp>
                          <elementProp name="Accept" elementType="Header">
                            <stringProp name="Header.name">Accept</stringProp>
                            <stringProp name="Header.value">*/*</stringProp>
                          </elementProp>
                          <elementProp name="User-Agent" elementType="Header">
                            <stringProp name="Header.name">User-Agent</stringProp>
                            <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko</stringProp>
                          </elementProp>
                          <elementProp name="DNT" elementType="Header">
                            <stringProp name="Header.name">DNT</stringProp>
                            <stringProp name="Header.value">1</stringProp>
                          </elementProp>
                          <elementProp name="Pragma" elementType="Header">
                            <stringProp name="Header.name">Pragma</stringProp>
                            <stringProp name="Header.value">No-Cache</stringProp>
                          </elementProp>
                          <elementProp name="Referer" elementType="Header">
                            <stringProp name="Header.name">Referer</stringProp>
                            <stringProp name="Header.value">https://${GV_HOSTNAME_NAVIGATOR}/cc/resources/themes/Titanium/resources/</stringProp>
                          </elementProp>
                          <elementProp name="X-Requested-With" elementType="Header">
                            <stringProp name="Header.name">X-Requested-With</stringProp>
                            <stringProp name="Header.value">XMLHttpRequest</stringProp>
                          </elementProp>
                          <elementProp name="Accept-Encoding" elementType="Header">
                            <stringProp name="Header.name">Accept-Encoding</stringProp>
                            <stringProp name="Header.value">gzip, deflate</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                    </hashTree>
                    <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ThinkTime - 10" enabled="true">
                      <stringProp name="TestPlan.comments">This transaction will wait for 10 seconds</stringProp>
                    </GenericController>
                    <hashTree>
                      <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="ThinkTime" enabled="true">
                        <stringProp name="ConstantTimer.delay">10000</stringProp>
                        <stringProp name="TestPlan.comments">   Converting seconds to milliseconds - 10s x 1000</stringProp>
                      </ConstantTimer>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                </hashTree>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="-RETURNTODESKTOP" enabled="true">
              <stringProp name="TestPlan.comments">This section contains the RETURNTODESKTOP part of Loadrunner</stringProp>
            </GenericController>
            <hashTree>
              <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP86_Return_To_Desktop" enabled="true">
                <boolProp name="TransactionController.includeTimers">false</boolProp>
                <boolProp name="TransactionController.parent">true</boolProp>
              </TransactionController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_22" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="TabBar:ClaimTab:ClaimTab_FindClaim" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">TabBar:ClaimTab:ClaimTab_FindClaim</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="QuickJump" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">QuickJump</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="Claim:MenuLinks_toggle" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">Claim:MenuLinks_toggle</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="ClaimWorkplan:ClaimWorkplanScreen:WorkplanLV:WorkplanFilter" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">ClaimWorkplan:ClaimWorkplanScreen:WorkplanLV:WorkplanFilter</stringProp>
                        <stringProp name="Argument.value">AndFilter/All open activities</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name=":tblinks" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">:tblinks</stringProp>
                        <stringProp name="Argument.value">${cTBLINKS}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name=":tabs" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">:tabs</stringProp>
                        <stringProp name="Argument.value">${cTABS_1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="infoBar" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">infoBar</stringProp>
                        <stringProp name="Argument.value">${cINFOBAR_1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="Claim:ClaimMenuActions" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">Claim:ClaimMenuActions</stringProp>
                        <stringProp name="Argument.value">${cCLAIMMENUACTIONS}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="Claim:MenuLinks" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">Claim:MenuLinks</stringProp>
                        <stringProp name="Argument.value">${cCLAIMMENULINKS}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="csrfToken" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">csrfToken</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="eventSource" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">eventSource</stringProp>
                        <stringProp name="Argument.value">TabBar:DesktopTab_act</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="objFocusId" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">objFocusId</stringProp>
                        <stringProp name="Argument.value">TabBar:DesktopTab</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${GV_HOSTNAME_NAVIGATOR}</stringProp>
                  <stringProp name="HTTPSampler.port">443</stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">/cc/ClaimCenter.do</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Content-Type" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">Accept-Language</stringProp>
                        <stringProp name="Header.value">en-GB</stringProp>
                      </elementProp>
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">*/*</stringProp>
                      </elementProp>
                      <elementProp name="User-Agent" elementType="Header">
                        <stringProp name="Header.name">User-Agent</stringProp>
                        <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko</stringProp>
                      </elementProp>
                      <elementProp name="DNT" elementType="Header">
                        <stringProp name="Header.name">DNT</stringProp>
                        <stringProp name="Header.value">1</stringProp>
                      </elementProp>
                      <elementProp name="Pragma" elementType="Header">
                        <stringProp name="Header.name">Pragma</stringProp>
                        <stringProp name="Header.value">No-Cache</stringProp>
                      </elementProp>
                      <elementProp name="Referer" elementType="Header">
                        <stringProp name="Header.name">Referer</stringProp>
                        <stringProp name="Header.value">https://${GV_HOSTNAME_NAVIGATOR}/cc/resources/themes/Titanium/resources/</stringProp>
                      </elementProp>
                      <elementProp name="X-Requested-With" elementType="Header">
                        <stringProp name="Header.name">X-Requested-With</stringProp>
                        <stringProp name="Header.value">XMLHttpRequest</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Encoding" elementType="Header">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value">gzip, deflate</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ThinkTime - 10" enabled="true">
                  <stringProp name="TestPlan.comments">This transaction will wait for 10 seconds</stringProp>
                </GenericController>
                <hashTree>
                  <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="ThinkTime" enabled="true">
                    <stringProp name="ConstantTimer.delay">10000</stringProp>
                    <stringProp name="TestPlan.comments">   Converting seconds to milliseconds - 10s x 1000</stringProp>
                  </ConstantTimer>
                  <hashTree/>
                </hashTree>
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="--LOGOUT" enabled="true"/>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP86_ZK_Logout" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_24" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="TabBar:ClaimTab:ClaimTab_FindClaim" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">TabBar:ClaimTab:ClaimTab_FindClaim</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="QuickJump" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">QuickJump</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="Claim:MenuLinks_toggle" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">Claim:MenuLinks_toggle</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name=":tblinks" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">:tblinks</stringProp>
                    <stringProp name="Argument.value">${cTBLINKS}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name=":tabs" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">:tabs</stringProp>
                    <stringProp name="Argument.value">${cTABS}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="infoBar" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">infoBar</stringProp>
                    <stringProp name="Argument.value">${cINFOBAR}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="Claim:ClaimMenuActions" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">Claim:ClaimMenuActions</stringProp>
                    <stringProp name="Argument.value">${cDESKTOPMENUACTIONS}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="Claim:MenuLinks" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">Claim:MenuLinks</stringProp>
                    <stringProp name="Argument.value">${cDESKTOPMENULINKS_1}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="csrfToken" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">csrfToken</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="eventSource" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">eventSource</stringProp>
                    <stringProp name="Argument.value">TabBar:LogoutTabBarLink_act</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="objFocusId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">objFocusId</stringProp>
                    <stringProp name="Argument.value">TabBar:LogoutTabBarLink</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${GV_HOSTNAME_NAVIGATOR}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/cc/ClaimCenter.do</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-GB</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.1; Trident/5.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E; InfoPath.3; Tablet PC 2.0)</stringProp>
                  </elementProp>
                  <elementProp name="Pragma" elementType="Header">
                    <stringProp name="Header.name">Pragma</stringProp>
                    <stringProp name="Header.value">No-Cache</stringProp>
                  </elementProp>
                  <elementProp name="Cache-Control" elementType="Header">
                    <stringProp name="Header.name">Cache-Control</stringProp>
                    <stringProp name="Header.value">no-cache</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://${GV_HOSTNAME_NAVIGATOR}/cc/resources/themes/Titanium/resources/</stringProp>
                  </elementProp>
                  <elementProp name="X-Requested-With" elementType="Header">
                    <stringProp name="Header.name">X-Requested-With</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PMClaimCenterLogout.fcc" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${GV_HOSTNAME_NAVIGATOR}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/LMAuth/PMClaimCenterLogout.fcc</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-GB</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.1; Trident/5.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E; InfoPath.3; Tablet PC 2.0)</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                  </elementProp>
                  <elementProp name="Pragma" elementType="Header">
                    <stringProp name="Header.name">Pragma</stringProp>
                    <stringProp name="Header.value">No-Cache</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PMClaimCenterLogout.fcc" enabled="false">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${GV_HOSTNAME_NAVIGATOR}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">iso-8859-1</stringProp>
              <stringProp name="HTTPSampler.path">/LMAuth/PMClaimCenterLogout.fcc</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-GB</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.1; Trident/5.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E; InfoPath.3; Tablet PC 2.0)</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://${GV_HOSTNAME_NAVIGATOR}/cc/ClaimCenter.do</stringProp>
                  </elementProp>
                  <elementProp name="Pragma" elementType="Header">
                    <stringProp name="Header.name">Pragma</stringProp>
                    <stringProp name="Header.value">No-Cache</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ThinkTime - 10" enabled="true">
              <stringProp name="TestPlan.comments">This transaction will wait for 10 seconds</stringProp>
            </GenericController>
            <hashTree>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="ThinkTime" enabled="true">
                <stringProp name="ConstantTimer.delay">10000</stringProp>
                <stringProp name="TestPlan.comments">   Converting seconds to milliseconds - 10s x 1000</stringProp>
              </ConstantTimer>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
