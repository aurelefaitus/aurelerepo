<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="2.8" jmeter="2.13 r1665067">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="CNG_TP104_eService_Get_Create_Rental_Reservation" enabled="false"/>
      <hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Pacing" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">${CNG_TP104_eService_Get_Create_Rental_Reservation_Pacing}</stringProp>
        </TestAction>
        <hashTree/>
        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="ThinkTime" enabled="false">
          <stringProp name="ConstantTimer.delay">${GV_ThinkTime}</stringProp>
          <stringProp name="TestPlan.comments">   Converting seconds to milliseconds - 60s x 1000</stringProp>
        </ConstantTimer>
        <hashTree/>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="CookieManager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">true</boolProp>
        </CookieManager>
        <hashTree/>
        <CacheManager guiclass="CacheManagerGui" testclass="CacheManager" testname="HTTP Cache Manager" enabled="true">
          <boolProp name="clearEachIteration">true</boolProp>
          <boolProp name="useExpires">false</boolProp>
        </CacheManager>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="TP104 CSV Data Set Config" enabled="true">
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="filename">${GUDV_TestDataPath}\JMX_CNG_TP104_eService_Get_Create_Rental_Reservation\TP104.csv</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <stringProp name="shareMode.all">shareMode</stringProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="SERVER CSV Data Set Config" enabled="true">
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="filename">${GUDV_TestDataPath}\JMX_CNG_TP104_eService_Get_Create_Rental_Reservation\SERVER.csv</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <stringProp name="shareMode.all">shareMode</stringProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Web Services" enabled="true">
          <stringProp name="TestPlan.comments">This section contains the LOGIN part of Loadrunner</stringProp>
        </GenericController>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="TP104_010_eService_Get_Rental_Reservation" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="EService_GET_RENTAL_RESERVATION" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;soap:Envelope xmlns:soap=\&quot;http://www.w3.org/2003/05/soap-envelope\&quot; xmlns:ren=\&quot;http://pm.lmig.com/cl/RentalReservationLibrary/RentalReservationAPI\&quot;&gt; &lt;soap:Header/&gt; &lt;soap:Body&gt; &lt;ren:getRentalReservation&gt; &lt;RentalReservationRequest&gt; &lt;RequestId&gt;?&lt;/RequestId&gt; &lt;Requestor&gt;eService&lt;/Requestor&gt; &lt;UserID&gt;?&lt;/UserID&gt; &lt;IncidentID&gt;cc:${INCIDENT_ID}&lt;/IncidentID&gt;&lt;/RentalReservationRequest&gt; &lt;/ren:getRentalReservation&gt; &lt;/soap:Body&gt; &lt;/soap:Envelope&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${SERVER}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">https://${SERVER}/RentalReservationMediationModuleWeb/sca/RentalReservationAPIExport1</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <boolProp name="HTTPSampler.image_parser">true</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">content-type</stringProp>
                    <stringProp name="Header.value">application/soap+xml</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">SOAPAction</stringProp>
                    <stringProp name="Header.value">https://${SERVER}/AppraisalsMediationModuleWeb/sca/AppraisalsAPIExport1</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="XML_ResponseStatus" enabled="true">
                <stringProp name="TestPlan.comments">&quot;XML_ResponseStatus&quot;|&quot;LB=ResponseStatus&gt;&quot;|&quot;RB=&lt;/ResponseStatus&gt;&quot;|&quot;Search=Body&quot;|&quot;IgnoreRedirections=Yes&quot;|&quot;NotFound=Warning&quot;|</stringProp>
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">XML_ResponseStatus</stringProp>
                <stringProp name="RegexExtractor.regex">ResponseStatus&gt;(.*?)&lt;/ResponseStatus&gt;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">null</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="XML_Status" enabled="true">
                <stringProp name="TestPlan.comments">&quot;XML_ResponseStatusDescription&quot;|&quot;LB=Description&gt;&quot;|&quot;RB=&lt;/Description&gt;&quot;|&quot;Search=Body&quot;|&quot;IgnoreRedirections=Yes&quot;|&quot;NotFound=Warning&quot;|</stringProp>
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">XML_Status</stringProp>
                <stringProp name="RegexExtractor.regex">&lt;Status&gt;(.*?)&lt;/Status&gt;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">null</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ResponseCode Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">lr_error_message(&quot;HTTP Response not 200 OK, response code &quot;);</stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="StatusResponse Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1867169789">success</stringProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">lr_error_message(&quot;Error Code: %s, Error Description: %s, when using City: %s, Postal Code: %s, and State: %s. Transaction response time was: %f.&quot;, lr_eval_string(&quot;{Error_Code}&quot;), lr_eval_string(&quot;{Error_Description}&quot;), lr_eval_string(&quot;{CITY}&quot;), lr_eval_string(&quot;{POSTALCODE}&quot;), lr_eval_string(&quot;{STATE}&quot;), transTime);</stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="ResponseCode" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">ResponseCode</stringProp>
                <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">0</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
            <stringProp name="IfController.condition">&quot;${ResponseCode}&quot;==&quot;200&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">&quot;${XML_ResponseStatus}&quot;==&quot;success&quot;&amp;&amp;&quot;${XML_Status}&quot;!=&quot;renalscheduled&quot;</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="TP104_020_eService_Create_Rental_Reservation" enabled="true">
                <boolProp name="TransactionController.includeTimers">false</boolProp>
                <boolProp name="TransactionController.parent">true</boolProp>
              </TransactionController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="EService_CREATE_RENTAL_RESERVATION" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">&lt;soap:Envelope xmlns:soap=\&quot;http://www.w3.org/2003/05/soap-envelope\&quot; xmlns:ren=\&quot;http://pm.lmig.com/cl/RentalReservationLibrary/RentalReservationAPI\&quot;&gt;&#xd;
			&lt;soap:Header/&gt;&#xd;
				&lt;soap:Body&gt;&#xd;
					&lt;ren:createRentalReservation&gt;&#xd;
						&lt;createRentalRequest&gt;&#xd;
							&lt;RequestId&gt;?&lt;/RequestId&gt;&#xd;
							&lt;Requestor&gt;eService&lt;/Requestor&gt;&#xd;
							&lt;UserID&gt;&lt;/UserID&gt;&#xd;
							&lt;CollisionDamageWaiver&gt;&lt;/CollisionDamageWaiver&gt;&#xd;
							&lt;DailyRate&gt;&lt;/DailyRate&gt;&#xd;
							&lt;DaysApproved&gt;3&lt;/DaysApproved&gt;&#xd;
							&lt;DirectBillPercent&gt;0&lt;/DirectBillPercent&gt;&#xd;
							&lt;IncidentId&gt;cc:${INCIDENT_ID}&lt;/IncidentId&gt;&#xd;
							&lt;OtherChargesDescription&gt;&lt;/OtherChargesDescription&gt;&#xd;
							&lt;RentalComments&gt;TP104&lt;/RentalComments&gt;&#xd;
							&lt;RentalCompany&gt;enterprise&lt;/RentalCompany&gt;&#xd;
							&lt;RentalCompanyId&gt;&lt;/RentalCompanyId&gt;&#xd;
							&lt;RentalEndDate&gt;&lt;/RentalEndDate&gt;&#xd;
							&lt;RentalStartDate&gt;2012-06-17&lt;/RentalStartDate&gt;&#xd;
							&lt;RenterId&gt;cc:${RENTER_ID}&lt;/RenterId&gt;&#xd;
							&lt;RepairStartDate&gt;2012-06-17&lt;/RepairStartDate&gt;&#xd;
						&lt;/createRentalRequest&gt;&#xd;
					&lt;/ren:createRentalReservation&gt;&#xd;
				&lt;/soap:Body&gt;&#xd;
			&lt;/soap:Envelope&gt;</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${SERVER}</stringProp>
                  <stringProp name="HTTPSampler.port">443</stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">https:/${SERVER}/RentalReservationMediationModuleWeb/sca/RentalReservationAPIExport1</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                  <boolProp name="HTTPSampler.image_parser">true</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">content-type</stringProp>
                        <stringProp name="Header.value">application/soap+xml</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">SOAPAction</stringProp>
                        <stringProp name="Header.value">https://${SERVER}/AppraisalsMediationModuleWeb/sca/AppraisalsAPIExport1</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="XML_ResponseStatus" enabled="true">
                    <stringProp name="TestPlan.comments">&quot;XML_ResponseStatus&quot;|&quot;LB=ResponseStatus&gt;&quot;|&quot;RB=&lt;/ResponseStatus&gt;&quot;|&quot;Search=Body&quot;|&quot;IgnoreRedirections=Yes&quot;|&quot;NotFound=Warning&quot;|</stringProp>
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">XML_ResponseStatus</stringProp>
                    <stringProp name="RegexExtractor.regex">ResponseStatus&gt;(.*?)&lt;/ResponseStatus&gt;</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">null</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ResponseCode Assertion" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49586">200</stringProp>
                    </collectionProp>
                    <stringProp name="TestPlan.comments">lr_error_message(&quot;HTTP Response not 200 OK, response code &quot;);</stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="StatusResponse Assertion" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-1867169789">success</stringProp>
                    </collectionProp>
                    <stringProp name="TestPlan.comments">lr_error_message(&quot;Error Code: %s, Error Description: %s, when using City: %s, Postal Code: %s, and State: %s. Transaction response time was: %f.&quot;, lr_eval_string(&quot;{Error_Code}&quot;), lr_eval_string(&quot;{Error_Description}&quot;), lr_eval_string(&quot;{CITY}&quot;), lr_eval_string(&quot;{POSTALCODE}&quot;), lr_eval_string(&quot;{STATE}&quot;), transTime);</stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <threadCounts>true</threadCounts>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1475657811000</longProp>
        <longProp name="ThreadGroup.end_time">1475657811000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Pacing" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">${CNG_TP104_eService_Get_Create_Rental_Reservation_Pacing}</stringProp>
        </TestAction>
        <hashTree/>
        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="ThinkTime" enabled="false">
          <stringProp name="ConstantTimer.delay">${GV_ThinkTime}</stringProp>
          <stringProp name="TestPlan.comments">   Converting seconds to milliseconds - 60s x 1000</stringProp>
        </ConstantTimer>
        <hashTree/>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="CookieManager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">true</boolProp>
        </CookieManager>
        <hashTree/>
        <CacheManager guiclass="CacheManagerGui" testclass="CacheManager" testname="HTTP Cache Manager" enabled="true">
          <boolProp name="clearEachIteration">true</boolProp>
          <boolProp name="useExpires">false</boolProp>
        </CacheManager>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="TP104 CSV Data Set Config" enabled="true">
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="filename">D:\PI\CNG_TP104_eService_Get_Create_Rental_Reservation\TP104.csv</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <stringProp name="shareMode.all">shareMode</stringProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="SERVER CSV Data Set Config" enabled="true">
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="filename">D:\PI\CNG_TP104_eService_Get_Create_Rental_Reservation\SERVER.csv</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <stringProp name="shareMode.all">shareMode</stringProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Web Services" enabled="true">
          <stringProp name="TestPlan.comments">This section contains the LOGIN part of Loadrunner</stringProp>
        </GenericController>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="TP104_010_eService_Get_Rental_Reservation" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="EService_GET_RENTAL_RESERVATION" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;soap:Envelope xmlns:soap=\&quot;http://www.w3.org/2003/05/soap-envelope\&quot; xmlns:ren=\&quot;http://pm.lmig.com/cl/RentalReservationLibrary/RentalReservationAPI\&quot;&gt; &lt;soap:Header/&gt; &lt;soap:Body&gt; &lt;ren:getRentalReservation&gt; &lt;RentalReservationRequest&gt; &lt;RequestId&gt;?&lt;/RequestId&gt; &lt;Requestor&gt;eService&lt;/Requestor&gt; &lt;UserID&gt;?&lt;/UserID&gt; &lt;IncidentID&gt;cc:${INCIDENT_ID}&lt;/IncidentID&gt;&lt;/RentalReservationRequest&gt; &lt;/ren:getRentalReservation&gt; &lt;/soap:Body&gt; &lt;/soap:Envelope&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${SERVER}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">https://${SERVER}/RentalReservationMediationModuleWeb/sca/RentalReservationAPIExport1</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <boolProp name="HTTPSampler.image_parser">true</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">content-type</stringProp>
                    <stringProp name="Header.value">application/soap+xml</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">SOAPAction</stringProp>
                    <stringProp name="Header.value">https://${SERVER}/AppraisalsMediationModuleWeb/sca/AppraisalsAPIExport1</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="XML_ResponseStatus" enabled="true">
                <stringProp name="TestPlan.comments">&quot;XML_ResponseStatus&quot;|&quot;LB=ResponseStatus&gt;&quot;|&quot;RB=&lt;/ResponseStatus&gt;&quot;|&quot;Search=Body&quot;|&quot;IgnoreRedirections=Yes&quot;|&quot;NotFound=Warning&quot;|</stringProp>
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">XML_ResponseStatus</stringProp>
                <stringProp name="RegexExtractor.regex">ResponseStatus&gt;(.*?)&lt;/ResponseStatus&gt;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">null</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="XML_Status" enabled="true">
                <stringProp name="TestPlan.comments">&quot;XML_ResponseStatusDescription&quot;|&quot;LB=Description&gt;&quot;|&quot;RB=&lt;/Description&gt;&quot;|&quot;Search=Body&quot;|&quot;IgnoreRedirections=Yes&quot;|&quot;NotFound=Warning&quot;|</stringProp>
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">XML_Status</stringProp>
                <stringProp name="RegexExtractor.regex">&lt;Status&gt;(.*?)&lt;/Status&gt;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">null</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ResponseCode Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">lr_error_message(&quot;HTTP Response not 200 OK, response code &quot;);</stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="StatusResponse Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1867169789">success</stringProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">lr_error_message(&quot;Error Code: %s, Error Description: %s, when using City: %s, Postal Code: %s, and State: %s. Transaction response time was: %f.&quot;, lr_eval_string(&quot;{Error_Code}&quot;), lr_eval_string(&quot;{Error_Description}&quot;), lr_eval_string(&quot;{CITY}&quot;), lr_eval_string(&quot;{POSTALCODE}&quot;), lr_eval_string(&quot;{STATE}&quot;), transTime);</stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="ResponseCode" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">ResponseCode</stringProp>
                <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">0</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
            <stringProp name="IfController.condition">&quot;${ResponseCode}&quot;==&quot;200&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">&quot;${XML_ResponseStatus}&quot;==&quot;success&quot;&amp;&amp;&quot;${XML_Status}&quot;!=&quot;renalscheduled&quot;</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="TP104_020_eService_Create_Rental_Reservation" enabled="true">
                <boolProp name="TransactionController.includeTimers">false</boolProp>
                <boolProp name="TransactionController.parent">true</boolProp>
              </TransactionController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="EService_CREATE_RENTAL_RESERVATION" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">&lt;soap:Envelope xmlns:soap=\&quot;http://www.w3.org/2003/05/soap-envelope\&quot; xmlns:ren=\&quot;http://pm.lmig.com/cl/RentalReservationLibrary/RentalReservationAPI\&quot;&gt;&#xd;
			&lt;soap:Header/&gt;&#xd;
				&lt;soap:Body&gt;&#xd;
					&lt;ren:createRentalReservation&gt;&#xd;
						&lt;createRentalRequest&gt;&#xd;
							&lt;RequestId&gt;?&lt;/RequestId&gt;&#xd;
							&lt;Requestor&gt;eService&lt;/Requestor&gt;&#xd;
							&lt;UserID&gt;&lt;/UserID&gt;&#xd;
							&lt;CollisionDamageWaiver&gt;&lt;/CollisionDamageWaiver&gt;&#xd;
							&lt;DailyRate&gt;&lt;/DailyRate&gt;&#xd;
							&lt;DaysApproved&gt;3&lt;/DaysApproved&gt;&#xd;
							&lt;DirectBillPercent&gt;0&lt;/DirectBillPercent&gt;&#xd;
							&lt;IncidentId&gt;cc:${INCIDENT_ID}&lt;/IncidentId&gt;&#xd;
							&lt;OtherChargesDescription&gt;&lt;/OtherChargesDescription&gt;&#xd;
							&lt;RentalComments&gt;TP104&lt;/RentalComments&gt;&#xd;
							&lt;RentalCompany&gt;enterprise&lt;/RentalCompany&gt;&#xd;
							&lt;RentalCompanyId&gt;&lt;/RentalCompanyId&gt;&#xd;
							&lt;RentalEndDate&gt;&lt;/RentalEndDate&gt;&#xd;
							&lt;RentalStartDate&gt;2012-06-17&lt;/RentalStartDate&gt;&#xd;
							&lt;RenterId&gt;cc:${RENTER_ID}&lt;/RenterId&gt;&#xd;
							&lt;RepairStartDate&gt;2012-06-17&lt;/RepairStartDate&gt;&#xd;
						&lt;/createRentalRequest&gt;&#xd;
					&lt;/ren:createRentalReservation&gt;&#xd;
				&lt;/soap:Body&gt;&#xd;
			&lt;/soap:Envelope&gt;</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${SERVER}</stringProp>
                  <stringProp name="HTTPSampler.port">443</stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">https:/${SERVER}/RentalReservationMediationModuleWeb/sca/RentalReservationAPIExport1</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                  <boolProp name="HTTPSampler.image_parser">true</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">content-type</stringProp>
                        <stringProp name="Header.value">application/soap+xml</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">SOAPAction</stringProp>
                        <stringProp name="Header.value">https://${SERVER}/AppraisalsMediationModuleWeb/sca/AppraisalsAPIExport1</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="XML_ResponseStatus" enabled="true">
                    <stringProp name="TestPlan.comments">&quot;XML_ResponseStatus&quot;|&quot;LB=ResponseStatus&gt;&quot;|&quot;RB=&lt;/ResponseStatus&gt;&quot;|&quot;Search=Body&quot;|&quot;IgnoreRedirections=Yes&quot;|&quot;NotFound=Warning&quot;|</stringProp>
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">XML_ResponseStatus</stringProp>
                    <stringProp name="RegexExtractor.regex">ResponseStatus&gt;(.*?)&lt;/ResponseStatus&gt;</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">null</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ResponseCode Assertion" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49586">200</stringProp>
                    </collectionProp>
                    <stringProp name="TestPlan.comments">lr_error_message(&quot;HTTP Response not 200 OK, response code &quot;);</stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="StatusResponse Assertion" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-1867169789">success</stringProp>
                    </collectionProp>
                    <stringProp name="TestPlan.comments">lr_error_message(&quot;Error Code: %s, Error Description: %s, when using City: %s, Postal Code: %s, and State: %s. Transaction response time was: %f.&quot;, lr_eval_string(&quot;{Error_Code}&quot;), lr_eval_string(&quot;{Error_Description}&quot;), lr_eval_string(&quot;{CITY}&quot;), lr_eval_string(&quot;{POSTALCODE}&quot;), lr_eval_string(&quot;{STATE}&quot;), transTime);</stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
