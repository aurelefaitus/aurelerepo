<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="2.9" jmeter="3.0 r1743807">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="CNG_TP21_CSW_Export" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">5</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">5</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1455260938000</stringProp>
        <longProp name="ThreadGroup.start_time">1455260938000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <longProp name="ThreadGroup.end_time">0</longProp>
      </ThreadGroup>
      <hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="-Action" enabled="true">
          <stringProp name="TestPlan.comments">This section contains the Action part of Loadrunner</stringProp>
        </GenericController>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="TP21_010_CSW_Export" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable" enabled="true">
              <stringProp name="variableName">GlobalRandomVariable</stringProp>
              <stringProp name="outputFormat"></stringProp>
              <stringProp name="minimumValue">1</stringProp>
              <stringProp name="maximumValue">100</stringProp>
              <stringProp name="randomSeed"></stringProp>
              <boolProp name="perThread">true</boolProp>
            </RandomVariableConfig>
            <hashTree/>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${GlobalRandomVariable} &lt;= 50</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <stringProp name="TestPlan.comments">${GlobalRandomVariable} &lt;= 50</stringProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Pol_Serv_EService_PolcySearch1" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:ns=&quot;http://lmig.com/standardHeader/2008/07/01&quot; xmlns:icsw=&quot;http://CSWMediationLibrary/iCSW&quot; xmlns:csw=&quot;http://CSWMediationLibrary&quot;&gt;   &lt;soapenv:Header/&gt;   &lt;soapenv:Body&gt;      &lt;icsw:getClaimCountByPolicy&gt;         &lt;csw:PolicyNumberInputBO&gt;            &lt;!--1 or more repetitions:--&gt;            &lt;csw:PolicyNumbersBO&gt;               &lt;csw:policynumber&gt;${polNum1}&lt;/csw:policynumber&gt;            &lt;/csw:PolicyNumbersBO&gt;            &lt;csw:PolicyNumbersBO&gt;               &lt;csw:policynumber&gt;${polNum2}&lt;/csw:policynumber&gt;            &lt;/csw:PolicyNumbersBO&gt;         &lt;/csw:PolicyNumberInputBO&gt;      &lt;/icsw:getClaimCountByPolicy&gt;   &lt;/soapenv:Body&gt;&lt;/soapenv:Envelope&gt;</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">https://${SERVER}/CSWMediationModuleWeb/sca/iCSWWSExport</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">import java.io.File;
import java.io.FileReader;
import java.io.LineNumberReader;
import java.util.Random;
 try
 { 
FileReader fileReader = new FileReader(new File(vars.get(&quot;BaseDir&quot;)+&quot;\\TP21.csv&quot;));
LineNumberReader lineReader = new LineNumberReader(fileReader);
int linenumber = 0;

String Str;
Str=lineReader.readLine();
while (Str != null){
	Str=lineReader.readLine();
	vars.put(&quot;PolicyNumber&quot;+linenumber.toString(),Str);
//	log.info(&quot;the value of &quot;+ vars.get(&quot;PolicyNumber&quot;+linenumber.toString()));
   linenumber++;
}

//log.info(&quot;the value of line is &quot;+linenumber);
linenumber--; // do not include header row
int j=0;
//log.info(&quot;tehre vares  &quot;+j);
for(int i=1 ; i&lt;=8; i++)
{
	j=(int) (Math.random()*linenumber);
	//log.info(&quot;Tehre valuse of j &quot;+j);
	vars.put(&quot;polNum&quot;+i.toString(),vars.get(&quot;PolicyNumber&quot;+j.toString()));
	//log.info(&quot;valuse of ff &quot;+vars.get(&quot;polNum&quot;+i.toString()));
} 
lineReader.close();
}

catch(Throwable ex)
{
	//log.error(&quot;Failed to do this or that&quot;, ex);
	
}
</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">SOAPAction</stringProp>
                      <stringProp name="Header.value">https://${SERVER}/CSWMediationModuleWeb/sca/iCSWWSExport</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">content-type</stringProp>
                      <stringProp name="Header.value">text/xml</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="ResponsePolicyNumber" enabled="true">
                  <stringProp name="TestPlan.comments">&quot;ResponsePolicyNumber&quot;|&quot;LB=&lt;csw:policynumber&gt;&quot;|&quot;RB=&lt;/csw:policynumber&gt;&quot;|&quot;ORD=ALL&quot;|</stringProp>
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">ResponsePolicyNumber</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;csw:policynumber&gt;(.*?)&lt;/csw:policynumber&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">null</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="FailureDesc" enabled="true">
                  <stringProp name="TestPlan.comments">&quot;FailureDesc&quot;|&quot;LB=FailFlowException&quot;|&quot;RB=CWBFail&quot;|&quot;Search=Body&quot;|&quot;IgnoreRedirections=Yes&quot;|&quot;Notfound=warning&quot;|</stringProp>
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">FailureDesc</stringProp>
                  <stringProp name="RegexExtractor.regex">FailFlowException(.*?)CWBFail</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">null</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor-responsecode" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">code</stringProp>
                  <stringProp name="RegexExtractor.refname">responsecode</stringProp>
                  <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">0</stringProp>
                  <stringProp name="RegexExtractor.match_number"></stringProp>
                </RegexExtractor>
                <hashTree/>
                <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">int rescode=Integer.parseInt(vars.get(&quot;responsecode&quot;));
String stats= vars.get(&quot;FailureDesc&quot;);
//String stats1= vars.get(&quot;Qualification_Message&quot;);
if (rescode &gt;= 200 &amp;&amp; rescode &lt; 399)
{	//error if no results found
	if (!stats.equals(&quot;null&quot;))
	{	
		//  search did not return any results
		log.error(&quot;Transaction Name :TP21_010_CSW_Export##&quot;+&quot;Request XML:&quot;+prev.getSamplerData()+&quot;##&quot;+&quot;HTTP Response Code:&quot;+vars.get(&quot;responsecode&quot;)+&quot;##&quot;+&quot;Response From Server : &quot;+prev.getResponseDataAsString());
		prev.setSuccessful(false);
		ctx.setRestartNextLoop(true);
		
	}
	else 
	{
		// search successfull
		prev.setSuccessful(true);
		vars.put(&quot;doLogin&quot;,&quot;0&quot;);
	}
}
else
{
// Unexpected result  from server
	log.error(&quot;Transaction Name :TP21_010_CSW_Export##&quot;+&quot;Request XML:&quot;+prev.getSamplerData()+&quot;##&quot;+&quot;HTTP Response Code:&quot;+vars.get(&quot;responsecode&quot;)+&quot;##&quot;+&quot;Response From Server : &quot;+prev.getResponseDataAsString());
	prev.setSuccessful(false);
	ctx.setRestartNextLoop(true);
}
//log.info(&quot;the value is : &quot;+vars.get(&quot;doLogin&quot;));
</stringProp>
                </BeanShellPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${GlobalRandomVariable} &gt; 50 &amp;&amp; ${GlobalRandomVariable} &lt;= 75</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <stringProp name="TestPlan.comments">${GlobalRandomVariable} &gt; 50 &amp;&amp; ${GlobalRandomVariable} &lt;= 75</stringProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Pol_Serv_EService_PolcySearch2" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:ns=&quot;http://lmig.com/standardHeader/2008/07/01&quot; xmlns:icsw=&quot;http://CSWMediationLibrary/iCSW&quot; xmlns:csw=&quot;http://CSWMediationLibrary&quot;&gt;   &lt;soapenv:Header/&gt;   &lt;soapenv:Body&gt;      &lt;icsw:getClaimCountByPolicy&gt;         &lt;csw:PolicyNumberInputBO&gt;            &lt;!--1 or more repetitions:--&gt;            &lt;csw:PolicyNumbersBO&gt;               &lt;csw:policynumber&gt;${polNum1}&lt;/csw:policynumber&gt;            &lt;/csw:PolicyNumbersBO&gt;            &lt;csw:PolicyNumbersBO&gt;               &lt;csw:policynumber&gt;${polNum2}&lt;/csw:policynumber&gt;            &lt;/csw:PolicyNumbersBO&gt;            &lt;csw:PolicyNumbersBO&gt;               &lt;csw:policynumber&gt;${polNum3}&lt;/csw:policynumber&gt;            &lt;/csw:PolicyNumbersBO&gt;            &lt;csw:PolicyNumbersBO&gt;               &lt;csw:policynumber&gt;${polNum4}&lt;/csw:policynumber&gt;            &lt;/csw:PolicyNumbersBO&gt;         &lt;/csw:PolicyNumberInputBO&gt;      &lt;/icsw:getClaimCountByPolicy&gt;   &lt;/soapenv:Body&gt;&lt;/soapenv:Envelope&gt;</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">https://${SERVER}/CSWMediationModuleWeb/sca/iCSWWSExport</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">import java.io.File;
import java.io.FileReader;
import java.io.LineNumberReader;
import java.util.Random;
 try
 { 
FileReader fileReader = new FileReader(new File(vars.get(&quot;BaseDir&quot;)+&quot;\\TP21.csv&quot;));
LineNumberReader lineReader = new LineNumberReader(fileReader);
int linenumber = 0;

String Str;
Str=lineReader.readLine();
while (Str != null){
	Str=lineReader.readLine();
	vars.put(&quot;PolicyNumber&quot;+linenumber.toString(),Str);
//	log.info(&quot;the value of &quot;+ vars.get(&quot;PolicyNumber&quot;+linenumber.toString()));
   linenumber++;
}

//log.info(&quot;the value of line is &quot;+linenumber);
linenumber--; // do not include header row
int j=0;
//log.info(&quot;tehre vares  &quot;+j);
for(int i=1 ; i&lt;=8; i++)
{
	j=(int) (Math.random()*linenumber);
	//log.info(&quot;Tehre valuse of j &quot;+j);
	vars.put(&quot;polNum&quot;+i.toString(),vars.get(&quot;PolicyNumber&quot;+j.toString()));
	//log.info(&quot;valuse of ff &quot;+vars.get(&quot;polNum&quot;+i.toString()));
} 
lineReader.close();
}

catch(Throwable ex)
{
	//log.error(&quot;Failed to do this or that&quot;, ex);
	
}
</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">SOAPAction</stringProp>
                      <stringProp name="Header.value">https://${SERVER}/CSWMediationModuleWeb/sca/iCSWWSExport</stringProp>
                    </elementProp>
                    <elementProp name="content-type" elementType="Header">
                      <stringProp name="Header.name">content-type</stringProp>
                      <stringProp name="Header.value">text/xml</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="ResponsePolicyNumber" enabled="true">
                  <stringProp name="TestPlan.comments">&quot;ResponsePolicyNumber&quot;|&quot;LB=&lt;csw:policynumber&gt;&quot;|&quot;RB=&lt;/csw:policynumber&gt;&quot;|&quot;ORD=ALL&quot;|</stringProp>
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">ResponsePolicyNumber</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;csw:policynumber&gt;(.*?)&lt;/csw:policynumber&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">null</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="FailureDesc" enabled="true">
                  <stringProp name="TestPlan.comments">&quot;FailureDesc&quot;|&quot;LB=FailFlowException&quot;|&quot;RB=CWBFail&quot;|&quot;Search=Body&quot;|&quot;IgnoreRedirections=Yes&quot;|&quot;Notfound=warning&quot;|</stringProp>
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">FailureDesc</stringProp>
                  <stringProp name="RegexExtractor.regex">FailFlowException(.*?)CWBFail</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">null</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor-responsecode" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">code</stringProp>
                  <stringProp name="RegexExtractor.refname">responsecode</stringProp>
                  <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">0</stringProp>
                  <stringProp name="RegexExtractor.match_number"></stringProp>
                </RegexExtractor>
                <hashTree/>
                <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">int rescode=Integer.parseInt(vars.get(&quot;responsecode&quot;));
String stats= vars.get(&quot;FailureDesc&quot;);
//String stats1= vars.get(&quot;Qualification_Message&quot;);
if (rescode &gt;= 200 &amp;&amp; rescode &lt; 399)
{	//error if no results found
	if (!stats.equals(&quot;null&quot;))
	{	
		//  search did not return any results
		log.error(&quot;Transaction Name :TP21_010_CSW_Export##&quot;+&quot;Request XML:&quot;+prev.getSamplerData()+&quot;##&quot;+&quot;HTTP Response Code:&quot;+vars.get(&quot;responsecode&quot;)+&quot;##&quot;+&quot;Response From Server : &quot;+prev.getResponseDataAsString());
		prev.setSuccessful(false);
		ctx.setRestartNextLoop(true);
		
	}
	else 
	{
		// search successfull
		prev.setSuccessful(true);
		vars.put(&quot;doLogin&quot;,&quot;0&quot;);
	}
}
else
{
// Unexpected result  from server
	log.error(&quot;Transaction Name :TP21_010_CSW_Export##&quot;+&quot;Request XML:&quot;+prev.getSamplerData()+&quot;##&quot;+&quot;HTTP Response Code:&quot;+vars.get(&quot;responsecode&quot;)+&quot;##&quot;+&quot;Response From Server : &quot;+prev.getResponseDataAsString());
	prev.setSuccessful(false);
	ctx.setRestartNextLoop(true);
}
//log.info(&quot;the value is : &quot;+vars.get(&quot;doLogin&quot;));
</stringProp>
                </BeanShellPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${GlobalRandomVariable} &gt; 75</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <stringProp name="TestPlan.comments">${GlobalRandomVariable} &gt; 75</stringProp>
            </IfController>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import java.io.File;
import java.io.FileReader;
import java.io.LineNumberReader;
import java.util.Random;
 try
 { 
FileReader fileReader = new FileReader(new File(vars.get(&quot;BaseDir&quot;)+&quot;\\TP21.csv&quot;));
LineNumberReader lineReader = new LineNumberReader(fileReader);
int linenumber = 0;

String Str;
Str=lineReader.readLine();
while (Str != null){
	Str=lineReader.readLine();
	vars.put(&quot;PolicyNumber&quot;+linenumber.toString(),Str);
//	log.info(&quot;the value of &quot;+ vars.get(&quot;PolicyNumber&quot;+linenumber.toString()));
   linenumber++;
}

//log.info(&quot;the value of line is &quot;+linenumber);
linenumber--; // do not include header row
int j=0;
//log.info(&quot;tehre vares  &quot;+j);
for(int i=1 ; i&lt;=8; i++)
{
	j=(int) (Math.random()*linenumber);
	//log.info(&quot;Tehre valuse of j &quot;+j);
	vars.put(&quot;polNum&quot;+i.toString(),vars.get(&quot;PolicyNumber&quot;+j.toString()));
	//log.info(&quot;valuse of ff &quot;+vars.get(&quot;polNum&quot;+i.toString()));
} 
lineReader.close();
}

catch(Throwable ex)
{
	//log.error(&quot;Failed to do this or that&quot;, ex);
	
}
</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Pol_Serv_EService_PolcySearch3" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:ns=&quot;http://lmig.com/standardHeader/2008/07/01&quot; xmlns:icsw=&quot;http://CSWMediationLibrary/iCSW&quot; xmlns:csw=&quot;http://CSWMediationLibrary&quot;&gt;   &lt;soapenv:Header/&gt;   &lt;soapenv:Body&gt;      &lt;icsw:getClaimCountByPolicy&gt;         &lt;csw:PolicyNumberInputBO&gt;            &lt;!--1 or more repetitions:--&gt;            &lt;csw:PolicyNumbersBO&gt;               &lt;csw:policynumber&gt;${polNum1}&lt;/csw:policynumber&gt;            &lt;/csw:PolicyNumbersBO&gt;            &lt;csw:PolicyNumbersBO&gt;               &lt;csw:policynumber&gt;${polNum2}&lt;/csw:policynumber&gt;            &lt;/csw:PolicyNumbersBO&gt;            &lt;csw:PolicyNumbersBO&gt;               &lt;csw:policynumber&gt;${polNum3}&lt;/csw:policynumber&gt;            &lt;/csw:PolicyNumbersBO&gt;            &lt;csw:PolicyNumbersBO&gt;               &lt;csw:policynumber&gt;${polNum4}&lt;/csw:policynumber&gt;            &lt;/csw:PolicyNumbersBO&gt;            &lt;csw:PolicyNumbersBO&gt;               &lt;csw:policynumber&gt;${polNum5}&lt;/csw:policynumber&gt;            &lt;/csw:PolicyNumbersBO&gt;            &lt;csw:PolicyNumbersBO&gt;               &lt;csw:policynumber&gt;${polNum6}&lt;/csw:policynumber&gt;            &lt;/csw:PolicyNumbersBO&gt;            &lt;csw:PolicyNumbersBO&gt;               &lt;csw:policynumber&gt;${polNum7}&lt;/csw:policynumber&gt;            &lt;/csw:PolicyNumbersBO&gt;            &lt;csw:PolicyNumbersBO&gt;               &lt;csw:policynumber&gt;${polNum8}&lt;/csw:policynumber&gt;            &lt;/csw:PolicyNumbersBO&gt;         &lt;/csw:PolicyNumberInputBO&gt;      &lt;/icsw:getClaimCountByPolicy&gt;   &lt;/soapenv:Body&gt;&lt;/soapenv:Envelope&gt;</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">https://${SERVER}/CSWMediationModuleWeb/sca/iCSWWSExport</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">SOAPAction</stringProp>
                      <stringProp name="Header.value">https://${SERVER}/CSWMediationModuleWeb/sca/iCSWWSExport</stringProp>
                    </elementProp>
                    <elementProp name="content-type" elementType="Header">
                      <stringProp name="Header.name">content-type</stringProp>
                      <stringProp name="Header.value">text/xml</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="ResponsePolicyNumber" enabled="true">
                  <stringProp name="TestPlan.comments">&quot;ResponsePolicyNumber&quot;|&quot;LB=&lt;csw:policynumber&gt;&quot;|&quot;RB=&lt;/csw:policynumber&gt;&quot;|&quot;ORD=ALL&quot;|</stringProp>
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">ResponsePolicyNumber</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;csw:policynumber&gt;(.*?)&lt;/csw:policynumber&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">null</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="FailureDesc" enabled="true">
                  <stringProp name="TestPlan.comments">&quot;FailureDesc&quot;|&quot;LB=FailFlowException&quot;|&quot;RB=CWBFail&quot;|&quot;Search=Body&quot;|&quot;IgnoreRedirections=Yes&quot;|&quot;Notfound=warning&quot;|</stringProp>
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">FailureDesc</stringProp>
                  <stringProp name="RegexExtractor.regex">FailFlowException(.*?)CWBFail</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">null</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor-responsecode" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">code</stringProp>
                  <stringProp name="RegexExtractor.refname">responsecode</stringProp>
                  <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">0</stringProp>
                  <stringProp name="RegexExtractor.match_number"></stringProp>
                </RegexExtractor>
                <hashTree/>
                <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">int rescode=Integer.parseInt(vars.get(&quot;responsecode&quot;));
String stats= vars.get(&quot;FailureDesc&quot;);
//String stats1= vars.get(&quot;Qualification_Message&quot;);
if (rescode &gt;= 200 &amp;&amp; rescode &lt; 399)
{	//error if no results found
	if (!stats.equals(&quot;null&quot;))
	{	
		//  search did not return any results
		log.error(&quot;Transaction Name :TP21_010_CSW_Export##&quot;+&quot;Request XML:&quot;+prev.getSamplerData()+&quot;##&quot;+&quot;HTTP Response Code:&quot;+vars.get(&quot;responsecode&quot;)+&quot;##&quot;+&quot;Response From Server : &quot;+prev.getResponseDataAsString());
		prev.setSuccessful(false);
		ctx.setRestartNextLoop(true);
		
	}
	else 
	{
		// search successfull
		prev.setSuccessful(true);
		vars.put(&quot;doLogin&quot;,&quot;0&quot;);
	}
}
else
{
// Unexpected result  from server
	log.error(&quot;Transaction Name :TP21_010_CSW_Export##&quot;+&quot;Request XML:&quot;+prev.getSamplerData()+&quot;##&quot;+&quot;HTTP Response Code:&quot;+vars.get(&quot;responsecode&quot;)+&quot;##&quot;+&quot;Response From Server : &quot;+prev.getResponseDataAsString());
	prev.setSuccessful(false);
	ctx.setRestartNextLoop(true);
}
//log.info(&quot;the value is : &quot;+vars.get(&quot;doLogin&quot;));
</stringProp>
                </BeanShellPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="false">
              <stringProp name="BeanShellSampler.query">log.info(&quot;The value of polNum1&quot; +vars.get(&quot;polNum1&quot;));
log.info(&quot;The value of polNum2&quot; +vars.get(&quot;polNum2&quot;));
log.info(&quot;The value of polNum3&quot; +vars.get(&quot;polNum3&quot;));
log.info(&quot;The value of polNum4&quot; +vars.get(&quot;polNum4&quot;));
log.info(&quot;The value of polNum5&quot; +vars.get(&quot;polNum5&quot;));
log.info(&quot;The value of polNum6&quot; +vars.get(&quot;polNum6&quot;));
log.info(&quot;The value of polNum7&quot; +vars.get(&quot;polNum7&quot;));
log.info(&quot;The value of polNum8&quot; +vars.get(&quot;polNum8&quot;));
</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
        </hashTree>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="RUN x ( 1 )" enabled="false">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </LoopController>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="BaseDir" elementType="Argument">
              <stringProp name="Argument.name">BaseDir</stringProp>
              <stringProp name="Argument.value">${__BeanShell(import org.apache.jmeter.services.FileServer; FileServer.getFileServer().getBaseDir();)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Pacing" enabled="true">
          <stringProp name="ConstantTimer.delay">1000</stringProp>
          <stringProp name="TestPlan.comments">   Converting seconds to milliseconds - 1s x 1000</stringProp>
        </ConstantTimer>
        <hashTree/>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="CookieManager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">false</boolProp>
        </CookieManager>
        <hashTree/>
        <CacheManager guiclass="CacheManagerGui" testclass="CacheManager" testname="HTTP Cache Manager" enabled="true">
          <boolProp name="clearEachIteration">false</boolProp>
          <boolProp name="useExpires">false</boolProp>
        </CacheManager>
        <hashTree/>
        <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
            </value>
          </objProp>
          <stringProp name="filename">SummReport_CNG_TP21_CSW_Export.csv</stringProp>
        </ResultCollector>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="filename">SERVER.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
