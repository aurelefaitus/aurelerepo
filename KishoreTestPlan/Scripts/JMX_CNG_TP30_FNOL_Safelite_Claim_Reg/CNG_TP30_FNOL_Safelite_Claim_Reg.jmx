<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="2.8" jmeter="2.13 r1665067">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="CNG_TP30_FNOL_Safelite_Claim_Reg" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1455260938000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <longProp name="ThreadGroup.end_time">0</longProp>
      </ThreadGroup>
      <hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="TP30_010_FNOL_Safelite_Claim_Reg" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="FNOL_Safelite_Claim_Reg" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:iac=&quot;http://pm.lmig.com/cl/FNOLServicesMediationModule/iAcordClaimRegistration&quot;&gt;&lt;soapenv:Header/&gt;&lt;soapenv:Body&gt;&lt;iac:claimRegistration&gt;&lt;ACORD&gt;&lt;SignonRq&gt;&lt;SignonPswd&gt;&lt;CustId&gt;	&lt;SPName&gt;Safelite&lt;/SPName&gt;&lt;CustPermId&gt;00008&lt;/CustPermId&gt;&lt;/CustId&gt;&lt;CustPswd&gt;&lt;EncryptionTypeCd&gt;NONE&lt;/EncryptionTypeCd&gt;&lt;Pswd&gt;Pswd&lt;/Pswd&gt;&lt;/CustPswd&gt;&lt;/SignonPswd&gt;	&lt;ClientDt&gt;2010-06-22T00:00:00.000&lt;/ClientDt&gt;&lt;CustLangPref&gt;token&lt;/CustLangPref&gt;&lt;ClientApp&gt;&lt;Org&gt;Org&lt;/Org&gt;&lt;Name&gt;Name&lt;/Name&gt;&lt;Version&gt;token&lt;/Version&gt;&lt;/ClientApp&gt;&lt;/SignonRq&gt;&lt;ClaimsSvcRq&gt;&lt;RqUID&gt;20101207-${REQUEST_UNIQUE_ID}-CCC000000000&lt;/RqUID&gt;&lt;ClaimsNotificationAddRq&gt;&lt;RqUID&gt;20101207-${REQUEST_UNIQUE_ID}-CCC000000000&lt;/RqUID&gt;&lt;TransactionRequestDt&gt;${__time(yyyy-MM-dd)}T00:00:00.000&lt;/TransactionRequestDt&gt;&lt;CurCd&gt;token&lt;/CurCd&gt;&lt;Policy&gt;&lt;PolicyNumber&gt;${POLICY_NUMBER}&lt;/PolicyNumber&gt;&lt;LOBCd&gt;AUTOP&lt;/LOBCd&gt;&lt;MiscParty&gt;&lt;ItemIdInfo&gt;&lt;InsurerId&gt;${INSURER_ID}&lt;/InsurerId&gt;&lt;/ItemIdInfo&gt;	&lt;GeneralPartyInfo&gt;&lt;Addr&gt;&lt;StateProvCd&gt;NJ&lt;/StateProvCd&gt;&lt;/Addr&gt;&lt;/GeneralPartyInfo&gt;&lt;/MiscParty&gt;&lt;/Policy&gt;&lt;ClaimsOccurrence&gt;&lt;ClaimsReported&gt;&lt;ReportedDt&gt;${__time(yyyy-MM-dd)}T00:01:00.000&lt;/ReportedDt&gt;&lt;ReportNumber&gt;${RANDOMREPNUM}&lt;/ReportNumber&gt;&lt;/ClaimsReported&gt;&lt;LossDt&gt;${DateOfLoss}&lt;/LossDt&gt;&lt;DamageDesc&gt;TP30&lt;/DamageDesc&gt;&lt;LossTime&gt;13:32:00&lt;/LossTime&gt;&lt;Addr&gt;&lt;Addr1&gt;66 BERGEN MILLS RD&lt;/Addr1&gt;&lt;City&gt;MONROE TOWNSHIP&lt;/City&gt;&lt;StateProvCd&gt;NJ&lt;/StateProvCd&gt;&lt;PostalCode&gt;08831-5801&lt;/PostalCode&gt;&lt;/Addr&gt;&lt;/ClaimsOccurrence&gt;&lt;ClaimsParty&gt;&lt;GeneralPartyInfo&gt;&lt;NameInfo&gt;&lt;PersonName&gt;&lt;Surname&gt;${LASTNAME}&lt;/Surname&gt;&lt;GivenName&gt;${FIRSTNAME}&lt;/GivenName&gt;&lt;/PersonName&gt;&lt;/NameInfo&gt;&lt;Addr&gt;&lt;Addr1&gt;${ADDRESS1}&lt;/Addr1&gt;&lt;City&gt;${CITY}&lt;/City&gt;&lt;StateProvCd&gt;${STATE}&lt;/StateProvCd&gt;&lt;PostalCode&gt;${POSTCODE}&lt;/PostalCode&gt;&lt;Country&gt;USA&lt;/Country&gt;&lt;/Addr&gt;&lt;Communications&gt;&lt;PhoneInfo&gt;&lt;CommunicationUseCd&gt;${PHONETYPE}&lt;/CommunicationUseCd&gt;&lt;PhoneNumber&gt;${PHONE}&lt;/PhoneNumber&gt;&lt;/PhoneInfo&gt;&lt;/Communications&gt;&lt;/GeneralPartyInfo&gt;&lt;PersonInfo&gt;&lt;GenderCd&gt;M&lt;/GenderCd&gt;&lt;/PersonInfo&gt;&lt;ClaimsPartyInfo&gt;&lt;RelationshipToInsuredCd&gt;IN&lt;/RelationshipToInsuredCd&gt;&lt;/ClaimsPartyInfo&gt;&lt;/ClaimsParty&gt;&lt;AutoLossInfo id=&quot;idvalue0&quot;&gt;&lt;VehInfo&gt;&lt;ItemIdInfo&gt;&lt;InsurerId&gt;1&lt;/InsurerId&gt;&lt;/ItemIdInfo&gt;&lt;Manufacturer&gt;${VEHMANUFACTURER}&lt;/Manufacturer&gt;&lt;Model&gt;${VEHMODEL}&lt;/Model&gt;&lt;ModelYear&gt;${VEHYEAR}&lt;/ModelYear&gt;&lt;Registration&gt;&lt;RegistrationId&gt;${VEHREGISTRATION}&lt;/RegistrationId&gt;&lt;StateProvCd&gt;${VEHSTATE}&lt;/StateProvCd&gt;&lt;/Registration&gt;&lt;VehIdentificationNumber&gt;${VEHVIN}&lt;/VehIdentificationNumber&gt;&lt;/VehInfo&gt;&lt;DamageDesc&gt;GAS&lt;/DamageDesc&gt;&lt;/AutoLossInfo&gt;&lt;RemarkText IdRef=&quot;idvalue0&quot;&gt;Claim Note Text&lt;/RemarkText&gt;&lt;/ClaimsNotificationAddRq&gt;&lt;/ClaimsSvcRq&gt;&lt;/ACORD&gt;&lt;/iac:claimRegistration&gt;&lt;/soapenv:Body&gt;&lt;/soapenv:Envelope&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">https://${SERVER}/FNOLServicesMediationModuleWeb/sca/SafeliteClaimRegistrationWSExport</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="RandDate1" enabled="true">
              <stringProp name="maximumValue">30</stringProp>
              <stringProp name="minimumValue">1</stringProp>
              <stringProp name="outputFormat"></stringProp>
              <boolProp name="perThread">false</boolProp>
              <stringProp name="randomSeed"></stringProp>
              <stringProp name="variableName">RandDate1</stringProp>
            </RandomVariableConfig>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="DateOfLoss" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">	import java.text.SimpleDateFormat;
		
	SimpleDateFormat sdf = new SimpleDateFormat(&quot;MM/dd/yyyy&quot;);
	SimpleDateFormat sdf1 = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);
	Calendar DOfL = Calendar.getInstance(); 
	Calendar C_peffdate = Calendar.getInstance();
	Calendar C_pexpdate = Calendar.getInstance();
	Calendar DOfL = Calendar.getInstance();
	Calendar C_currenttime= Calendar.getInstance();
	
	Date peffdate = new Date(vars.get(&quot;POL_EFF_DT&quot;));
	Date pexpdate = new Date(vars.get(&quot;POL_EXP_DT&quot;));
	
	C_currenttime.setTime(new Date());
	C_peffdate.setTime(peffdate);
	C_pexpdate.setTime(pexpdate);
	DOfL.setTime(peffdate);
	DOfL.add(Calendar.DATE, Integer.parseInt(vars.get(&quot;RandDate1&quot;)));
		
	vars.put(&quot;DateOfLoss&quot;,&quot;0&quot;);
	
	while (Integer.parseInt(vars.get(&quot;DateOfLoss&quot;)) &lt;= 0)
		{
			if((DOfL.after(C_peffdate) &amp;&amp; DOfL.before(C_pexpdate) &amp;&amp; (DOfL.before(C_currenttime) || DOfL.before(C_currenttime))))
			{
				DOfL.add(Calendar.DATE, Integer.parseInt(vars.get(&quot;RandDate1&quot;)));
				vars.put(&quot;DateOfLoss&quot;,sdf1.format(DOfL.getTime()).toString());
				
			}
			log.info(&quot;While Loop The valuse of of Date of Loss :&quot;+vars.get(&quot;DateOfLoss&quot;));	
		}
</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="REQUEST_UNIQUE_ID" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">import java.util.Random;

chars = &quot;0123456789&quot;;
int string_set = 3;
int string_length = 4;
randomstring =&quot;&quot;;

for (int j=0; j&lt;string_set; j++)
{
	//randomstring += chars.substring(randomInt,randomInt+1);
	for (int i=0; i&lt;string_length; i++) 
    	{
        Random randomGenerator = new Random();
        int randomInt = randomGenerator.nextInt(chars.length());
        randomstring += chars.substring(randomInt,randomInt+1);               
    	}
    	if (j &lt; 2)
    	{
    	randomstring += &quot;-&quot;;
   	}
}
vars.put(&quot;REQUEST_UNIQUE_ID&quot;,randomstring);
log.info(&quot;REQUEST_UNIQUE_ID RESULT - &quot;+vars.get(&quot;REQUEST_UNIQUE_ID&quot;));
</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RANDOMREPNUM" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">import java.util.Random;

chars = &quot;0123456789&quot;;
int string_length = 4;
randomstring =&quot;&quot;;

//randomstring += chars.substring(randomInt,randomInt+1);
for (int i=0; i&lt;string_length; i++) 
{
	Random randomGenerator = new Random();
     int randomInt = randomGenerator.nextInt(chars.length());
     randomstring += chars.substring(randomInt,randomInt+1);               
}

vars.put(&quot;RANDOMREPNUM&quot;,randomstring);

log.info(&quot;RANDOMREPNUM RESULT - &quot;+vars.get(&quot;RANDOMREPNUM&quot;));
</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">SOAPAction</stringProp>
                  <stringProp name="Header.value">https://${SERVER}/FNOLServicesMediationModuleWeb/sca/SafeliteClaimRegistrationWSExport</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">text/xml; charset=utf-8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="XML_ResponseStatus" enabled="true">
              <stringProp name="TestPlan.comments">&quot;XML_ResponseStatus&quot;|&quot;LB=MsgStatusCd&gt;&quot;|&quot;RB=&lt;/_xml:MsgStatusCd&gt;&quot;|&quot;Search=Body&quot;|&quot;IgnoreRedirections=Yes&quot;|</stringProp>
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">XML_ResponseStatus</stringProp>
              <stringProp name="RegexExtractor.regex">MsgStatusCd&gt;(.*?)&lt;/_xml:MsgStatusCd&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">null</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="XML_ResponseStatusDesc" enabled="true">
              <stringProp name="TestPlan.comments">&quot;XML_ResponseStatusDesc&quot;|&quot;LB=&lt;_xml:MsgStatusDesc&gt;&quot;|&quot;RB=&lt;/_xml:MsgStatusDesc&gt;&quot;|&quot;Search=Body&quot;|&quot;IgnoreRedirections=Yes&quot;|&quot;Notfound=warning&quot;|</stringProp>
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">XML_ResponseStatusDesc</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;_xml:MsgStatusDesc&gt;(.*?)&lt;/_xml:MsgStatusDesc&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">null</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="responsecode" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">code</stringProp>
              <stringProp name="RegexExtractor.refname">responsecode</stringProp>
              <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">0</stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="TextCheck" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">TextCheck</stringProp>
              <stringProp name="RegexExtractor.regex">MsgStatusCd&gt;(.*?)&lt;/_xml:MsgStatusCd&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">null</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">int rescode=Integer.parseInt(vars.get(&quot;responsecode&quot;));
String Stat=vars.get(&quot;TextCheck&quot;);
// if we get a successful http response from web service
if (rescode &gt;= 200 &amp;&amp; rescode &lt; 400)
{	//error if no results found
	if (!Stat.equals(&quot;Success&quot;))
	{	
		// Login page displayed successfully.
		prev.setSuccessful(true);
	}
	else 
	{
		//Launch page is not display successfully
		log.error(&quot;TP30_010_FNOL_Safelite_Claim_Reg failed for Request XML:&quot;+prev.getSamplerData()+&quot;####&quot;+&quot;HTTP Response Code:&quot;+vars.get(&quot;responsecode&quot;)+&quot;####&quot;+&quot;Response From Server : &quot;+prev.getResponseDataAsString());
		prev.setSuccessful(false);
		ctx.setRestartNextLoop(true);
	}
}

else
{
	//response is not 200
	log.error(&quot;TP30_010_FNOL_Safelite_Claim_Reg failed for Request XML:&quot;+prev.getSamplerData()+&quot;####&quot;+&quot;HTTP Response Code:&quot;+vars.get(&quot;responsecode&quot;)+&quot;####&quot;+&quot;Response From Server : &quot;+prev.getResponseDataAsString());
	prev.setSuccessful(false);
	ctx.setRestartNextLoop(true);
}


</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Defined Parameters" enabled="true">
          <boolProp name="UserParameters.per_iteration">false</boolProp>
          <collectionProp name="UserParameters.names"/>
          <collectionProp name="UserParameters.thread_values">
            <collectionProp name="1"/>
          </collectionProp>
        </UserParameters>
        <hashTree/>
        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Pacing" enabled="true">
          <stringProp name="ConstantTimer.delay">1</stringProp>
          <stringProp name="TestPlan.comments">   Converting seconds to milliseconds - 60s x 1000</stringProp>
        </ConstantTimer>
        <hashTree/>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">true</boolProp>
        </CookieManager>
        <hashTree/>
        <CacheManager guiclass="CacheManagerGui" testclass="CacheManager" testname="HTTP Cache Manager" enabled="true">
          <boolProp name="clearEachIteration">true</boolProp>
          <boolProp name="useExpires">false</boolProp>
        </CacheManager>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="filename">TP30.csv</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <stringProp name="shareMode.all">shareMode</stringProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="filename">SERVER.csv</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <stringProp name="shareMode.all">shareMode</stringProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
            </value>
          </objProp>
          <stringProp name="filename">SummReport_CNG_TP30_FNOL_Safelite_Claim_Reg.csv</stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
