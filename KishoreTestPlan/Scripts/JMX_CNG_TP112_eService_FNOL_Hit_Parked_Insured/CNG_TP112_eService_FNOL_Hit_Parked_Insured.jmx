<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="2.8" jmeter="2.13 r1665067">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="CNG_TP112_eService_FNOL_Hit_Parked_Insured" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1455260938000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <longProp name="ThreadGroup.end_time">0</longProp>
      </ThreadGroup>
      <hashTree>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="RUN" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </LoopController>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="-Action" enabled="true">
            <stringProp name="TestPlan.comments">This section contains the Action part of Loadrunner</stringProp>
          </GenericController>
          <hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="TP112_010_eService_Create_Claim" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="EService_Create_Claim" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:ifn=&quot;http://pm.lmig.com/cl/FNOLMediationLibrary/iFNOLServiceExport&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:domain=&quot;http://pm.lmig.com/cl/fnol/model/domain&quot;&gt;   &lt;soap:Header/&gt;   &lt;soap:Body&gt;      &lt;ifn:createClaim&gt;         &lt;CreateClaimRequest&gt;            &lt;RequestId xsi:nil=&quot;true&quot;/&gt;            &lt;Requestor&gt;eService&lt;/Requestor&gt;            &lt;UserID xsi:nil=&quot;true&quot;/&gt;            &lt;Claim&gt;               &lt;HowReported&gt;eService&lt;/HowReported&gt;               &lt;Policy&gt;                  &lt;PolicyNumber&gt;${POLICY_NUMBER}&lt;/PolicyNumber&gt;                  &lt;PolicyType&gt;auto_per&lt;/PolicyType&gt;               &lt;/Policy&gt;               &lt;LossDate&gt;${DateOfLoss}T09:45:00Z&lt;/LossDate&gt;               &lt;LossType&gt;auto&lt;/LossType&gt;               &lt;ReportedDate&gt;${DateOfLoss}&lt;/ReportedDate&gt;               &lt;ReportedType&gt;self&lt;/ReportedType&gt;               &lt;ClaimSource/&gt;            &lt;/Claim&gt;         &lt;/CreateClaimRequest&gt;      &lt;/ifn:createClaim&gt;   &lt;/soap:Body&gt;&lt;/soap:Envelope&gt;</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">https://${ENVIRONMENT}-pmclaims-esb-fnol-internal.libertyec.com/FNOLMediationModuleWeb/sca/FNOLServiceExport</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">content-type</stringProp>
                      <stringProp name="Header.value">text/xml+soap</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Claim_Number" enabled="true">
                  <stringProp name="TestPlan.comments">&quot;Claim_Number&quot;|&quot;LB=&lt;ClaimNumber&gt;&quot;|&quot;RB=&lt;/ClaimNumber&gt;&quot;|&quot;Search=Body&quot;|&quot;IgnoreRedirections=Yes&quot;|&quot;NotFound=WARNING&quot;|</stringProp>
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">Claim_Number</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;ClaimNumber&gt;(.*?)&lt;/ClaimNumber&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">null</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Policy_ID" enabled="true">
                  <stringProp name="TestPlan.comments">&quot;Policy_ID&quot;|&quot;LB=&lt;Policy&gt;&lt;Id&gt;&quot;|&quot;RB=&lt;/Id&gt;&quot;|&quot;Search=Body&quot;|&quot;IgnoreRedirections=Yes&quot;|&quot;NotFound=WARNING&quot;|</stringProp>
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">Policy_ID</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;Policy&gt;&lt;Id&gt;(.*?)&lt;/Id&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">null</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Status" enabled="true">
                  <stringProp name="TestPlan.comments">&quot;Status&quot;|&quot;LB=&lt;Status&gt;&quot;|&quot;RB=&lt;/Status&gt;&quot;|&quot;Search=Body&quot;|&quot;IgnoreRedirections=Yes&quot;|&quot;NotFound=WARNING&quot;|</stringProp>
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">Status</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;Status&gt;(.*?)&lt;/Status&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">null</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Claim_ID" enabled="true">
                  <stringProp name="TestPlan.comments">&quot;Claim_ID&quot;|&quot;LB=&lt;Claim&gt;&lt;Id&gt;&quot;|&quot;RB=&lt;/Id&gt;&quot;|&quot;Search=Body&quot;|&quot;IgnoreRedirections=Yes&quot;|&quot;NotFound=WARNING&quot;|</stringProp>
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">Claim_ID</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;Claim&gt;&lt;Id&gt;(.*?)&lt;/Id&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">null</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Error_Code" enabled="true">
                  <stringProp name="TestPlan.comments">&quot;Error_Code&quot;|&quot;LB=&lt;Code&gt;&quot;|&quot;RB=&lt;/Code&gt;&quot;|&quot;Search=Body&quot;|&quot;IgnoreRedirections=Yes&quot;|&quot;NotFound=WARNING&quot;|</stringProp>
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">Error_Code</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;Code&gt;(.*?)&lt;/Code&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">null</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Error_Description" enabled="true">
                  <stringProp name="TestPlan.comments">&quot;Error_Description&quot;|&quot;LB=&lt;Description&gt;&quot;|&quot;RB=&lt;/Description&gt;&quot;|&quot;Search=Body&quot;|&quot;IgnoreRedirections=Yes&quot;|&quot;NotFound=WARNING&quot;|</stringProp>
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">Error_Description</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;Description&gt;(.*?)&lt;/Description&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">null</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor-responsecode" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">code</stringProp>
                  <stringProp name="RegexExtractor.refname">responsecode</stringProp>
                  <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">0</stringProp>
                  <stringProp name="RegexExtractor.match_number"></stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor-SuccessMessage" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">SuccessMessage</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;ResponseStatus&gt;(.*?)&lt;/ResponseStatus&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">0</stringProp>
                  <stringProp name="RegexExtractor.match_number"></stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor-CheckList" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">CheckList</stringProp>
                  <stringProp name="RegexExtractor.regex">ResponseStatus&gt;&lt;(.*?)&gt;&lt;Account</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">0</stringProp>
                  <stringProp name="RegexExtractor.match_number"></stringProp>
                </RegexExtractor>
                <hashTree/>
                <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">
int rescode=Integer.parseInt(vars.get(&quot;responsecode&quot;));

String Stat=vars.get(&quot;Status&quot;);

// if we get a sucessful http response from web service
if (rescode == 200)
{	//error if no results found
	if (Stat.equals(&quot;success&quot;))
	{
		// HTTP 200 response and web service returned success reponse
		log.info(&quot;Results found as expected for Claim Number:&quot;+ vars.get(&quot;Claim_Number&quot;));
		prev.setSuccessful(true);
	}
	else 
	{
		// HTTP 200 response and web service returned a non success reponse
		log.error(&quot;HTTP Reponse 200 but unsucessful response. Status Description = &quot;+vars.get(&quot;Error_Description&quot;)+&quot;, for Policy Number&quot;+ vars.get(&quot;Policy_ID&quot;)+&quot; with DOL&quot;);
		prev.setSuccessful(false);
	}
	
}
else
{
	// web service did not return http 200
	log.error(&quot;HTTP Reponse not 200 OK&quot;);
	prev.setSuccessful(false);
	//setOnErrorStartNextLoop(true);
	ctx.setRestartNextLoop(true);
}



</stringProp>
                </BeanShellPostProcessor>
                <hashTree/>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ThinkTime - 10" enabled="true">
                <stringProp name="TestPlan.comments">This transaction will wait for 10 seconds</stringProp>
              </GenericController>
              <hashTree>
                <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="ThinkTime" enabled="true">
                  <stringProp name="ConstantTimer.delay">10000</stringProp>
                  <stringProp name="TestPlan.comments">   Converting seconds to milliseconds - 10s x 1000</stringProp>
                </ConstantTimer>
                <hashTree/>
              </hashTree>
              <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable-Date1" enabled="true">
                <stringProp name="maximumValue">30</stringProp>
                <stringProp name="minimumValue">1</stringProp>
                <stringProp name="outputFormat"></stringProp>
                <boolProp name="perThread">false</boolProp>
                <stringProp name="randomSeed"></stringProp>
                <stringProp name="variableName">RandDate1</stringProp>
              </RandomVariableConfig>
              <hashTree/>
              <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable-Month" enabled="false">
                <stringProp name="variableName">RandMonth</stringProp>
                <stringProp name="outputFormat"></stringProp>
                <stringProp name="minimumValue">1</stringProp>
                <stringProp name="maximumValue">12</stringProp>
                <stringProp name="randomSeed"></stringProp>
                <boolProp name="perThread">false</boolProp>
              </RandomVariableConfig>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">	import java.text.*;
	//import java.lang.*;
	//log.info(vars.get(&quot;POL_EFF_DATE&quot;));
	
	SimpleDateFormat sdf = new SimpleDateFormat(&quot;MM/dd/yyyy&quot;);
	SimpleDateFormat sdf1 = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);
	Calendar DOfL = Calendar.getInstance(); 
	Calendar C_peffdate = Calendar.getInstance();
	Calendar C_pexpdate = Calendar.getInstance();
	Calendar DOfL = Calendar.getInstance();
	Calendar C_currenttime= Calendar.getInstance();
	Date peffdate = new Date(vars.get(&quot;POL_EFF_DATE&quot;));
	Date pexpdate = new Date(vars.get(&quot;POL_EXP_DATE&quot;));
	//log.info(&quot;Policy Effective date:&quot;+sdf.format(peffdate).toString()+&quot; End Date: &quot;+sdf.format(pexpdate).toString()); 
	C_currenttime.setTime(new Date());
	C_peffdate.setTime(peffdate);
	C_pexpdate.setTime(pexpdate);
	DOfL.setTime(peffdate);
	//log.info(vars.get(&quot;RandDate&quot;));
	//${__Random(1,100,RandDate)}
	DOfL.add(Calendar.DATE, Integer.parseInt(vars.get(&quot;RandDate1&quot;)));
	//log.info(&quot;random variable value:&quot;+vars.get(&quot;RandDate1&quot;));
	//DOfL.add(Calendar.DATE, Integer.parseInt(vars.get(&quot;RandDate&quot;)));
	//DOfL.add(Calendar.MONTH, Integer.parseInt(vars.get(&quot;RandMonth&quot;)));
	/*if (DOfL.after(C_peffdate) &amp;&amp; DOfL.before(C_pexpdate) &amp;&amp; (DOfL.before(C_currenttime) || DOfL.before(C_currenttime) ) )
	{
		vars.put(&quot;DateOfLoss&quot;,sdf.format(DOfL.getTime()).toString());
		log.info(&quot;The valuse of of Date of Loss :&quot;+vars.get(&quot;DateOfLoss&quot;));
	}
	else
	{*/
	vars.put(&quot;DateOfLoss&quot;,&quot;0&quot;);
	//log.info(&quot;Before Loop&quot;+vars.get(&quot;DateOfLoss&quot;));
		while (Integer.parseInt(vars.get(&quot;DateOfLoss&quot;)) &lt;= 0)
		{
			if((DOfL.after(C_peffdate) &amp;&amp; DOfL.before(C_pexpdate) &amp;&amp; (DOfL.before(C_currenttime) || DOfL.before(C_currenttime))))
			{
				DOfL.add(Calendar.DATE, Integer.parseInt(vars.get(&quot;RandDate1&quot;)));
				//log.info(&quot;random variable value in IF condition:&quot;+Integer.parseInt(vars.get(&quot;RandDate1&quot;)));
			vars.put(&quot;DateOfLoss&quot;,sdf1.format(DOfL.getTime()).toString());
			//log.info(&quot;The Date of loss value isxxx &quot;+vars.get(&quot;DateOfLoss&quot;));
			}
			//log.info(&quot;The Date of loss value isxxx &quot;+vars.get(&quot;DateOfLoss&quot;));
			
	//DOfL.add(Calendar.MONTH, Integer.parseInt(vars.get(&quot;RandMonth&quot;)));
	//log.info(&quot;While Loop The valuse of of Date of Loss :&quot;+vars.get(&quot;DateOfLoss&quot;));	
		}
		</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="TP112_020_eService_Get_Vehicles_By_Policy_Id" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="EService_Get_Vehicles_By_Policy_Id" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:ifn=&quot;http://pm.lmig.com/cl/FNOLMediationLibrary/iFNOLServiceExport&quot;&gt;   &lt;soap:Header/&gt;   &lt;soap:Body&gt;      &lt;ifn:getVehiclesByPolicyId&gt;         &lt;GetVehiclesByPolicyIdRequest&gt;            &lt;RequestId&gt;?&lt;/RequestId&gt;            &lt;Requestor&gt;eService&lt;/Requestor&gt;            &lt;UserID&gt;?&lt;/UserID&gt;            &lt;PolicyId&gt;${Policy_ID}&lt;/PolicyId&gt;         &lt;/GetVehiclesByPolicyIdRequest&gt;      &lt;/ifn:getVehiclesByPolicyId&gt;   &lt;/soap:Body&gt;&lt;/soap:Envelope&gt;</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">https://${ENVIRONMENT}-pmclaims-esb-fnol-internal.libertyec.com/FNOLMediationModuleWeb/sca/FNOLServiceExport</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name"></stringProp>
                      <stringProp name="Header.value"></stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Status" enabled="true">
                  <stringProp name="TestPlan.comments">&quot;Status&quot;|&quot;LB=&lt;Status&gt;&quot;|&quot;RB=&lt;/Status&gt;&quot;|&quot;Search=Body&quot;|&quot;IgnoreRedirections=Yes&quot;|&quot;NotFound=WARNING&quot;|</stringProp>
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">Status</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;Status&gt;(.*?)&lt;/Status&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">null</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Vehicle_ID" enabled="true">
                  <stringProp name="TestPlan.comments">&quot;Vehicle_ID&quot;|&quot;LB=&lt;Vehicle&gt;&lt;Id&gt;&quot;|&quot;RB=&lt;/Id&gt;&quot;|&quot;Search=Body&quot;|&quot;IgnoreRedirections=Yes&quot;|&quot;NotFound=WARNING&quot;|</stringProp>
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">Vehicle_ID</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;Vehicle&gt;&lt;Id&gt;(.*?)&lt;/Id&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">null</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Error_Code" enabled="true">
                  <stringProp name="TestPlan.comments">&quot;Error_Code&quot;|&quot;LB=&lt;Code&gt;&quot;|&quot;RB=&lt;/Code&gt;&quot;|&quot;Search=Body&quot;|&quot;IgnoreRedirections=Yes&quot;|&quot;NotFound=WARNING&quot;|</stringProp>
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">Error_Code</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;Code&gt;(.*?)&lt;/Code&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">null</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Error_Description" enabled="true">
                  <stringProp name="TestPlan.comments">&quot;Error_Description&quot;|&quot;LB=&lt;Description&gt;&quot;|&quot;RB=&lt;/Description&gt;&quot;|&quot;Search=Body&quot;|&quot;IgnoreRedirections=Yes&quot;|&quot;NotFound=WARNING&quot;|</stringProp>
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">Error_Description</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;Description&gt;(.*?)&lt;/Description&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">null</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor-responsecode" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">code</stringProp>
                  <stringProp name="RegexExtractor.refname">responsecode</stringProp>
                  <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">0</stringProp>
                  <stringProp name="RegexExtractor.match_number"></stringProp>
                </RegexExtractor>
                <hashTree/>
                <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">log.info(&quot;The Date of loss value is &quot;+vars.get(&quot;DateOfLoss&quot;));
int rescode=Integer.parseInt(vars.get(&quot;responsecode&quot;));

String Stat=vars.get(&quot;Status&quot;);

// if we get a sucessful http response from web service
if (rescode == 200)
{	//error if no results found
	if (Stat.equals(&quot;success&quot;))
	{
		// HTTP 200 response and web service returned success reponse
		log.info(&quot;Results found as expected for Claim Number:&quot;+ vars.get(&quot;Claim_Number&quot;));
		prev.setSuccessful(true);
	}
	else 
	{
		// HTTP 200 response and web service returned a non success reponse
		log.error(&quot;HTTP Reponse 200 but unsucessful response. Status Description = &quot;+vars.get(&quot;Error_Description&quot;)+&quot;, for Policy Number&quot;+ vars.get(&quot;Policy_ID&quot;)+&quot; with DOL&quot;);
		prev.setSuccessful(false);
	}
	
}
else
{
	// web service did not return http 200
	log.error(&quot;HTTP Reponse not 200 OK&quot;);
	prev.setSuccessful(false);
	//setOnErrorStartNextLoop(true);
	//ctx.setRestartNextLoop(true);
}



</stringProp>
                </BeanShellPostProcessor>
                <hashTree/>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ThinkTime - 10" enabled="true">
                <stringProp name="TestPlan.comments">This transaction will wait for 10 seconds</stringProp>
              </GenericController>
              <hashTree>
                <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="ThinkTime" enabled="true">
                  <stringProp name="ConstantTimer.delay">10000</stringProp>
                  <stringProp name="TestPlan.comments">   Converting seconds to milliseconds - 10s x 1000</stringProp>
                </ConstantTimer>
                <hashTree/>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
                <stringProp name="IfController.condition">${responsecode} == 0</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Module Controller" enabled="true">
                  <collectionProp name="ModuleController.node_path">
                    <stringProp name="-1227702913">WorkBench</stringProp>
                    <stringProp name="764597751">Test Plan</stringProp>
                    <stringProp name="-1146421865">CNG_TP112_eService_FNOL_Hit_Parked_Insured</stringProp>
                    <stringProp name="81515">RUN</stringProp>
                    <stringProp name="-1056123709">-Action</stringProp>
                    <stringProp name="1191940651">TP112_250_eService_Cancel_Claim</stringProp>
                  </collectionProp>
                </ModuleController>
                <hashTree/>
              </hashTree>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="TP112_030_eService_Create_Incident" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="EService_Create_Incident" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:iin=&quot;http://pm.lmig.com/cl/IncidentMediationLibrary/iIncidentServiceImport&quot; xmlns:ser=&quot;http://pm.lmig.com/cl/incident/model/service&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:do=&quot;http://pm.lmig.com/cl/incident/model/domain&quot;&gt;   &lt;soap:Header/&gt;   &lt;soap:Body&gt;      &lt;iin:createIncident&gt;         &lt;ser:CreateIncidentRequest&gt;            &lt;RequestId&gt;?&lt;/RequestId&gt;            &lt;Requestor&gt;eService&lt;/Requestor&gt;            &lt;UserID&gt;?&lt;/UserID&gt;            &lt;Incident xsi:type=&quot;do:VehicleIncident&quot;&gt;               &lt;RecordOnlyInd&gt;false&lt;/RecordOnlyInd&gt;               &lt;Vehicle&gt;                  &lt;Id&gt;${Vehicle_ID}&lt;/Id&gt;               &lt;/Vehicle&gt;               &lt;UnknownMileageInd&gt;false&lt;/UnknownMileageInd&gt;               &lt;OdomRead&gt;${RANDOM_ODOMETER}&lt;/OdomRead&gt;               &lt;LossPartyType&gt;insured&lt;/LossPartyType&gt;               &lt;VehicleInsdRelation&gt;listed&lt;/VehicleInsdRelation&gt;            &lt;/Incident&gt;            &lt;ClaimNumber&gt;${Claim_Number}&lt;/ClaimNumber&gt;         &lt;/ser:CreateIncidentRequest&gt;      &lt;/iin:createIncident&gt;   &lt;/soap:Body&gt;&lt;/soap:Envelope&gt;</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">https://${ENVIRONMENT}-pmclaims-esb-incident-internal.libertyec.com/IncidentMediationModuleWeb/sca/IncidentServiceExport</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Status" enabled="true">
                  <stringProp name="TestPlan.comments">&quot;Status&quot;|&quot;LB=&lt;status&gt;&quot;|&quot;RB=&lt;/status&gt;&quot;|&quot;Search=Body&quot;|&quot;IgnoreRedirections=Yes&quot;|&quot;NotFound=WARNING&quot;|</stringProp>
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">Status</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;status&gt;(.*?)&lt;/status&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">null</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Incident_ID" enabled="true">
                  <stringProp name="TestPlan.comments">&quot;Incident_ID&quot;|&quot;LB=&lt;Incident xsi:type=\&quot;do:VehicleIncident\&quot;&gt;&lt;Id&gt;&quot;|&quot;RB=&lt;/Id&gt;&quot;|&quot;Search=Body&quot;|&quot;IgnoreRedirections=Yes&quot;|&quot;NotFound=WARNING&quot;|</stringProp>
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">Incident_ID</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;Incident xsi:type=\&quot;do:VehicleIncident\&quot;&gt;&lt;Id&gt;(.*?)&lt;/Id&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">null</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Error_Code" enabled="true">
                  <stringProp name="TestPlan.comments">&quot;Error_Code&quot;|&quot;LB=&lt;Code&gt;&quot;|&quot;RB=&lt;/Code&gt;&quot;|&quot;Search=Body&quot;|&quot;IgnoreRedirections=Yes&quot;|&quot;NotFound=WARNING&quot;|</stringProp>
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">Error_Code</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;Code&gt;(.*?)&lt;/Code&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">null</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Error_Description" enabled="true">
                  <stringProp name="TestPlan.comments">&quot;Error_Description&quot;|&quot;LB=&lt;Description&gt;&quot;|&quot;RB=&lt;/Description&gt;&quot;|&quot;Search=Body&quot;|&quot;IgnoreRedirections=Yes&quot;|&quot;NotFound=WARNING&quot;|</stringProp>
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">Error_Description</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;Description&gt;(.*?)&lt;/Description&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">null</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor-responsecode" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">code</stringProp>
                  <stringProp name="RegexExtractor.refname">responsecode</stringProp>
                  <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">0</stringProp>
                  <stringProp name="RegexExtractor.match_number"></stringProp>
                </RegexExtractor>
                <hashTree/>
                <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">
int rescode=Integer.parseInt(vars.get(&quot;responsecode&quot;));

String Stat=vars.get(&quot;Status&quot;);

// if we get a sucessful http response from web service
if (rescode == 200)
{	//error if no results found
	if (Stat.equals(&quot;success&quot;))
	{
		// HTTP 200 response and web service returned success reponse
		log.info(&quot;Results found as expected for Claim Number:&quot;+ vars.get(&quot;Claim_Number&quot;));
		prev.setSuccessful(true);
	}
	else 
	{
		// HTTP 200 response and web service returned a non success reponse
		log.error(&quot;HTTP Reponse 200 but unsucessful response. Status Description = &quot;+vars.get(&quot;Error_Description&quot;)+&quot;, for Policy Number&quot;+ vars.get(&quot;Policy_ID&quot;)+&quot; with DOL&quot;);
		prev.setSuccessful(false);
	}
	
}
else
{
	// web service did not return http 200
	log.error(&quot;HTTP Reponse not 200 OK&quot;);
	prev.setSuccessful(false);
	//setOnErrorStartNextLoop(true);
	//ctx.setRestartNextLoop(true);
}



</stringProp>
                </BeanShellPostProcessor>
                <hashTree/>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ThinkTime - 10" enabled="true">
                <stringProp name="TestPlan.comments">This transaction will wait for 10 seconds</stringProp>
              </GenericController>
              <hashTree>
                <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="ThinkTime" enabled="true">
                  <stringProp name="ConstantTimer.delay">10000</stringProp>
                  <stringProp name="TestPlan.comments">   Converting seconds to milliseconds - 10s x 1000</stringProp>
                </ConstantTimer>
                <hashTree/>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
                <stringProp name="IfController.condition">${responsecode} == 0</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Module Controller" enabled="true">
                  <collectionProp name="ModuleController.node_path">
                    <stringProp name="-1227702913">WorkBench</stringProp>
                    <stringProp name="764597751">Test Plan</stringProp>
                    <stringProp name="-1146421865">CNG_TP112_eService_FNOL_Hit_Parked_Insured</stringProp>
                    <stringProp name="81515">RUN</stringProp>
                    <stringProp name="-1056123709">-Action</stringProp>
                    <stringProp name="1191940651">TP112_250_eService_Cancel_Claim</stringProp>
                  </collectionProp>
                </ModuleController>
                <hashTree/>
              </hashTree>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="TP112_040_eService_Get_Contacts_By_Claim_And_Roles" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="EService_Get_Contacts_By_Claim_And_Roles" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:icon=&quot;http://pm.lmig.com/cl/ContactMediationLibrary/iContactServiceImport&quot;&gt;   &lt;soap:Header/&gt;   &lt;soap:Body&gt;      &lt;icon:getContactsByClaimAndRoles&gt;         &lt;GetContactsByClaimAndRolesRequest&gt;            &lt;RequestId&gt;?&lt;/RequestId&gt;            &lt;Requestor&gt;eService&lt;/Requestor&gt;            &lt;UserID&gt;?&lt;/UserID&gt;            &lt;ClaimNumber&gt;${Claim_Number}&lt;/ClaimNumber&gt;            &lt;RoleName&gt;insured&lt;/RoleName&gt;            &lt;RoleName&gt;secondinsured&lt;/RoleName&gt;         &lt;/GetContactsByClaimAndRolesRequest&gt;      &lt;/icon:getContactsByClaimAndRoles&gt;   &lt;/soap:Body&gt;&lt;/soap:Envelope&gt;</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">https://${ENVIRONMENT}-pmclaims-esb-contact-internal.libertyec.com/ContactMediationModuleWeb/sca/ContactServiceExport</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Drivers_License_State" enabled="true">
                  <stringProp name="TestPlan.comments">&quot;Drivers_License_State&quot;|&quot;LB=&lt;DriversLicenseState&gt;&quot;|&quot;RB=&lt;/DriversLicenseState&gt;&quot;|&quot;Search=Body&quot;|&quot;IgnoreRedirections=Yes&quot;|&quot;NotFound=WARNING&quot;|</stringProp>
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">Drivers_License_State</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;DriversLicenseState&gt;(.*?)&lt;/DriversLicenseState&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">null</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Phone_Number" enabled="true">
                  <stringProp name="TestPlan.comments">&quot;Phone_Number&quot;|&quot;LB=&lt;PhoneNumber&gt;&quot;|&quot;RB=&lt;/PhoneNumber&gt;&quot;|&quot;Search=Body&quot;|&quot;IgnoreRedirections=Yes&quot;|&quot;NotFound=WARNING&quot;|</stringProp>
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">Phone_Number</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;PhoneNumber&gt;(.*?)&lt;/PhoneNumber&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">null</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="First_Name" enabled="true">
                  <stringProp name="TestPlan.comments">&quot;First_Name&quot;|&quot;LB=&lt;FirstName&gt;&quot;|&quot;RB=&lt;/FirstName&gt;&quot;|&quot;Search=Body&quot;|&quot;IgnoreRedirections=Yes&quot;|&quot;NotFound=WARNING&quot;|</stringProp>
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">First_Name</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;FirstName&gt;(.*?)&lt;/FirstName&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">null</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Last_Name" enabled="true">
                  <stringProp name="TestPlan.comments">&quot;Last_Name&quot;|&quot;LB=&lt;LastName&gt;&quot;|&quot;RB=&lt;/LastName&gt;&quot;|&quot;Search=Body&quot;|&quot;IgnoreRedirections=Yes&quot;|&quot;NotFound=WARNING&quot;|</stringProp>
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">Last_Name</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;LastName&gt;(.*?)&lt;/LastName&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">null</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Status" enabled="true">
                  <stringProp name="TestPlan.comments">&quot;Status&quot;|&quot;LB=&lt;Status&gt;&quot;|&quot;RB=&lt;/Status&gt;&quot;|&quot;Search=Body&quot;|&quot;IgnoreRedirections=Yes&quot;|&quot;NotFound=WARNING&quot;|</stringProp>
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">Status</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;Status&gt;(.*?)&lt;/Status&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">null</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Contact_ID" enabled="true">
                  <stringProp name="TestPlan.comments">&quot;Contact_ID&quot;|&quot;LB=&lt;Contact xsi:type=\&quot;do:Person\&quot;&gt;&lt;Id&gt;&quot;|&quot;RB=&lt;/Id&gt;&quot;|&quot;Search=Body&quot;|&quot;IgnoreRedirections=Yes&quot;|&quot;NotFound=WARNING&quot;|</stringProp>
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">Contact_ID</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;Contact xsi:type=\&quot;do:Person\&quot;&gt;&lt;Id&gt;(.*?)&lt;/Id&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">null</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Error_Code" enabled="true">
                  <stringProp name="TestPlan.comments">&quot;Error_Code&quot;|&quot;LB=&lt;Code&gt;&quot;|&quot;RB=&lt;/Code&gt;&quot;|&quot;Search=Body&quot;|&quot;IgnoreRedirections=Yes&quot;|&quot;NotFound=WARNING&quot;|</stringProp>
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">Error_Code</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;Code&gt;(.*?)&lt;/Code&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">null</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Error_Description" enabled="true">
                  <stringProp name="TestPlan.comments">&quot;Error_Description&quot;|&quot;LB=&lt;Description&gt;&quot;|&quot;RB=&lt;/Description&gt;&quot;|&quot;Search=Body&quot;|&quot;IgnoreRedirections=Yes&quot;|&quot;NotFound=WARNING&quot;|</stringProp>
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">Error_Description</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;Description&gt;(.*?)&lt;/Description&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">null</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor-responsecode" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">code</stringProp>
                  <stringProp name="RegexExtractor.refname">responsecode</stringProp>
                  <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">0</stringProp>
                  <stringProp name="RegexExtractor.match_number"></stringProp>
                </RegexExtractor>
                <hashTree/>
                <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">
int rescode=Integer.parseInt(vars.get(&quot;responsecode&quot;));

String Stat=vars.get(&quot;Status&quot;);

// if we get a sucessful http response from web service
if (rescode == 200)
{	//error if no results found
	if (Stat.equals(&quot;success&quot;))
	{
		// HTTP 200 response and web service returned success reponse
		log.info(&quot;Results found as expected for Claim Number:&quot;+ vars.get(&quot;Claim_Number&quot;));
		prev.setSuccessful(true);
	}
	else 
	{
		// HTTP 200 response and web service returned a non success reponse
		log.error(&quot;HTTP Reponse 200 but unsucessful response. Status Description = &quot;+vars.get(&quot;Error_Description&quot;)+&quot;, for Policy Number&quot;+ vars.get(&quot;Policy_ID&quot;)+&quot; with DOL&quot;);
		prev.setSuccessful(false);
	}
	
}
else
{
	// web service did not return http 200
	log.error(&quot;HTTP Reponse not 200 OK&quot;);
	prev.setSuccessful(false);
	//setOnErrorStartNextLoop(true);
	//ctx.setRestartNextLoop(true);
}



</stringProp>
                </BeanShellPostProcessor>
                <hashTree/>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ThinkTime - 10" enabled="true">
                <stringProp name="TestPlan.comments">This transaction will wait for 10 seconds</stringProp>
              </GenericController>
              <hashTree>
                <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="ThinkTime" enabled="true">
                  <stringProp name="ConstantTimer.delay">10000</stringProp>
                  <stringProp name="TestPlan.comments">   Converting seconds to milliseconds - 10s x 1000</stringProp>
                </ConstantTimer>
                <hashTree/>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
                <stringProp name="IfController.condition">${responsecode} == 0</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Module Controller" enabled="true">
                  <collectionProp name="ModuleController.node_path">
                    <stringProp name="-1227702913">WorkBench</stringProp>
                    <stringProp name="764597751">Test Plan</stringProp>
                    <stringProp name="-1146421865">CNG_TP112_eService_FNOL_Hit_Parked_Insured</stringProp>
                    <stringProp name="81515">RUN</stringProp>
                    <stringProp name="-1056123709">-Action</stringProp>
                    <stringProp name="1191940651">TP112_250_eService_Cancel_Claim</stringProp>
                  </collectionProp>
                </ModuleController>
                <hashTree/>
              </hashTree>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="TP112_050_eService_Create_Role_Reporter" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="EService_Create_Role_Reporter" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:icon=&quot;http://pm.lmig.com/cl/ContactMediationLibrary/iContactServiceImport&quot;&gt;   &lt;soap:Header/&gt;   &lt;soap:Body&gt;      &lt;icon:createRole&gt;         &lt;CreateRoleRequest&gt;            &lt;RequestId&gt;?&lt;/RequestId&gt;            &lt;Requestor&gt;eService&lt;/Requestor&gt;            &lt;UserID&gt;?&lt;/UserID&gt;            &lt;ContactId&gt;${Contact_ID}&lt;/ContactId&gt;            &lt;Role&gt;               &lt;RoleName&gt;reporter&lt;/RoleName&gt;               &lt;Active&gt;true&lt;/Active&gt;            &lt;/Role&gt;         &lt;/CreateRoleRequest&gt;      &lt;/icon:createRole&gt;   &lt;/soap:Body&gt;&lt;/soap:Envelope&gt;</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">https://${ENVIRONMENT}-pmclaims-esb-contact-internal.libertyec.com/ContactMediationModuleWeb/sca/ContactServiceExport</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Status" enabled="true">
                  <stringProp name="TestPlan.comments">&quot;Status&quot;|&quot;LB=&lt;Status&gt;&quot;|&quot;RB=&lt;/Status&gt;&quot;|&quot;Search=Body&quot;|&quot;IgnoreRedirections=Yes&quot;|&quot;NotFound=WARNING&quot;|</stringProp>
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">Status</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;Status&gt;(.*?)&lt;/Status&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">null</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Error_Code" enabled="true">
                  <stringProp name="TestPlan.comments">&quot;Error_Code&quot;|&quot;LB=&lt;Code&gt;&quot;|&quot;RB=&lt;/Code&gt;&quot;|&quot;Search=Body&quot;|&quot;IgnoreRedirections=Yes&quot;|&quot;NotFound=WARNING&quot;|</stringProp>
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">Error_Code</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;Code&gt;(.*?)&lt;/Code&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">null</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Error_Description" enabled="true">
                  <stringProp name="TestPlan.comments">&quot;Error_Description&quot;|&quot;LB=&lt;Description&gt;&quot;|&quot;RB=&lt;/Description&gt;&quot;|&quot;Search=ALL&quot;|&quot;IgnoreRedirections=Yes&quot;|&quot;NotFound=WARNING&quot;|</stringProp>
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">Error_Description</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;Description&gt;(.*?)&lt;/Description&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">null</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor-responsecode" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">code</stringProp>
                  <stringProp name="RegexExtractor.refname">responsecode</stringProp>
                  <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">0</stringProp>
                  <stringProp name="RegexExtractor.match_number"></stringProp>
                </RegexExtractor>
                <hashTree/>
                <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">
int rescode=Integer.parseInt(vars.get(&quot;responsecode&quot;));

String Stat=vars.get(&quot;Status&quot;);

// if we get a sucessful http response from web service
if (rescode == 200)
{	//error if no results found
	if (Stat.equals(&quot;success&quot;))
	{
		// HTTP 200 response and web service returned success reponse
		log.info(&quot;Results found as expected for Claim Number:&quot;+ vars.get(&quot;Claim_Number&quot;));
		prev.setSuccessful(true);
	}
	else 
	{
		// HTTP 200 response and web service returned a non success reponse
		log.error(&quot;HTTP Reponse 200 but unsucessful response. Status Description = &quot;+vars.get(&quot;Error_Description&quot;)+&quot;, for Policy Number&quot;+ vars.get(&quot;Policy_ID&quot;)+&quot; with DOL&quot;);
		prev.setSuccessful(false);
	}
	
}
else
{
	// web service did not return http 200
	log.error(&quot;HTTP Reponse not 200 OK&quot;);
	prev.setSuccessful(false);
	//setOnErrorStartNextLoop(true);
	//ctx.setRestartNextLoop(true);
}



</stringProp>
                </BeanShellPostProcessor>
                <hashTree/>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ThinkTime - 10" enabled="true">
                <stringProp name="TestPlan.comments">This transaction will wait for 10 seconds</stringProp>
              </GenericController>
              <hashTree>
                <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="ThinkTime" enabled="true">
                  <stringProp name="ConstantTimer.delay">10000</stringProp>
                  <stringProp name="TestPlan.comments">   Converting seconds to milliseconds - 10s x 1000</stringProp>
                </ConstantTimer>
                <hashTree/>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
                <stringProp name="IfController.condition">${responsecode} == 0</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Module Controller" enabled="true">
                  <collectionProp name="ModuleController.node_path">
                    <stringProp name="-1227702913">WorkBench</stringProp>
                    <stringProp name="764597751">Test Plan</stringProp>
                    <stringProp name="-1146421865">CNG_TP112_eService_FNOL_Hit_Parked_Insured</stringProp>
                    <stringProp name="81515">RUN</stringProp>
                    <stringProp name="-1056123709">-Action</stringProp>
                    <stringProp name="1191940651">TP112_250_eService_Cancel_Claim</stringProp>
                  </collectionProp>
                </ModuleController>
                <hashTree/>
              </hashTree>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="TP112_060_eService_Create_Role_Incident_Owner" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="EService_Create_Role_Incident_Owner" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:icon=&quot;http://pm.lmig.com/cl/ContactMediationLibrary/iContactServiceImport&quot;&gt;   &lt;soap:Header/&gt;   &lt;soap:Body&gt;      &lt;icon:createRole&gt;         &lt;CreateRoleRequest&gt;            &lt;RequestId&gt;?&lt;/RequestId&gt;            &lt;Requestor&gt;eService&lt;/Requestor&gt;            &lt;UserID&gt;?&lt;/UserID&gt;            &lt;ContactId&gt;${Contact_ID}&lt;/ContactId&gt;            &lt;Role&gt;               &lt;IncidentId&gt;${Incident_ID}&lt;/IncidentId&gt;               &lt;RoleName&gt;incidentowner&lt;/RoleName&gt;               &lt;Active&gt;true&lt;/Active&gt;            &lt;/Role&gt;         &lt;/CreateRoleRequest&gt;      &lt;/icon:createRole&gt;   &lt;/soap:Body&gt;&lt;/soap:Envelope&gt;</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">https://${ENVIRONMENT}-pmclaims-esb-contact-internal.libertyec.com/ContactMediationModuleWeb/sca/ContactServiceExport</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Status" enabled="true">
                  <stringProp name="TestPlan.comments">&quot;Status&quot;|&quot;LB=&lt;Status&gt;&quot;|&quot;RB=&lt;/Status&gt;&quot;|&quot;Search=Body&quot;|&quot;IgnoreRedirections=Yes&quot;|&quot;NotFound=WARNING&quot;|</stringProp>
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">Status</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;Status&gt;(.*?)&lt;/Status&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">null</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Error_Code" enabled="true">
                  <stringProp name="TestPlan.comments">&quot;Error_Code&quot;|&quot;LB=&lt;Code&gt;&quot;|&quot;RB=&lt;/Code&gt;&quot;|&quot;Search=Body&quot;|&quot;IgnoreRedirections=Yes&quot;|&quot;NotFound=WARNING&quot;|</stringProp>
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">Error_Code</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;Code&gt;(.*?)&lt;/Code&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">null</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Error_Description" enabled="true">
                  <stringProp name="TestPlan.comments">&quot;Error_Description&quot;|&quot;LB=&lt;Description&gt;&quot;|&quot;RB=&lt;/Description&gt;&quot;|&quot;Search=Body&quot;|&quot;IgnoreRedirections=Yes&quot;|&quot;NotFound=WARNING&quot;|</stringProp>
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">Error_Description</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;Description&gt;(.*?)&lt;/Description&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">null</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor-responsecode" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">code</stringProp>
                  <stringProp name="RegexExtractor.refname">responsecode</stringProp>
                  <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">0</stringProp>
                  <stringProp name="RegexExtractor.match_number"></stringProp>
                </RegexExtractor>
                <hashTree/>
                <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">
int rescode=Integer.parseInt(vars.get(&quot;responsecode&quot;));

String Stat=vars.get(&quot;Status&quot;);

// if we get a sucessful http response from web service
if (rescode == 200)
{	//error if no results found
	if (Stat.equals(&quot;success&quot;))
	{
		// HTTP 200 response and web service returned success reponse
		log.info(&quot;Results found as expected for Claim Number:&quot;+ vars.get(&quot;Claim_Number&quot;));
		prev.setSuccessful(true);
	}
	else 
	{
		// HTTP 200 response and web service returned a non success reponse
		log.error(&quot;HTTP Reponse 200 but unsucessful response. Status Description = &quot;+vars.get(&quot;Error_Description&quot;)+&quot;, for Policy Number&quot;+ vars.get(&quot;Policy_ID&quot;)+&quot; with DOL&quot;);
		prev.setSuccessful(false);
	}
	
}
else
{
	// web service did not return http 200
	log.error(&quot;HTTP Reponse not 200 OK&quot;);
	prev.setSuccessful(false);
	//setOnErrorStartNextLoop(true);
	//ctx.setRestartNextLoop(true);
}



</stringProp>
                </BeanShellPostProcessor>
                <hashTree/>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ThinkTime - 10" enabled="true">
                <stringProp name="TestPlan.comments">This transaction will wait for 10 seconds</stringProp>
              </GenericController>
              <hashTree>
                <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="ThinkTime" enabled="true">
                  <stringProp name="ConstantTimer.delay">10000</stringProp>
                  <stringProp name="TestPlan.comments">   Converting seconds to milliseconds - 10s x 1000</stringProp>
                </ConstantTimer>
                <hashTree/>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
                <stringProp name="IfController.condition">${responsecode} == 0</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Module Controller" enabled="true">
                  <collectionProp name="ModuleController.node_path">
                    <stringProp name="-1227702913">WorkBench</stringProp>
                    <stringProp name="764597751">Test Plan</stringProp>
                    <stringProp name="-1146421865">CNG_TP112_eService_FNOL_Hit_Parked_Insured</stringProp>
                    <stringProp name="81515">RUN</stringProp>
                    <stringProp name="-1056123709">-Action</stringProp>
                    <stringProp name="1191940651">TP112_250_eService_Cancel_Claim</stringProp>
                  </collectionProp>
                </ModuleController>
                <hashTree/>
              </hashTree>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="TP112_070_eService_Update_Contact" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="EService_Update_Contact" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:icon=&quot;http://pm.lmig.com/cl/ContactMediationLibrary/iContactServiceImport&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:do=&quot;http://pm.lmig.com/cl/contact/model/service/operation/updatecontact&quot;&gt;   &lt;soap:Header/&gt;   &lt;soap:Body&gt;      &lt;icon:updateContact&gt;         &lt;UpdateContactRequest&gt;            &lt;RequestId&gt;?&lt;/RequestId&gt;            &lt;Requestor&gt;eService&lt;/Requestor&gt;            &lt;UserID&gt;?&lt;/UserID&gt;            &lt;Contact xsi:type=&quot;do:Person&quot;&gt;               &lt;Id&gt;${Contact_ID}&lt;/Id&gt;               &lt;ReceiveEmailInd&gt;false&lt;/ReceiveEmailInd&gt;               &lt;PrimaryContactId&gt;${Contact_ID}&lt;/PrimaryContactId&gt;               &lt;PreferredInd&gt;false&lt;/PreferredInd&gt;               &lt;FirstName&gt;${First_Name}&lt;/FirstName&gt;               &lt;LastName&gt;${Last_Name}&lt;/LastName&gt;               &lt;DriversLicenseState&gt;${Drivers_License_State}&lt;/DriversLicenseState&gt;            &lt;/Contact&gt;         &lt;/UpdateContactRequest&gt;      &lt;/icon:updateContact&gt;   &lt;/soap:Body&gt;&lt;/soap:Envelope&gt;</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">https://${ENVIRONMENT}-pmclaims-esb-contact-internal.libertyec.com/ContactMediationModuleWeb/sca/ContactServiceExport</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Status" enabled="true">
                  <stringProp name="TestPlan.comments">&quot;Status&quot;|&quot;LB=&lt;Status&gt;&quot;|&quot;RB=&lt;/Status&gt;&quot;|&quot;Search=Body&quot;|&quot;IgnoreRedirections=Yes&quot;|&quot;NotFound=WARNING&quot;|</stringProp>
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">Status</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;Status&gt;(.*?)&lt;/Status&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">null</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Error_Code" enabled="true">
                  <stringProp name="TestPlan.comments">&quot;Error_Code&quot;|&quot;LB=&lt;Code&gt;&quot;|&quot;RB=&lt;/Code&gt;&quot;|&quot;Search=Body&quot;|&quot;IgnoreRedirections=Yes&quot;|&quot;NotFound=WARNING&quot;|</stringProp>
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">Error_Code</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;Code&gt;(.*?)&lt;/Code&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">null</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Error_Description" enabled="true">
                  <stringProp name="TestPlan.comments">&quot;Error_Description&quot;|&quot;LB=&lt;Description&gt;&quot;|&quot;RB=&lt;/Description&gt;&quot;|&quot;Search=Body&quot;|&quot;IgnoreRedirections=Yes&quot;|&quot;NotFound=WARNING&quot;|</stringProp>
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">Error_Description</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;Description&gt;(.*?)&lt;/Description&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">null</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor-responsecode" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">code</stringProp>
                  <stringProp name="RegexExtractor.refname">responsecode</stringProp>
                  <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">0</stringProp>
                  <stringProp name="RegexExtractor.match_number"></stringProp>
                </RegexExtractor>
                <hashTree/>
                <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">
int rescode=Integer.parseInt(vars.get(&quot;responsecode&quot;));

String Stat=vars.get(&quot;Status&quot;);

// if we get a sucessful http response from web service
if (rescode == 200)
{	//error if no results found
	if (Stat.equals(&quot;success&quot;))
	{
		// HTTP 200 response and web service returned success reponse
		log.info(&quot;Results found as expected for Claim Number:&quot;+ vars.get(&quot;Claim_Number&quot;));
		prev.setSuccessful(true);
	}
	else 
	{
		// HTTP 200 response and web service returned a non success reponse
		log.error(&quot;HTTP Reponse 200 but unsucessful response. Status Description = &quot;+vars.get(&quot;Error_Description&quot;)+&quot;, for Policy Number&quot;+ vars.get(&quot;Policy_ID&quot;)+&quot; with DOL&quot;);
		prev.setSuccessful(false);
	}
	
}
else
{
	// web service did not return http 200
	log.error(&quot;HTTP Reponse not 200 OK&quot;);
	prev.setSuccessful(false);
	//setOnErrorStartNextLoop(true);
	//ctx.setRestartNextLoop(true);
}



</stringProp>
                </BeanShellPostProcessor>
                <hashTree/>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ThinkTime - 10" enabled="true">
                <stringProp name="TestPlan.comments">This transaction will wait for 10 seconds</stringProp>
              </GenericController>
              <hashTree>
                <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="ThinkTime" enabled="true">
                  <stringProp name="ConstantTimer.delay">10000</stringProp>
                  <stringProp name="TestPlan.comments">   Converting seconds to milliseconds - 10s x 1000</stringProp>
                </ConstantTimer>
                <hashTree/>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
                <stringProp name="IfController.condition">${responsecode} == 0</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Module Controller" enabled="true">
                  <collectionProp name="ModuleController.node_path">
                    <stringProp name="-1227702913">WorkBench</stringProp>
                    <stringProp name="764597751">Test Plan</stringProp>
                    <stringProp name="-1146421865">CNG_TP112_eService_FNOL_Hit_Parked_Insured</stringProp>
                    <stringProp name="81515">RUN</stringProp>
                    <stringProp name="-1056123709">-Action</stringProp>
                    <stringProp name="1191940651">TP112_250_eService_Cancel_Claim</stringProp>
                  </collectionProp>
                </ModuleController>
                <hashTree/>
              </hashTree>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="TP112_080_eService_Get_Phone_Type" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="EService_Get_Phone_Type" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:ity=&quot;http://pm.lmig.com/cl/TypelistServiceMediationLibrary/iTypelistServiceExport&quot;&gt;   &lt;soap:Header/&gt;   &lt;soap:Body&gt;      &lt;ity:getTypelistByNameAndFilter&gt;         &lt;GetTypelistByNameAndFilterRequest&gt;            &lt;RequestId&gt;?&lt;/RequestId&gt;            &lt;Requestor&gt;eService&lt;/Requestor&gt;            &lt;UserID&gt;?&lt;/UserID&gt;            &lt;TypelistName&gt;PrimaryPhoneType&lt;/TypelistName&gt;         &lt;/GetTypelistByNameAndFilterRequest&gt;      &lt;/ity:getTypelistByNameAndFilter&gt;   &lt;/soap:Body&gt;&lt;/soap:Envelope&gt;</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">https://${ENVIRONMENT}-pmclaims-esb-typelist-internal.libertyec.com/TypelistServiceMediationModuleWeb/sca/TypelistServiceExport</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Status" enabled="true">
                  <stringProp name="TestPlan.comments">&quot;Status&quot;|&quot;LB=&lt;Status&gt;&quot;|&quot;RB=&lt;/Status&gt;&quot;|&quot;Search=Body&quot;|&quot;IgnoreRedirections=Yes&quot;|&quot;NotFound=WARNING&quot;|</stringProp>
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">Status</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;Status&gt;(.*?)&lt;/Status&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">null</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Error_Code" enabled="true">
                  <stringProp name="TestPlan.comments">&quot;Error_Code&quot;|&quot;LB=&lt;Code&gt;&quot;|&quot;RB=&lt;/Code&gt;&quot;|&quot;Search=Body&quot;|&quot;IgnoreRedirections=Yes&quot;|&quot;NotFound=WARNING&quot;|</stringProp>
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">Error_Code</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;Code&gt;(.*?)&lt;/Code&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">null</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Error_Description" enabled="true">
                  <stringProp name="TestPlan.comments">&quot;Error_Description&quot;|&quot;LB=&lt;Description&gt;&quot;|&quot;RB=&lt;/Description&gt;&quot;|&quot;Search=Body&quot;|&quot;IgnoreRedirections=Yes&quot;|&quot;NotFound=WARNING&quot;|</stringProp>
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">Error_Description</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;Description&gt;(.*?)&lt;/Description&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">null</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor-responsecode" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">code</stringProp>
                  <stringProp name="RegexExtractor.refname">responsecode</stringProp>
                  <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">0</stringProp>
                  <stringProp name="RegexExtractor.match_number"></stringProp>
                </RegexExtractor>
                <hashTree/>
                <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">
int rescode=Integer.parseInt(vars.get(&quot;responsecode&quot;));

String Stat=vars.get(&quot;Status&quot;);

// if we get a sucessful http response from web service
if (rescode == 200)
{	//error if no results found
	if (Stat.equals(&quot;success&quot;))
	{
		// HTTP 200 response and web service returned success reponse
		log.info(&quot;Results found as expected for Claim Number:&quot;+ vars.get(&quot;Claim_Number&quot;));
		prev.setSuccessful(true);
	}
	else 
	{
		// HTTP 200 response and web service returned a non success reponse
		log.error(&quot;HTTP Reponse 200 but unsucessful response. Status Description = &quot;+vars.get(&quot;Error_Description&quot;)+&quot;, for Policy Number&quot;+ vars.get(&quot;Policy_ID&quot;)+&quot; with DOL&quot;);
		prev.setSuccessful(false);
	}
	
}
else
{
	// web service did not return http 200
	log.error(&quot;HTTP Reponse not 200 OK&quot;);
	prev.setSuccessful(false);
	//setOnErrorStartNextLoop(true);
	//ctx.setRestartNextLoop(true);
}



</stringProp>
                </BeanShellPostProcessor>
                <hashTree/>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ThinkTime - 10" enabled="true">
                <stringProp name="TestPlan.comments">This transaction will wait for 10 seconds</stringProp>
              </GenericController>
              <hashTree>
                <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="ThinkTime" enabled="true">
                  <stringProp name="ConstantTimer.delay">10000</stringProp>
                  <stringProp name="TestPlan.comments">   Converting seconds to milliseconds - 10s x 1000</stringProp>
                </ConstantTimer>
                <hashTree/>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
                <stringProp name="IfController.condition">${responsecode} == 0</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Module Controller" enabled="true">
                  <collectionProp name="ModuleController.node_path">
                    <stringProp name="-1227702913">WorkBench</stringProp>
                    <stringProp name="764597751">Test Plan</stringProp>
                    <stringProp name="-1146421865">CNG_TP112_eService_FNOL_Hit_Parked_Insured</stringProp>
                    <stringProp name="81515">RUN</stringProp>
                    <stringProp name="-1056123709">-Action</stringProp>
                    <stringProp name="1191940651">TP112_250_eService_Cancel_Claim</stringProp>
                  </collectionProp>
                </ModuleController>
                <hashTree/>
              </hashTree>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="TP112_090_eService_Create_Reporter_Phone" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="EService_Create_Reporter_Phone" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:icon=&quot;http://pm.lmig.com/cl/ContactMediationLibrary/iContactServiceImport&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:do=&quot;http://pm.lmig.com/cl/contact/model/domain&quot;&gt;   &lt;soap:Header/&gt;   &lt;soap:Body&gt;      &lt;icon:createContactMethod&gt;         &lt;CreateContactMethodRequest&gt;            &lt;RequestId&gt;?&lt;/RequestId&gt;            &lt;Requestor&gt;eService&lt;/Requestor&gt;            &lt;UserID&gt;?&lt;/UserID&gt;            &lt;ContactId&gt;${Contact_ID}&lt;/ContactId&gt;            &lt;ContactMethod xsi:type=&quot;do:Phone&quot; type=&quot;home&quot;&gt;               &lt;PrimaryInd&gt;true&lt;/PrimaryInd&gt;               &lt;PhoneNumber&gt;${Phone_Number}&lt;/PhoneNumber&gt;            &lt;/ContactMethod&gt;         &lt;/CreateContactMethodRequest&gt;      &lt;/icon:createContactMethod&gt;   &lt;/soap:Body&gt;&lt;/soap:Envelope&gt;</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">https://${ENVIRONMENT}-pmclaims-esb-contact-internal.libertyec.com/ContactMediationModuleWeb/sca/ContactServiceExport</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Status" enabled="true">
                  <stringProp name="TestPlan.comments">&quot;Status&quot;|&quot;LB=&lt;Status&gt;&quot;|&quot;RB=&lt;/Status&gt;&quot;|&quot;Search=Body&quot;|&quot;IgnoreRedirections=Yes&quot;|&quot;NotFound=WARNING&quot;|</stringProp>
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">Status</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;Status&gt;(.*?)&lt;/Status&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">null</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Error_Code" enabled="true">
                  <stringProp name="TestPlan.comments">&quot;Error_Code&quot;|&quot;LB=&lt;Code&gt;&quot;|&quot;RB=&lt;/Code&gt;&quot;|&quot;Search=Body&quot;|&quot;IgnoreRedirections=Yes&quot;|&quot;NotFound=WARNING&quot;|</stringProp>
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">Error_Code</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;Code&gt;(.*?)&lt;/Code&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">null</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Error_Description" enabled="true">
                  <stringProp name="TestPlan.comments">&quot;Error_Description&quot;|&quot;LB=&lt;Description&gt;&quot;|&quot;RB=&lt;/Description&gt;&quot;|&quot;Search=Body&quot;|&quot;IgnoreRedirections=Yes&quot;|&quot;NotFound=WARNING&quot;|</stringProp>
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">Error_Description</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;Description&gt;(.*?)&lt;/Description&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">null</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor-responsecode" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">code</stringProp>
                  <stringProp name="RegexExtractor.refname">responsecode</stringProp>
                  <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">0</stringProp>
                  <stringProp name="RegexExtractor.match_number"></stringProp>
                </RegexExtractor>
                <hashTree/>
                <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">
int rescode=Integer.parseInt(vars.get(&quot;responsecode&quot;));

String Stat=vars.get(&quot;Status&quot;);

// if we get a sucessful http response from web service
if (rescode == 200)
{	//error if no results found
	if (Stat.equals(&quot;success&quot;))
	{
		// HTTP 200 response and web service returned success reponse
		log.info(&quot;Results found as expected for Claim Number:&quot;+ vars.get(&quot;Claim_Number&quot;));
		prev.setSuccessful(true);
	}
	else 
	{
		// HTTP 200 response and web service returned a non success reponse
		log.error(&quot;HTTP Reponse 200 but unsucessful response. Status Description = &quot;+vars.get(&quot;Error_Description&quot;)+&quot;, for Policy Number&quot;+ vars.get(&quot;Policy_ID&quot;)+&quot; with DOL&quot;);
		prev.setSuccessful(false);
	}
	
}
else
{
	// web service did not return http 200
	log.error(&quot;HTTP Reponse not 200 OK&quot;);
	prev.setSuccessful(false);
	//setOnErrorStartNextLoop(true);
	//ctx.setRestartNextLoop(true);
}



</stringProp>
                </BeanShellPostProcessor>
                <hashTree/>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ThinkTime - 10" enabled="true">
                <stringProp name="TestPlan.comments">This transaction will wait for 10 seconds</stringProp>
              </GenericController>
              <hashTree>
                <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="ThinkTime" enabled="true">
                  <stringProp name="ConstantTimer.delay">10000</stringProp>
                  <stringProp name="TestPlan.comments">   Converting seconds to milliseconds - 10s x 1000</stringProp>
                </ConstantTimer>
                <hashTree/>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
                <stringProp name="IfController.condition">${responsecode} == 0</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Module Controller" enabled="true">
                  <collectionProp name="ModuleController.node_path">
                    <stringProp name="-1227702913">WorkBench</stringProp>
                    <stringProp name="764597751">Test Plan</stringProp>
                    <stringProp name="-1146421865">CNG_TP112_eService_FNOL_Hit_Parked_Insured</stringProp>
                    <stringProp name="81515">RUN</stringProp>
                    <stringProp name="-1056123709">-Action</stringProp>
                    <stringProp name="1191940651">TP112_250_eService_Cancel_Claim</stringProp>
                  </collectionProp>
                </ModuleController>
                <hashTree/>
              </hashTree>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="TP112_100_eService_Create_Reporter_Email" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="EService_Create_Reporter_Email" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:icon=&quot;http://pm.lmig.com/cl/ContactMediationLibrary/iContactServiceImport&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:do=&quot;http://pm.lmig.com/cl/contact/model/domain&quot;&gt;   &lt;soap:Header/&gt;   &lt;soap:Body&gt;      &lt;icon:createContactMethod&gt;         &lt;CreateContactMethodRequest&gt;            &lt;RequestId&gt;?&lt;/RequestId&gt;            &lt;Requestor&gt;eService&lt;/Requestor&gt;            &lt;UserID&gt;?&lt;/UserID&gt;            &lt;ContactId&gt;${Contact_ID}&lt;/ContactId&gt;            &lt;ContactMethod xsi:type=&quot;do:Email&quot;&gt;               &lt;PrimaryInd&gt;true&lt;/PrimaryInd&gt;               &lt;EmailAddress&gt;nobody@libertymutual.com&lt;/EmailAddress&gt;            &lt;/ContactMethod&gt;         &lt;/CreateContactMethodRequest&gt;      &lt;/icon:createContactMethod&gt;   &lt;/soap:Body&gt;&lt;/soap:Envelope&gt;</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">https://${ENVIRONMENT}-pmclaims-esb-contact-internal.libertyec.com/ContactMediationModuleWeb/sca/ContactServiceExport</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Status" enabled="true">
                  <stringProp name="TestPlan.comments">&quot;Status&quot;|&quot;LB=&lt;Status&gt;&quot;|&quot;RB=&lt;/Status&gt;&quot;|&quot;Search=Body&quot;|&quot;IgnoreRedirections=Yes&quot;|&quot;NotFound=WARNING&quot;|</stringProp>
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">Status</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;Status&gt;(.*?)&lt;/Status&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">null</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Error_Code" enabled="true">
                  <stringProp name="TestPlan.comments">&quot;Error_Code&quot;|&quot;LB=&lt;Code&gt;&quot;|&quot;RB=&lt;/Code&gt;&quot;|&quot;Search=Body&quot;|&quot;IgnoreRedirections=Yes&quot;|&quot;NotFound=WARNING&quot;|</stringProp>
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">Error_Code</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;Code&gt;(.*?)&lt;/Code&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">null</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Error_Description" enabled="true">
                  <stringProp name="TestPlan.comments">&quot;Error_Description&quot;|&quot;LB=&lt;Description&gt;&quot;|&quot;RB=&lt;/Description&gt;&quot;|&quot;Search=Body&quot;|&quot;IgnoreRedirections=Yes&quot;|&quot;NotFound=WARNING&quot;|</stringProp>
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">Error_Description</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;Description&gt;(.*?)&lt;/Description&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">null</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor-responsecode" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">code</stringProp>
                  <stringProp name="RegexExtractor.refname">responsecode</stringProp>
                  <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">0</stringProp>
                  <stringProp name="RegexExtractor.match_number"></stringProp>
                </RegexExtractor>
                <hashTree/>
                <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">
int rescode=Integer.parseInt(vars.get(&quot;responsecode&quot;));

String Stat=vars.get(&quot;Status&quot;);

// if we get a sucessful http response from web service
if (rescode == 200)
{	//error if no results found
	if (Stat.equals(&quot;success&quot;))
	{
		// HTTP 200 response and web service returned success reponse
		log.info(&quot;Results found as expected for Claim Number:&quot;+ vars.get(&quot;Claim_Number&quot;));
		prev.setSuccessful(true);
	}
	else 
	{
		// HTTP 200 response and web service returned a non success reponse
		log.error(&quot;HTTP Reponse 200 but unsucessful response. Status Description = &quot;+vars.get(&quot;Error_Description&quot;)+&quot;, for Policy Number&quot;+ vars.get(&quot;Policy_ID&quot;)+&quot; with DOL&quot;);
		prev.setSuccessful(false);
	}
	
}
else
{
	// web service did not return http 200
	log.error(&quot;HTTP Reponse not 200 OK&quot;);
	prev.setSuccessful(false);
	//setOnErrorStartNextLoop(true);
	//ctx.setRestartNextLoop(true);
}



</stringProp>
                </BeanShellPostProcessor>
                <hashTree/>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ThinkTime - 10" enabled="true">
                <stringProp name="TestPlan.comments">This transaction will wait for 10 seconds</stringProp>
              </GenericController>
              <hashTree>
                <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="ThinkTime" enabled="true">
                  <stringProp name="ConstantTimer.delay">10000</stringProp>
                  <stringProp name="TestPlan.comments">   Converting seconds to milliseconds - 10s x 1000</stringProp>
                </ConstantTimer>
                <hashTree/>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
                <stringProp name="IfController.condition">${responsecode} == 0</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Module Controller" enabled="true">
                  <collectionProp name="ModuleController.node_path">
                    <stringProp name="-1227702913">WorkBench</stringProp>
                    <stringProp name="764597751">Test Plan</stringProp>
                    <stringProp name="-1146421865">CNG_TP112_eService_FNOL_Hit_Parked_Insured</stringProp>
                    <stringProp name="81515">RUN</stringProp>
                    <stringProp name="-1056123709">-Action</stringProp>
                    <stringProp name="1191940651">TP112_250_eService_Cancel_Claim</stringProp>
                  </collectionProp>
                </ModuleController>
                <hashTree/>
              </hashTree>
            </hashTree>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="TP112_110_eService_Update_Claim" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="EService_Update_Claim" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:ifn=&quot;http://pm.lmig.com/cl/FNOLMediationLibrary/iFNOLServiceExport&quot;&gt;   &lt;soap:Header/&gt;   &lt;soap:Body&gt;      &lt;ifn:updateClaim&gt;         &lt;UpdateClaimRequest&gt;            &lt;RequestId&gt;?&lt;/RequestId&gt;            &lt;Requestor&gt;eService&lt;/Requestor&gt;            &lt;UserID&gt;?&lt;/UserID&gt;            &lt;Claim&gt;               &lt;Id&gt;${Claim_ID}&lt;/Id&gt;               &lt;ClaimNumber&gt;${Claim_Number}&lt;/ClaimNumber&gt;               &lt;Fault&gt;0&lt;/Fault&gt;               &lt;FaultRating&gt;1&lt;/FaultRating&gt;               &lt;HowReported&gt;eService&lt;/HowReported&gt;               &lt;LossDate&gt;${DateOfLoss}T09:45:00Z&lt;/LossDate&gt;               &lt;LossCategory&gt;multiVehicleAccidentAuto&lt;/LossCategory&gt;               &lt;LossCause&gt;insdparkedHit&lt;/LossCause&gt;               &lt;LossDescription&gt;TP112 eService Hit Parked Insured Claim Registration&lt;/LossDescription&gt;               &lt;LossLocation type=&quot;&quot;&gt;                  &lt;Id&gt;&lt;/Id&gt;                  &lt;AddressLine1&gt;34 Boylston Street&lt;/AddressLine1&gt;                  &lt;City&gt;Boston&lt;/City&gt;                  &lt;State&gt;MA&lt;/State&gt;                  &lt;PostalCode&gt;01515&lt;/PostalCode&gt;                  &lt;Country&gt;US&lt;/Country&gt;               &lt;/LossLocation&gt;               &lt;LossType&gt;auto&lt;/LossType&gt;               &lt;ReportedDate&gt;${DateOfLoss}&lt;/ReportedDate&gt;               &lt;ClaimSource/&gt;            &lt;/Claim&gt;         &lt;/UpdateClaimRequest&gt;      &lt;/ifn:updateClaim&gt;   &lt;/soap:Body&gt;&lt;/soap:Envelope&gt;</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">https://${ENVIRONMENT}-pmclaims-esb-fnol-internal.libertyec.com/FNOLMediationModuleWeb/sca/FNOLServiceExport</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">log.info(&quot;The Date of loss value is &quot;+vars.get(&quot;DateOfLoss&quot;));</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Status" enabled="true">
                  <stringProp name="TestPlan.comments">&quot;Status&quot;|&quot;LB=&lt;Status&gt;&quot;|&quot;RB=&lt;/Status&gt;&quot;|&quot;Search=Body&quot;|&quot;IgnoreRedirections=Yes&quot;|&quot;NotFound=WARNING&quot;|</stringProp>
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">Status</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;Status&gt;(.*?)&lt;/Status&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">null</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Error_Code" enabled="true">
                  <stringProp name="TestPlan.comments">&quot;Error_Code&quot;|&quot;LB=&lt;Code&gt;&quot;|&quot;RB=&lt;/Code&gt;&quot;|&quot;Search=Body&quot;|&quot;IgnoreRedirections=Yes&quot;|&quot;NotFound=WARNING&quot;|</stringProp>
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">Error_Code</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;Code&gt;(.*?)&lt;/Code&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">null</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Error_Description" enabled="true">
                  <stringProp name="TestPlan.comments">&quot;Error_Description&quot;|&quot;LB=&lt;Description&gt;&quot;|&quot;RB=&lt;/Description&gt;&quot;|&quot;Search=Body&quot;|&quot;IgnoreRedirections=Yes&quot;|&quot;NotFound=WARNING&quot;|</stringProp>
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">Error_Description</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;Description&gt;(.*?)&lt;/Description&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">null</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor-responsecode" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">code</stringProp>
                  <stringProp name="RegexExtractor.refname">responsecode</stringProp>
                  <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">0</stringProp>
                  <stringProp name="RegexExtractor.match_number"></stringProp>
                </RegexExtractor>
                <hashTree/>
                <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">
int rescode=Integer.parseInt(vars.get(&quot;responsecode&quot;));

String Stat=vars.get(&quot;Status&quot;);

// if we get a sucessful http response from web service
if (rescode == 200)
{	//error if no results found
	if (Stat.equals(&quot;success&quot;))
	{
		// HTTP 200 response and web service returned success reponse
		log.info(&quot;Results found as expected for Claim Number:&quot;+ vars.get(&quot;Claim_Number&quot;));
		prev.setSuccessful(true);
	}
	else 
	{
		// HTTP 200 response and web service returned a non success reponse
		log.error(&quot;HTTP Reponse 200 but unsucessful response. Status Description = &quot;+vars.get(&quot;Error_Description&quot;)+&quot;, for Policy Number&quot;+ vars.get(&quot;Policy_ID&quot;)+&quot; with DOL&quot;);
		prev.setSuccessful(false);
	}
	
}
else
{
	// web service did not return http 200
	log.error(&quot;HTTP Reponse not 200 OK&quot;);
	prev.setSuccessful(false);
	//setOnErrorStartNextLoop(true);
	//ctx.setRestartNextLoop(true);
}



</stringProp>
                </BeanShellPostProcessor>
                <hashTree/>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ThinkTime - 10" enabled="true">
                <stringProp name="TestPlan.comments">This transaction will wait for 10 seconds</stringProp>
              </GenericController>
              <hashTree>
                <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="ThinkTime" enabled="true">
                  <stringProp name="ConstantTimer.delay">10000</stringProp>
                  <stringProp name="TestPlan.comments">   Converting seconds to milliseconds - 10s x 1000</stringProp>
                </ConstantTimer>
                <hashTree/>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
                <stringProp name="IfController.condition">${responsecode} == 0</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Module Controller" enabled="true">
                  <collectionProp name="ModuleController.node_path">
                    <stringProp name="-1227702913">WorkBench</stringProp>
                    <stringProp name="764597751">Test Plan</stringProp>
                    <stringProp name="-1146421865">CNG_TP112_eService_FNOL_Hit_Parked_Insured</stringProp>
                    <stringProp name="81515">RUN</stringProp>
                    <stringProp name="-1056123709">-Action</stringProp>
                    <stringProp name="1191940651">TP112_250_eService_Cancel_Claim</stringProp>
                  </collectionProp>
                </ModuleController>
                <hashTree/>
              </hashTree>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="TP112_120_eService_Get_LM_Vehicle_Motion_Type" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="EService_Get_LM_Vehicle_Motion_Type" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:ity=&quot;http://pm.lmig.com/cl/TypelistServiceMediationLibrary/iTypelistServiceExport&quot;&gt;   &lt;soap:Header/&gt;   &lt;soap:Body&gt;      &lt;ity:getTypelistByNameAndFilter&gt;         &lt;GetTypelistByNameAndFilterRequest&gt;            &lt;RequestId&gt;?&lt;/RequestId&gt;            &lt;Requestor&gt;eService&lt;/Requestor&gt;            &lt;UserID&gt;?&lt;/UserID&gt;            &lt;TypelistName&gt;LM_VehicleMotionType&lt;/TypelistName&gt;		   	 &lt;Filter&gt;VehiclePosition&lt;/Filter&gt;         &lt;/GetTypelistByNameAndFilterRequest&gt;      &lt;/ity:getTypelistByNameAndFilter&gt;   &lt;/soap:Body&gt;&lt;/soap:Envelope&gt;</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">https://${ENVIRONMENT}-pmclaims-esb-typelist-internal.libertyec.com/TypelistServiceMediationModuleWeb/sca/TypelistServiceExport</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Status" enabled="true">
                  <stringProp name="TestPlan.comments">&quot;Status&quot;|&quot;LB=&lt;Status&gt;&quot;|&quot;RB=&lt;/Status&gt;&quot;|&quot;Search=Body&quot;|&quot;IgnoreRedirections=Yes&quot;|&quot;NotFound=WARNING&quot;|</stringProp>
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">Status</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;Status&gt;(.*?)&lt;/Status&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">null</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Error_Code" enabled="true">
                  <stringProp name="TestPlan.comments">&quot;Error_Code&quot;|&quot;LB=&lt;Code&gt;&quot;|&quot;RB=&lt;/Code&gt;&quot;|&quot;Search=Body&quot;|&quot;IgnoreRedirections=Yes&quot;|&quot;NotFound=WARNING&quot;|</stringProp>
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">Error_Code</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;Code&gt;(.*?)&lt;/Code&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">null</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Error_Description" enabled="true">
                  <stringProp name="TestPlan.comments">&quot;Error_Description&quot;|&quot;LB=&lt;Description&gt;&quot;|&quot;RB=&lt;/Description&gt;&quot;|&quot;Search=Body&quot;|&quot;IgnoreRedirections=Yes&quot;|&quot;NotFound=WARNING&quot;|</stringProp>
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">Error_Description</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;Description&gt;(.*?)&lt;/Description&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">null</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor-responsecode" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">code</stringProp>
                  <stringProp name="RegexExtractor.refname">responsecode</stringProp>
                  <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">0</stringProp>
                  <stringProp name="RegexExtractor.match_number"></stringProp>
                </RegexExtractor>
                <hashTree/>
                <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">
int rescode=Integer.parseInt(vars.get(&quot;responsecode&quot;));

String Stat=vars.get(&quot;Status&quot;);

// if we get a sucessful http response from web service
if (rescode == 200)
{	//error if no results found
	if (Stat.equals(&quot;success&quot;))
	{
		// HTTP 200 response and web service returned success reponse
		log.info(&quot;Results found as expected for Claim Number:&quot;+ vars.get(&quot;Claim_Number&quot;));
		prev.setSuccessful(true);
	}
	else 
	{
		// HTTP 200 response and web service returned a non success reponse
		log.error(&quot;HTTP Reponse 200 but unsucessful response. Status Description = &quot;+vars.get(&quot;Error_Description&quot;)+&quot;, for Policy Number&quot;+ vars.get(&quot;Policy_ID&quot;)+&quot; with DOL&quot;);
		prev.setSuccessful(false);
	}
	
}
else
{
	// web service did not return http 200
	log.error(&quot;HTTP Reponse not 200 OK&quot;);
	prev.setSuccessful(false);
	//setOnErrorStartNextLoop(true);
	//ctx.setRestartNextLoop(true);
}



</stringProp>
                </BeanShellPostProcessor>
                <hashTree/>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ThinkTime - 10" enabled="true">
                <stringProp name="TestPlan.comments">This transaction will wait for 10 seconds</stringProp>
              </GenericController>
              <hashTree>
                <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="ThinkTime" enabled="true">
                  <stringProp name="ConstantTimer.delay">10000</stringProp>
                  <stringProp name="TestPlan.comments">   Converting seconds to milliseconds - 10s x 1000</stringProp>
                </ConstantTimer>
                <hashTree/>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
                <stringProp name="IfController.condition">${responsecode} == 0</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Module Controller" enabled="true">
                  <collectionProp name="ModuleController.node_path">
                    <stringProp name="-1227702913">WorkBench</stringProp>
                    <stringProp name="764597751">Test Plan</stringProp>
                    <stringProp name="-1146421865">CNG_TP112_eService_FNOL_Hit_Parked_Insured</stringProp>
                    <stringProp name="81515">RUN</stringProp>
                    <stringProp name="-1056123709">-Action</stringProp>
                    <stringProp name="1191940651">TP112_250_eService_Cancel_Claim</stringProp>
                  </collectionProp>
                </ModuleController>
                <hashTree/>
              </hashTree>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="TP112_130_eService_Get_Yes_No" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="EService_Get_Yes_No" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:ity=&quot;http://pm.lmig.com/cl/TypelistServiceMediationLibrary/iTypelistServiceExport&quot;&gt;   &lt;soap:Header/&gt;   &lt;soap:Body&gt;      &lt;ity:getTypelistByNameAndFilter&gt;         &lt;GetTypelistByNameAndFilterRequest&gt;            &lt;RequestId&gt;?&lt;/RequestId&gt;            &lt;Requestor&gt;eService&lt;/Requestor&gt;            &lt;UserID&gt;?&lt;/UserID&gt;            &lt;TypelistName&gt;YesNo&lt;/TypelistName&gt;	    	 &lt;Filter&gt;YesNoUnknown&lt;/Filter&gt;         &lt;/GetTypelistByNameAndFilterRequest&gt;      &lt;/ity:getTypelistByNameAndFilter&gt;   &lt;/soap:Body&gt;&lt;/soap:Envelope&gt;</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">https://${ENVIRONMENT}-pmclaims-esb-typelist-internal.libertyec.com/TypelistServiceMediationModuleWeb/sca/TypelistServiceExport</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Status" enabled="true">
                  <stringProp name="TestPlan.comments">&quot;Status&quot;|&quot;LB=&lt;Status&gt;&quot;|&quot;RB=&lt;/Status&gt;&quot;|&quot;Search=Body&quot;|&quot;IgnoreRedirections=Yes&quot;|&quot;NotFound=WARNING&quot;|</stringProp>
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">Status</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;Status&gt;(.*?)&lt;/Status&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">null</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Error_Code" enabled="true">
                  <stringProp name="TestPlan.comments">&quot;Error_Code&quot;|&quot;LB=&lt;Code&gt;&quot;|&quot;RB=&lt;/Code&gt;&quot;|&quot;Search=Body&quot;|&quot;IgnoreRedirections=Yes&quot;|&quot;NotFound=WARNING&quot;|</stringProp>
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">Error_Code</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;Code&gt;(.*?)&lt;/Code&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">null</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Error_Description" enabled="true">
                  <stringProp name="TestPlan.comments">&quot;Error_Description&quot;|&quot;LB=&lt;Description&gt;&quot;|&quot;RB=&lt;/Description&gt;&quot;|&quot;Search=Body&quot;|&quot;IgnoreRedirections=Yes&quot;|&quot;NotFound=WARNING&quot;|</stringProp>
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">Error_Description</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;Description&gt;(.*?)&lt;/Description&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">null</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor-responsecode" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">code</stringProp>
                  <stringProp name="RegexExtractor.refname">responsecode</stringProp>
                  <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">0</stringProp>
                  <stringProp name="RegexExtractor.match_number"></stringProp>
                </RegexExtractor>
                <hashTree/>
                <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">
int rescode=Integer.parseInt(vars.get(&quot;responsecode&quot;));

String Stat=vars.get(&quot;Status&quot;);

// if we get a sucessful http response from web service
if (rescode == 200)
{	//error if no results found
	if (Stat.equals(&quot;success&quot;))
	{
		// HTTP 200 response and web service returned success reponse
		log.info(&quot;Results found as expected for Claim Number:&quot;+ vars.get(&quot;Claim_Number&quot;));
		prev.setSuccessful(true);
	}
	else 
	{
		// HTTP 200 response and web service returned a non success reponse
		log.error(&quot;HTTP Reponse 200 but unsucessful response. Status Description = &quot;+vars.get(&quot;Error_Description&quot;)+&quot;, for Policy Number&quot;+ vars.get(&quot;Policy_ID&quot;)+&quot; with DOL&quot;);
		prev.setSuccessful(false);
	}
	
}
else
{
	// web service did not return http 200
	log.error(&quot;HTTP Reponse not 200 OK&quot;);
	prev.setSuccessful(false);
	//setOnErrorStartNextLoop(true);
	//ctx.setRestartNextLoop(true);
}



</stringProp>
                </BeanShellPostProcessor>
                <hashTree/>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ThinkTime - 10" enabled="true">
                <stringProp name="TestPlan.comments">This transaction will wait for 10 seconds</stringProp>
              </GenericController>
              <hashTree>
                <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="ThinkTime" enabled="true">
                  <stringProp name="ConstantTimer.delay">10000</stringProp>
                  <stringProp name="TestPlan.comments">   Converting seconds to milliseconds - 10s x 1000</stringProp>
                </ConstantTimer>
                <hashTree/>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
                <stringProp name="IfController.condition">${responsecode} == 0</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Module Controller" enabled="true">
                  <collectionProp name="ModuleController.node_path">
                    <stringProp name="-1227702913">WorkBench</stringProp>
                    <stringProp name="764597751">Test Plan</stringProp>
                    <stringProp name="-1146421865">CNG_TP112_eService_FNOL_Hit_Parked_Insured</stringProp>
                    <stringProp name="81515">RUN</stringProp>
                    <stringProp name="-1056123709">-Action</stringProp>
                    <stringProp name="1191940651">TP112_250_eService_Cancel_Claim</stringProp>
                  </collectionProp>
                </ModuleController>
                <hashTree/>
              </hashTree>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="TP112_140_eService_Create_Contact_Damage" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="EService_Create_Contact_Damage" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:icon=&quot;http://pm.lmig.com/cl/ContactMediationLibrary/iContactServiceImport&quot;&gt;   &lt;soap:Header/&gt;   &lt;soap:Body&gt;      &lt;icon:createContactDamage&gt;         &lt;CreateContactDamageRequest&gt;            &lt;RequestId&gt;?&lt;/RequestId&gt;            &lt;Requestor&gt;eService&lt;/Requestor&gt;            &lt;UserID&gt;?&lt;/UserID&gt;            &lt;ContactId&gt;${Contact_ID}&lt;/ContactId&gt;            &lt;ContactDamage&gt;               &lt;InsuredVehicleMotionType&gt;stoppedparked&lt;/InsuredVehicleMotionType&gt;			&lt;LocationContributeType&gt;no&lt;/LocationContributeType&gt;            &lt;/ContactDamage&gt;         &lt;/CreateContactDamageRequest&gt;      &lt;/icon:createContactDamage&gt;   &lt;/soap:Body&gt;&lt;/soap:Envelope&gt;</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">https://${ENVIRONMENT}-pmclaims-esb-contact-internal.libertyec.com/ContactMediationModuleWeb/sca/ContactServiceExport</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Status" enabled="true">
                  <stringProp name="TestPlan.comments">&quot;Status&quot;|&quot;LB=&lt;Status&gt;&quot;|&quot;RB=&lt;/Status&gt;&quot;|&quot;Search=Body&quot;|&quot;IgnoreRedirections=Yes&quot;|&quot;NotFound=WARNING&quot;|</stringProp>
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">Status</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;Status&gt;(.*?)&lt;/Status&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">null</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Error_Code" enabled="true">
                  <stringProp name="TestPlan.comments">&quot;Error_Code&quot;|&quot;LB=&lt;Code&gt;&quot;|&quot;RB=&lt;/Code&gt;&quot;|&quot;Search=Body&quot;|&quot;IgnoreRedirections=Yes&quot;|&quot;NotFound=WARNING&quot;|</stringProp>
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">Error_Code</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;Code&gt;(.*?)&lt;/Code&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">null</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Error_Description" enabled="true">
                  <stringProp name="TestPlan.comments">&quot;Error_Description&quot;|&quot;LB=&lt;Description&gt;&quot;|&quot;RB=&lt;/Description&gt;&quot;|&quot;Search=Body&quot;|&quot;IgnoreRedirections=Yes&quot;|&quot;NotFound=WARNING&quot;|</stringProp>
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">Error_Description</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;Description&gt;(.*?)&lt;/Description&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">null</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor-responsecode" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">code</stringProp>
                  <stringProp name="RegexExtractor.refname">responsecode</stringProp>
                  <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">0</stringProp>
                  <stringProp name="RegexExtractor.match_number"></stringProp>
                </RegexExtractor>
                <hashTree/>
                <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">
int rescode=Integer.parseInt(vars.get(&quot;responsecode&quot;));

String Stat=vars.get(&quot;Status&quot;);

// if we get a sucessful http response from web service
if (rescode == 200)
{	//error if no results found
	if (Stat.equals(&quot;success&quot;))
	{
		// HTTP 200 response and web service returned success reponse
		log.info(&quot;Results found as expected for Claim Number:&quot;+ vars.get(&quot;Claim_Number&quot;));
		prev.setSuccessful(true);
	}
	else 
	{
		// HTTP 200 response and web service returned a non success reponse
		log.error(&quot;HTTP Reponse 200 but unsucessful response. Status Description = &quot;+vars.get(&quot;Error_Description&quot;)+&quot;, for Policy Number&quot;+ vars.get(&quot;Policy_ID&quot;)+&quot; with DOL&quot;);
		prev.setSuccessful(false);
	}
	
}
else
{
	// web service did not return http 200
	log.error(&quot;HTTP Reponse not 200 OK&quot;);
	prev.setSuccessful(false);
	//setOnErrorStartNextLoop(true);
	//ctx.setRestartNextLoop(true);
}



</stringProp>
                </BeanShellPostProcessor>
                <hashTree/>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ThinkTime - 10" enabled="true">
                <stringProp name="TestPlan.comments">This transaction will wait for 10 seconds</stringProp>
              </GenericController>
              <hashTree>
                <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="ThinkTime" enabled="true">
                  <stringProp name="ConstantTimer.delay">10000</stringProp>
                  <stringProp name="TestPlan.comments">   Converting seconds to milliseconds - 10s x 1000</stringProp>
                </ConstantTimer>
                <hashTree/>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
                <stringProp name="IfController.condition">${responsecode} == 0</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Module Controller" enabled="true">
                  <collectionProp name="ModuleController.node_path">
                    <stringProp name="-1227702913">WorkBench</stringProp>
                    <stringProp name="764597751">Test Plan</stringProp>
                    <stringProp name="-1146421865">CNG_TP112_eService_FNOL_Hit_Parked_Insured</stringProp>
                    <stringProp name="81515">RUN</stringProp>
                    <stringProp name="-1056123709">-Action</stringProp>
                    <stringProp name="1191940651">TP112_250_eService_Cancel_Claim</stringProp>
                  </collectionProp>
                </ModuleController>
                <hashTree/>
              </hashTree>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="TP112_150_eService_Get_Severity_Type" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="EService_Get_Severity_Type" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:ity=&quot;http://pm.lmig.com/cl/TypelistServiceMediationLibrary/iTypelistServiceExport&quot;&gt;   &lt;soap:Header/&gt;   &lt;soap:Body&gt;      &lt;ity:getTypelistByNameAndFilter&gt;         &lt;GetTypelistByNameAndFilterRequest&gt;            &lt;RequestId&gt;?&lt;/RequestId&gt;            &lt;Requestor&gt;eService&lt;/Requestor&gt;            &lt;UserID&gt;?&lt;/UserID&gt;            &lt;TypelistName&gt;SeverityType&lt;/TypelistName&gt;         &lt;/GetTypelistByNameAndFilterRequest&gt;      &lt;/ity:getTypelistByNameAndFilter&gt;   &lt;/soap:Body&gt;&lt;/soap:Envelope&gt;</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">https://${ENVIRONMENT}-pmclaims-esb-typelist-internal.libertyec.com/TypelistServiceMediationModuleWeb/sca/TypelistServiceExport</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Status" enabled="true">
                  <stringProp name="TestPlan.comments">&quot;Status&quot;|&quot;LB=&lt;Status&gt;&quot;|&quot;RB=&lt;/Status&gt;&quot;|&quot;Search=Body&quot;|&quot;IgnoreRedirections=Yes&quot;|&quot;NotFound=WARNING&quot;|</stringProp>
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">Status</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;Status&gt;(.*?)&lt;/Status&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">null</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Error_Code" enabled="true">
                  <stringProp name="TestPlan.comments">&quot;Error_Code&quot;|&quot;LB=&lt;Code&gt;&quot;|&quot;RB=&lt;/Code&gt;&quot;|&quot;Search=Body&quot;|&quot;IgnoreRedirections=Yes&quot;|&quot;NotFound=WARNING&quot;|</stringProp>
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">Error_Code</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;Code&gt;(.*?)&lt;/Code&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">null</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Error_Description" enabled="true">
                  <stringProp name="TestPlan.comments">&quot;Error_Description&quot;|&quot;LB=&lt;Description&gt;&quot;|&quot;RB=&lt;/Description&gt;&quot;|&quot;Search=Body&quot;|&quot;IgnoreRedirections=Yes&quot;|&quot;NotFound=WARNING&quot;|</stringProp>
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">Error_Description</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;Description&gt;(.*?)&lt;/Description&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">null</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor-responsecode" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">code</stringProp>
                  <stringProp name="RegexExtractor.refname">responsecode</stringProp>
                  <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">0</stringProp>
                  <stringProp name="RegexExtractor.match_number"></stringProp>
                </RegexExtractor>
                <hashTree/>
                <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">
int rescode=Integer.parseInt(vars.get(&quot;responsecode&quot;));

String Stat=vars.get(&quot;Status&quot;);

// if we get a sucessful http response from web service
if (rescode == 200)
{	//error if no results found
	if (Stat.equals(&quot;success&quot;))
	{
		// HTTP 200 response and web service returned success reponse
		log.info(&quot;Results found as expected for Claim Number:&quot;+ vars.get(&quot;Claim_Number&quot;));
		prev.setSuccessful(true);
	}
	else 
	{
		// HTTP 200 response and web service returned a non success reponse
		log.error(&quot;HTTP Reponse 200 but unsucessful response. Status Description = &quot;+vars.get(&quot;Error_Description&quot;)+&quot;, for Policy Number&quot;+ vars.get(&quot;Policy_ID&quot;)+&quot; with DOL&quot;);
		prev.setSuccessful(false);
	}
	
}
else
{
	// web service did not return http 200
	log.error(&quot;HTTP Reponse not 200 OK&quot;);
	prev.setSuccessful(false);
	//setOnErrorStartNextLoop(true);
	//ctx.setRestartNextLoop(true);
}



</stringProp>
                </BeanShellPostProcessor>
                <hashTree/>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ThinkTime - 10" enabled="true">
                <stringProp name="TestPlan.comments">This transaction will wait for 10 seconds</stringProp>
              </GenericController>
              <hashTree>
                <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="ThinkTime" enabled="true">
                  <stringProp name="ConstantTimer.delay">10000</stringProp>
                  <stringProp name="TestPlan.comments">   Converting seconds to milliseconds - 10s x 1000</stringProp>
                </ConstantTimer>
                <hashTree/>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
                <stringProp name="IfController.condition">${responsecode} == 0</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Module Controller" enabled="true">
                  <collectionProp name="ModuleController.node_path">
                    <stringProp name="-1227702913">WorkBench</stringProp>
                    <stringProp name="764597751">Test Plan</stringProp>
                    <stringProp name="-1146421865">CNG_TP112_eService_FNOL_Hit_Parked_Insured</stringProp>
                    <stringProp name="81515">RUN</stringProp>
                    <stringProp name="-1056123709">-Action</stringProp>
                    <stringProp name="1191940651">TP112_250_eService_Cancel_Claim</stringProp>
                  </collectionProp>
                </ModuleController>
                <hashTree/>
              </hashTree>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="TP112_160_eService_Get_Collision_Point_Type" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="EService_Get_Collision_Point_Type" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:ity=&quot;http://pm.lmig.com/cl/TypelistServiceMediationLibrary/iTypelistServiceExport&quot;&gt;   &lt;soap:Header/&gt;   &lt;soap:Body&gt;      &lt;ity:getTypelistByNameAndFilter&gt;         &lt;GetTypelistByNameAndFilterRequest&gt;            &lt;RequestId&gt;?&lt;/RequestId&gt;            &lt;Requestor&gt;eService&lt;/Requestor&gt;            &lt;UserID&gt;?&lt;/UserID&gt;            &lt;TypelistName&gt;CollisionPoint&lt;/TypelistName&gt;         &lt;/GetTypelistByNameAndFilterRequest&gt;      &lt;/ity:getTypelistByNameAndFilter&gt;   &lt;/soap:Body&gt;&lt;/soap:Envelope&gt;</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">https://${ENVIRONMENT}-pmclaims-esb-typelist-internal.libertyec.com/TypelistServiceMediationModuleWeb/sca/TypelistServiceExport</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Status" enabled="true">
                  <stringProp name="TestPlan.comments">&quot;Status&quot;|&quot;LB=&lt;Status&gt;&quot;|&quot;RB=&lt;/Status&gt;&quot;|&quot;Search=Body&quot;|&quot;IgnoreRedirections=Yes&quot;|&quot;NotFound=WARNING&quot;|</stringProp>
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">Status</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;Status&gt;(.*?)&lt;/Status&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">null</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Error_Code" enabled="true">
                  <stringProp name="TestPlan.comments">&quot;Error_Code&quot;|&quot;LB=&lt;Code&gt;&quot;|&quot;RB=&lt;/Code&gt;&quot;|&quot;Search=Body&quot;|&quot;IgnoreRedirections=Yes&quot;|&quot;NotFound=WARNING&quot;|</stringProp>
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">Error_Code</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;Code&gt;(.*?)&lt;/Code&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">null</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Error_Description" enabled="true">
                  <stringProp name="TestPlan.comments">&quot;Error_Description&quot;|&quot;LB=&lt;Description&gt;&quot;|&quot;RB=&lt;/Description&gt;&quot;|&quot;Search=Body&quot;|&quot;IgnoreRedirections=Yes&quot;|&quot;NotFound=WARNING&quot;|</stringProp>
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">Error_Description</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;Description&gt;(.*?)&lt;/Description&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">null</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor-responsecode" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">code</stringProp>
                  <stringProp name="RegexExtractor.refname">responsecode</stringProp>
                  <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">0</stringProp>
                  <stringProp name="RegexExtractor.match_number"></stringProp>
                </RegexExtractor>
                <hashTree/>
                <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">
int rescode=Integer.parseInt(vars.get(&quot;responsecode&quot;));

String Stat=vars.get(&quot;Status&quot;);

// if we get a sucessful http response from web service
if (rescode == 200)
{	//error if no results found
	if (Stat.equals(&quot;success&quot;))
	{
		// HTTP 200 response and web service returned success reponse
		log.info(&quot;Results found as expected for Claim Number:&quot;+ vars.get(&quot;Claim_Number&quot;));
		prev.setSuccessful(true);
	}
	else 
	{
		// HTTP 200 response and web service returned a non success reponse
		log.error(&quot;HTTP Reponse 200 but unsucessful response. Status Description = &quot;+vars.get(&quot;Error_Description&quot;)+&quot;, for Policy Number&quot;+ vars.get(&quot;Policy_ID&quot;)+&quot; with DOL&quot;);
		prev.setSuccessful(false);
	}
	
}
else
{
	// web service did not return http 200
	log.error(&quot;HTTP Reponse not 200 OK&quot;);
	prev.setSuccessful(false);
	//setOnErrorStartNextLoop(true);
	//ctx.setRestartNextLoop(true);
}



</stringProp>
                </BeanShellPostProcessor>
                <hashTree/>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ThinkTime - 10" enabled="true">
                <stringProp name="TestPlan.comments">This transaction will wait for 10 seconds</stringProp>
              </GenericController>
              <hashTree>
                <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="ThinkTime" enabled="true">
                  <stringProp name="ConstantTimer.delay">10000</stringProp>
                  <stringProp name="TestPlan.comments">   Converting seconds to milliseconds - 10s x 1000</stringProp>
                </ConstantTimer>
                <hashTree/>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
                <stringProp name="IfController.condition">${responsecode} == 0</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Module Controller" enabled="true">
                  <collectionProp name="ModuleController.node_path">
                    <stringProp name="-1227702913">WorkBench</stringProp>
                    <stringProp name="764597751">Test Plan</stringProp>
                    <stringProp name="-1146421865">CNG_TP112_eService_FNOL_Hit_Parked_Insured</stringProp>
                    <stringProp name="81515">RUN</stringProp>
                    <stringProp name="-1056123709">-Action</stringProp>
                    <stringProp name="1191940651">TP112_250_eService_Cancel_Claim</stringProp>
                  </collectionProp>
                </ModuleController>
                <hashTree/>
              </hashTree>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="TP112_170_eService_Update_Incident" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="EService_Update_Incident" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:iin=&quot;http://pm.lmig.com/cl/IncidentMediationLibrary/iIncidentServiceImport&quot; xmlns:ser=&quot;http://pm.lmig.com/cl/incident/model/service&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:do=&quot;http://pm.lmig.com/cl/incident/model/domain&quot;&gt;   &lt;soap:Header/&gt;   &lt;soap:Body&gt;      &lt;iin:updateIncident&gt;         &lt;ser:UpdateIncidentRequest&gt;            &lt;RequestId&gt;?&lt;/RequestId&gt;            &lt;Requestor&gt;eService&lt;/Requestor&gt;            &lt;UserID&gt;?&lt;/UserID&gt;            &lt;Incident xsi:type=&quot;do:VehicleIncident&quot;&gt;               &lt;Id&gt;${Incident_ID}&lt;/Id&gt;               &lt;RecordOnlyInd&gt;false&lt;/RecordOnlyInd&gt;               &lt;Description&gt;TP112 eService claim registration&lt;/Description&gt;               &lt;Severity&gt;minor&lt;/Severity&gt;               &lt;PointOfFirstImpact&gt;14&lt;/PointOfFirstImpact&gt;               &lt;Vehicle&gt;                                    &lt;Id&gt;${Vehicle_ID}&lt;/Id&gt;               &lt;/Vehicle&gt;               &lt;NoOperatorInd&gt;true&lt;/NoOperatorInd&gt;               &lt;UnknownMileageInd&gt;false&lt;/UnknownMileageInd&gt;               &lt;OdomRead&gt;${RANDOM_ODOMETER}&lt;/OdomRead&gt;               &lt;LossPartyType&gt;insured&lt;/LossPartyType&gt;               &lt;VehicleInsdRelation&gt;listed&lt;/VehicleInsdRelation&gt;            &lt;/Incident&gt;         &lt;/ser:UpdateIncidentRequest&gt;      &lt;/iin:updateIncident&gt;   &lt;/soap:Body&gt;&lt;/soap:Envelope&gt;</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">https://${ENVIRONMENT}-pmclaims-esb-incident-internal.libertyec.com/IncidentMediationModuleWeb/sca/IncidentServiceExport</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Status" enabled="true">
                  <stringProp name="TestPlan.comments">&quot;Status&quot;|&quot;LB=&lt;status&gt;&quot;|&quot;RB=&lt;/status&gt;&quot;|&quot;Search=Body&quot;|&quot;IgnoreRedirections=Yes&quot;|&quot;NotFound=WARNING&quot;|</stringProp>
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">Status</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;status&gt;(.*?)&lt;/status&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">null</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Error_Code" enabled="true">
                  <stringProp name="TestPlan.comments">&quot;Error_Code&quot;|&quot;LB=&lt;Code&gt;&quot;|&quot;RB=&lt;/Code&gt;&quot;|&quot;Search=Body&quot;|&quot;IgnoreRedirections=Yes&quot;|&quot;NotFound=WARNING&quot;|</stringProp>
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">Error_Code</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;Code&gt;(.*?)&lt;/Code&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">null</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Error_Description" enabled="true">
                  <stringProp name="TestPlan.comments">&quot;Error_Description&quot;|&quot;LB=&lt;Description&gt;&quot;|&quot;RB=&lt;/Description&gt;&quot;|&quot;Search=Body&quot;|&quot;IgnoreRedirections=Yes&quot;|&quot;NotFound=WARNING&quot;|</stringProp>
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">Error_Description</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;Description&gt;(.*?)&lt;/Description&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">null</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor-responsecode" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">code</stringProp>
                  <stringProp name="RegexExtractor.refname">responsecode</stringProp>
                  <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">0</stringProp>
                  <stringProp name="RegexExtractor.match_number"></stringProp>
                </RegexExtractor>
                <hashTree/>
                <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">
int rescode=Integer.parseInt(vars.get(&quot;responsecode&quot;));

String Stat=vars.get(&quot;Status&quot;);

// if we get a sucessful http response from web service
if (rescode == 200)
{	//error if no results found
	if (Stat.equals(&quot;success&quot;))
	{
		// HTTP 200 response and web service returned success reponse
		log.info(&quot;Results found as expected for Claim Number:&quot;+ vars.get(&quot;Claim_Number&quot;));
		prev.setSuccessful(true);
	}
	else 
	{
		// HTTP 200 response and web service returned a non success reponse
		log.error(&quot;HTTP Reponse 200 but unsucessful response. Status Description = &quot;+vars.get(&quot;Error_Description&quot;)+&quot;, for Policy Number&quot;+ vars.get(&quot;Policy_ID&quot;)+&quot; with DOL&quot;);
		prev.setSuccessful(false);
	}
	
}
else
{
	// web service did not return http 200
	log.error(&quot;HTTP Reponse not 200 OK&quot;);
	prev.setSuccessful(false);
	//setOnErrorStartNextLoop(true);
	//ctx.setRestartNextLoop(true);
}



</stringProp>
                </BeanShellPostProcessor>
                <hashTree/>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ThinkTime - 10" enabled="true">
                <stringProp name="TestPlan.comments">This transaction will wait for 10 seconds</stringProp>
              </GenericController>
              <hashTree>
                <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="ThinkTime" enabled="true">
                  <stringProp name="ConstantTimer.delay">10000</stringProp>
                  <stringProp name="TestPlan.comments">   Converting seconds to milliseconds - 10s x 1000</stringProp>
                </ConstantTimer>
                <hashTree/>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
                <stringProp name="IfController.condition">${responsecode} == 0</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Module Controller" enabled="true">
                  <collectionProp name="ModuleController.node_path">
                    <stringProp name="-1227702913">WorkBench</stringProp>
                    <stringProp name="764597751">Test Plan</stringProp>
                    <stringProp name="-1146421865">CNG_TP112_eService_FNOL_Hit_Parked_Insured</stringProp>
                    <stringProp name="81515">RUN</stringProp>
                    <stringProp name="-1056123709">-Action</stringProp>
                    <stringProp name="1191940651">TP112_250_eService_Cancel_Claim</stringProp>
                  </collectionProp>
                </ModuleController>
                <hashTree/>
              </hashTree>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="TP112_180_eService_Create_Incident_3rd_Party" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="EService_Create_Incident_3rd_Party" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:iin=&quot;http://pm.lmig.com/cl/IncidentMediationLibrary/iIncidentServiceImport&quot; xmlns:ser=&quot;http://pm.lmig.com/cl/incident/model/service&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:do=&quot;http://pm.lmig.com/cl/incident/model/domain&quot;&gt;   &lt;soap:Header/&gt;   &lt;soap:Body&gt;      &lt;iin:createIncident&gt;         &lt;ser:CreateIncidentRequest&gt;            &lt;RequestId&gt;?&lt;/RequestId&gt;            &lt;Requestor&gt;eService&lt;/Requestor&gt;            &lt;UserID&gt;?&lt;/UserID&gt;            &lt;Incident xsi:type=&quot;do:VehicleIncident&quot;&gt;               &lt;RecordOnlyInd&gt;false&lt;/RecordOnlyInd&gt;               &lt;Description&gt;TP112 Damage to rear of CLMT vehicle&lt;/Description&gt;               &lt;Severity&gt;minor&lt;/Severity&gt;               &lt;PointOfFirstImpact&gt;06&lt;/PointOfFirstImpact&gt;               &lt;Vehicle&gt;                  &lt;Year&gt;${YEAR}&lt;/Year&gt;                  &lt;Manufacturer/&gt;                  &lt;Make&gt;${MAKE}&lt;/Make&gt;                  &lt;Model&gt;${MODEL}&lt;/Model&gt;                  &lt;LicensePlate&gt;${LICENSE_PLATE}&lt;/LicensePlate&gt;                  &lt;Color/&gt;                  &lt;Style&gt;passengercar&lt;/Style&gt;                  &lt;State&gt;${VEHICLE_STATE}&lt;/State&gt;                  &lt;SerialNumber/&gt;               &lt;/Vehicle&gt;               &lt;UnknownMileageInd&gt;true&lt;/UnknownMileageInd&gt;               &lt;LossPartyType&gt;third_party&lt;/LossPartyType&gt;            &lt;/Incident&gt;            &lt;ClaimNumber&gt;${Claim_Number}&lt;/ClaimNumber&gt;         &lt;/ser:CreateIncidentRequest&gt;      &lt;/iin:createIncident&gt;   &lt;/soap:Body&gt;&lt;/soap:Envelope&gt;</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">https://${ENVIRONMENT}-pmclaims-esb-incident-internal.libertyec.com/IncidentMediationModuleWeb/sca/IncidentServiceExport</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Status" enabled="true">
                  <stringProp name="TestPlan.comments">&quot;Status&quot;|&quot;LB=&lt;status&gt;&quot;|&quot;RB=&lt;/status&gt;&quot;|&quot;Search=Body&quot;|&quot;IgnoreRedirections=Yes&quot;|&quot;NotFound=WARNING&quot;|</stringProp>
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">Status</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;status&gt;(.*?)&lt;/status&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">null</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="3rd_Party_Vehicle_Incident_ID" enabled="true">
                  <stringProp name="TestPlan.comments">&quot;3rd_Party_Vehicle_Incident_ID&quot;|&quot;LB=&lt;Incident xsi:type=\&quot;do:VehicleIncident\&quot;&gt;&lt;Id&gt;&quot;|&quot;RB=&lt;/Id&gt;&quot;|&quot;Search=Body&quot;|&quot;IgnoreRedirections=Yes&quot;|&quot;NotFound=WARNING&quot;|</stringProp>
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">3rd_Party_Vehicle_Incident_ID</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;Incident xsi:type=\&quot;do:VehicleIncident\&quot;&gt;&lt;Id&gt;(.*?)&lt;/Id&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">null</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Error_Code" enabled="true">
                  <stringProp name="TestPlan.comments">&quot;Error_Code&quot;|&quot;LB=&lt;Code&gt;&quot;|&quot;RB=&lt;/Code&gt;&quot;|&quot;Search=Body&quot;|&quot;IgnoreRedirections=Yes&quot;|&quot;NotFound=WARNING&quot;|</stringProp>
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">Error_Code</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;Code&gt;(.*?)&lt;/Code&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">null</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Error_Description" enabled="true">
                  <stringProp name="TestPlan.comments">&quot;Error_Description&quot;|&quot;LB=&lt;Description&gt;&quot;|&quot;RB=&lt;/Description&gt;&quot;|&quot;Search=Body&quot;|&quot;IgnoreRedirections=Yes&quot;|&quot;NotFound=WARNING&quot;|</stringProp>
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">Error_Description</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;Description&gt;(.*?)&lt;/Description&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">null</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor-responsecode" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">code</stringProp>
                  <stringProp name="RegexExtractor.refname">responsecode</stringProp>
                  <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">0</stringProp>
                  <stringProp name="RegexExtractor.match_number"></stringProp>
                </RegexExtractor>
                <hashTree/>
                <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">
int rescode=Integer.parseInt(vars.get(&quot;responsecode&quot;));

String Stat=vars.get(&quot;Status&quot;);

// if we get a sucessful http response from web service
if (rescode == 200)
{	//error if no results found
	if (Stat.equals(&quot;success&quot;))
	{
		// HTTP 200 response and web service returned success reponse
		log.info(&quot;Results found as expected for Claim Number:&quot;+ vars.get(&quot;Claim_Number&quot;));
		prev.setSuccessful(true);
	}
	else 
	{
		// HTTP 200 response and web service returned a non success reponse
		log.error(&quot;HTTP Reponse 200 but unsucessful response. Status Description = &quot;+vars.get(&quot;Error_Description&quot;)+&quot;, for Policy Number&quot;+ vars.get(&quot;Policy_ID&quot;)+&quot; with DOL&quot;);
		prev.setSuccessful(false);
	}
	
}
else
{
	// web service did not return http 200
	log.error(&quot;HTTP Reponse not 200 OK&quot;);
	prev.setSuccessful(false);
	//setOnErrorStartNextLoop(true);
	//ctx.setRestartNextLoop(true);
}



</stringProp>
                </BeanShellPostProcessor>
                <hashTree/>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ThinkTime - 10" enabled="true">
                <stringProp name="TestPlan.comments">This transaction will wait for 10 seconds</stringProp>
              </GenericController>
              <hashTree>
                <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="ThinkTime" enabled="true">
                  <stringProp name="ConstantTimer.delay">10000</stringProp>
                  <stringProp name="TestPlan.comments">   Converting seconds to milliseconds - 10s x 1000</stringProp>
                </ConstantTimer>
                <hashTree/>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
                <stringProp name="IfController.condition">${responsecode} == 0</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Module Controller" enabled="true">
                  <collectionProp name="ModuleController.node_path">
                    <stringProp name="-1227702913">WorkBench</stringProp>
                    <stringProp name="764597751">Test Plan</stringProp>
                    <stringProp name="-1146421865">CNG_TP112_eService_FNOL_Hit_Parked_Insured</stringProp>
                    <stringProp name="81515">RUN</stringProp>
                    <stringProp name="-1056123709">-Action</stringProp>
                    <stringProp name="1191940651">TP112_250_eService_Cancel_Claim</stringProp>
                  </collectionProp>
                </ModuleController>
                <hashTree/>
              </hashTree>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="TP112_190_eService_Create_Contact_Driver_3rd_Party" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="EService_Create_Contact_Driver_3rd_Party" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:icon=&quot;http://pm.lmig.com/cl/ContactMediationLibrary/iContactServiceImport&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:do=&quot;http://pm.lmig.com/cl/contact/model/domain&quot;&gt;   &lt;soap:Header/&gt;   &lt;soap:Body&gt;      &lt;icon:createContact&gt;         &lt;CreateContactRequest&gt;            &lt;RequestId&gt;?&lt;/RequestId&gt;            &lt;Requestor&gt;eService&lt;/Requestor&gt;            &lt;UserID&gt;?&lt;/UserID&gt;            &lt;Contact xsi:type=&quot;do:Person&quot;&gt;               &lt;Id/&gt;               &lt;PrimaryContactId/&gt;               &lt;Role&gt;                  &lt;IncidentId&gt;${3rd_Party_Vehicle_Incident_ID}&lt;/IncidentId&gt;                  &lt;PolicyId/&gt;                  &lt;RoleName&gt;driver&lt;/RoleName&gt;                  &lt;CoveredPartyType/&gt;                  &lt;WitnessPosition/&gt;                  &lt;WitnessStatementProvdied/&gt;                  &lt;Active&gt;true&lt;/Active&gt;                  &lt;Comments/&gt;               &lt;/Role&gt;               &lt;PreferredInd&gt;false&lt;/PreferredInd&gt;               &lt;FirstName&gt;Unknown&lt;/FirstName&gt;               &lt;LastName&gt;Unknown&lt;/LastName&gt;            &lt;/Contact&gt;            &lt;ClaimNumber&gt;${Claim_Number}&lt;/ClaimNumber&gt;         &lt;/CreateContactRequest&gt;      &lt;/icon:createContact&gt;   &lt;/soap:Body&gt;&lt;/soap:Envelope&gt;</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">https://${ENVIRONMENT}-pmclaims-esb-contact-internal.libertyec.com/ContactMediationModuleWeb/sca/ContactServiceExport</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Status" enabled="true">
                  <stringProp name="TestPlan.comments">&quot;Status&quot;|&quot;LB=&lt;Status&gt;&quot;|&quot;RB=&lt;/Status&gt;&quot;|&quot;Search=Body&quot;|&quot;IgnoreRedirections=Yes&quot;|&quot;NotFound=WARNING&quot;|</stringProp>
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">Status</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;Status&gt;(.*?)&lt;/Status&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">null</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="3rd_Party_Contact_ID" enabled="true">
                  <stringProp name="TestPlan.comments">&quot;3rd_Party_Contact_ID&quot;|&quot;LB=&lt;Contact xsi:type=\&quot;do:Person\&quot;&gt;&lt;Id&gt;&quot;|&quot;RB=&lt;/Id&gt;&quot;|&quot;Search=Body&quot;|&quot;IgnoreRedirections=Yes&quot;|&quot;NotFound=WARNING&quot;|</stringProp>
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">3rd_Party_Contact_ID</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;Contact xsi:type=\&quot;do:Person\&quot;&gt;&lt;Id&gt;(.*?)&lt;/Id&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">null</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Error_Code" enabled="true">
                  <stringProp name="TestPlan.comments">&quot;Error_Code&quot;|&quot;LB=&lt;Code&gt;&quot;|&quot;RB=&lt;/Code&gt;&quot;|&quot;Search=Body&quot;|&quot;IgnoreRedirections=Yes&quot;|&quot;NotFound=WARNING&quot;|</stringProp>
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">Error_Code</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;Code&gt;(.*?)&lt;/Code&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">null</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Error_Description" enabled="true">
                  <stringProp name="TestPlan.comments">&quot;Error_Description&quot;|&quot;LB=&lt;Description&gt;&quot;|&quot;RB=&lt;/Description&gt;&quot;|&quot;Search=Body&quot;|&quot;IgnoreRedirections=Yes&quot;|&quot;NotFound=WARNING&quot;|</stringProp>
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">Error_Description</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;Description&gt;(.*?)&lt;/Description&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">null</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor-responsecode" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">code</stringProp>
                  <stringProp name="RegexExtractor.refname">responsecode</stringProp>
                  <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">0</stringProp>
                  <stringProp name="RegexExtractor.match_number"></stringProp>
                </RegexExtractor>
                <hashTree/>
                <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">
int rescode=Integer.parseInt(vars.get(&quot;responsecode&quot;));

String Stat=vars.get(&quot;Status&quot;);

// if we get a sucessful http response from web service
if (rescode == 200)
{	//error if no results found
	if (Stat.equals(&quot;success&quot;))
	{
		// HTTP 200 response and web service returned success reponse
		log.info(&quot;Results found as expected for Claim Number:&quot;+ vars.get(&quot;Claim_Number&quot;));
		prev.setSuccessful(true);
	}
	else 
	{
		// HTTP 200 response and web service returned a non success reponse
		log.error(&quot;HTTP Reponse 200 but unsucessful response. Status Description = &quot;+vars.get(&quot;Error_Description&quot;)+&quot;, for Policy Number&quot;+ vars.get(&quot;Policy_ID&quot;)+&quot; with DOL&quot;);
		prev.setSuccessful(false);
	}
	
}
else
{
	// web service did not return http 200
	log.error(&quot;HTTP Reponse not 200 OK&quot;);
	prev.setSuccessful(false);
	//setOnErrorStartNextLoop(true);
	//ctx.setRestartNextLoop(true);
}



</stringProp>
                </BeanShellPostProcessor>
                <hashTree/>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ThinkTime - 10" enabled="true">
                <stringProp name="TestPlan.comments">This transaction will wait for 10 seconds</stringProp>
              </GenericController>
              <hashTree>
                <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="ThinkTime" enabled="true">
                  <stringProp name="ConstantTimer.delay">10000</stringProp>
                  <stringProp name="TestPlan.comments">   Converting seconds to milliseconds - 10s x 1000</stringProp>
                </ConstantTimer>
                <hashTree/>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
                <stringProp name="IfController.condition">${responsecode} == 0</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Module Controller" enabled="true">
                  <collectionProp name="ModuleController.node_path">
                    <stringProp name="-1227702913">WorkBench</stringProp>
                    <stringProp name="764597751">Test Plan</stringProp>
                    <stringProp name="-1146421865">CNG_TP112_eService_FNOL_Hit_Parked_Insured</stringProp>
                    <stringProp name="81515">RUN</stringProp>
                    <stringProp name="-1056123709">-Action</stringProp>
                    <stringProp name="1191940651">TP112_250_eService_Cancel_Claim</stringProp>
                  </collectionProp>
                </ModuleController>
                <hashTree/>
              </hashTree>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="TP112_200_eService_Create_Role_Incident_Owner_3rd_Party_Vehicle" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="EService_Create_Role_Incident_Owner_3rd_Party_Vehicle" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:icon=&quot;http://pm.lmig.com/cl/ContactMediationLibrary/iContactServiceImport&quot;&gt;   &lt;soap:Header/&gt;   &lt;soap:Body&gt;      &lt;icon:createRole&gt;         &lt;CreateRoleRequest&gt;            &lt;RequestId&gt;?&lt;/RequestId&gt;            &lt;Requestor&gt;eService&lt;/Requestor&gt;            &lt;UserID&gt;?&lt;/UserID&gt;            &lt;ContactId&gt;${3rd_Party_Contact_ID}&lt;/ContactId&gt;            &lt;Role&gt;               &lt;IncidentId&gt;${3rd_Party_Vehicle_Incident_ID}&lt;/IncidentId&gt;               &lt;RoleName&gt;incidentowner&lt;/RoleName&gt;               &lt;Active&gt;true&lt;/Active&gt;            &lt;/Role&gt;         &lt;/CreateRoleRequest&gt;      &lt;/icon:createRole&gt;   &lt;/soap:Body&gt;&lt;/soap:Envelope&gt;</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">https://${ENVIRONMENT}-pmclaims-esb-contact-internal.libertyec.com/ContactMediationModuleWeb/sca/ContactServiceExport</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Status" enabled="true">
                  <stringProp name="TestPlan.comments">&quot;Status&quot;|&quot;LB=&lt;Status&gt;&quot;|&quot;RB=&lt;/Status&gt;&quot;|&quot;Search=Body&quot;|&quot;IgnoreRedirections=Yes&quot;|&quot;NotFound=WARNING&quot;|</stringProp>
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">Status</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;Status&gt;(.*?)&lt;/Status&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">null</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Error_Code" enabled="true">
                  <stringProp name="TestPlan.comments">&quot;Error_Code&quot;|&quot;LB=&lt;Code&gt;&quot;|&quot;RB=&lt;/Code&gt;&quot;|&quot;Search=Body&quot;|&quot;IgnoreRedirections=Yes&quot;|&quot;NotFound=WARNING&quot;|</stringProp>
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">Error_Code</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;Code&gt;(.*?)&lt;/Code&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">null</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Error_Description" enabled="true">
                  <stringProp name="TestPlan.comments">&quot;Error_Description&quot;|&quot;LB=&lt;Description&gt;&quot;|&quot;RB=&lt;/Description&gt;&quot;|&quot;Search=Body&quot;|&quot;IgnoreRedirections=Yes&quot;|&quot;NotFound=WARNING&quot;|</stringProp>
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">Error_Description</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;Description&gt;(.*?)&lt;/Description&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">null</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor-responsecode" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">code</stringProp>
                  <stringProp name="RegexExtractor.refname">responsecode</stringProp>
                  <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">0</stringProp>
                  <stringProp name="RegexExtractor.match_number"></stringProp>
                </RegexExtractor>
                <hashTree/>
                <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">
int rescode=Integer.parseInt(vars.get(&quot;responsecode&quot;));

String Stat=vars.get(&quot;Status&quot;);

// if we get a sucessful http response from web service
if (rescode == 200)
{	//error if no results found
	if (Stat.equals(&quot;success&quot;))
	{
		// HTTP 200 response and web service returned success reponse
		log.info(&quot;Results found as expected for Claim Number:&quot;+ vars.get(&quot;Claim_Number&quot;));
		prev.setSuccessful(true);
	}
	else 
	{
		// HTTP 200 response and web service returned a non success reponse
		log.error(&quot;HTTP Reponse 200 but unsucessful response. Status Description = &quot;+vars.get(&quot;Error_Description&quot;)+&quot;, for Policy Number&quot;+ vars.get(&quot;Policy_ID&quot;)+&quot; with DOL&quot;);
		prev.setSuccessful(false);
	}
	
}
else
{
	// web service did not return http 200
	log.error(&quot;HTTP Reponse not 200 OK&quot;);
	prev.setSuccessful(false);
	//setOnErrorStartNextLoop(true);
	//ctx.setRestartNextLoop(true);
}



</stringProp>
                </BeanShellPostProcessor>
                <hashTree/>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ThinkTime - 10" enabled="true">
                <stringProp name="TestPlan.comments">This transaction will wait for 10 seconds</stringProp>
              </GenericController>
              <hashTree>
                <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="ThinkTime" enabled="true">
                  <stringProp name="ConstantTimer.delay">10000</stringProp>
                  <stringProp name="TestPlan.comments">   Converting seconds to milliseconds - 10s x 1000</stringProp>
                </ConstantTimer>
                <hashTree/>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
                <stringProp name="IfController.condition">${responsecode} == 0</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Module Controller" enabled="true">
                  <collectionProp name="ModuleController.node_path">
                    <stringProp name="-1227702913">WorkBench</stringProp>
                    <stringProp name="764597751">Test Plan</stringProp>
                    <stringProp name="-1146421865">CNG_TP112_eService_FNOL_Hit_Parked_Insured</stringProp>
                    <stringProp name="81515">RUN</stringProp>
                    <stringProp name="-1056123709">-Action</stringProp>
                    <stringProp name="1191940651">TP112_250_eService_Cancel_Claim</stringProp>
                  </collectionProp>
                </ModuleController>
                <hashTree/>
              </hashTree>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="TP112_210_eService_Get_LM_Insurance_Carrier" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="EService_Get_LM_Insurance_Carrier" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:ity=&quot;http://pm.lmig.com/cl/TypelistServiceMediationLibrary/iTypelistServiceExport&quot;&gt;   &lt;soap:Header/&gt;   &lt;soap:Body&gt;      &lt;ity:getTypelistByNameAndFilter&gt;         &lt;GetTypelistByNameAndFilterRequest&gt;            &lt;RequestId&gt;?&lt;/RequestId&gt;            &lt;Requestor&gt;eService&lt;/Requestor&gt;            &lt;UserID&gt;?&lt;/UserID&gt;            &lt;TypelistName&gt;LM_InsuranceCarrier&lt;/TypelistName&gt;		  	 &lt;Filter&gt;PrimaryCarrier&lt;/Filter&gt;         &lt;/GetTypelistByNameAndFilterRequest&gt;      &lt;/ity:getTypelistByNameAndFilter&gt;   &lt;/soap:Body&gt;&lt;/soap:Envelope&gt;</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">https://${ENVIRONMENT}-pmclaims-esb-typelist-internal.libertyec.com/TypelistServiceMediationModuleWeb/sca/TypelistServiceExport</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Status" enabled="true">
                  <stringProp name="TestPlan.comments">&quot;Status&quot;|&quot;LB=&lt;Status&gt;&quot;|&quot;RB=&lt;/Status&gt;&quot;|&quot;Search=Body&quot;|&quot;IgnoreRedirections=Yes&quot;|&quot;NotFound=WARNING&quot;|</stringProp>
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">Status</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;Status&gt;(.*?)&lt;/Status&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">null</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Error_Code" enabled="true">
                  <stringProp name="TestPlan.comments">&quot;Error_Code&quot;|&quot;LB=&lt;Code&gt;&quot;|&quot;RB=&lt;/Code&gt;&quot;|&quot;Search=Body&quot;|&quot;IgnoreRedirections=Yes&quot;|&quot;NotFound=WARNING&quot;|</stringProp>
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">Error_Code</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;Code&gt;(.*?)&lt;/Code&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">null</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Error_Description" enabled="true">
                  <stringProp name="TestPlan.comments">&quot;Error_Description&quot;|&quot;LB=&lt;Description&gt;&quot;|&quot;RB=&lt;/Description&gt;&quot;|&quot;Search=Body&quot;|&quot;IgnoreRedirections=Yes&quot;|&quot;NotFound=WARNING&quot;|</stringProp>
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">Error_Description</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;Description&gt;(.*?)&lt;/Description&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">null</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor-responsecode" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">code</stringProp>
                  <stringProp name="RegexExtractor.refname">responsecode</stringProp>
                  <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">0</stringProp>
                  <stringProp name="RegexExtractor.match_number"></stringProp>
                </RegexExtractor>
                <hashTree/>
                <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">
int rescode=Integer.parseInt(vars.get(&quot;responsecode&quot;));

String Stat=vars.get(&quot;Status&quot;);

// if we get a sucessful http response from web service
if (rescode == 200)
{	//error if no results found
	if (Stat.equals(&quot;success&quot;))
	{
		// HTTP 200 response and web service returned success reponse
		log.info(&quot;Results found as expected for Claim Number:&quot;+ vars.get(&quot;Claim_Number&quot;));
		prev.setSuccessful(true);
	}
	else 
	{
		// HTTP 200 response and web service returned a non success reponse
		log.error(&quot;HTTP Reponse 200 but unsucessful response. Status Description = &quot;+vars.get(&quot;Error_Description&quot;)+&quot;, for Policy Number&quot;+ vars.get(&quot;Policy_ID&quot;)+&quot; with DOL&quot;);
		prev.setSuccessful(false);
	}
	
}
else
{
	// web service did not return http 200
	log.error(&quot;HTTP Reponse not 200 OK&quot;);
	prev.setSuccessful(false);
	//setOnErrorStartNextLoop(true);
	//ctx.setRestartNextLoop(true);
}



</stringProp>
                </BeanShellPostProcessor>
                <hashTree/>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ThinkTime - 10" enabled="true">
                <stringProp name="TestPlan.comments">This transaction will wait for 10 seconds</stringProp>
              </GenericController>
              <hashTree>
                <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="ThinkTime" enabled="true">
                  <stringProp name="ConstantTimer.delay">10000</stringProp>
                  <stringProp name="TestPlan.comments">   Converting seconds to milliseconds - 10s x 1000</stringProp>
                </ConstantTimer>
                <hashTree/>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
                <stringProp name="IfController.condition">${responsecode} == 0</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Module Controller" enabled="true">
                  <collectionProp name="ModuleController.node_path">
                    <stringProp name="-1227702913">WorkBench</stringProp>
                    <stringProp name="764597751">Test Plan</stringProp>
                    <stringProp name="-1146421865">CNG_TP112_eService_FNOL_Hit_Parked_Insured</stringProp>
                    <stringProp name="81515">RUN</stringProp>
                    <stringProp name="-1056123709">-Action</stringProp>
                    <stringProp name="1191940651">TP112_250_eService_Cancel_Claim</stringProp>
                  </collectionProp>
                </ModuleController>
                <hashTree/>
              </hashTree>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="TP112_220_eService_Create_Insurance_Co" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="EService_Create_Insurance_Co" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:icon=&quot;http://pm.lmig.com/cl/ContactMediationLibrary/iContactServiceImport&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:do=&quot;http://pm.lmig.com/cl/contact/model/domain&quot;&gt;   &lt;soap:Header/&gt;   &lt;soap:Body&gt;      &lt;icon:createContact&gt;         &lt;CreateContactRequest&gt;            &lt;RequestId&gt;?&lt;/RequestId&gt;            &lt;Requestor&gt;eService&lt;/Requestor&gt;            &lt;UserID&gt;?&lt;/UserID&gt;            &lt;Contact xsi:type=&quot;do:InsuranceCompany&quot;&gt;               &lt;Role&gt;                  &lt;RoleName&gt;insurancecompany&lt;/RoleName&gt;                  &lt;Active&gt;true&lt;/Active&gt;                  &lt;Comments/&gt;               &lt;/Role&gt;               &lt;CompanyName&gt;Allstate&lt;/CompanyName&gt;               &lt;PreferredInd&gt;false&lt;/PreferredInd&gt;               &lt;MasterProviderIndicator&gt;false&lt;/MasterProviderIndicator&gt;            &lt;/Contact&gt;            &lt;ClaimNumber&gt;${Claim_Number}&lt;/ClaimNumber&gt;         &lt;/CreateContactRequest&gt;      &lt;/icon:createContact&gt;   &lt;/soap:Body&gt;&lt;/soap:Envelope&gt;</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">https://${ENVIRONMENT}-pmclaims-esb-contact-internal.libertyec.com/ContactMediationModuleWeb/sca/ContactServiceExport</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Status" enabled="true">
                  <stringProp name="TestPlan.comments">&quot;Status&quot;|&quot;LB=&lt;Status&gt;&quot;|&quot;RB=&lt;/Status&gt;&quot;|&quot;Search=Body&quot;|&quot;IgnoreRedirections=Yes&quot;|&quot;NotFound=WARNING&quot;|</stringProp>
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">Status</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;Status&gt;(.*?)&lt;/Status&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">null</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Insurance_Contact_ID" enabled="true">
                  <stringProp name="TestPlan.comments">&quot;Insurance_Contact_ID&quot;|&quot;LB=&lt;Contact xsi:type=\&quot;do:InsuranceCompany\&quot;&gt;&lt;Id&gt;&quot;|&quot;RB=&lt;/Id&gt;&quot;|&quot;Search=Body&quot;|&quot;IgnoreRedirections=Yes&quot;|&quot;NotFound=WARNING&quot;|</stringProp>
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">Insurance_Contact_ID</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;Contact xsi:type=\&quot;do:InsuranceCompany\&quot;&gt;&lt;Id&gt;(.*?)&lt;/Id&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">null</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Error_Code" enabled="true">
                  <stringProp name="TestPlan.comments">&quot;Error_Code&quot;|&quot;LB=&lt;Code&gt;&quot;|&quot;RB=&lt;/Code&gt;&quot;|&quot;Search=Body&quot;|&quot;IgnoreRedirections=Yes&quot;|&quot;NotFound=WARNING&quot;|</stringProp>
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">Error_Code</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;Code&gt;(.*?)&lt;/Code&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">null</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Error_Description" enabled="true">
                  <stringProp name="TestPlan.comments">&quot;Error_Description&quot;|&quot;LB=&lt;Description&gt;&quot;|&quot;RB=&lt;/Description&gt;&quot;|&quot;Search=ALL&quot;|&quot;IgnoreRedirections=Yes&quot;|&quot;NotFound=WARNING&quot;|</stringProp>
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">Error_Description</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;Description&gt;(.*?)&lt;/Description&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">null</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor-responsecode" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">code</stringProp>
                  <stringProp name="RegexExtractor.refname">responsecode</stringProp>
                  <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">0</stringProp>
                  <stringProp name="RegexExtractor.match_number"></stringProp>
                </RegexExtractor>
                <hashTree/>
                <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">
int rescode=Integer.parseInt(vars.get(&quot;responsecode&quot;));

String Stat=vars.get(&quot;Status&quot;);

// if we get a sucessful http response from web service
if (rescode == 200)
{	//error if no results found
	if (Stat.equals(&quot;success&quot;))
	{
		// HTTP 200 response and web service returned success reponse
		log.info(&quot;Results found as expected for Claim Number:&quot;+ vars.get(&quot;Claim_Number&quot;));
		prev.setSuccessful(true);
	}
	else 
	{
		// HTTP 200 response and web service returned a non success reponse
		log.error(&quot;HTTP Reponse 200 but unsucessful response. Status Description = &quot;+vars.get(&quot;Error_Description&quot;)+&quot;, for Policy Number&quot;+ vars.get(&quot;Policy_ID&quot;)+&quot; with DOL&quot;);
		prev.setSuccessful(false);
	}
	
}
else
{
	// web service did not return http 200
	log.error(&quot;HTTP Reponse not 200 OK&quot;);
	prev.setSuccessful(false);
	//setOnErrorStartNextLoop(true);
	//ctx.setRestartNextLoop(true);
}



</stringProp>
                </BeanShellPostProcessor>
                <hashTree/>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ThinkTime - 10" enabled="true">
                <stringProp name="TestPlan.comments">This transaction will wait for 10 seconds</stringProp>
              </GenericController>
              <hashTree>
                <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="ThinkTime" enabled="true">
                  <stringProp name="ConstantTimer.delay">10000</stringProp>
                  <stringProp name="TestPlan.comments">   Converting seconds to milliseconds - 10s x 1000</stringProp>
                </ConstantTimer>
                <hashTree/>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
                <stringProp name="IfController.condition">${responsecode} == 0</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Module Controller" enabled="true">
                  <collectionProp name="ModuleController.node_path">
                    <stringProp name="-1227702913">WorkBench</stringProp>
                    <stringProp name="764597751">Test Plan</stringProp>
                    <stringProp name="-1146421865">CNG_TP112_eService_FNOL_Hit_Parked_Insured</stringProp>
                    <stringProp name="81515">RUN</stringProp>
                    <stringProp name="-1056123709">-Action</stringProp>
                    <stringProp name="1191940651">TP112_250_eService_Cancel_Claim</stringProp>
                  </collectionProp>
                </ModuleController>
                <hashTree/>
              </hashTree>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="TP112_230_eService_Create_Other_Coverage" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="EService_Create_Other_Coverage" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:icon=&quot;http://pm.lmig.com/cl/ContactMediationLibrary/iContactServiceImport&quot;&gt;   &lt;soap:Header/&gt;   &lt;soap:Body&gt;      &lt;icon:createOtherCoverageDetail&gt;         &lt;CreateOtherCoverageDetailRequest&gt;            &lt;RequestId&gt;?&lt;/RequestId&gt;            &lt;Requestor&gt;eService&lt;/Requestor&gt;            &lt;UserID&gt;?&lt;/UserID&gt;            &lt;ContactId&gt;${3rd_Party_Contact_ID}&lt;/ContactId&gt;            &lt;OtherCoverageDetail&gt;               &lt;InsurerId&gt;${Insurance_Contact_ID}&lt;/InsurerId&gt;            &lt;/OtherCoverageDetail&gt;         &lt;/CreateOtherCoverageDetailRequest&gt;      &lt;/icon:createOtherCoverageDetail&gt;   &lt;/soap:Body&gt;&lt;/soap:Envelope&gt;</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">https://${ENVIRONMENT}-pmclaims-esb-contact-internal.libertyec.com/ContactMediationModuleWeb/sca/ContactServiceExport</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Status" enabled="true">
                  <stringProp name="TestPlan.comments">&quot;Status&quot;|&quot;LB=&lt;Status&gt;&quot;|&quot;RB=&lt;/Status&gt;&quot;|&quot;Search=Body&quot;|&quot;IgnoreRedirections=Yes&quot;|&quot;NotFound=WARNING&quot;|</stringProp>
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">Status</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;Status&gt;(.*?)&lt;/Status&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">null</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Error_Code" enabled="true">
                  <stringProp name="TestPlan.comments">&quot;Error_Code&quot;|&quot;LB=&lt;Code&gt;&quot;|&quot;RB=&lt;/Code&gt;&quot;|&quot;Search=Body&quot;|&quot;IgnoreRedirections=Yes&quot;|&quot;NotFound=WARNING&quot;|</stringProp>
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">Error_Code</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;Code&gt;(.*?)&lt;/Code&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">null</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Error_Description" enabled="true">
                  <stringProp name="TestPlan.comments">&quot;Error_Description&quot;|&quot;LB=&lt;Description&gt;&quot;|&quot;RB=&lt;/Description&gt;&quot;|&quot;Search=ALL&quot;|&quot;IgnoreRedirections=Yes&quot;|&quot;NotFound=WARNING&quot;|</stringProp>
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">Error_Description</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;Description&gt;(.*?)&lt;/Description&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">null</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor-responsecode" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">code</stringProp>
                  <stringProp name="RegexExtractor.refname">responsecode</stringProp>
                  <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">0</stringProp>
                  <stringProp name="RegexExtractor.match_number"></stringProp>
                </RegexExtractor>
                <hashTree/>
                <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">
int rescode=Integer.parseInt(vars.get(&quot;responsecode&quot;));

String Stat=vars.get(&quot;Status&quot;);

// if we get a sucessful http response from web service
if (rescode == 200)
{	//error if no results found
	if (Stat.equals(&quot;success&quot;))
	{
		// HTTP 200 response and web service returned success reponse
		log.info(&quot;Results found as expected for Claim Number:&quot;+ vars.get(&quot;Claim_Number&quot;));
		prev.setSuccessful(true);
	}
	else 
	{
		// HTTP 200 response and web service returned a non success reponse
		log.error(&quot;HTTP Reponse 200 but unsucessful response. Status Description = &quot;+vars.get(&quot;Error_Description&quot;)+&quot;, for Policy Number&quot;+ vars.get(&quot;Policy_ID&quot;)+&quot; with DOL&quot;);
		prev.setSuccessful(false);
	}
	
}
else
{
	// web service did not return http 200
	log.error(&quot;HTTP Reponse not 200 OK&quot;);
	prev.setSuccessful(false);
	//setOnErrorStartNextLoop(true);
	//ctx.setRestartNextLoop(true);
}



</stringProp>
                </BeanShellPostProcessor>
                <hashTree/>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ThinkTime - 10" enabled="true">
                <stringProp name="TestPlan.comments">This transaction will wait for 10 seconds</stringProp>
              </GenericController>
              <hashTree>
                <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="ThinkTime" enabled="true">
                  <stringProp name="ConstantTimer.delay">10000</stringProp>
                  <stringProp name="TestPlan.comments">   Converting seconds to milliseconds - 10s x 1000</stringProp>
                </ConstantTimer>
                <hashTree/>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
                <stringProp name="IfController.condition">${responsecode} == 0</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Module Controller" enabled="true">
                  <collectionProp name="ModuleController.node_path">
                    <stringProp name="-1227702913">WorkBench</stringProp>
                    <stringProp name="764597751">Test Plan</stringProp>
                    <stringProp name="-1146421865">CNG_TP112_eService_FNOL_Hit_Parked_Insured</stringProp>
                    <stringProp name="81515">RUN</stringProp>
                    <stringProp name="-1056123709">-Action</stringProp>
                    <stringProp name="1191940651">TP112_250_eService_Cancel_Claim</stringProp>
                  </collectionProp>
                </ModuleController>
                <hashTree/>
              </hashTree>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="TP112_240_eService_Register_Claim" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="EService_Register_Claim" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:ifn=&quot;http://pm.lmig.com/cl/FNOLMediationLibrary/iFNOLServiceExport&quot;&gt;   &lt;soap:Header/&gt;   &lt;soap:Body&gt;      &lt;ifn:registerClaim&gt;         &lt;RegisterClaimRequest&gt;            &lt;RequestId&gt;?&lt;/RequestId&gt;            &lt;Requestor&gt;eService&lt;/Requestor&gt;            &lt;UserID&gt;?&lt;/UserID&gt;            &lt;ClaimNumber&gt;${Claim_Number}&lt;/ClaimNumber&gt;         &lt;/RegisterClaimRequest&gt;      &lt;/ifn:registerClaim&gt;   &lt;/soap:Body&gt;&lt;/soap:Envelope&gt;</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">https://${ENVIRONMENT}-pmclaims-esb-fnol-internal.libertyec.com/FNOLMediationModuleWeb/sca/FNOLServiceExport</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Status" enabled="true">
                  <stringProp name="TestPlan.comments">&quot;Status&quot;|&quot;LB=&lt;Status&gt;&quot;|&quot;RB=&lt;/Status&gt;&quot;|&quot;Search=Body&quot;|&quot;IgnoreRedirections=Yes&quot;|&quot;NotFound=WARNING&quot;|</stringProp>
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">Status</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;Status&gt;(.*?)&lt;/Status&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">null</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Registered_Claim_Number" enabled="true">
                  <stringProp name="TestPlan.comments">&quot;Registered_Claim_Number&quot;|&quot;LB=&lt;ClaimNumber&gt;&quot;|&quot;RB=&lt;/ClaimNumber&gt;&quot;|&quot;Search=Body&quot;|&quot;IgnoreRedirections=Yes&quot;|&quot;NotFound=WARNING&quot;|</stringProp>
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">Registered_Claim_Number</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;ClaimNumber&gt;(.*?)&lt;/ClaimNumber&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">null</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Error_Code" enabled="true">
                  <stringProp name="TestPlan.comments">&quot;Error_Code&quot;|&quot;LB=&lt;Code&gt;&quot;|&quot;RB=&lt;/Code&gt;&quot;|&quot;Search=Body&quot;|&quot;IgnoreRedirections=Yes&quot;|&quot;NotFound=WARNING&quot;|</stringProp>
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">Error_Code</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;Code&gt;(.*?)&lt;/Code&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">null</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Error_Description" enabled="true">
                  <stringProp name="TestPlan.comments">&quot;Error_Description&quot;|&quot;LB=&lt;Description&gt;&quot;|&quot;RB=&lt;/Description&gt;&quot;|&quot;Search=Body&quot;|&quot;IgnoreRedirections=Yes&quot;|&quot;NotFound=WARNING&quot;|</stringProp>
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">Error_Description</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;Description&gt;(.*?)&lt;/Description&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">null</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor-responsecode" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">code</stringProp>
                  <stringProp name="RegexExtractor.refname">responsecode</stringProp>
                  <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">0</stringProp>
                  <stringProp name="RegexExtractor.match_number"></stringProp>
                </RegexExtractor>
                <hashTree/>
                <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">
int rescode=Integer.parseInt(vars.get(&quot;responsecode&quot;));

String Stat=vars.get(&quot;Status&quot;);

// if we get a sucessful http response from web service
if (rescode == 200)
{	//error if no results found
	if (Stat.equals(&quot;success&quot;))
	{
		// HTTP 200 response and web service returned success reponse
		log.info(&quot;Results found as expected for Claim Number:&quot;+ vars.get(&quot;Claim_Number&quot;));
		prev.setSuccessful(true);
	}
	else 
	{
		// HTTP 200 response and web service returned a non success reponse
		log.error(&quot;HTTP Reponse 200 but unsucessful response. Status Description = &quot;+vars.get(&quot;Error_Description&quot;)+&quot;, for Policy Number&quot;+ vars.get(&quot;Policy_ID&quot;)+&quot; with DOL&quot;);
		prev.setSuccessful(false);
	}
	
}
else
{
	// web service did not return http 200
	log.error(&quot;HTTP Reponse not 200 OK&quot;);
	prev.setSuccessful(false);
	//setOnErrorStartNextLoop(true);
	//ctx.setRestartNextLoop(true);
}



</stringProp>
                </BeanShellPostProcessor>
                <hashTree/>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ThinkTime - 10" enabled="true">
                <stringProp name="TestPlan.comments">This transaction will wait for 10 seconds</stringProp>
              </GenericController>
              <hashTree>
                <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="ThinkTime" enabled="true">
                  <stringProp name="ConstantTimer.delay">10000</stringProp>
                  <stringProp name="TestPlan.comments">   Converting seconds to milliseconds - 10s x 1000</stringProp>
                </ConstantTimer>
                <hashTree/>
              </hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor-responsecode" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">code</stringProp>
                <stringProp name="RegexExtractor.refname">responsecode</stringProp>
                <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">0</stringProp>
                <stringProp name="RegexExtractor.match_number"></stringProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">
int rescode=Integer.parseInt(vars.get(&quot;responsecode&quot;));

String Stat=vars.get(&quot;Status&quot;);

// if we get a sucessful http response from web service
if (rescode == 200)
{	//error if no results found
	if (Stat.equals(&quot;success&quot;))
	{
		// HTTP 200 response and web service returned success reponse
		log.info(&quot;Results found as expected for Claim Number:&quot;+ vars.get(&quot;Claim_Number&quot;));
		prev.setSuccessful(true);
	}
	else 
	{
		// HTTP 200 response and web service returned a non success reponse
		log.error(&quot;HTTP Reponse 200 but unsucessful response. Status Description = &quot;+vars.get(&quot;Error_Description&quot;)+&quot;, for Policy Number&quot;+ vars.get(&quot;Policy_ID&quot;)+&quot; with DOL&quot;);
		prev.setSuccessful(false);
	}
	
}
else
{
	// web service did not return http 200
	log.error(&quot;HTTP Reponse not 200 OK&quot;);
	prev.setSuccessful(false);
	//setOnErrorStartNextLoop(true);
	//ctx.setRestartNextLoop(true);
}



</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
                <stringProp name="IfController.condition">${responsecode} == 0</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Module Controller" enabled="true">
                  <collectionProp name="ModuleController.node_path">
                    <stringProp name="-1227702913">WorkBench</stringProp>
                    <stringProp name="764597751">Test Plan</stringProp>
                    <stringProp name="-1146421865">CNG_TP112_eService_FNOL_Hit_Parked_Insured</stringProp>
                    <stringProp name="81515">RUN</stringProp>
                    <stringProp name="-1056123709">-Action</stringProp>
                    <stringProp name="1191940651">TP112_250_eService_Cancel_Claim</stringProp>
                  </collectionProp>
                </ModuleController>
                <hashTree/>
              </hashTree>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="TP112_250_eService_Cancel_Claim" enabled="false">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="EService_Cancel_Claim" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:ifn=&quot;http://pm.lmig.com/cl/FNOLMediationLibrary/iFNOLServiceExport&quot;&gt;   &lt;soap:Header/&gt;   &lt;soap:Body&gt;      &lt;ifn:cancelClaim&gt;         &lt;CancelClaimRequest&gt;            &lt;RequestId&gt;?&lt;/RequestId&gt;            &lt;Requestor&gt;eService&lt;/Requestor&gt;            &lt;UserID&gt;?&lt;/UserID&gt;            &lt;ClaimNumber&gt;${Claim_Number}&lt;/ClaimNumber&gt;         &lt;/CancelClaimRequest&gt;      &lt;/ifn:cancelClaim&gt;   &lt;/soap:Body&gt;&lt;/soap:Envelope&gt;</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">https://${ENVIRONMENT}-pmclaims-esb-fnol-internal.libertyec.com/FNOLMediationModuleWeb/sca/FNOLServiceExport</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Status" enabled="true">
                  <stringProp name="TestPlan.comments">&quot;Status&quot;|&quot;LB=&lt;Status&gt;&quot;|&quot;RB=&lt;/Status&gt;&quot;|&quot;Search=Body&quot;|&quot;IgnoreRedirections=Yes&quot;|&quot;NotFound=WARNING&quot;|</stringProp>
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">Status</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;Status&gt;(.*?)&lt;/Status&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">null</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Error_Code" enabled="true">
                  <stringProp name="TestPlan.comments">&quot;Error_Code&quot;|&quot;LB=&lt;Code&gt;&quot;|&quot;RB=&lt;/Code&gt;&quot;|&quot;Search=Body&quot;|&quot;IgnoreRedirections=Yes&quot;|&quot;NotFound=WARNING&quot;|</stringProp>
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">Error_Code</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;Code&gt;(.*?)&lt;/Code&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">null</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Error_Description" enabled="true">
                  <stringProp name="TestPlan.comments">&quot;Error_Description&quot;|&quot;LB=&lt;Description&gt;&quot;|&quot;RB=&lt;/Description&gt;&quot;|&quot;Search=Body&quot;|&quot;IgnoreRedirections=Yes&quot;|&quot;NotFound=WARNING&quot;|</stringProp>
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">Error_Description</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;Description&gt;(.*?)&lt;/Description&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">null</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">code</stringProp>
                  <stringProp name="RegexExtractor.refname">responsecode</stringProp>
                  <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">0</stringProp>
                  <stringProp name="RegexExtractor.match_number"></stringProp>
                </RegexExtractor>
                <hashTree/>
                <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">
int rescode=Integer.parseInt(vars.get(&quot;responsecode&quot;));
log.info(&quot;the response code is &quot;+ rescode);
String Stat=vars.get(&quot;Status&quot;);

// if we get a sucessful http response from web service
if (rescode == 200)
{	//error if no results found
	if (Stat.equals(&quot;success&quot;))
	{
		// HTTP 200 response and web service returned success reponse
		log.info(&quot;Results found as expected for Claim Number:&quot;+ vars.get(&quot;Claim_Number&quot;));
		prev.setSuccessful(true);
		ctx.setRestartNextLoop(true);
	}
	else 
	{
		// HTTP 200 response and web service returned a non success reponse
		log.error(&quot;HTTP Reponse 200 but unsucessful response. Status Description = &quot;+vars.get(&quot;Error_Description&quot;)+&quot;, for Policy Number&quot;+ vars.get(&quot;Policy_ID&quot;)+&quot; with DOL&quot;);
		prev.setSuccessful(false);
		ctx.setRestartNextLoop(true);
	}
	
}
else
{
	// web service did not return http 200
	log.error(&quot;HTTP Reponse not 200 OK&quot;);
	prev.setSuccessful(false);
	//setOnErrorStartNextLoop(true);
	ctx.setRestartNextLoop(true);
}



</stringProp>
                </BeanShellPostProcessor>
                <hashTree/>
              </hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="OutPut Message" enabled="false">
                <stringProp name="TestPlan.comments">&quot;Registered Claim = %s&quot;,lr_eval_string(&quot;{Registered_Claim_Number}&quot;) | </stringProp>
                <stringProp name="BeanShellSampler.query">log.info(&quot;&quot;+&quot;Registered Claim = ${Registered_Claim_Number}&quot;);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
                <stringProp name="IfController.condition"></stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree/>
            </hashTree>
            <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable" enabled="true">
              <stringProp name="variableName">RANDOM_ODOMETER</stringProp>
              <stringProp name="outputFormat"></stringProp>
              <stringProp name="minimumValue">1000</stringProp>
              <stringProp name="maximumValue">20000</stringProp>
              <stringProp name="randomSeed"></stringProp>
              <boolProp name="perThread">false</boolProp>
            </RandomVariableConfig>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Defined Parameters" enabled="true">
              <boolProp name="UserParameters.per_iteration">false</boolProp>
              <collectionProp name="UserParameters.names">
                <stringProp name="2.9033447135822076E7"> HTTPCodeOutput</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-1152391528">
                  <stringProp name="6.224037482582092E7">HttpRetCode</stringProp>
                </collectionProp>
              </collectionProp>
              <stringProp name="TestPlan.comments">HttpRetCode, &quot;HTTPCodeOutput&quot; | </stringProp>
            </UserParameters>
            <hashTree/>
          </hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">text/xml+soap</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Pacing" enabled="true">
          <stringProp name="ConstantTimer.delay">1</stringProp>
          <stringProp name="TestPlan.comments">   Converting seconds to milliseconds - 60s x 1000</stringProp>
        </ConstantTimer>
        <hashTree/>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="CookieManager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">false</boolProp>
        </CookieManager>
        <hashTree/>
        <CacheManager guiclass="CacheManagerGui" testclass="CacheManager" testname="HTTP Cache Manager" enabled="true">
          <boolProp name="clearEachIteration">false</boolProp>
          <boolProp name="useExpires">false</boolProp>
        </CacheManager>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="filename">ENVIRONMENT.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="filename">TP112.csv</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">false</boolProp>
          <stringProp name="shareMode.all">shareMode</stringProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="filename">VEHICLE.csv</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">false</boolProp>
          <stringProp name="shareMode.all">shareMode</stringProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
            </value>
          </objProp>
          <stringProp name="filename">SummReport_CNG_TP112_eService_FNOL_Hit_Parked_Insured.csv</stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
