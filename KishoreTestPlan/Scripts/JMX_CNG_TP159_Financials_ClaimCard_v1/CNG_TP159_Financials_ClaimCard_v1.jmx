<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="2.8" jmeter="2.13 r1665067">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="reportTarget" elementType="Argument">
            <stringProp name="Argument.name">reportTarget</stringProp>
            <stringProp name="Argument.value">C:\Users\n0291101\Documents\Aurele\01.Projects\01.Claims_ScriptMigration_LR_to_Jmeter\02.Scripts\03.Jmeter_EnhancingScripts\JMX_CNG_TP159_Financials_ClaimCard_v1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="CNG_TP159_Financials_ClaimCard_v1" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">3</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">10</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1455260938000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <longProp name="ThreadGroup.end_time">0</longProp>
      </ThreadGroup>
      <hashTree>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="CookieManager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">true</boolProp>
        </CookieManager>
        <hashTree/>
        <CacheManager guiclass="CacheManagerGui" testclass="CacheManager" testname="HTTP Cache Manager" enabled="true">
          <boolProp name="clearEachIteration">true</boolProp>
          <boolProp name="useExpires">false</boolProp>
        </CacheManager>
        <hashTree/>
        <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Defined Parameters" enabled="true">
          <boolProp name="UserParameters.per_iteration">false</boolProp>
          <collectionProp name="UserParameters.names"/>
          <collectionProp name="UserParameters.thread_values">
            <collectionProp name="1"/>
          </collectionProp>
        </UserParameters>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="filename">TP159.csv</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <stringProp name="shareMode.all">shareMode</stringProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="filename">nNumbers.csv</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <stringProp name="shareMode.all">shareMode</stringProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="filename">SERVER.csv</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <stringProp name="shareMode.all">shareMode</stringProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="filename">TP159CardPackageID.csv</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <stringProp name="shareMode.all">shareMode</stringProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Pacing" enabled="true">
          <stringProp name="ConstantTimer.delay">1</stringProp>
          <stringProp name="TestPlan.comments">   Converting seconds to milliseconds - 60s x 1000</stringProp>
        </ConstantTimer>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP159_A_Launch_Browser" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">https://${SERVER}/cc/ClaimCenter.do</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Host</stringProp>
                  <stringProp name="Header.value">${SERVER}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cSMAGENTNAME" enabled="true">
              <stringProp name="TestPlan.comments">&quot;ParamName=cSMAGENTNAME&quot;|&quot;RegExp=SMAGENTNAME=(.*?)&amp;TARGET&quot;|SEARCH_FILTERS,&quot;Scope=Headers&quot;|&quot;IgnoreRedirections=No&quot;|&quot;RequestUrl=*/ClaimCenter.do*&quot;|</stringProp>
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">cSMAGENTNAME</stringProp>
              <stringProp name="RegexExtractor.regex">SMAGENTNAME=(.*?)&amp;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">null</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cTYPE" enabled="true">
              <stringProp name="TestPlan.comments">&quot;ParamName=cTYPE&quot;|&quot;RegExp=TYPE=(.*?)&amp;REALMOID&quot;|SEARCH_FILTERS,&quot;Scope=Headers&quot;|&quot;IgnoreRedirections=No&quot;|&quot;RequestUrl=*/ClaimCenter.do*&quot;|</stringProp>
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">cTYPE</stringProp>
              <stringProp name="RegexExtractor.regex">TYPE=(.*?)&amp;amp;REALMOID</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">null</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cREALMOID" enabled="true">
              <stringProp name="TestPlan.comments">&quot;ParamName=cREALMOID&quot;|&quot;RegExp=REALMOID=(.*?)&amp;GUID&quot;|SEARCH_FILTERS,&quot;Scope=Headers&quot;|&quot;IgnoreRedirections=No&quot;|&quot;RequestUrl=*/ClaimCenter.do*&quot;|</stringProp>
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">cREALMOID</stringProp>
              <stringProp name="RegexExtractor.regex">REALMOID=(.*?)&amp;amp;GUID</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">null</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="responsecode" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">code</stringProp>
              <stringProp name="RegexExtractor.refname">responsecode</stringProp>
              <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">0</stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="TextCheck" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">TextCheck</stringProp>
              <stringProp name="RegexExtractor.regex">SMAGENTNAME=(.*?)&amp;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">null</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="LOGGER" enabled="false">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">
//log.info(&quot;Request XML - &quot;+prev.getSamplerData());
//log.info(&quot;Response From Server - &quot;+prev.getResponseDataAsString());

String cSMAGENTNAME=vars.get(&quot;cSMAGENTNAME&quot;);
log.info(&quot;cSMAGENTNAME - &quot;+cSMAGENTNAME);
String cTYPE=vars.get(&quot;cTYPE&quot;);
log.info(&quot;cTYPE - &quot;+cTYPE);
String cREALMOID=vars.get(&quot;cREALMOID&quot;);
log.info(&quot;cREALMOID - &quot;+cREALMOID);
log.info(&quot;#####################__A&quot;);</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">int rescode=Integer.parseInt(vars.get(&quot;responsecode&quot;));
String Stat=vars.get(&quot;TextCheck&quot;);
// if we get a sucessful http response from web service
if (rescode &gt;= 200 &amp;&amp; rescode &lt; 400)
{	//error if no results found
	if (!Stat.equals(&quot;null&quot;))
	{	
		// Login page displayed successfully.
		prev.setSuccessful(true);
	}
	else 
	{
		//Launch page is not display successfully
		log.error(&quot;Transaction Name :CNG_TP159_A_Launch_Browser ##&quot;+&quot;Login ID and Password:&quot;+vars.get(&quot;USERNAME&quot;)+&quot; &quot;+vars.get(&quot;PASSWORD&quot;)+&quot;##&quot;+&quot;Request XML:&quot;+prev.getSamplerData()+&quot;##&quot;+&quot;HTTP Response Code:&quot;+vars.get(&quot;responsecode&quot;)+&quot;##&quot;+&quot;Response From Server : &quot;+prev.getResponseDataAsString());
		prev.setSuccessful(false);
		ctx.setRestartNextLoop(true);
}
}
else
{

//response is not 200
	log.error(&quot;Transaction Name :CNG_TP159_A_Launch_Browser ##&quot;+&quot;Login ID and Password:&quot;+vars.get(&quot;USERNAME&quot;)+&quot; &quot;+vars.get(&quot;PASSWORD&quot;)+&quot;##&quot;+&quot;Request XML:&quot;+prev.getSamplerData()+&quot;##&quot;+&quot;HTTP Response Code:&quot;+vars.get(&quot;responsecode&quot;)+&quot;##&quot;+&quot;Response From Server : &quot;+prev.getResponseDataAsString());
	prev.setSuccessful(false);
	ctx.setRestartNextLoop(true);
}


</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ThinkTime - 10" enabled="true">
            <stringProp name="TestPlan.comments">This transaction will wait for 10 seconds</stringProp>
          </GenericController>
          <hashTree>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="ThinkTime" enabled="true">
              <stringProp name="ConstantTimer.delay">1</stringProp>
              <stringProp name="TestPlan.comments">   Converting seconds to milliseconds - 10s x 1000</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP159_B_Login" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PMClaimCenterLogin.fcc" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="USER" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">USER</stringProp>
                  <stringProp name="Argument.value">${USERNAME}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="PASSWORD" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">PASSWORD</stringProp>
                  <stringProp name="Argument.value">${PASSWORD}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="target" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">target</stringProp>
                  <stringProp name="Argument.value">http://${SERVER}/cc/ClaimCenter.do</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="smauthreason" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">smauthreason</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">https://${SERVER}/LMAuth/PMClaimCenterLogin.fcc?TYPE=${cTYPE}&amp;REALMOID=${cREALMOID}&amp;GUID=&amp;SMAUTHREASON=0&amp;METHOD=GET&amp;SMAGENTNAME=${cSMAGENTNAME}&amp;TARGET=-SM-http%3a%2f%2fperf--pmclaimcenter--internal%2elibertyec%2ecom%2fcc%2fClaimCenter%2edo</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Host</stringProp>
                  <stringProp name="Header.value">${SERVER}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cTABS_002" enabled="true">
              <stringProp name="TestPlan.comments">&quot;ParamName=cTABS_002&quot;,
		&quot;RegExp=\\{\&quot;id\&quot;:\&quot;TabBar:VacationTab\&quot;,\&quot;text\&quot;:\&quot;Vacation\&quot;,\&quot;menu\&quot;:\\{\&quot;defaultType\&quot;:\&quot;gmenuitem\&quot;},\&quot;xtype\&quot;:\&quot;gbutton\&quot;,\&quot;disabled\&quot;:true}],\&quot;checksum\&quot;:\&quot;(.*?)\&quot;}},\\{&quot;,
		SEARCH_FILTERS,
		&quot;Scope=Body&quot;,
		&quot;IgnoreRedirections=No&quot;,
		&quot;RequestUrl=*/ClaimCenter.do*&quot;,</stringProp>
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">cTABS_002</stringProp>
              <stringProp name="RegexExtractor.regex">gbutton&quot;,&quot;disabled&quot;:true}],&quot;checksum&quot;:&quot;(.*?)&quot;}},</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">null</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cINFOBAR_001" enabled="true">
              <stringProp name="TestPlan.comments">&quot;ParamName=cINFOBAR_001&quot;,
		&quot;RegExp=ktopActivitiesScreen:0\&quot;,\&quot;text\&quot;:\&quot;Activities\&quot;,\&quot;cls\&quot;:\&quot;x-panel-header-text\&quot;,\&quot;xtype\&quot;:\&quot;box\&quot;}]}]},\&quot;infoBar\&quot;:\\{\&quot;hidden\&quot;:true,\&quot;checksum\&quot;:\&quot;(.*?)\&quot;},&quot;,
		SEARCH_FILTERS,
		&quot;Scope=Body&quot;,
		&quot;IgnoreRedirections=No&quot;,
		&quot;RequestUrl=*/ClaimCenter.do*&quot;,</stringProp>
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">cINFOBAR_001</stringProp>
              <stringProp name="RegexExtractor.regex">hidden&quot;:true,&quot;checksum&quot;:&quot;(.*?)&quot;},</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">null</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cDESKTOPMENUACTIONS_001" enabled="true">
              <stringProp name="TestPlan.comments">&quot;ParamName=cDESKTOPMENUACTIONS_001&quot;,
		&quot;RegExp=Profile\&quot;}],\&quot;defaultType\&quot;:\&quot;gmenuitem\&quot;},\&quot;xtype\&quot;:\&quot;gbutton\&quot;,\&quot;noaction\&quot;:1,\&quot;checksum\&quot;:\&quot;(.*?)\&quot;,&quot;,
		SEARCH_FILTERS,
		&quot;Scope=Body&quot;,
		&quot;IgnoreRedirections=No&quot;,
		&quot;RequestUrl=*/ClaimCenter.do*&quot;,</stringProp>
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">cDESKTOPMENUACTIONS_001</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;xtype&quot;:&quot;gbutton&quot;,&quot;noaction&quot;:1,&quot;checksum&quot;:&quot;(.*?)&quot;,</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">null</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cDESKTOPMENULINKS_001" enabled="true">
              <stringProp name="TestPlan.comments">&quot;ParamName=cDESKTOPMENULINKS_001&quot;,
		&quot;RegExp=Report\&quot;,\&quot;eventId\&quot;:\&quot;Desktop:MenuLinks:Desktop_MarketingReport\&quot;}],\&quot;xtype\&quot;:\&quot;accordionpanel\&quot;,\&quot;checksum\&quot;:\&quot;(.*?)\&quot;,&quot;,
		SEARCH_FILTERS,
		&quot;Scope=Body&quot;,
		&quot;IgnoreRedirections=No&quot;,
		&quot;RequestUrl=*/ClaimCenter.do*&quot;,</stringProp>
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">cDESKTOPMENULINKS_001</stringProp>
              <stringProp name="RegexExtractor.regex">op_MarketingReport&quot;}],&quot;xtype&quot;:&quot;accordionpanel&quot;,&quot;checksum&quot;:&quot;(.*?)&quot;,</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">null</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cTABS_001" enabled="true">
              <stringProp name="TestPlan.comments">&quot;ParamName=cTABS_001&quot;|&quot;RegExp=\\{\&quot;id\&quot;:\&quot;TabBar:VacationTab\&quot;|\&quot;text\&quot;:\&quot;Vacation\&quot;|\&quot;menu\&quot;:\\{\&quot;defaultType\&quot;:\&quot;gmenuitem\&quot;},\&quot;xtype\&quot;:\&quot;gbutton\&quot;|\&quot;disabled\&quot;:true}],\&quot;checksum\&quot;:\&quot;(.*?)\&quot;}},\\{&quot;|SEARCH_FILTERS,&quot;Scope=Body&quot;|&quot;IgnoreRedirections=No&quot;|</stringProp>
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">cTABS_001</stringProp>
              <stringProp name="RegexExtractor.regex">ype&quot;:&quot;gmenuitem&quot;},&quot;xtype&quot;:&quot;gbutton&quot;,&quot;disabled&quot;:true}],&quot;checksum&quot;:&quot;(.*?)&quot;}</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">null</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cTBLINKS_001" enabled="true">
              <stringProp name="TestPlan.comments">&quot;ParamName=cTBLINKS_001&quot;|&quot;RegExp=nuitem\&quot;|\&quot;shortcut\&quot;:\&quot;Z\&quot;}],\&quot;defaultType\&quot;:\&quot;gmenuitem\&quot;},\&quot;noaction\&quot;:1,\&quot;xtype\&quot;:\&quot;gbutton\&quot;|\&quot;iconCls\&quot;:\&quot;g-preferences-icon\&quot;}],\&quot;checksum\&quot;:\&quot;(.*?)\&quot;},&quot;|SEARCH_FILTERS,&quot;Scope=Body&quot;|&quot;IgnoreRedirections=No&quot;|&quot;RequestUrl=*/ClaimCenter.do*&quot;|</stringProp>
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">cTBLINKS_001</stringProp>
              <stringProp name="RegexExtractor.regex">nuitem&quot;,&quot;shortcut&quot;:&quot;Z&quot;}],&quot;defaultType&quot;:&quot;gmenuitem&quot;},&quot;noaction&quot;:1,&quot;xtype&quot;:&quot;gbutton&quot;,&quot;iconCls&quot;:&quot;g-preferences-icon&quot;}],&quot;checksum&quot;:&quot;(.*?)&quot;},</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">null</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cMENULINKS_001" enabled="true">
              <stringProp name="TestPlan.comments">&quot;cMENULINKS_001&quot;|&quot;LB=Desktop_MarketingReport\&quot;}],\&quot;xtype\&quot;:\&quot;accordionpanel\&quot;|\&quot;checksum\&quot;:\&quot;&quot;|&quot;RB=\&quot;&quot;|</stringProp>
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">cMENULINKS_001</stringProp>
              <stringProp name="RegexExtractor.regex">Desktop_MarketingReport&quot;}],&quot;xtype&quot;:&quot;accordionpanel&quot;,&quot;checksum&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">null</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="responsecode" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">code</stringProp>
              <stringProp name="RegexExtractor.refname">responsecode</stringProp>
              <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">0</stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="TextCheck" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">TextCheck</stringProp>
              <stringProp name="RegexExtractor.regex">Guidew(.*?)e Navigator</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">null</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="LOGGER" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">
//log.info(&quot;Request XML - &quot;+prev.getSamplerData());
//log.info(&quot;Response From Server - &quot;+prev.getResponseDataAsString());

String cTABS_002=vars.get(&quot;cTABS_002&quot;);
log.info(&quot;cTABS_002 - &quot;+cTABS_002);
String cINFOBAR_001=vars.get(&quot;cINFOBAR_001&quot;);
log.info(&quot;cINFOBAR_001 - &quot;+cINFOBAR_001);
String cDESKTOPMENUACTIONS_001=vars.get(&quot;cDESKTOPMENUACTIONS_001&quot;);
log.info(&quot;cDESKTOPMENUACTIONS_001 - &quot;+cDESKTOPMENUACTIONS_001);
String cDESKTOPMENULINKS_001=vars.get(&quot;cDESKTOPMENULINKS_001&quot;);
log.info(&quot;cDESKTOPMENULINKS_001 - &quot;+cDESKTOPMENULINKS_001);
String cMENULINKS_001=vars.get(&quot;cMENULINKS_001&quot;);
log.info(&quot;cMENULINKS_001 - &quot;+cMENULINKS_001);
String cTABS_001=vars.get(&quot;cTABS_001&quot;);
log.info(&quot;cTABS_001 - &quot;+cTABS_001);
String cTBLINKS_001=vars.get(&quot;cTBLINKS_001&quot;);
log.info(&quot;cTBLINKS_001 - &quot;+cTBLINKS_001);
log.info(&quot;#####################__B&quot;);</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">String cMENULINKS_URL2 = java.net.URLEncoder.encode(vars.get(&quot;cMENULINKS_001&quot;), &quot;UTF-8&quot;);
vars.put(&quot;cMENULINKS_URL2&quot;,cMENULINKS_URL2);
String cDESKTOPMENULINKS_001_URL2 = java.net.URLEncoder.encode(vars.get(&quot;cDESKTOPMENULINKS_001&quot;), &quot;UTF-8&quot;);
vars.put(&quot;cDESKTOPMENULINKS_001_URL2&quot;,cDESKTOPMENULINKS_001_URL2);
String cDESKTOPMENUACTIONS_001_URL2 = java.net.URLEncoder.encode(vars.get(&quot;cDESKTOPMENUACTIONS_001&quot;), &quot;UTF-8&quot;);
vars.put(&quot;cDESKTOPMENUACTIONS_001_URL2&quot;,cDESKTOPMENUACTIONS_001_URL2);
String cINFOBAR_001_URL2 = java.net.URLEncoder.encode(vars.get(&quot;cINFOBAR_001&quot;), &quot;UTF-8&quot;);
vars.put(&quot;cINFOBAR_001_URL2&quot;,cINFOBAR_001_URL2);
String cTABS_002_URL2 = java.net.URLEncoder.encode(vars.get(&quot;cTABS_002&quot;), &quot;UTF-8&quot;);
vars.put(&quot;cTABS_002_URL2&quot;,cTABS_002_URL2);
String cTABS_001_URL2 = java.net.URLEncoder.encode(vars.get(&quot;cTABS_001&quot;), &quot;UTF-8&quot;);
vars.put(&quot;cTABS_001_URL2&quot;,cTABS_001_URL2);
String cTBLINKS_001_URL2 = java.net.URLEncoder.encode(vars.get(&quot;cTBLINKS_001&quot;), &quot;UTF-8&quot;);
vars.put(&quot;cTBLINKS_001_URL2&quot;,cTBLINKS_001_URL2);


int rescode=Integer.parseInt(vars.get(&quot;responsecode&quot;));
String Stat=vars.get(&quot;TextCheck&quot;);
// if we get a sucessful http response from web service
if (rescode &gt;= 200 &amp;&amp; rescode &lt; 400)
{	//error if no results found
	if (!Stat.equals(&quot;null&quot;))
	{	
		// Login page displayed successfully.
		prev.setSuccessful(true);
	}
	else 
	{
		//Launch page is not display successfully
		log.error(&quot;Transaction Name :CNG_TP159_B_Login ##&quot;+&quot;Login ID and Password:&quot;+vars.get(&quot;USERNAME&quot;)+&quot; &quot;+vars.get(&quot;PASSWORD&quot;)+&quot;##&quot;+&quot;Request XML:&quot;+prev.getSamplerData()+&quot;##&quot;+&quot;HTTP Response Code:&quot;+vars.get(&quot;responsecode&quot;)+&quot;##&quot;+&quot;Response From Server : &quot;+prev.getResponseDataAsString());
		prev.setSuccessful(false);
		ctx.setRestartNextLoop(true);
}
}
else
{

//response is not 200
	log.error(&quot;Transaction Name :CNG_TP159_B_Login ##&quot;+&quot;Login ID and Password:&quot;+vars.get(&quot;USERNAME&quot;)+&quot; &quot;+vars.get(&quot;PASSWORD&quot;)+&quot;##&quot;+&quot;Request XML:&quot;+prev.getSamplerData()+&quot;##&quot;+&quot;HTTP Response Code:&quot;+vars.get(&quot;responsecode&quot;)+&quot;##&quot;+&quot;Response From Server : &quot;+prev.getResponseDataAsString());
	prev.setSuccessful(false);
	ctx.setRestartNextLoop(true);
}


</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="LOGGER" enabled="false">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">
//log.info(&quot;Request XML - &quot;+prev.getSamplerData());
//log.info(&quot;Response From Server - &quot;+prev.getResponseDataAsString());

String cMENULINKS_URL2=vars.get(&quot;cMENULINKS_URL2&quot;);
log.info(&quot;cMENULINKS_URL2 - &quot;+cMENULINKS_URL2);
String cDESKTOPMENULINKS_001_URL2=vars.get(&quot;cDESKTOPMENULINKS_001_URL2&quot;);
log.info(&quot;cDESKTOPMENULINKS_001_URL2 - &quot;+cDESKTOPMENULINKS_001_URL2);
String cDESKTOPMENUACTIONS_001_URL2=vars.get(&quot;cDESKTOPMENUACTIONS_001_URL2&quot;);
log.info(&quot;cDESKTOPMENUACTIONS_001_URL2 - &quot;+cDESKTOPMENUACTIONS_001_URL2);
String cINFOBAR_001_URL2=vars.get(&quot;cINFOBAR_001_URL2&quot;);
log.info(&quot;cINFOBAR_001_URL2 - &quot;+cINFOBAR_001_URL2);
String cTABS_001_URL2=vars.get(&quot;cTABS_001_URL2&quot;);
log.info(&quot;cTABS_001_URL2 - &quot;+cTABS_001_URL2);
String cTABS_002_URL2=vars.get(&quot;cTABS_002_URL2&quot;);
log.info(&quot;cTABS_002_URL2 - &quot;+cTABS_002_URL2);
String cTBLINKS_001_URL2=vars.get(&quot;cTBLINKS_001_URL2&quot;);
log.info(&quot;cTBLINKS_001_URL2 - &quot;+cTBLINKS_001_URL2);

log.info(&quot;#####################__B1&quot;);</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ThinkTime - 10" enabled="true">
            <stringProp name="TestPlan.comments">This transaction will wait for 10 seconds</stringProp>
          </GenericController>
          <hashTree>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="ThinkTime" enabled="true">
              <stringProp name="ConstantTimer.delay">1</stringProp>
              <stringProp name="TestPlan.comments">   Converting seconds to milliseconds - 10s x 1000</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP159_C_Go_To_Claim_Summary" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_2" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">TabBar%3AClaimTab%3AClaimTab_FindClaim=${CLAIMNUMBER}&amp;QuickJump=&amp;Desktop%3AMenuLinks_toggle=&amp;DesktopActivities%3ADesktopActivitiesScreen%3ADesktopActivitiesLV%3ADesktopActivitiesFilter=AndFilter%2FMy%20activities%20today&amp;%3Atblinks=${cTBLINKS_001_URL2}&amp;%3Atabs=${cTABS_002_URL2}&amp;infoBar=${cINFOBAR_001_URL2}&amp;Desktop%3ADesktopMenuActions=${cDESKTOPMENUACTIONS_001_URL2}&amp;Desktop%3AMenuLinks=${cDESKTOPMENULINKS_001_URL2}&amp;csrfToken=&amp;eventSource=TabBar%3AClaimTab%3AClaimTab_FindClaim_Button_act&amp;objFocusId=TabBar%3AClaimTab%3AClaimTab_FindClaim</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">https://${SERVER}/cc/ClaimCenter.do</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Host</stringProp>
                  <stringProp name="Header.value">${SERVER}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cCLAIMMENUACTIONS_001" enabled="true">
              <stringProp name="TestPlan.comments">&quot;ParamName=cCLAIMMENUACTIONS_001&quot;,
		&quot;RegExp=actions\&quot;,\&quot;menu\&quot;:\\{\&quot;numEntriesPerColumn\&quot;:3,\&quot;flattened\&quot;:true,\&quot;defaultType\&quot;:\&quot;gmenuitem\&quot;},\&quot;xtype\&quot;:\&quot;gbutton\&quot;,\&quot;noaction\&quot;:1,\&quot;checksum\&quot;:\&quot;(.*?)\&quot;,&quot;,
		SEARCH_FILTERS,
		&quot;Scope=Body&quot;,
		&quot;IgnoreRedirections=No&quot;,
		&quot;NotFound=Warning&quot;,</stringProp>
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">cCLAIMMENUACTIONS_001</stringProp>
              <stringProp name="RegexExtractor.regex">,&quot;defaultType&quot;:&quot;gmenuitem&quot;},&quot;xtype&quot;:&quot;gbutton&quot;,&quot;noaction&quot;:1,&quot;checksum&quot;:&quot;(.*?)&quot;,</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">null</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cINFOBAR_002" enabled="true">
              <stringProp name="TestPlan.comments">&quot;ParamName=cINFOBAR_002&quot;,
		&quot;RegExp=\\\\/span&gt;\&quot;,\&quot;cls\&quot;:\&quot;infobar_elem\&quot;,\&quot;noaction\&quot;:1,\&quot;disabled\&quot;:true}],\&quot;checksum\&quot;:\&quot;(.*?)\&quot;},&quot;,
		SEARCH_FILTERS,
		&quot;Scope=Body&quot;,
		&quot;IgnoreRedirections=No&quot;,
		&quot;NotFound=Warning&quot;,</stringProp>
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">cINFOBAR_002</stringProp>
              <stringProp name="RegexExtractor.regex">infobar_elem&quot;,&quot;noaction&quot;:1,&quot;disabled&quot;:true}],&quot;checksum&quot;:&quot;(.*?)&quot;},&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">null</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="responsecode" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">code</stringProp>
              <stringProp name="RegexExtractor.refname">responsecode</stringProp>
              <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">0</stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="TextCheck" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">TextCheck</stringProp>
              <stringProp name="RegexExtractor.regex">Expo(.*?)res</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">null</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="LOGGER" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">
//log.info(&quot;Request XML - &quot;+prev.getSamplerData());
//log.info(&quot;Response From Server - &quot;+prev.getResponseDataAsString());

String cCLAIMMENUACTIONS_001=vars.get(&quot;cCLAIMMENUACTIONS_001&quot;);
log.info(&quot;cCLAIMMENUACTIONS_001 - &quot;+cCLAIMMENUACTIONS_001);
String cINFOBAR_002=vars.get(&quot;cINFOBAR_002&quot;);
log.info(&quot;cINFOBAR_002 - &quot;+cINFOBAR_002);
log.info(&quot;#####################__C&quot;);</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">int rescode=Integer.parseInt(vars.get(&quot;responsecode&quot;));
String Stat=vars.get(&quot;TextCheck&quot;);
// if we get a sucessful http response from web service
if (rescode &gt;= 200 &amp;&amp; rescode &lt; 400)
{	//error if no results found
	if (!Stat.equals(&quot;null&quot;))
	{	
		// Login page displayed successfully.
		prev.setSuccessful(true);
	}
	else 
	{
		//Launch page is not display successfully
		log.error(&quot;Transaction Name : CNG_TP159_C_Go_To_Claim_Summary ##&quot;+&quot;Login ID and Password:&quot;+vars.get(&quot;USERNAME&quot;)+&quot; &quot;+vars.get(&quot;PASSWORD&quot;)+&quot;##&quot;+&quot;Request XML:&quot;+prev.getSamplerData()+&quot;##&quot;+&quot;HTTP Response Code:&quot;+vars.get(&quot;responsecode&quot;)+&quot;##&quot;+&quot;Response From Server : &quot;+prev.getResponseDataAsString());
		prev.setSuccessful(false);
		ctx.setRestartNextLoop(true);
}
}
else
{

//response is not 200
	log.error(&quot;Transaction Name : CNG_TP159_C_Go_To_Claim_Summary ##&quot;+&quot;Login ID and Password:&quot;+vars.get(&quot;USERNAME&quot;)+&quot; &quot;+vars.get(&quot;PASSWORD&quot;)+&quot;##&quot;+&quot;Request XML:&quot;+prev.getSamplerData()+&quot;##&quot;+&quot;HTTP Response Code:&quot;+vars.get(&quot;responsecode&quot;)+&quot;##&quot;+&quot;Response From Server : &quot;+prev.getResponseDataAsString());
	prev.setSuccessful(false);
	ctx.setRestartNextLoop(true);
}


</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ThinkTime - 10" enabled="true">
            <stringProp name="TestPlan.comments">This transaction will wait for 10 seconds</stringProp>
          </GenericController>
          <hashTree>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="ThinkTime" enabled="true">
              <stringProp name="ConstantTimer.delay">1</stringProp>
              <stringProp name="TestPlan.comments">   Converting seconds to milliseconds - 10s x 1000</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP159_D_Actions_Claim_Card" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_10" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="renderViewRootOnly" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">renderViewRootOnly</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ajaxRequestInfo" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ajaxRequestInfo</stringProp>
                  <stringProp name="Argument.value">[{&quot;viewRootId&quot;:&quot;Claim:ClaimMenuActions&quot;,&quot;childrenOnly&quot;:true}]</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="csrfToken" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">csrfToken</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">https://${SERVER}/cc/ClaimCenter.do</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Host</stringProp>
                  <stringProp name="Header.value">${SERVER}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">String cTBLINKS_001_URL3 = java.net.URLEncoder.encode(vars.get(&quot;cTBLINKS_001&quot;), &quot;UTF-8&quot;);
vars.put(&quot;cTBLINKS_001_URL3&quot;,cTBLINKS_001_URL3);

String cTABS_002_URL3 = java.net.URLEncoder.encode(vars.get(&quot;cTABS_002&quot;), &quot;UTF-8&quot;);
vars.put(&quot;cTABS_002_URL3&quot;,cTABS_002_URL3);

String cINFOBAR_001_URL3 = java.net.URLEncoder.encode(vars.get(&quot;cINFOBAR_001&quot;), &quot;UTF-8&quot;);
vars.put(&quot;cINFOBAR_001_URL3&quot;,cINFOBAR_001_URL3);

String cMENULINKS_001_URL3 = java.net.URLEncoder.encode(vars.get(&quot;cMENULINKS_001&quot;), &quot;UTF-8&quot;);
vars.put(&quot;cMENULINKS_001_URL3&quot;,cMENULINKS_001_URL3);

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_12" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">TabBar%3AClaimTab%3AClaimTab_FindClaim=&amp;QuickJump=&amp;Claim%3AMenuLinks_toggle=&amp;%3Atblinks=${cTBLINKS_001_URL3}tabs=${cTABS_002_URL3}&amp;infoBar=${cINFOBAR_001_URL3}&amp;Claim%3AClaimMenuActions=checksumInvalidated&amp;Claim%3AMenuLinks=${cMENULINKS_001_URL3}&amp;csrfToken=&amp;eventSource=Claim%3AClaimMenuActions%3AClaimMenuActions_NewTransaction%3AClaimMenuActions_NewTransaction_ClaimCard_act&amp;objFocusId=Claim%3AClaimMenuActions%3AClaimMenuActions_NewTransaction%3AClaimMenuActions_NewTransaction_ClaimCard</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">https://${SERVER}/cc/ClaimCenter.do</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re">${cMENULINKS_001}</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Host</stringProp>
                  <stringProp name="Header.value">${SERVER}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cTBLINKS_002" enabled="true">
              <stringProp name="TestPlan.comments">&quot;ParamName=cTBLINKS_002&quot;,
		&quot;RegExp=gator\\.\&quot;,\&quot;shortcut\&quot;:\&quot;Z\&quot;}],\&quot;defaultType\&quot;:\&quot;gmenuitem\&quot;},\&quot;noaction\&quot;:1,\&quot;xtype\&quot;:\&quot;gbutton\&quot;,\&quot;iconCls\&quot;:\&quot;g-preferences-icon\&quot;}],\&quot;checksum\&quot;:\&quot;(.*?)\&quot;},&quot;,
		SEARCH_FILTERS,
		&quot;Scope=Body&quot;,
		&quot;IgnoreRedirections=No&quot;,</stringProp>
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">cTBLINKS_002</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;,&quot;shortcut&quot;:&quot;Z&quot;}],&quot;defaultType&quot;:&quot;gmenuitem&quot;},&quot;noaction&quot;:1,&quot;xtype&quot;:&quot;gbutton&quot;,&quot;iconCls&quot;:&quot;g-preferences-icon&quot;}],&quot;checksum&quot;:&quot;(.*?)&quot;},</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">null</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cMANUALCREATECHECKWIZARD" enabled="true">
              <stringProp name="TestPlan.comments">&quot;ParamName=cMANUALCREATECHECKWIZARD&quot;,
		&quot;RegExp=:\&quot;Instructions\&quot;,\&quot;eventId\&quot;:\&quot;ManualCreateCheckWizard:NewCheckInstructions\&quot;,\&quot;disabled\&quot;:true}],\&quot;xtype\&quot;:\&quot;accordionpanel\&quot;,\&quot;checksum\&quot;:\&quot;(.*?)\&quot;,&quot;,
		SEARCH_FILTERS,
		&quot;Scope=Body&quot;,
		&quot;IgnoreRedirections=No&quot;,
		&quot;NotFound=Warning&quot;,</stringProp>
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">cMANUALCREATECHECKWIZARD</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;xtype&quot;:&quot;accordionpanel&quot;,&quot;checksum&quot;:&quot;(.*?)&quot;,</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">null</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cRESERVELINE" enabled="true">
              <stringProp name="TestPlan.comments">&quot;ParamName=cRESERVELINE&quot;,
		&quot;RegExp=],\\[\&quot;(.*?)\&quot;,&quot;,
		SEARCH_FILTERS,
		&quot;Scope=Body&quot;,
		&quot;IgnoreRedirections=No&quot;,
		&quot;NotFound=Warning&quot;,</stringProp>
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">cRESERVELINE</stringProp>
              <stringProp name="RegexExtractor.regex">],\[&quot;(([A-Za-z]+?):[0-9]*?)&quot;,</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">null</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="responsecode" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">code</stringProp>
              <stringProp name="RegexExtractor.refname">responsecode</stringProp>
              <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">0</stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="TextCheck" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">TextCheck</stringProp>
              <stringProp name="RegexExtractor.regex">Enter pay(.*?)nformation</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">null</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="LOGGER" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">
//log.info(&quot;Request XML - &quot;+prev.getSamplerData());
//log.info(&quot;Response From Server - &quot;+prev.getResponseDataAsString());

String cTBLINKS_002=vars.get(&quot;cTBLINKS_002&quot;);
log.info(&quot;cTBLINKS_002 - &quot;+cTBLINKS_002);
String cMANUALCREATECHECKWIZARD=vars.get(&quot;cMANUALCREATECHECKWIZARD&quot;);
log.info(&quot;cMANUALCREATECHECKWIZARD - &quot;+cMANUALCREATECHECKWIZARD);
String cRESERVELINE=vars.get(&quot;cRESERVELINE&quot;);
log.info(&quot;cRESERVELINE - &quot;+cRESERVELINE);
log.info(&quot;#####################__D&quot;);</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">int rescode=Integer.parseInt(vars.get(&quot;responsecode&quot;));
String Stat=vars.get(&quot;TextCheck&quot;);
// if we get a sucessful http response from web service
if (rescode &gt;= 200 &amp;&amp; rescode &lt; 400)
{	//error if no results found
	if (!Stat.equals(&quot;null&quot;))
	{	
		// Login page displayed successfully.
		prev.setSuccessful(true);
	}
	else 
	{
		//Launch page is not display successfully
		log.error(&quot;Transaction Name : CNG_TP159_D_Actions_Claim_Card ##&quot;+&quot;Login ID and Password:&quot;+vars.get(&quot;USERNAME&quot;)+&quot; &quot;+vars.get(&quot;PASSWORD&quot;)+&quot;##&quot;+&quot;Request XML:&quot;+prev.getSamplerData()+&quot;##&quot;+&quot;HTTP Response Code:&quot;+vars.get(&quot;responsecode&quot;)+&quot;##&quot;+&quot;Response From Server : &quot;+prev.getResponseDataAsString());
		prev.setSuccessful(false);
		ctx.setRestartNextLoop(true);
}
}
else
{

//response is not 200
	log.error(&quot;Transaction Name : CNG_TP159_D_Actions_Claim_Card ##&quot;+&quot;Login ID and Password:&quot;+vars.get(&quot;USERNAME&quot;)+&quot; &quot;+vars.get(&quot;PASSWORD&quot;)+&quot;##&quot;+&quot;Request XML:&quot;+prev.getSamplerData()+&quot;##&quot;+&quot;HTTP Response Code:&quot;+vars.get(&quot;responsecode&quot;)+&quot;##&quot;+&quot;Response From Server : &quot;+prev.getResponseDataAsString());
	prev.setSuccessful(false);
	ctx.setRestartNextLoop(true);
}


</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ThinkTime - 10" enabled="true">
            <stringProp name="TestPlan.comments">This transaction will wait for 10 seconds</stringProp>
          </GenericController>
          <hashTree>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="ThinkTime" enabled="true">
              <stringProp name="ConstantTimer.delay">10000</stringProp>
              <stringProp name="TestPlan.comments">   Converting seconds to milliseconds - 10s x 1000</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP159_E_Select_Reserve_Line" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_14" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="TabBar:ClaimTab:ClaimTab_FindClaim" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">TabBar:ClaimTab:ClaimTab_FindClaim</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="QuickJump" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">QuickJump</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ManualCreateCheckWizard:0_toggle" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ManualCreateCheckWizard:0_toggle</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ManualCreateCheckWizard:ManualCheckWizard_CheckPaymentsScreen:NewCheckPaymentPanelSet:NewPaymentDetailDV:Transaction_ReserveLine" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ManualCreateCheckWizard:ManualCheckWizard_CheckPaymentsScreen:NewCheckPaymentPanelSet:NewPaymentDetailDV:Transaction_ReserveLine</stringProp>
                  <stringProp name="Argument.value">${cRESERVELINE}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name=":tblinks" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">:tblinks</stringProp>
                  <stringProp name="Argument.value">${cTBLINKS_002}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name=":tabs" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">:tabs</stringProp>
                  <stringProp name="Argument.value">${cTABS_002}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="infoBar" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">infoBar</stringProp>
                  <stringProp name="Argument.value">${cINFOBAR_001}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="Claim:ClaimMenuActions" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">Claim:ClaimMenuActions</stringProp>
                  <stringProp name="Argument.value">${cCLAIMMENUACTIONS_001}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ManualCreateCheckWizard:0" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ManualCreateCheckWizard:0</stringProp>
                  <stringProp name="Argument.value">${cMANUALCREATECHECKWIZARD}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="csrfToken" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">csrfToken</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="eventSource" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">eventSource</stringProp>
                  <stringProp name="Argument.value">_refresh_</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="eventParam" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">eventParam</stringProp>
                  <stringProp name="Argument.value">ManualCreateCheckWizard:ManualCheckWizard_CheckPaymentsScreen:NewCheckPaymentPanelSet:NewPaymentDetailDV:Transaction_ReserveLine</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="objFocusId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">objFocusId</stringProp>
                  <stringProp name="Argument.value">ManualCreateCheckWizard:ManualCheckWizard_CheckPaymentsScreen:NewCheckPaymentPanelSet:NewPaymentDetailDV:Transaction_ReserveLine</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">https://${SERVER}/cc/ClaimCenter.do</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Host</stringProp>
                  <stringProp name="Header.value">${SERVER}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="responsecode" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">code</stringProp>
              <stringProp name="RegexExtractor.refname">responsecode</stringProp>
              <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">0</stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="TextCheck" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">TextCheck</stringProp>
              <stringProp name="RegexExtractor.regex">Ded(.*?)tibles</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">null</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="LOGGER" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">
//log.info(&quot;Request XML - &quot;+prev.getSamplerData());
//log.info(&quot;Response From Server - &quot;+prev.getResponseDataAsString());

String cTABS_002=vars.get(&quot;cTABS_002&quot;);
log.info(&quot;cTABS_002 - &quot;+cTABS_002);
String cINFOBAR_001=vars.get(&quot;cINFOBAR_001&quot;);
log.info(&quot;cINFOBAR_001 - &quot;+cINFOBAR_001);
String cDESKTOPMENUACTIONS_001=vars.get(&quot;cDESKTOPMENUACTIONS_001&quot;);
log.info(&quot;cDESKTOPMENUACTIONS_001 - &quot;+cDESKTOPMENUACTIONS_001);
String cDESKTOPMENULINKS_001=vars.get(&quot;cDESKTOPMENULINKS_001&quot;);
log.info(&quot;cDESKTOPMENULINKS_001 - &quot;+cDESKTOPMENULINKS_001);
String cMENULINKS_001=vars.get(&quot;cMENULINKS_001&quot;);
log.info(&quot;cMENULINKS_001 - &quot;+cMENULINKS_001);
String cTABS_001=vars.get(&quot;cTABS_001&quot;);
log.info(&quot;cTABS_001 - &quot;+cTABS_001);
String cTBLINKS_001=vars.get(&quot;cTBLINKS_001&quot;);
log.info(&quot;cTBLINKS_001 - &quot;+cTBLINKS_001);
//log.info(&quot;This is the variable name :&quot;+stats);</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">int rescode=Integer.parseInt(vars.get(&quot;responsecode&quot;));
String Stat=vars.get(&quot;TextCheck&quot;);
// if we get a sucessful http response from web service
if (rescode &gt;= 200 &amp;&amp; rescode &lt; 400)
{	//error if no results found
	if (!Stat.equals(&quot;null&quot;))
	{	
		// Login page displayed successfully.
		prev.setSuccessful(true);
	}
	else 
	{
		//Launch page is not display successfully
		log.error(&quot;Transaction Name : CNG_TP159_E_Select_Reserve_Line ##&quot;+&quot;Login ID and Password:&quot;+vars.get(&quot;USERNAME&quot;)+&quot; &quot;+vars.get(&quot;PASSWORD&quot;)+&quot;##&quot;+&quot;Request XML:&quot;+prev.getSamplerData()+&quot;##&quot;+&quot;HTTP Response Code:&quot;+vars.get(&quot;responsecode&quot;)+&quot;##&quot;+&quot;Response From Server : &quot;+prev.getResponseDataAsString());
		prev.setSuccessful(false);
		ctx.setRestartNextLoop(true);
}
}
else
{

//response is not 200
	log.error(&quot;Transaction Name : CNG_TP159_E_Select_Reserve_Line ##&quot;+&quot;Login ID and Password:&quot;+vars.get(&quot;USERNAME&quot;)+&quot; &quot;+vars.get(&quot;PASSWORD&quot;)+&quot;##&quot;+&quot;Request XML:&quot;+prev.getSamplerData()+&quot;##&quot;+&quot;HTTP Response Code:&quot;+vars.get(&quot;responsecode&quot;)+&quot;##&quot;+&quot;Response From Server : &quot;+prev.getResponseDataAsString());
	prev.setSuccessful(false);
	ctx.setRestartNextLoop(true);
}


</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="PaymentCategoryCount" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">PaymentCategoryCount</stringProp>
              <stringProp name="RegexExtractor.regex">Payment (.*?)egory</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">null</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ThinkTime - 10" enabled="true">
            <stringProp name="TestPlan.comments">This transaction will wait for 10 seconds</stringProp>
          </GenericController>
          <hashTree>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="ThinkTime" enabled="true">
              <stringProp name="ConstantTimer.delay">10000</stringProp>
              <stringProp name="TestPlan.comments">   Converting seconds to milliseconds - 10s x 1000</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
            <stringProp name="IfController.condition">&quot;${PaymentCategoryCount}&quot;==&quot;Cat&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP159_F_Select_Payment_Category" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_13" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="infoBar" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">infoBar</stringProp>
                      <stringProp name="Argument.value">${cINFOBAR_001}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="Claim:ClaimMenuActions" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">Claim:ClaimMenuActions</stringProp>
                      <stringProp name="Argument.value">${cCLAIMMENUACTIONS_001}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="TabBar:ClaimTab:ClaimTab_FindClaim" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">TabBar:ClaimTab:ClaimTab_FindClaim</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="QuickJump" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">QuickJump</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ManualCreateCheckWizard:0_toggle" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ManualCreateCheckWizard:0_toggle</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ManualCreateCheckWizard:ManualCheckWizard_CheckPaymentsScreen:NewCheckPaymentPanelSet:NewPaymentDetailDV:PaymentCategory" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ManualCreateCheckWizard:ManualCheckWizard_CheckPaymentsScreen:NewCheckPaymentPanelSet:NewPaymentDetailDV:PaymentCategory</stringProp>
                      <stringProp name="Argument.value">ACV</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ManualCreateCheckWizard:ManualCheckWizard_CheckPaymentsScreen:NewCheckPaymentPanelSet:NewPaymentDetailDV:NVV_Financials_NewPaymentDetail_Transaction_Amount" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ManualCreateCheckWizard:ManualCheckWizard_CheckPaymentsScreen:NewCheckPaymentPanelSet:NewPaymentDetailDV:NVV_Financials_NewPaymentDetail_Transaction_Amount</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name=":tblinks" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">:tblinks</stringProp>
                      <stringProp name="Argument.value">${cTBLINKS_002}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name=":tabs" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">:tabs</stringProp>
                      <stringProp name="Argument.value">${cTABS_002}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="objFocusId" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">objFocusId</stringProp>
                      <stringProp name="Argument.value">ManualCreateCheckWizard:ManualCheckWizard_CheckPaymentsScreen:NewCheckPaymentPanelSet:NewPaymentDetailDV:PaymentCategory</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="eventParam" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">eventParam</stringProp>
                      <stringProp name="Argument.value">ManualCreateCheckWizard:ManualCheckWizard_CheckPaymentsScreen:NewCheckPaymentPanelSet:NewPaymentDetailDV:PaymentCategory</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="eventSource" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">eventSource</stringProp>
                      <stringProp name="Argument.value">_refresh_</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="csrfToken" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">csrfToken</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ManualCreateCheckWizard:0" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ManualCreateCheckWizard:0</stringProp>
                      <stringProp name="Argument.value">${cMANUALCREATECHECKWIZARD}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">https://${SERVER}/cc/ClaimCenter.do</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">DNT</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Host</stringProp>
                      <stringProp name="Header.value">${SERVER}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Connection</stringProp>
                      <stringProp name="Header.value">Keep-Alive</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="responsecode" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">code</stringProp>
                  <stringProp name="RegexExtractor.refname">responsecode</stringProp>
                  <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">0</stringProp>
                  <stringProp name="RegexExtractor.match_number"></stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="TextCheck" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">TextCheck</stringProp>
                  <stringProp name="RegexExtractor.regex">A(.*?)V</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">null</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
                <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="LOGGER" enabled="true">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">
//log.info(&quot;Request XML - &quot;+prev.getSamplerData());
//log.info(&quot;Response From Server - &quot;+prev.getResponseDataAsString());

String cTABS_002=vars.get(&quot;cTABS_002&quot;);
log.info(&quot;cTABS_002 - &quot;+cTABS_002);
String cINFOBAR_001=vars.get(&quot;cINFOBAR_001&quot;);
log.info(&quot;cINFOBAR_001 - &quot;+cINFOBAR_001);
String cDESKTOPMENUACTIONS_001=vars.get(&quot;cDESKTOPMENUACTIONS_001&quot;);
log.info(&quot;cDESKTOPMENUACTIONS_001 - &quot;+cDESKTOPMENUACTIONS_001);
String cDESKTOPMENULINKS_001=vars.get(&quot;cDESKTOPMENULINKS_001&quot;);
log.info(&quot;cDESKTOPMENULINKS_001 - &quot;+cDESKTOPMENULINKS_001);
String cMENULINKS_001=vars.get(&quot;cMENULINKS_001&quot;);
log.info(&quot;cMENULINKS_001 - &quot;+cMENULINKS_001);
String cTABS_001=vars.get(&quot;cTABS_001&quot;);
log.info(&quot;cTABS_001 - &quot;+cTABS_001);
String cTBLINKS_001=vars.get(&quot;cTBLINKS_001&quot;);
log.info(&quot;cTBLINKS_001 - &quot;+cTBLINKS_001);
//log.info(&quot;This is the variable name :&quot;+stats);</stringProp>
                </BeanShellPostProcessor>
                <hashTree/>
                <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">int rescode=Integer.parseInt(vars.get(&quot;responsecode&quot;));
String Stat=vars.get(&quot;TextCheck&quot;);
// if we get a sucessful http response from web service
if (rescode &gt;= 200 &amp;&amp; rescode &lt; 400)
{	//error if no results found
	if (!Stat.equals(&quot;null&quot;))
	{	
		// Login page displayed successfully.
		prev.setSuccessful(true);
	}
	else 
	{
		//Launch page is not display successfully
		log.error(&quot;Transaction Name : CNG_TP159_F_Select_Payment_Category ##&quot;+&quot;Login ID and Password:&quot;+vars.get(&quot;USERNAME&quot;)+&quot; &quot;+vars.get(&quot;PASSWORD&quot;)+&quot;##&quot;+&quot;Request XML:&quot;+prev.getSamplerData()+&quot;##&quot;+&quot;HTTP Response Code:&quot;+vars.get(&quot;responsecode&quot;)+&quot;##&quot;+&quot;Response From Server : &quot;+prev.getResponseDataAsString());
		prev.setSuccessful(false);
		ctx.setRestartNextLoop(true);
}
}
else
{

//response is not 200
	log.error(&quot;Transaction Name : CNG_TP159_F_Select_Payment_Category ##&quot;+&quot;Login ID and Password:&quot;+vars.get(&quot;USERNAME&quot;)+&quot; &quot;+vars.get(&quot;PASSWORD&quot;)+&quot;##&quot;+&quot;Request XML:&quot;+prev.getSamplerData()+&quot;##&quot;+&quot;HTTP Response Code:&quot;+vars.get(&quot;responsecode&quot;)+&quot;##&quot;+&quot;Response From Server : &quot;+prev.getResponseDataAsString());
	prev.setSuccessful(false);
	ctx.setRestartNextLoop(true);
}


</stringProp>
                </BeanShellPostProcessor>
                <hashTree/>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ThinkTime - 10" enabled="true">
                <stringProp name="TestPlan.comments">This transaction will wait for 10 seconds</stringProp>
              </GenericController>
              <hashTree>
                <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="ThinkTime" enabled="true">
                  <stringProp name="ConstantTimer.delay">10000</stringProp>
                  <stringProp name="TestPlan.comments">   Converting seconds to milliseconds - 10s x 1000</stringProp>
                </ConstantTimer>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP159_G_Enter_Payment_Amount" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_15" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="ajaxRequestInfo" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ajaxRequestInfo</stringProp>
                  <stringProp name="Argument.value">[{&quot;viewRootId&quot;:&quot;ManualCreateCheckWizard:ManualCheckWizard_CheckPaymentsScreen:NewCheckPaymentPanelSet:NewPaymentDetailDV:NVV_Financials_NewPaymentDetail_Transaction_Amount&quot;,&quot;paramMap&quot;:{&quot;postOnChangeTarget&quot;:&quot;DATA_ONLY&quot;,&quot;skipFocusOnPOC&quot;:true}}]</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="TabBar:ClaimTab:ClaimTab_FindClaim" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">TabBar:ClaimTab:ClaimTab_FindClaim</stringProp>
                </elementProp>
                <elementProp name="QuickJump" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">QuickJump</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ManualCreateCheckWizard:0_toggle" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ManualCreateCheckWizard:0_toggle</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ManualCreateCheckWizard:ManualCheckWizard_CheckPaymentsScreen:NewCheckPaymentPanelSet:NewPaymentDetailDV:PaymentCategory" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ManualCreateCheckWizard:ManualCheckWizard_CheckPaymentsScreen:NewCheckPaymentPanelSet:NewPaymentDetailDV:PaymentCategory</stringProp>
                  <stringProp name="Argument.value">ACV</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ManualCreateCheckWizard:ManualCheckWizard_CheckPaymentsScreen:NewCheckPaymentPanelSet:NewPaymentDetailDV:NVV_Financials_NewPaymentDetail_Transaction_Amount" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ManualCreateCheckWizard:ManualCheckWizard_CheckPaymentsScreen:NewCheckPaymentPanelSet:NewPaymentDetailDV:NVV_Financials_NewPaymentDetail_Transaction_Amount</stringProp>
                  <stringProp name="Argument.value">1.00</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name=":tblinks" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">:tblinks</stringProp>
                  <stringProp name="Argument.value">${cTBLINKS_002}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name=":tabs" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">:tabs</stringProp>
                  <stringProp name="Argument.value">${cTABS_002}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="infoBar" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">infoBar</stringProp>
                  <stringProp name="Argument.value">${cINFOBAR_001}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="Claim:ClaimMenuActions" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">Claim:ClaimMenuActions</stringProp>
                  <stringProp name="Argument.value">${cCLAIMMENUACTIONS_001}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ManualCreateCheckWizard:0" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ManualCreateCheckWizard:0</stringProp>
                  <stringProp name="Argument.value">${cMANUALCREATECHECKWIZARD}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="csrfToken" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">csrfToken</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">https://${SERVER}/cc/ClaimCenter.do</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Host</stringProp>
                  <stringProp name="Header.value">${SERVER}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="responsecode" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">code</stringProp>
              <stringProp name="RegexExtractor.refname">responsecode</stringProp>
              <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">0</stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="TextCheck" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">TextCheck</stringProp>
              <stringProp name="RegexExtractor.regex">1.(.*?)0</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">null</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="LOGGER" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">
//log.info(&quot;Request XML - &quot;+prev.getSamplerData());
//log.info(&quot;Response From Server - &quot;+prev.getResponseDataAsString());

String cTABS_002=vars.get(&quot;cTABS_002&quot;);
log.info(&quot;cTABS_002 - &quot;+cTABS_002);
String cINFOBAR_001=vars.get(&quot;cINFOBAR_001&quot;);
log.info(&quot;cINFOBAR_001 - &quot;+cINFOBAR_001);
String cDESKTOPMENUACTIONS_001=vars.get(&quot;cDESKTOPMENUACTIONS_001&quot;);
log.info(&quot;cDESKTOPMENUACTIONS_001 - &quot;+cDESKTOPMENUACTIONS_001);
String cDESKTOPMENULINKS_001=vars.get(&quot;cDESKTOPMENULINKS_001&quot;);
log.info(&quot;cDESKTOPMENULINKS_001 - &quot;+cDESKTOPMENULINKS_001);
String cMENULINKS_001=vars.get(&quot;cMENULINKS_001&quot;);
log.info(&quot;cMENULINKS_001 - &quot;+cMENULINKS_001);
String cTABS_001=vars.get(&quot;cTABS_001&quot;);
log.info(&quot;cTABS_001 - &quot;+cTABS_001);
String cTBLINKS_001=vars.get(&quot;cTBLINKS_001&quot;);
log.info(&quot;cTBLINKS_001 - &quot;+cTBLINKS_001);
//log.info(&quot;This is the variable name :&quot;+stats);</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">int rescode=Integer.parseInt(vars.get(&quot;responsecode&quot;));
String Stat=vars.get(&quot;TextCheck&quot;);
// if we get a sucessful http response from web service
if (rescode &gt;= 200 &amp;&amp; rescode &lt; 400)
{	//error if no results found
	if (!Stat.equals(&quot;null&quot;))
	{	
		// Login page displayed successfully.
		prev.setSuccessful(true);
	}
	else 
	{
		//Launch page is not display successfully
		log.error(&quot;Transaction Name : CNG_TP159_G_Enter_Payment_Amount ##&quot;+&quot;Login ID and Password:&quot;+vars.get(&quot;USERNAME&quot;)+&quot; &quot;+vars.get(&quot;PASSWORD&quot;)+&quot;##&quot;+&quot;Request XML:&quot;+prev.getSamplerData()+&quot;##&quot;+&quot;HTTP Response Code:&quot;+vars.get(&quot;responsecode&quot;)+&quot;##&quot;+&quot;Response From Server : &quot;+prev.getResponseDataAsString());
		prev.setSuccessful(false);
		ctx.setRestartNextLoop(true);
}
}
else
{

//response is not 200
	log.error(&quot;Transaction Name : CNG_TP159_G_Enter_Payment_Amount ##&quot;+&quot;Login ID and Password:&quot;+vars.get(&quot;USERNAME&quot;)+&quot; &quot;+vars.get(&quot;PASSWORD&quot;)+&quot;##&quot;+&quot;Request XML:&quot;+prev.getSamplerData()+&quot;##&quot;+&quot;HTTP Response Code:&quot;+vars.get(&quot;responsecode&quot;)+&quot;##&quot;+&quot;Response From Server : &quot;+prev.getResponseDataAsString());
	prev.setSuccessful(false);
	ctx.setRestartNextLoop(true);
}


</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ThinkTime - 10" enabled="true">
            <stringProp name="TestPlan.comments">This transaction will wait for 10 seconds</stringProp>
          </GenericController>
          <hashTree>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="ThinkTime" enabled="true">
              <stringProp name="ConstantTimer.delay">10000</stringProp>
              <stringProp name="TestPlan.comments">   Converting seconds to milliseconds - 10s x 1000</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP159_H_Next_To_Payee_Info" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_17" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="infoBar" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">infoBar</stringProp>
                  <stringProp name="Argument.value">${cINFOBAR_001}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="Claim:ClaimMenuActions" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">Claim:ClaimMenuActions</stringProp>
                  <stringProp name="Argument.value">${cCLAIMMENUACTIONS_001}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="TabBar:ClaimTab:ClaimTab_FindClaim" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">TabBar:ClaimTab:ClaimTab_FindClaim</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="QuickJump" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">QuickJump</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ManualCreateCheckWizard:0_toggle" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ManualCreateCheckWizard:0_toggle</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ManualCreateCheckWizard:ManualCheckWizard_CheckPaymentsScreen:NewCheckPaymentPanelSet:NewPaymentDetailDV:PaymentCategory" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ManualCreateCheckWizard:ManualCheckWizard_CheckPaymentsScreen:NewCheckPaymentPanelSet:NewPaymentDetailDV:PaymentCategory</stringProp>
                  <stringProp name="Argument.value">ACV</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ManualCreateCheckWizard:ManualCheckWizard_CheckPaymentsScreen:NewCheckPaymentPanelSet:NewPaymentDetailDV:NVV_Financials_NewPaymentDetail_Transaction_Amount" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ManualCreateCheckWizard:ManualCheckWizard_CheckPaymentsScreen:NewCheckPaymentPanelSet:NewPaymentDetailDV:NVV_Financials_NewPaymentDetail_Transaction_Amount</stringProp>
                  <stringProp name="Argument.value">1.00</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name=":tblinks" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">:tblinks</stringProp>
                  <stringProp name="Argument.value">${cTBLINKS_002}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name=":tabs" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">:tabs</stringProp>
                  <stringProp name="Argument.value">${cTABS_002}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="objFocusId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">objFocusId</stringProp>
                  <stringProp name="Argument.value">ManualCreateCheckWizard:Next</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="eventSource" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">eventSource</stringProp>
                  <stringProp name="Argument.value">ManualCreateCheckWizard:Next_act</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="csrfToken" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">csrfToken</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ManualCreateCheckWizard:0" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ManualCreateCheckWizard:0</stringProp>
                  <stringProp name="Argument.value">${cMANUALCREATECHECKWIZARD}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">https://${SERVER}/cc/ClaimCenter.do</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Host</stringProp>
                  <stringProp name="Header.value">${SERVER}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cMANUALCREATECHECKWIZARD_002" enabled="true">
              <stringProp name="TestPlan.comments">&quot;ParamName=cMANUALCREATECHECKWIZARD_002&quot;,
		&quot;RegExp=:\&quot;Instructions\&quot;,\&quot;eventId\&quot;:\&quot;ManualCreateCheckWizard:NewCheckInstructions\&quot;,\&quot;disabled\&quot;:true}],\&quot;xtype\&quot;:\&quot;accordionpanel\&quot;,\&quot;checksum\&quot;:\&quot;(.*?)\&quot;,&quot;,
		SEARCH_FILTERS,
		&quot;Scope=Body&quot;,
		&quot;IgnoreRedirections=No&quot;,
		&quot;NotFound=Warning&quot;,</stringProp>
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">cMANUALCREATECHECKWIZARD_002</stringProp>
              <stringProp name="RegexExtractor.regex">:\&quot;Instructions\&quot;,\&quot;eventId\&quot;:\&quot;ManualCreateCheckWizard:NewCheckInstructions\&quot;,\&quot;disabled\&quot;:true}],\&quot;xtype\&quot;:\&quot;accordionpanel\&quot;,\&quot;checksum\&quot;:\&quot;(.*?)\&quot;,</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">null</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="responsecode" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">code</stringProp>
              <stringProp name="RegexExtractor.refname">responsecode</stringProp>
              <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">0</stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="TextCheck" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">TextCheck</stringProp>
              <stringProp name="RegexExtractor.regex">Enter pay(.*?) information</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">null</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="LOGGER" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">
//log.info(&quot;Request XML - &quot;+prev.getSamplerData());
//log.info(&quot;Response From Server - &quot;+prev.getResponseDataAsString());

String cTABS_002=vars.get(&quot;cTABS_002&quot;);
log.info(&quot;cTABS_002 - &quot;+cTABS_002);
String cINFOBAR_001=vars.get(&quot;cINFOBAR_001&quot;);
log.info(&quot;cINFOBAR_001 - &quot;+cINFOBAR_001);
String cDESKTOPMENUACTIONS_001=vars.get(&quot;cDESKTOPMENUACTIONS_001&quot;);
log.info(&quot;cDESKTOPMENUACTIONS_001 - &quot;+cDESKTOPMENUACTIONS_001);
String cDESKTOPMENULINKS_001=vars.get(&quot;cDESKTOPMENULINKS_001&quot;);
log.info(&quot;cDESKTOPMENULINKS_001 - &quot;+cDESKTOPMENULINKS_001);
String cMENULINKS_001=vars.get(&quot;cMENULINKS_001&quot;);
log.info(&quot;cMENULINKS_001 - &quot;+cMENULINKS_001);
String cTABS_001=vars.get(&quot;cTABS_001&quot;);
log.info(&quot;cTABS_001 - &quot;+cTABS_001);
String cTBLINKS_001=vars.get(&quot;cTBLINKS_001&quot;);
log.info(&quot;cTBLINKS_001 - &quot;+cTBLINKS_001);
//log.info(&quot;This is the variable name :&quot;+stats);</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">int rescode=Integer.parseInt(vars.get(&quot;responsecode&quot;));
String Stat=vars.get(&quot;TextCheck&quot;);
// if we get a sucessful http response from web service
if (rescode &gt;= 200 &amp;&amp; rescode &lt; 400)
{	//error if no results found
	if (!Stat.equals(&quot;null&quot;))
	{	
		// Login page displayed successfully.
		prev.setSuccessful(true);
	}
	else 
	{
		//Launch page is not display successfully
		log.error(&quot;Transaction Name : CNG_TP159_H_Next_To_Payee_Info ##&quot;+&quot;Login ID and Password:&quot;+vars.get(&quot;USERNAME&quot;)+&quot; &quot;+vars.get(&quot;PASSWORD&quot;)+&quot;##&quot;+&quot;Request XML:&quot;+prev.getSamplerData()+&quot;##&quot;+&quot;HTTP Response Code:&quot;+vars.get(&quot;responsecode&quot;)+&quot;##&quot;+&quot;Response From Server : &quot;+prev.getResponseDataAsString());
		prev.setSuccessful(false);
		ctx.setRestartNextLoop(true);
}
}
else
{

//response is not 200
	log.error(&quot;Transaction Name : CNG_TP159_H_Next_To_Payee_Info ##&quot;+&quot;Login ID and Password:&quot;+vars.get(&quot;USERNAME&quot;)+&quot; &quot;+vars.get(&quot;PASSWORD&quot;)+&quot;##&quot;+&quot;Request XML:&quot;+prev.getSamplerData()+&quot;##&quot;+&quot;HTTP Response Code:&quot;+vars.get(&quot;responsecode&quot;)+&quot;##&quot;+&quot;Response From Server : &quot;+prev.getResponseDataAsString());
	prev.setSuccessful(false);
	ctx.setRestartNextLoop(true);
}


</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ThinkTime - 10" enabled="true">
            <stringProp name="TestPlan.comments">This transaction will wait for 10 seconds</stringProp>
          </GenericController>
          <hashTree>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="ThinkTime" enabled="true">
              <stringProp name="ConstantTimer.delay">10000</stringProp>
              <stringProp name="TestPlan.comments">   Converting seconds to milliseconds - 10s x 1000</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP159_I_Select_Payee_Type" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_19" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="TabBar:ClaimTab:ClaimTab_FindClaim" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">TabBar:ClaimTab:ClaimTab_FindClaim</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="QuickJump" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">QuickJump</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ManualCreateCheckWizard:0_toggle" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ManualCreateCheckWizard:0_toggle</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ManualCreateCheckWizard:ManualCheckWizard_CheckPayeesScreen:NewManualCheckPayeeDV:PayeeTypes" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ManualCreateCheckWizard:ManualCheckWizard_CheckPayeesScreen:NewManualCheckPayeeDV:PayeeTypes</stringProp>
                  <stringProp name="Argument.value">insured</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name=":tblinks" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">:tblinks</stringProp>
                  <stringProp name="Argument.value">${cTBLINKS_002}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name=":tabs" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">:tabs</stringProp>
                  <stringProp name="Argument.value">${cTABS_002}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="infoBar" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">infoBar</stringProp>
                  <stringProp name="Argument.value">${cINFOBAR_001}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="Claim:ClaimMenuActions" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">Claim:ClaimMenuActions</stringProp>
                  <stringProp name="Argument.value">${cCLAIMMENUACTIONS_001}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ManualCreateCheckWizard:0" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ManualCreateCheckWizard:0</stringProp>
                  <stringProp name="Argument.value">${cMANUALCREATECHECKWIZARD_002}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="csrfToken" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">csrfToken</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="eventSource" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">eventSource</stringProp>
                  <stringProp name="Argument.value">_refresh_</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="eventParam" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">eventParam</stringProp>
                  <stringProp name="Argument.value">ManualCreateCheckWizard:ManualCheckWizard_CheckPayeesScreen:NewManualCheckPayeeDV:PayeeTypes</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="objFocusId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">objFocusId</stringProp>
                  <stringProp name="Argument.value">ManualCreateCheckWizard:ManualCheckWizard_CheckPayeesScreen:NewManualCheckPayeeDV:PayeeTypes</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">https://${SERVER}/cc/ClaimCenter.do</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Host</stringProp>
                  <stringProp name="Header.value">${SERVER}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cFIRSTPAYEEPRIMARYADDRESS" enabled="true">
              <stringProp name="TestPlan.comments">&quot;ParamName=cFIRSTPAYEEPRIMARYADDRESS&quot;,
		&quot;RegExp=:\\[\\[\&quot;(.*?)\&quot;,&quot;,
		&quot;Ordinal=2&quot;,
		SEARCH_FILTERS,
		&quot;Scope=Body&quot;,
		&quot;IgnoreRedirections=No&quot;,</stringProp>
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">cFIRSTPAYEEPRIMARYADDRESS</stringProp>
              <stringProp name="RegexExtractor.regex">\[\[&quot;(.*?)&quot;,&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">null</stringProp>
              <stringProp name="RegexExtractor.match_number">2</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="responsecode" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">code</stringProp>
              <stringProp name="RegexExtractor.refname">responsecode</stringProp>
              <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">0</stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="TextCheck" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">TextCheck</stringProp>
              <stringProp name="RegexExtractor.regex">Pay To The (.*?)er Of</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">null</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="LOGGER" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">
//log.info(&quot;Request XML - &quot;+prev.getSamplerData());
//log.info(&quot;Response From Server - &quot;+prev.getResponseDataAsString());

String cTABS_002=vars.get(&quot;cTABS_002&quot;);
log.info(&quot;cTABS_002 - &quot;+cTABS_002);
String cINFOBAR_001=vars.get(&quot;cINFOBAR_001&quot;);
log.info(&quot;cINFOBAR_001 - &quot;+cINFOBAR_001);
String cDESKTOPMENUACTIONS_001=vars.get(&quot;cDESKTOPMENUACTIONS_001&quot;);
log.info(&quot;cDESKTOPMENUACTIONS_001 - &quot;+cDESKTOPMENUACTIONS_001);
String cDESKTOPMENULINKS_001=vars.get(&quot;cDESKTOPMENULINKS_001&quot;);
log.info(&quot;cDESKTOPMENULINKS_001 - &quot;+cDESKTOPMENULINKS_001);
String cMENULINKS_001=vars.get(&quot;cMENULINKS_001&quot;);
log.info(&quot;cMENULINKS_001 - &quot;+cMENULINKS_001);
String cTABS_001=vars.get(&quot;cTABS_001&quot;);
log.info(&quot;cTABS_001 - &quot;+cTABS_001);
String cTBLINKS_001=vars.get(&quot;cTBLINKS_001&quot;);
log.info(&quot;cTBLINKS_001 - &quot;+cTBLINKS_001);
//log.info(&quot;This is the variable name :&quot;+stats);</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">int rescode=Integer.parseInt(vars.get(&quot;responsecode&quot;));
String Stat=vars.get(&quot;TextCheck&quot;);
// if we get a sucessful http response from web service
if (rescode &gt;= 200 &amp;&amp; rescode &lt; 400)
{	//error if no results found
	if (!Stat.equals(&quot;null&quot;))
	{	
		// Login page displayed successfully.
		prev.setSuccessful(true);
	}
	else 
	{
		//Launch page is not display successfully
		log.error(&quot;Transaction Name : CNG_TP159_I_Select_Payee_Type ##&quot;+&quot;Login ID and Password:&quot;+vars.get(&quot;USERNAME&quot;)+&quot; &quot;+vars.get(&quot;PASSWORD&quot;)+&quot;##&quot;+&quot;Request XML:&quot;+prev.getSamplerData()+&quot;##&quot;+&quot;HTTP Response Code:&quot;+vars.get(&quot;responsecode&quot;)+&quot;##&quot;+&quot;Response From Server : &quot;+prev.getResponseDataAsString());
		prev.setSuccessful(false);
		ctx.setRestartNextLoop(true);
}
}
else
{

//response is not 200
	log.error(&quot;Transaction Name : CNG_TP159_I_Select_Payee_Type ##&quot;+&quot;Login ID and Password:&quot;+vars.get(&quot;USERNAME&quot;)+&quot; &quot;+vars.get(&quot;PASSWORD&quot;)+&quot;##&quot;+&quot;Request XML:&quot;+prev.getSamplerData()+&quot;##&quot;+&quot;HTTP Response Code:&quot;+vars.get(&quot;responsecode&quot;)+&quot;##&quot;+&quot;Response From Server : &quot;+prev.getResponseDataAsString());
	prev.setSuccessful(false);
	ctx.setRestartNextLoop(true);
}


</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ThinkTime - 10" enabled="true">
            <stringProp name="TestPlan.comments">This transaction will wait for 10 seconds</stringProp>
          </GenericController>
          <hashTree>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="ThinkTime" enabled="true">
              <stringProp name="ConstantTimer.delay">10000</stringProp>
              <stringProp name="TestPlan.comments">   Converting seconds to milliseconds - 10s x 1000</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP159_J_Select_Link_To_New_Card" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_21" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name=":tabs" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">:tabs</stringProp>
                  <stringProp name="Argument.value">${cTABS_002}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="infoBar" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">infoBar</stringProp>
                  <stringProp name="Argument.value">${cINFOBAR_001}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="TabBar:ClaimTab:ClaimTab_FindClaim" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">TabBar:ClaimTab:ClaimTab_FindClaim</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="QuickJump" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">QuickJump</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ManualCreateCheckWizard:0_toggle" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ManualCreateCheckWizard:0_toggle</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ManualCreateCheckWizard:ManualCheckWizard_CheckPayeesScreen:NewManualCheckPayeeDV:PayeeTypes" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ManualCreateCheckWizard:ManualCheckWizard_CheckPayeesScreen:NewManualCheckPayeeDV:PayeeTypes</stringProp>
                  <stringProp name="Argument.value">insured</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ManualCreateCheckWizard:ManualCheckWizard_CheckPayeesScreen:NewManualCheckPayeeDV:CheckPayToHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ManualCreateCheckWizard:ManualCheckWizard_CheckPayeesScreen:NewManualCheckPayeeDV:CheckPayToHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ManualCreateCheckWizard:ManualCheckWizard_CheckPayeesScreen:NewManualCheckPayeeDV:FirstPayeePrimaryAddress" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ManualCreateCheckWizard:ManualCheckWizard_CheckPayeesScreen:NewManualCheckPayeeDV:FirstPayeePrimaryAddress</stringProp>
                  <stringProp name="Argument.value">${cFIRSTPAYEEPRIMARYADDRESS}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name=":tblinks" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">:tblinks</stringProp>
                  <stringProp name="Argument.value">${cTBLINKS_002}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="objFocusId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">objFocusId</stringProp>
                  <stringProp name="Argument.value">ManualCreateCheckWizard:ManualCheckWizard_CheckPayeesScreen:NewManualCheckPayeeDV:AccountExistsButton</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="eventSource" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">eventSource</stringProp>
                  <stringProp name="Argument.value">ManualCreateCheckWizard:ManualCheckWizard_CheckPayeesScreen:NewManualCheckPayeeDV:AccountExistsButton_act</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="csrfToken" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">csrfToken</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ManualCreateCheckWizard:0" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ManualCreateCheckWizard:0</stringProp>
                  <stringProp name="Argument.value">${cMANUALCREATECHECKWIZARD_002}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="Claim:ClaimMenuActions" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">Claim:ClaimMenuActions</stringProp>
                  <stringProp name="Argument.value">${cCLAIMMENUACTIONS_001}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">https://${SERVER}/cc/ClaimCenter.do</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Host</stringProp>
                  <stringProp name="Header.value">${SERVER}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="responsecode" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">code</stringProp>
              <stringProp name="RegexExtractor.refname">responsecode</stringProp>
              <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">0</stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="TextCheck" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">TextCheck</stringProp>
              <stringProp name="RegexExtractor.regex">Card P(.*?)age ID</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">null</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="LOGGER" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">
//log.info(&quot;Request XML - &quot;+prev.getSamplerData());
//log.info(&quot;Response From Server - &quot;+prev.getResponseDataAsString());

String cTABS_002=vars.get(&quot;cTABS_002&quot;);
log.info(&quot;cTABS_002 - &quot;+cTABS_002);
String cINFOBAR_001=vars.get(&quot;cINFOBAR_001&quot;);
log.info(&quot;cINFOBAR_001 - &quot;+cINFOBAR_001);
String cDESKTOPMENUACTIONS_001=vars.get(&quot;cDESKTOPMENUACTIONS_001&quot;);
log.info(&quot;cDESKTOPMENUACTIONS_001 - &quot;+cDESKTOPMENUACTIONS_001);
String cDESKTOPMENULINKS_001=vars.get(&quot;cDESKTOPMENULINKS_001&quot;);
log.info(&quot;cDESKTOPMENULINKS_001 - &quot;+cDESKTOPMENULINKS_001);
String cMENULINKS_001=vars.get(&quot;cMENULINKS_001&quot;);
log.info(&quot;cMENULINKS_001 - &quot;+cMENULINKS_001);
String cTABS_001=vars.get(&quot;cTABS_001&quot;);
log.info(&quot;cTABS_001 - &quot;+cTABS_001);
String cTBLINKS_001=vars.get(&quot;cTBLINKS_001&quot;);
log.info(&quot;cTBLINKS_001 - &quot;+cTBLINKS_001);
//log.info(&quot;This is the variable name :&quot;+stats);</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">int rescode=Integer.parseInt(vars.get(&quot;responsecode&quot;));
String Stat=vars.get(&quot;TextCheck&quot;);
// if we get a sucessful http response from web service
if (rescode &gt;= 200 &amp;&amp; rescode &lt; 400)
{	//error if no results found
	if (!Stat.equals(&quot;null&quot;))
	{	
		// Login page displayed successfully.
		prev.setSuccessful(true);
	}
	else 
	{
		//Launch page is not display successfully
		log.error(&quot;Transaction Name : CNG_TP159_J_Select_Link_To_New_Card ##&quot;+&quot;Login ID and Password:&quot;+vars.get(&quot;USERNAME&quot;)+&quot; &quot;+vars.get(&quot;PASSWORD&quot;)+&quot;##&quot;+&quot;Request XML:&quot;+prev.getSamplerData()+&quot;##&quot;+&quot;HTTP Response Code:&quot;+vars.get(&quot;responsecode&quot;)+&quot;##&quot;+&quot;Response From Server : &quot;+prev.getResponseDataAsString());
		prev.setSuccessful(false);
		ctx.setRestartNextLoop(true);
}
}
else
{

//response is not 200
	log.error(&quot;Transaction Name : CNG_TP159_J_Select_Link_To_New_Card ##&quot;+&quot;Login ID and Password:&quot;+vars.get(&quot;USERNAME&quot;)+&quot; &quot;+vars.get(&quot;PASSWORD&quot;)+&quot;##&quot;+&quot;Request XML:&quot;+prev.getSamplerData()+&quot;##&quot;+&quot;HTTP Response Code:&quot;+vars.get(&quot;responsecode&quot;)+&quot;##&quot;+&quot;Response From Server : &quot;+prev.getResponseDataAsString());
	prev.setSuccessful(false);
	ctx.setRestartNextLoop(true);
}


</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ThinkTime - 10" enabled="true">
            <stringProp name="TestPlan.comments">This transaction will wait for 10 seconds</stringProp>
          </GenericController>
          <hashTree>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="ThinkTime" enabled="true">
              <stringProp name="ConstantTimer.delay">10000</stringProp>
              <stringProp name="TestPlan.comments">   Converting seconds to milliseconds - 10s x 1000</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP159_K_Next_To_Claims_Card_Instructions" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_24" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="TabBar:ClaimTab:ClaimTab_FindClaim" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">TabBar:ClaimTab:ClaimTab_FindClaim</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="QuickJump" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">QuickJump</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ManualCreateCheckWizard:0_toggle" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ManualCreateCheckWizard:0_toggle</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ManualCreateCheckWizard:ManualCheckWizard_CheckPayeesScreen:NewManualCheckPayeeDV:PayeeTypes" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ManualCreateCheckWizard:ManualCheckWizard_CheckPayeesScreen:NewManualCheckPayeeDV:PayeeTypes</stringProp>
                  <stringProp name="Argument.value">insured</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ManualCreateCheckWizard:ManualCheckWizard_CheckPayeesScreen:NewManualCheckPayeeDV:CheckPayToHidden" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ManualCreateCheckWizard:ManualCheckWizard_CheckPayeesScreen:NewManualCheckPayeeDV:CheckPayToHidden</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ManualCreateCheckWizard:ManualCheckWizard_CheckPayeesScreen:NewManualCheckPayeeDV:FirstPayeePrimaryAddress" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ManualCreateCheckWizard:ManualCheckWizard_CheckPayeesScreen:NewManualCheckPayeeDV:FirstPayeePrimaryAddress</stringProp>
                  <stringProp name="Argument.value">${cFIRSTPAYEEPRIMARYADDRESS}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ManualCreateCheckWizard:ManualCheckWizard_CheckPayeesScreen:NewManualCheckPayeeDV:CardPackageIdInput" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ManualCreateCheckWizard:ManualCheckWizard_CheckPayeesScreen:NewManualCheckPayeeDV:CardPackageIdInput</stringProp>
                  <stringProp name="Argument.value">${CardPackageID}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name=":tblinks" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">:tblinks</stringProp>
                  <stringProp name="Argument.value">${cTBLINKS_002}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name=":tabs" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">:tabs</stringProp>
                  <stringProp name="Argument.value">${cTABS_002}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="infoBar" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">infoBar</stringProp>
                  <stringProp name="Argument.value">${cINFOBAR_001}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="Claim:ClaimMenuActions" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">Claim:ClaimMenuActions</stringProp>
                  <stringProp name="Argument.value">${cCLAIMMENUACTIONS_001}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ManualCreateCheckWizard:0" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ManualCreateCheckWizard:0</stringProp>
                  <stringProp name="Argument.value">${cMANUALCREATECHECKWIZARD_002}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="csrfToken" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">csrfToken</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="eventSource" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">eventSource</stringProp>
                  <stringProp name="Argument.value">ManualCreateCheckWizard:Next_act</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="objFocusId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">objFocusId</stringProp>
                  <stringProp name="Argument.value">ManualCreateCheckWizard:Next</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">https://${SERVER}/cc/ClaimCenter.do</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Host</stringProp>
                  <stringProp name="Header.value">${SERVER}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cMANUALCREATECHECKWIZARD_003" enabled="true">
              <stringProp name="TestPlan.comments">&quot;ParamName=cMANUALCREATECHECKWIZARD_003&quot;,
		&quot;RegExp=ayees\&quot;},\\{\&quot;title\&quot;:\&quot;Instructions\&quot;,\&quot;eventId\&quot;:\&quot;ManualCreateCheckWizard:NewCheckInstructions\&quot;}],\&quot;xtype\&quot;:\&quot;accordionpanel\&quot;,\&quot;checksum\&quot;:\&quot;(.*?)\&quot;,&quot;,
		SEARCH_FILTERS,
		&quot;Scope=Body&quot;,
		&quot;IgnoreRedirections=No&quot;,</stringProp>
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">cMANUALCREATECHECKWIZARD_003</stringProp>
              <stringProp name="RegexExtractor.regex">ayees\&quot;},\\{\&quot;title\&quot;:\&quot;Instructions\&quot;,\&quot;eventId\&quot;:\&quot;ManualCreateCheckWizard:NewCheckInstructions\&quot;}],\&quot;xtype\&quot;:\&quot;accordionpanel\&quot;,\&quot;checksum\&quot;:\&quot;(.*?)\&quot;,</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">null</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cCHECKISSUER" enabled="true">
              <stringProp name="TestPlan.comments">&quot;ParamName=cCHECKISSUER&quot;,
		&quot;RegExp=],\\[\&quot;(.*?)\&quot;,&quot;,
		&quot;Ordinal=23&quot;,
		SEARCH_FILTERS,
		&quot;Scope=Body&quot;,
		&quot;IgnoreRedirections=No&quot;,</stringProp>
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">cCHECKISSUER</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;\],\[&quot;(.*?)&quot;,&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">null</stringProp>
              <stringProp name="RegexExtractor.match_number">23</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="responsecode" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">code</stringProp>
              <stringProp name="RegexExtractor.refname">responsecode</stringProp>
              <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">0</stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="TextCheck" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">TextCheck</stringProp>
              <stringProp name="RegexExtractor.regex">Step 3 of 3: Set clai(.*?)d instructions</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">null</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="LOGGER" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">
//log.info(&quot;Request XML - &quot;+prev.getSamplerData());
//log.info(&quot;Response From Server - &quot;+prev.getResponseDataAsString());

String cTABS_002=vars.get(&quot;cTABS_002&quot;);
log.info(&quot;cTABS_002 - &quot;+cTABS_002);
String cINFOBAR_001=vars.get(&quot;cINFOBAR_001&quot;);
log.info(&quot;cINFOBAR_001 - &quot;+cINFOBAR_001);
String cDESKTOPMENUACTIONS_001=vars.get(&quot;cDESKTOPMENUACTIONS_001&quot;);
log.info(&quot;cDESKTOPMENUACTIONS_001 - &quot;+cDESKTOPMENUACTIONS_001);
String cDESKTOPMENULINKS_001=vars.get(&quot;cDESKTOPMENULINKS_001&quot;);
log.info(&quot;cDESKTOPMENULINKS_001 - &quot;+cDESKTOPMENULINKS_001);
String cMENULINKS_001=vars.get(&quot;cMENULINKS_001&quot;);
log.info(&quot;cMENULINKS_001 - &quot;+cMENULINKS_001);
String cTABS_001=vars.get(&quot;cTABS_001&quot;);
log.info(&quot;cTABS_001 - &quot;+cTABS_001);
String cTBLINKS_001=vars.get(&quot;cTBLINKS_001&quot;);
log.info(&quot;cTBLINKS_001 - &quot;+cTBLINKS_001);
//log.info(&quot;This is the variable name :&quot;+stats);</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="DuplicateCheckCount" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">DuplicateCheckCount</stringProp>
              <stringProp name="RegexExtractor.regex">Possible D(.*?)icate Checks</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">null</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">int rescode=Integer.parseInt(vars.get(&quot;responsecode&quot;));
String Stat=vars.get(&quot;TextCheck&quot;);
// if we get a sucessful http response from web service
if (rescode &gt;= 200 &amp;&amp; rescode &lt; 400)
{	//error if no results found
	if (!Stat.equals(&quot;null&quot;))
	{	
		// Login page displayed successfully.
		prev.setSuccessful(true);
	}
	else 
	{
		//Launch page is not display successfully
		log.error(&quot;Transaction Name : CNG_TP159_K_Next_To_Claims_Card_Instructions ##&quot;+&quot;Login ID and Password:&quot;+vars.get(&quot;USERNAME&quot;)+&quot; &quot;+vars.get(&quot;PASSWORD&quot;)+&quot;##&quot;+&quot;Request XML:&quot;+prev.getSamplerData()+&quot;##&quot;+&quot;HTTP Response Code:&quot;+vars.get(&quot;responsecode&quot;)+&quot;##&quot;+&quot;Response From Server : &quot;+prev.getResponseDataAsString());
		prev.setSuccessful(false);
		ctx.setRestartNextLoop(true);
}
}
else
{

//response is not 200
	log.error(&quot;Transaction Name : CNG_TP159_K_Next_To_Claims_Card_Instructions ##&quot;+&quot;Loing ID and Password:&quot;+vars.get(&quot;USERNAME&quot;)+&quot; &quot;+vars.get(&quot;PASSWORD&quot;)+&quot;##&quot;+&quot;Request XML:&quot;+prev.getSamplerData()+&quot;##&quot;+&quot;HTTP Response Code:&quot;+vars.get(&quot;responsecode&quot;)+&quot;##&quot;+&quot;Response From Server : &quot;+prev.getResponseDataAsString());
	prev.setSuccessful(false);
	ctx.setRestartNextLoop(true);
}


</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
            <stringProp name="IfController.condition">&quot;$(DuplicateCheckCount)&quot;==&quot;upl&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP159_L_Close_Duplicate_Check_Message" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_26" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name=":tabs" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">:tabs</stringProp>
                      <stringProp name="Argument.value">${cTABS_002}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="infoBar" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">infoBar</stringProp>
                      <stringProp name="Argument.value">${cINFOBAR_001}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="TabBar:ClaimTab:ClaimTab_FindClaim" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">TabBar:ClaimTab:ClaimTab_FindClaim</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="QuickJump" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">QuickJump</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ManualCreateCheckWizard:0_toggle" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ManualCreateCheckWizard:0_toggle</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ManualCreateCheckWizard:ManualCheckWizard_CheckInstructionsScreen:ManualCheckPaymentInstructionsDV:EditableCheckDisbursementDetailsInputSet:PaymentType" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ManualCreateCheckWizard:ManualCheckWizard_CheckInstructionsScreen:ManualCheckPaymentInstructionsDV:EditableCheckDisbursementDetailsInputSet:PaymentType</stringProp>
                      <stringProp name="Argument.value">partial</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ManualCreateCheckWizard:ManualCheckWizard_CheckInstructionsScreen:ManualCheckPaymentInstructionsDV:EditableCheckDisbursementDetailsInputSet:CheckOfficeInputSet:CheckIssuer" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ManualCreateCheckWizard:ManualCheckWizard_CheckInstructionsScreen:ManualCheckPaymentInstructionsDV:EditableCheckDisbursementDetailsInputSet:CheckOfficeInputSet:CheckIssuer</stringProp>
                      <stringProp name="Argument.value">${cCHECKISSUER}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ManualCreateCheckWizard:ManualCheckWizard_CheckInstructionsScreen:ManualCheckPaymentInstructionsDV:EditableCheckDisbursementDetailsInputSet:CardPackageIdInput" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ManualCreateCheckWizard:ManualCheckWizard_CheckInstructionsScreen:ManualCheckPaymentInstructionsDV:EditableCheckDisbursementDetailsInputSet:CardPackageIdInput</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name=":tblinks" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">:tblinks</stringProp>
                      <stringProp name="Argument.value">${cTBLINKS_002}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="objFocusId" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">objFocusId</stringProp>
                      <stringProp name="Argument.value">CheckDuplicatesWorksheet:NewCheckDuplicatesScreen:CheckDuplicatesWorksheet_CloseButton</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="eventSource" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">eventSource</stringProp>
                      <stringProp name="Argument.value">CheckDuplicatesWorksheet:NewCheckDuplicatesScreen:CheckDuplicatesWorksheet_CloseButton_act</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="csrfToken" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">csrfToken</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ManualCreateCheckWizard:0" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ManualCreateCheckWizard:0</stringProp>
                      <stringProp name="Argument.value">${cMANUALCREATECHECKWIZARD_003}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="Claim:ClaimMenuActions" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">Claim:ClaimMenuActions</stringProp>
                      <stringProp name="Argument.value">${cCLAIMMENUACTIONS_001}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">https://${SERVER}/cc/ClaimCenter.do</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
                <boolProp name="HTTPSampler.image_parser">true</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">DNT</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Host</stringProp>
                      <stringProp name="Header.value">${SERVER}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Connection</stringProp>
                      <stringProp name="Header.value">Keep-Alive</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cMANUALCREATECHECKWIZARD_003" enabled="true">
                  <stringProp name="TestPlan.comments">&quot;ParamName=cMANUALCREATECHECKWIZARD_003&quot;,
		&quot;RegExp=ayees\&quot;},\\{\&quot;title\&quot;:\&quot;Instructions\&quot;,\&quot;eventId\&quot;:\&quot;ManualCreateCheckWizard:NewCheckInstructions\&quot;}],\&quot;xtype\&quot;:\&quot;accordionpanel\&quot;,\&quot;checksum\&quot;:\&quot;(.*?)\&quot;,&quot;,
		SEARCH_FILTERS,
		&quot;Scope=Body&quot;,
		&quot;IgnoreRedirections=No&quot;,</stringProp>
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">cMANUALCREATECHECKWIZARD_003</stringProp>
                  <stringProp name="RegexExtractor.regex">ayees\&quot;},\\{\&quot;title\&quot;:\&quot;Instructions\&quot;,\&quot;eventId\&quot;:\&quot;ManualCreateCheckWizard:NewCheckInstructions\&quot;}],\&quot;xtype\&quot;:\&quot;accordionpanel\&quot;,\&quot;checksum\&quot;:\&quot;(.*?)\&quot;,</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">null</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cCHECKISSUER" enabled="true">
                  <stringProp name="TestPlan.comments">&quot;ParamName=cCHECKISSUER&quot;,
		&quot;RegExp=],\\[\&quot;(.*?)\&quot;,&quot;,
		&quot;Ordinal=23&quot;,
		SEARCH_FILTERS,
		&quot;Scope=Body&quot;,
		&quot;IgnoreRedirections=No&quot;,</stringProp>
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">cCHECKISSUER</stringProp>
                  <stringProp name="RegexExtractor.regex">],\\[\&quot;(.*?)\&quot;,</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">null</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="responsecode" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">code</stringProp>
                  <stringProp name="RegexExtractor.refname">responsecode</stringProp>
                  <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">0</stringProp>
                  <stringProp name="RegexExtractor.match_number"></stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="TextCheck" enabled="false">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">TextCheck</stringProp>
                  <stringProp name="RegexExtractor.regex">Guidew(.*?)e Navigator</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">null</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
                <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="LOGGER" enabled="true">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">
//log.info(&quot;Request XML - &quot;+prev.getSamplerData());
//log.info(&quot;Response From Server - &quot;+prev.getResponseDataAsString());

String cTABS_002=vars.get(&quot;cTABS_002&quot;);
log.info(&quot;cTABS_002 - &quot;+cTABS_002);
String cINFOBAR_001=vars.get(&quot;cINFOBAR_001&quot;);
log.info(&quot;cINFOBAR_001 - &quot;+cINFOBAR_001);
String cDESKTOPMENUACTIONS_001=vars.get(&quot;cDESKTOPMENUACTIONS_001&quot;);
log.info(&quot;cDESKTOPMENUACTIONS_001 - &quot;+cDESKTOPMENUACTIONS_001);
String cDESKTOPMENULINKS_001=vars.get(&quot;cDESKTOPMENULINKS_001&quot;);
log.info(&quot;cDESKTOPMENULINKS_001 - &quot;+cDESKTOPMENULINKS_001);
String cMENULINKS_001=vars.get(&quot;cMENULINKS_001&quot;);
log.info(&quot;cMENULINKS_001 - &quot;+cMENULINKS_001);
String cTABS_001=vars.get(&quot;cTABS_001&quot;);
log.info(&quot;cTABS_001 - &quot;+cTABS_001);
String cTBLINKS_001=vars.get(&quot;cTBLINKS_001&quot;);
log.info(&quot;cTBLINKS_001 - &quot;+cTBLINKS_001);
//log.info(&quot;This is the variable name :&quot;+stats);</stringProp>
                </BeanShellPostProcessor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="DuplicateCheckCountNEW" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">DuplicateCheckCountNEW</stringProp>
                  <stringProp name="RegexExtractor.regex">Possible D(.*?)icate Checks</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">null</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
                <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">int rescode=Integer.parseInt(vars.get(&quot;responsecode&quot;));
String Stat=vars.get(&quot;DuplicateCheckCountNEW&quot;);
// if we get a sucessful http response from web service
if (rescode &gt;= 200 &amp;&amp; rescode &lt; 400)
{	//error if no results found
	if (!Stat.equals(&quot;null&quot;))
	{	
		// Login page displayed successfully.
		prev.setSuccessful(true);
	}
	else 
	{
		//Launch page is not display successfully
		log.error(&quot;Transaction Name :CNG_TP159_B_Login ##&quot;+&quot;Login ID and Password:&quot;+vars.get(&quot;USERNAME&quot;)+&quot; &quot;+vars.get(&quot;PASSWORD&quot;)+&quot;##&quot;+&quot;Request XML:&quot;+prev.getSamplerData()+&quot;##&quot;+&quot;HTTP Response Code:&quot;+vars.get(&quot;responsecode&quot;)+&quot;##&quot;+&quot;Response From Server : &quot;+prev.getResponseDataAsString());
		prev.setSuccessful(false);
		ctx.setRestartNextLoop(true);
}
}
else
{

//response is not 200
	log.error(&quot;Transaction Name :CNG_TP159_B_Login ##&quot;+&quot;Login ID and Password:&quot;+vars.get(&quot;USERNAME&quot;)+&quot; &quot;+vars.get(&quot;PASSWORD&quot;)+&quot;##&quot;+&quot;Request XML:&quot;+prev.getSamplerData()+&quot;##&quot;+&quot;HTTP Response Code:&quot;+vars.get(&quot;responsecode&quot;)+&quot;##&quot;+&quot;Response From Server : &quot;+prev.getResponseDataAsString());
	prev.setSuccessful(false);
	ctx.setRestartNextLoop(true);
}


</stringProp>
                </BeanShellPostProcessor>
                <hashTree/>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ThinkTime - 10" enabled="true">
                <stringProp name="TestPlan.comments">This transaction will wait for 10 seconds</stringProp>
              </GenericController>
              <hashTree>
                <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="ThinkTime" enabled="true">
                  <stringProp name="ConstantTimer.delay">10000</stringProp>
                  <stringProp name="TestPlan.comments">   Converting seconds to milliseconds - 10s x 1000</stringProp>
                </ConstantTimer>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ThinkTime - 10" enabled="true">
            <stringProp name="TestPlan.comments">This transaction will wait for 10 seconds</stringProp>
          </GenericController>
          <hashTree>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="ThinkTime" enabled="true">
              <stringProp name="ConstantTimer.delay">10000</stringProp>
              <stringProp name="TestPlan.comments">   Converting seconds to milliseconds - 10s x 1000</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP159_M_Click_Finish" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_28" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name=":tabs" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">:tabs</stringProp>
                  <stringProp name="Argument.value">${cTABS_002}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="infoBar" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">infoBar</stringProp>
                  <stringProp name="Argument.value">${cINFOBAR_001}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="TabBar:ClaimTab:ClaimTab_FindClaim" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">TabBar:ClaimTab:ClaimTab_FindClaim</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="QuickJump" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">QuickJump</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ManualCreateCheckWizard:0_toggle" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ManualCreateCheckWizard:0_toggle</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ManualCreateCheckWizard:ManualCheckWizard_CheckInstructionsScreen:ManualCheckPaymentInstructionsDV:EditableCheckDisbursementDetailsInputSet:PaymentType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ManualCreateCheckWizard:ManualCheckWizard_CheckInstructionsScreen:ManualCheckPaymentInstructionsDV:EditableCheckDisbursementDetailsInputSet:PaymentType</stringProp>
                  <stringProp name="Argument.value">partial</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ManualCreateCheckWizard:ManualCheckWizard_CheckInstructionsScreen:ManualCheckPaymentInstructionsDV:EditableCheckDisbursementDetailsInputSet:CheckOfficeInputSet:CheckIssuer" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ManualCreateCheckWizard:ManualCheckWizard_CheckInstructionsScreen:ManualCheckPaymentInstructionsDV:EditableCheckDisbursementDetailsInputSet:CheckOfficeInputSet:CheckIssuer</stringProp>
                  <stringProp name="Argument.value">${cCHECKISSUER}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ManualCreateCheckWizard:ManualCheckWizard_CheckInstructionsScreen:ManualCheckPaymentInstructionsDV:EditableCheckDisbursementDetailsInputSet:CardPackageIdInput" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ManualCreateCheckWizard:ManualCheckWizard_CheckInstructionsScreen:ManualCheckPaymentInstructionsDV:EditableCheckDisbursementDetailsInputSet:CardPackageIdInput</stringProp>
                  <stringProp name="Argument.value">${CardPackageID}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name=":tblinks" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">:tblinks</stringProp>
                  <stringProp name="Argument.value">${cTBLINKS_002}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="objFocusId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">objFocusId</stringProp>
                  <stringProp name="Argument.value">ManualCreateCheckWizard:Finish</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="eventSource" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">eventSource</stringProp>
                  <stringProp name="Argument.value">ManualCreateCheckWizard:Finish_act</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="csrfToken" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">csrfToken</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ManualCreateCheckWizard:0" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ManualCreateCheckWizard:0</stringProp>
                  <stringProp name="Argument.value">${cMANUALCREATECHECKWIZARD_003}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="Claim:ClaimMenuActions" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">Claim:ClaimMenuActions</stringProp>
                  <stringProp name="Argument.value">${cCLAIMMENUACTIONS_001}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">https://${SERVER}/cc/ClaimCenter.do</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Host</stringProp>
                  <stringProp name="Header.value">${SERVER}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cINFOBAR_003" enabled="true">
              <stringProp name="TestPlan.comments">&quot;ParamName=cINFOBAR_003&quot;|&quot;RegExp=\\\\/span&gt;\&quot;|\&quot;cls\&quot;:\&quot;infobar_elem\&quot;|\&quot;noaction\&quot;:1,\&quot;disabled\&quot;:true}],\&quot;checksum\&quot;:\&quot;(.*?)\&quot;},&quot;|SEARCH_FILTERS,&quot;Scope=Body&quot;|&quot;IgnoreRedirections=No&quot;|</stringProp>
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">cINFOBAR_003</stringProp>
              <stringProp name="RegexExtractor.regex">\\\\/span&gt;\&quot;,\&quot;cls\&quot;:\&quot;infobar_elem\&quot;,\&quot;noaction\&quot;:1,\&quot;disabled\&quot;:true}],\&quot;checksum\&quot;:\&quot;(.*?)\&quot;},</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">null</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cCLAIMCARDWIZARDMENULINKS" enabled="true">
              <stringProp name="TestPlan.comments">&quot;ParamName=cCLAIMCARDWIZARDMENULINKS&quot;,
		&quot;RegExp=enuLinks\&quot;:\\{\&quot;id\&quot;:\&quot;ClaimCardWizardLocationGroup:MenuLinks\&quot;,\&quot;frame\&quot;:false,\&quot;cls\&quot;:\&quot;leftnavmenu\&quot;,\&quot;xtype\&quot;:\&quot;accordionpanel\&quot;,\&quot;checksum\&quot;:\&quot;(.*?)\&quot;,&quot;,
		SEARCH_FILTERS,
		&quot;Scope=Body&quot;,
		&quot;IgnoreRedirections=No&quot;,
		&quot;NotFound=WARNING&quot;,</stringProp>
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">cCLAIMCARDWIZARDMENULINKS</stringProp>
              <stringProp name="RegexExtractor.regex">enuLinks\&quot;:\\{\&quot;id\&quot;:\&quot;ClaimCardWizardLocationGroup:MenuLinks\&quot;,\&quot;frame\&quot;:false,\&quot;cls\&quot;:\&quot;leftnavmenu\&quot;,\&quot;xtype\&quot;:\&quot;accordionpanel\&quot;,\&quot;checksum\&quot;:\&quot;(.*?)\&quot;,</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">null</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="responsecode" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">code</stringProp>
              <stringProp name="RegexExtractor.refname">responsecode</stringProp>
              <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">0</stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="ClaimsCardSuccessCount" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">ClaimsCardSuccessCount</stringProp>
              <stringProp name="RegexExtractor.regex">Claims C(.*?) Processed!</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">null</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="ValidationResultsCount" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">ValidationResultsCount</stringProp>
              <stringProp name="RegexExtractor.regex">Validation (.*?)sults</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">null</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="LOGGER" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">
//log.info(&quot;Request XML - &quot;+prev.getSamplerData());
//log.info(&quot;Response From Server - &quot;+prev.getResponseDataAsString());

String cTABS_002=vars.get(&quot;cTABS_002&quot;);
log.info(&quot;cTABS_002 - &quot;+cTABS_002);
String cINFOBAR_001=vars.get(&quot;cINFOBAR_001&quot;);
log.info(&quot;cINFOBAR_001 - &quot;+cINFOBAR_001);
String cDESKTOPMENUACTIONS_001=vars.get(&quot;cDESKTOPMENUACTIONS_001&quot;);
log.info(&quot;cDESKTOPMENUACTIONS_001 - &quot;+cDESKTOPMENUACTIONS_001);
String cDESKTOPMENULINKS_001=vars.get(&quot;cDESKTOPMENULINKS_001&quot;);
log.info(&quot;cDESKTOPMENULINKS_001 - &quot;+cDESKTOPMENULINKS_001);
String cMENULINKS_001=vars.get(&quot;cMENULINKS_001&quot;);
log.info(&quot;cMENULINKS_001 - &quot;+cMENULINKS_001);
String cTABS_001=vars.get(&quot;cTABS_001&quot;);
log.info(&quot;cTABS_001 - &quot;+cTABS_001);
String cTBLINKS_001=vars.get(&quot;cTBLINKS_001&quot;);
log.info(&quot;cTBLINKS_001 - &quot;+cTBLINKS_001);
//log.info(&quot;This is the variable name :&quot;+stats);</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">int rescode=Integer.parseInt(vars.get(&quot;responsecode&quot;));
String Stat=vars.get(&quot;ClaimsCardSuccessCount&quot;);
// if we get a sucessful http response from web service
if (rescode &gt;= 200 &amp;&amp; rescode &lt; 400)
{	//error if no results found
	if (!Stat.equals(&quot;null&quot;))
	{	
		// Login page displayed successfully.
		prev.setSuccessful(true);
	}
	else 
	{
		//Launch page is not display successfully
		log.error(&quot;Transaction Name :CNG_TP159_M_Click_Finish ##&quot;+&quot;Login ID and Password:&quot;+vars.get(&quot;USERNAME&quot;)+&quot; &quot;+vars.get(&quot;PASSWORD&quot;)+&quot;##&quot;+&quot;Request XML:&quot;+prev.getSamplerData()+&quot;##&quot;+&quot;HTTP Response Code:&quot;+vars.get(&quot;responsecode&quot;)+&quot;##&quot;+&quot;Response From Server : &quot;+prev.getResponseDataAsString());
		prev.setSuccessful(false);
		ctx.setRestartNextLoop(true);
}
}
else
{

//response is not 200
	log.error(&quot;Transaction Name :CNG_TP159_M_Click_Finish ##&quot;+&quot;Login ID and Password:&quot;+vars.get(&quot;USERNAME&quot;)+&quot; &quot;+vars.get(&quot;PASSWORD&quot;)+&quot;##&quot;+&quot;Request XML:&quot;+prev.getSamplerData()+&quot;##&quot;+&quot;HTTP Response Code:&quot;+vars.get(&quot;responsecode&quot;)+&quot;##&quot;+&quot;Response From Server : &quot;+prev.getResponseDataAsString());
	prev.setSuccessful(false);
	ctx.setRestartNextLoop(true);
}


</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ThinkTime - 10" enabled="true">
            <stringProp name="TestPlan.comments">This transaction will wait for 10 seconds</stringProp>
          </GenericController>
          <hashTree>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="ThinkTime" enabled="true">
              <stringProp name="ConstantTimer.delay">10000</stringProp>
              <stringProp name="TestPlan.comments">   Converting seconds to milliseconds - 10s x 1000</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
            <stringProp name="IfController.condition">&quot;$(ClaimsCardSuccessCount)&quot;!=&quot;ard&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">&quot;$(ValidationResultsCount)&quot;==&quot;Re&quot;</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP159_N_Clear_Validation" enabled="true">
                <boolProp name="TransactionController.includeTimers">false</boolProp>
                <boolProp name="TransactionController.parent">true</boolProp>
              </TransactionController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_27" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name=":tabs" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">:tabs</stringProp>
                        <stringProp name="Argument.value">${cTABS_002}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="infoBar" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">infoBar</stringProp>
                        <stringProp name="Argument.value">${cINFOBAR_001}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="TabBar:ClaimTab:ClaimTab_FindClaim" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">TabBar:ClaimTab:ClaimTab_FindClaim</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="QuickJump" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">QuickJump</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="ManualCreateCheckWizard:0_toggle" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">ManualCreateCheckWizard:0_toggle</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="ManualCreateCheckWizard:ManualCheckWizard_CheckInstructionsScreen:ManualCheckPaymentInstructionsDV:EditableCheckDisbursementDetailsInputSet:PaymentType" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">ManualCreateCheckWizard:ManualCheckWizard_CheckInstructionsScreen:ManualCheckPaymentInstructionsDV:EditableCheckDisbursementDetailsInputSet:PaymentType</stringProp>
                        <stringProp name="Argument.value">partial</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="ManualCreateCheckWizard:ManualCheckWizard_CheckInstructionsScreen:ManualCheckPaymentInstructionsDV:EditableCheckDisbursementDetailsInputSet:CheckOfficeInputSet:CheckIssuer" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">ManualCreateCheckWizard:ManualCheckWizard_CheckInstructionsScreen:ManualCheckPaymentInstructionsDV:EditableCheckDisbursementDetailsInputSet:CheckOfficeInputSet:CheckIssuer</stringProp>
                        <stringProp name="Argument.value">${cCHECKISSUER}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="ManualCreateCheckWizard:ManualCheckWizard_CheckInstructionsScreen:ManualCheckPaymentInstructionsDV:EditableCheckDisbursementDetailsInputSet:CardPackageIdInput" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">ManualCreateCheckWizard:ManualCheckWizard_CheckInstructionsScreen:ManualCheckPaymentInstructionsDV:EditableCheckDisbursementDetailsInputSet:CardPackageIdInput</stringProp>
                        <stringProp name="Argument.value">${CARDPACKAGEID}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name=":tblinks" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">:tblinks</stringProp>
                        <stringProp name="Argument.value">${cTBLINKS_002}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="objFocusId" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">objFocusId</stringProp>
                        <stringProp name="Argument.value">WebMessageWorksheet:WebMessageWorksheetScreen:WebMessageWorksheet_ClearButton</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="eventSource" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">eventSource</stringProp>
                        <stringProp name="Argument.value">WebMessageWorksheet:WebMessageWorksheetScreen:WebMessageWorksheet_ClearButton_act</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="csrfToken" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">csrfToken</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="ManualCreateCheckWizard:0" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">ManualCreateCheckWizard:0</stringProp>
                        <stringProp name="Argument.value">${cMANUALCREATECHECKWIZARD_003}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="Claim:ClaimMenuActions" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">Claim:ClaimMenuActions</stringProp>
                        <stringProp name="Argument.value">${cCLAIMMENUACTIONS_001}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">https://${SERVER}/cc/ClaimCenter.do</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
                  <boolProp name="HTTPSampler.image_parser">true</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">DNT</stringProp>
                        <stringProp name="Header.value">1</stringProp>
                      </elementProp>
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Host</stringProp>
                        <stringProp name="Header.value">${SERVER}</stringProp>
                      </elementProp>
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Connection</stringProp>
                        <stringProp name="Header.value">Keep-Alive</stringProp>
                      </elementProp>
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value">gzip, deflate</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="responsecode" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">code</stringProp>
                    <stringProp name="RegexExtractor.refname">responsecode</stringProp>
                    <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">0</stringProp>
                    <stringProp name="RegexExtractor.match_number"></stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="TextCheck" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">TextCheck</stringProp>
                    <stringProp name="RegexExtractor.regex">Guidew(.*?)e Navigator</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">null</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                    <stringProp name="Sample.scope">all</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="LOGGER" enabled="true">
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="script">
//log.info(&quot;Request XML - &quot;+prev.getSamplerData());
//log.info(&quot;Response From Server - &quot;+prev.getResponseDataAsString());

String cTABS_002=vars.get(&quot;cTABS_002&quot;);
log.info(&quot;cTABS_002 - &quot;+cTABS_002);
String cINFOBAR_001=vars.get(&quot;cINFOBAR_001&quot;);
log.info(&quot;cINFOBAR_001 - &quot;+cINFOBAR_001);
String cDESKTOPMENUACTIONS_001=vars.get(&quot;cDESKTOPMENUACTIONS_001&quot;);
log.info(&quot;cDESKTOPMENUACTIONS_001 - &quot;+cDESKTOPMENUACTIONS_001);
String cDESKTOPMENULINKS_001=vars.get(&quot;cDESKTOPMENULINKS_001&quot;);
log.info(&quot;cDESKTOPMENULINKS_001 - &quot;+cDESKTOPMENULINKS_001);
String cMENULINKS_001=vars.get(&quot;cMENULINKS_001&quot;);
log.info(&quot;cMENULINKS_001 - &quot;+cMENULINKS_001);
String cTABS_001=vars.get(&quot;cTABS_001&quot;);
log.info(&quot;cTABS_001 - &quot;+cTABS_001);
String cTBLINKS_001=vars.get(&quot;cTBLINKS_001&quot;);
log.info(&quot;cTBLINKS_001 - &quot;+cTBLINKS_001);
//log.info(&quot;This is the variable name :&quot;+stats);</stringProp>
                  </BeanShellPostProcessor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="ValidationResults2Count" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">ValidationResults2Count</stringProp>
                    <stringProp name="RegexExtractor.regex">Validation (.*?)sults</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">null</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                    <stringProp name="Sample.scope">all</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="script">int rescode=Integer.parseInt(vars.get(&quot;responsecode&quot;));
String Stat=vars.get(&quot;ValidationResults2Count&quot;);
// if we get a sucessful http response from web service
if (rescode &gt;= 200 &amp;&amp; rescode &lt; 400)
{	//error if no results found
	if (Stat.equals(&quot;null&quot;))
	{	
		// Login page displayed successfully.
		prev.setSuccessful(true);
	}
	else 
	{
		//Launch page is not display successfully
		log.error(&quot;Transaction Name :CNG_TP159_B_Login ##&quot;+&quot;Login ID and Password:&quot;+vars.get(&quot;USERNAME&quot;)+&quot; &quot;+vars.get(&quot;PASSWORD&quot;)+&quot;##&quot;+&quot;Request XML:&quot;+prev.getSamplerData()+&quot;##&quot;+&quot;HTTP Response Code:&quot;+vars.get(&quot;responsecode&quot;)+&quot;##&quot;+&quot;Response From Server : &quot;+prev.getResponseDataAsString());
		prev.setSuccessful(false);
		ctx.setRestartNextLoop(true);
}
}
else
{

//response is not 200
	log.error(&quot;Transaction Name :CNG_TP159_B_Login ##&quot;+&quot;Loing ID and Password:&quot;+vars.get(&quot;USERNAME&quot;)+&quot; &quot;+vars.get(&quot;PASSWORD&quot;)+&quot;##&quot;+&quot;Request XML:&quot;+prev.getSamplerData()+&quot;##&quot;+&quot;HTTP Response Code:&quot;+vars.get(&quot;responsecode&quot;)+&quot;##&quot;+&quot;Response From Server : &quot;+prev.getResponseDataAsString());
	prev.setSuccessful(false);
	ctx.setRestartNextLoop(true);
}


</stringProp>
                  </BeanShellPostProcessor>
                  <hashTree/>
                </hashTree>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="OutPut Message" enabled="true">
                  <stringProp name="TestPlan.comments">&quot;Unable to Finish Payment due to Validation message displayed for Claimnumber: %s&quot;, lr_eval_string(&quot;{CLAIMNUMBER}&quot;) | </stringProp>
                  <stringProp name="BeanShellSampler.query">log.info(&quot;&quot;+&quot;Unable to Finish Payment due to Validation message displayed for Claimnumber: ${CLAIMNUMBER}&quot;);</stringProp>
                  <stringProp name="BeanShellSampler.filename"></stringProp>
                  <stringProp name="BeanShellSampler.parameters"></stringProp>
                  <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                </BeanShellSampler>
                <hashTree/>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ThinkTime - 10" enabled="true">
                  <stringProp name="TestPlan.comments">This transaction will wait for 10 seconds</stringProp>
                </GenericController>
                <hashTree>
                  <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="ThinkTime" enabled="true">
                    <stringProp name="ConstantTimer.delay">10000</stringProp>
                    <stringProp name="TestPlan.comments">   Converting seconds to milliseconds - 10s x 1000</stringProp>
                  </ConstantTimer>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP159_O_Click_Finish" enabled="true">
                <boolProp name="TransactionController.includeTimers">false</boolProp>
                <boolProp name="TransactionController.parent">true</boolProp>
              </TransactionController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_29" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name=":tabs" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">:tabs</stringProp>
                        <stringProp name="Argument.value">${cTABS_002}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="infoBar" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">infoBar</stringProp>
                        <stringProp name="Argument.value">${cINFOBAR_001}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="TabBar:ClaimTab:ClaimTab_FindClaim" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">TabBar:ClaimTab:ClaimTab_FindClaim</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="QuickJump" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">QuickJump</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="ManualCreateCheckWizard:0_toggle" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">ManualCreateCheckWizard:0_toggle</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="ManualCreateCheckWizard:ManualCheckWizard_CheckInstructionsScreen:ManualCheckPaymentInstructionsDV:EditableCheckDisbursementDetailsInputSet:PaymentType" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">ManualCreateCheckWizard:ManualCheckWizard_CheckInstructionsScreen:ManualCheckPaymentInstructionsDV:EditableCheckDisbursementDetailsInputSet:PaymentType</stringProp>
                        <stringProp name="Argument.value">partial</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="ManualCreateCheckWizard:ManualCheckWizard_CheckInstructionsScreen:ManualCheckPaymentInstructionsDV:EditableCheckDisbursementDetailsInputSet:CheckOfficeInputSet:CheckIssuer" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">ManualCreateCheckWizard:ManualCheckWizard_CheckInstructionsScreen:ManualCheckPaymentInstructionsDV:EditableCheckDisbursementDetailsInputSet:CheckOfficeInputSet:CheckIssuer</stringProp>
                        <stringProp name="Argument.value">${cCHECKISSUER}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="ManualCreateCheckWizard:ManualCheckWizard_CheckInstructionsScreen:ManualCheckPaymentInstructionsDV:EditableCheckDisbursementDetailsInputSet:CardPackageIdInput" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">ManualCreateCheckWizard:ManualCheckWizard_CheckInstructionsScreen:ManualCheckPaymentInstructionsDV:EditableCheckDisbursementDetailsInputSet:CardPackageIdInput</stringProp>
                        <stringProp name="Argument.value">${CARDPACKAGEID}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name=":tblinks" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">:tblinks</stringProp>
                        <stringProp name="Argument.value">${cTBLINKS_002}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="objFocusId" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">objFocusId</stringProp>
                        <stringProp name="Argument.value">ManualCreateCheckWizard:Finish</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="eventSource" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">eventSource</stringProp>
                        <stringProp name="Argument.value">ManualCreateCheckWizard:Finish_act</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="csrfToken" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">csrfToken</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="ManualCreateCheckWizard:0" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">ManualCreateCheckWizard:0</stringProp>
                        <stringProp name="Argument.value">${cMANUALCREATECHECKWIZARD_003}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="Claim:ClaimMenuActions" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">Claim:ClaimMenuActions</stringProp>
                        <stringProp name="Argument.value">${cCLAIMMENUACTIONS_001}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">https://${SERVER}/cc/ClaimCenter.do</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
                  <boolProp name="HTTPSampler.image_parser">true</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">DNT</stringProp>
                        <stringProp name="Header.value">1</stringProp>
                      </elementProp>
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Host</stringProp>
                        <stringProp name="Header.value">${SERVER}</stringProp>
                      </elementProp>
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Connection</stringProp>
                        <stringProp name="Header.value">Keep-Alive</stringProp>
                      </elementProp>
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value">gzip, deflate</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cINFOBAR_003" enabled="true">
                    <stringProp name="TestPlan.comments">&quot;ParamName=cINFOBAR_003&quot;,
			&quot;RegExp=\\\\/span&gt;\&quot;,\&quot;cls\&quot;:\&quot;infobar_elem\&quot;,\&quot;noaction\&quot;:1,\&quot;disabled\&quot;:true}],\&quot;checksum\&quot;:\&quot;(.*?)\&quot;},&quot;,
			SEARCH_FILTERS,
			&quot;Scope=Body&quot;,
			&quot;IgnoreRedirections=No&quot;,</stringProp>
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">cINFOBAR_003</stringProp>
                    <stringProp name="RegexExtractor.regex">\\\\/span&gt;\&quot;,\&quot;cls\&quot;:\&quot;infobar_elem\&quot;,\&quot;noaction\&quot;:1,\&quot;disabled\&quot;:true}],\&quot;checksum\&quot;:\&quot;(.*?)\&quot;},</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">null</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cCLAIMCARDWIZARDMENULINKS" enabled="true">
                    <stringProp name="TestPlan.comments">&quot;ParamName=cINFOBAR_003&quot;|&quot;RegExp=\\\\/span&gt;\&quot;|\&quot;cls\&quot;:\&quot;infobar_elem\&quot;|\&quot;noaction\&quot;:1,\&quot;disabled\&quot;:true}],\&quot;checksum\&quot;:\&quot;(.*?)\&quot;},&quot;|SEARCH_FILTERS,&quot;Scope=Body&quot;|&quot;IgnoreRedirections=No&quot;|</stringProp>
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">cCLAIMCARDWIZARDMENULINKS</stringProp>
                    <stringProp name="RegexExtractor.regex">enuLinks\&quot;:\\{\&quot;id\&quot;:\&quot;ClaimCardWizardLocationGroup:MenuLinks\&quot;,\&quot;frame\&quot;:false,\&quot;cls\&quot;:\&quot;leftnavmenu\&quot;,\&quot;xtype\&quot;:\&quot;accordionpanel\&quot;,\&quot;checksum\&quot;:\&quot;(.*?)\&quot;,</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">null</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="responsecode" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">code</stringProp>
                    <stringProp name="RegexExtractor.refname">responsecode</stringProp>
                    <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">0</stringProp>
                    <stringProp name="RegexExtractor.match_number"></stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="TextCheck" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">TextCheck</stringProp>
                    <stringProp name="RegexExtractor.regex">Guidew(.*?)e Navigator</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">null</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                    <stringProp name="Sample.scope">all</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="LOGGER" enabled="true">
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="script">
//log.info(&quot;Request XML - &quot;+prev.getSamplerData());
//log.info(&quot;Response From Server - &quot;+prev.getResponseDataAsString());

String cTABS_002=vars.get(&quot;cTABS_002&quot;);
log.info(&quot;cTABS_002 - &quot;+cTABS_002);
String cINFOBAR_001=vars.get(&quot;cINFOBAR_001&quot;);
log.info(&quot;cINFOBAR_001 - &quot;+cINFOBAR_001);
String cDESKTOPMENUACTIONS_001=vars.get(&quot;cDESKTOPMENUACTIONS_001&quot;);
log.info(&quot;cDESKTOPMENUACTIONS_001 - &quot;+cDESKTOPMENUACTIONS_001);
String cDESKTOPMENULINKS_001=vars.get(&quot;cDESKTOPMENULINKS_001&quot;);
log.info(&quot;cDESKTOPMENULINKS_001 - &quot;+cDESKTOPMENULINKS_001);
String cMENULINKS_001=vars.get(&quot;cMENULINKS_001&quot;);
log.info(&quot;cMENULINKS_001 - &quot;+cMENULINKS_001);
String cTABS_001=vars.get(&quot;cTABS_001&quot;);
log.info(&quot;cTABS_001 - &quot;+cTABS_001);
String cTBLINKS_001=vars.get(&quot;cTBLINKS_001&quot;);
log.info(&quot;cTBLINKS_001 - &quot;+cTBLINKS_001);
//log.info(&quot;This is the variable name :&quot;+stats);</stringProp>
                  </BeanShellPostProcessor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="ClaimsCardSuccessCount2" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">ClaimsCardSuccessCount2</stringProp>
                    <stringProp name="RegexExtractor.regex">Claims (.*?)d Processed!</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">null</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                    <stringProp name="Sample.scope">all</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="script">int rescode=Integer.parseInt(vars.get(&quot;responsecode&quot;));
String Stat=vars.get(&quot;ClaimsCardSuccessCount2&quot;);
// if we get a sucessful http response from web service
if (rescode &gt;= 200 &amp;&amp; rescode &lt; 400)
{	//error if no results found
	if (!Stat.equals(&quot;null&quot;))
	{	
		// Login page displayed successfully.
		prev.setSuccessful(true);
	}
	else 
	{
		//Launch page is not display successfully
		log.error(&quot;Transaction Name :CNG_TP159_B_Login ##&quot;+&quot;Login ID and Password:&quot;+vars.get(&quot;USERNAME&quot;)+&quot; &quot;+vars.get(&quot;PASSWORD&quot;)+&quot;##&quot;+&quot;Request XML:&quot;+prev.getSamplerData()+&quot;##&quot;+&quot;HTTP Response Code:&quot;+vars.get(&quot;responsecode&quot;)+&quot;##&quot;+&quot;Response From Server : &quot;+prev.getResponseDataAsString());
		prev.setSuccessful(false);
		ctx.setRestartNextLoop(true);
}
}
else
{

//response is not 200
	log.error(&quot;Transaction Name :CNG_TP159_B_Login ##&quot;+&quot;Login ID and Password:&quot;+vars.get(&quot;USERNAME&quot;)+&quot; &quot;+vars.get(&quot;PASSWORD&quot;)+&quot;##&quot;+&quot;Request XML:&quot;+prev.getSamplerData()+&quot;##&quot;+&quot;HTTP Response Code:&quot;+vars.get(&quot;responsecode&quot;)+&quot;##&quot;+&quot;Response From Server : &quot;+prev.getResponseDataAsString());
	prev.setSuccessful(false);
	ctx.setRestartNextLoop(true);
}


</stringProp>
                  </BeanShellPostProcessor>
                  <hashTree/>
                </hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ThinkTime - 10" enabled="true">
                  <stringProp name="TestPlan.comments">This transaction will wait for 10 seconds</stringProp>
                </GenericController>
                <hashTree>
                  <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="ThinkTime" enabled="true">
                    <stringProp name="ConstantTimer.delay">10000</stringProp>
                    <stringProp name="TestPlan.comments">   Converting seconds to milliseconds - 10s x 1000</stringProp>
                  </ConstantTimer>
                  <hashTree/>
                </hashTree>
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP159_P_View_Payment" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_30" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="csrfToken" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">csrfToken</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="eventSource" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">eventSource</stringProp>
                  <stringProp name="Argument.value">ClaimCardWizardLanding:GoToFinancialDetails_act</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="TabBar:ClaimTab:ClaimTab_FindClaim" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">TabBar:ClaimTab:ClaimTab_FindClaim</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="QuickJump" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">QuickJump</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ClaimCardWizardLocationGroup:MenuLinks_toggle" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ClaimCardWizardLocationGroup:MenuLinks_toggle</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name=":tblinks" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">:tblinks</stringProp>
                  <stringProp name="Argument.value">${cTBLINKS_001}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name=":tabs" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">:tabs</stringProp>
                  <stringProp name="Argument.value">${cTABS_001}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="infoBar" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">infoBar</stringProp>
                  <stringProp name="Argument.value">${cINFOBAR_003}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ClaimCardWizardLocationGroup:MenuLinks" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ClaimCardWizardLocationGroup:MenuLinks</stringProp>
                  <stringProp name="Argument.value">${cCLAIMCARDWIZARDMENULINKS}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="objFocusId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">objFocusId</stringProp>
                  <stringProp name="Argument.value">ClaimCardWizardLanding:GoToFinancialDetails</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">https://${SERVER}/cc/ClaimCenter.do</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Host</stringProp>
                  <stringProp name="Header.value">${SERVER}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="responsecode" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">code</stringProp>
              <stringProp name="RegexExtractor.refname">responsecode</stringProp>
              <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">0</stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="ClaimsCardDetailsScreenSuccessCount" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">ClaimsCardDetailsScreenSuccessCount</stringProp>
              <stringProp name="RegexExtractor.regex">Claims (.*?)d Details</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">null</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">int rescode=Integer.parseInt(vars.get(&quot;responsecode&quot;));
String Stat=vars.get(&quot;ClaimsCardDetailsScreenSuccessCount&quot;);
// if we get a sucessful http response from web service
if (rescode &gt;= 200 &amp;&amp; rescode &lt; 400)
{	//error if no results found
	if (!Stat.equals(&quot;null&quot;))
	{	
		// Login page displayed successfully.
		prev.setSuccessful(true);
	}
	else 
	{
		//Launch page is not display successfully
		log.error(&quot;Transaction Name :CNG_TP159_P_View_Payment ##&quot;+&quot;Login ID and Password:&quot;+vars.get(&quot;USERNAME&quot;)+&quot; &quot;+vars.get(&quot;PASSWORD&quot;)+&quot;##&quot;+&quot;Request XML:&quot;+prev.getSamplerData()+&quot;##&quot;+&quot;HTTP Response Code:&quot;+vars.get(&quot;responsecode&quot;)+&quot;##&quot;+&quot;Response From Server : &quot;+prev.getResponseDataAsString());
		prev.setSuccessful(false);
		ctx.setRestartNextLoop(true);
}
}
else
{

//response is not 200
	log.error(&quot;Transaction Name :CNG_TP159_P_View_Payment ##&quot;+&quot;Login ID and Password:&quot;+vars.get(&quot;USERNAME&quot;)+&quot; &quot;+vars.get(&quot;PASSWORD&quot;)+&quot;##&quot;+&quot;Request XML:&quot;+prev.getSamplerData()+&quot;##&quot;+&quot;HTTP Response Code:&quot;+vars.get(&quot;responsecode&quot;)+&quot;##&quot;+&quot;Response From Server : &quot;+prev.getResponseDataAsString());
	prev.setSuccessful(false);
	ctx.setRestartNextLoop(true);
}


</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ThinkTime - 10" enabled="true">
            <stringProp name="TestPlan.comments">This transaction will wait for 10 seconds</stringProp>
          </GenericController>
          <hashTree>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="ThinkTime" enabled="true">
              <stringProp name="ConstantTimer.delay">10000</stringProp>
              <stringProp name="TestPlan.comments">   Converting seconds to milliseconds - 10s x 1000</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP159_Q_Return_To_Claim_Summary" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_32" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="Claim:MenuLinks" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">Claim:MenuLinks</stringProp>
                  <stringProp name="Argument.value">${cMENULINKS_001}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="csrfToken" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">csrfToken</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="TabBar:ClaimTab:ClaimTab_FindClaim" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">TabBar:ClaimTab:ClaimTab_FindClaim</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="QuickJump" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">QuickJump</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="Claim:MenuLinks_toggle" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">Claim:MenuLinks_toggle</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name=":tblinks" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">:tblinks</stringProp>
                  <stringProp name="Argument.value">${cTBLINKS_001}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name=":tabs" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">:tabs</stringProp>
                  <stringProp name="Argument.value">${cTABS_002}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="infoBar" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">infoBar</stringProp>
                  <stringProp name="Argument.value">${cINFOBAR_001}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="Claim:ClaimMenuActions" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">Claim:ClaimMenuActions</stringProp>
                  <stringProp name="Argument.value">${cCLAIMMENUACTIONS_001}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="eventSource" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">eventSource</stringProp>
                  <stringProp name="Argument.value">Claim:MenuLinks:Claim_ClaimSummaryGroup:ClaimSummaryGroup_ClaimSummary_act</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">https://${SERVER}/cc/ClaimCenter.do</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Host</stringProp>
                  <stringProp name="Header.value">${SERVER}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="responsecode" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">code</stringProp>
              <stringProp name="RegexExtractor.refname">responsecode</stringProp>
              <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">0</stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="ClaimSummaryScreenSuccessCount" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">ClaimSummaryScreenSuccessCount</stringProp>
              <stringProp name="RegexExtractor.regex">Sum(.*?)ary</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">null</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">int rescode=Integer.parseInt(vars.get(&quot;responsecode&quot;));
String Stat=vars.get(&quot;ClaimSummaryScreenSuccessCount&quot;);
// if we get a sucessful http response from web service
if (rescode &gt;= 200 &amp;&amp; rescode &lt; 400)
{	//error if no results found
	if (!Stat.equals(&quot;null&quot;))
	{	
		// Login page displayed successfully.
		prev.setSuccessful(true);
	}
	else 
	{
		//Launch page is not display successfully
		log.error(&quot;Transaction Name :CNG_TP159_Q_Return_To_Claim_Summary ##&quot;+&quot;Login ID and Password:&quot;+vars.get(&quot;USERNAME&quot;)+&quot; &quot;+vars.get(&quot;PASSWORD&quot;)+&quot;##&quot;+&quot;Request XML:&quot;+prev.getSamplerData()+&quot;##&quot;+&quot;HTTP Response Code:&quot;+vars.get(&quot;responsecode&quot;)+&quot;##&quot;+&quot;Response From Server : &quot;+prev.getResponseDataAsString());
		prev.setSuccessful(false);
		ctx.setRestartNextLoop(true);
}
}
else
{

//response is not 200
	log.error(&quot;Transaction Name :CNG_TP159_Q_Return_To_Claim_Summary ##&quot;+&quot;Login ID and Password:&quot;+vars.get(&quot;USERNAME&quot;)+&quot; &quot;+vars.get(&quot;PASSWORD&quot;)+&quot;##&quot;+&quot;Request XML:&quot;+prev.getSamplerData()+&quot;##&quot;+&quot;HTTP Response Code:&quot;+vars.get(&quot;responsecode&quot;)+&quot;##&quot;+&quot;Response From Server : &quot;+prev.getResponseDataAsString());
	prev.setSuccessful(false);
	ctx.setRestartNextLoop(true);
}


</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP159_R_Return_To_Desktop" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_34" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="Claim:MenuLinks" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">Claim:MenuLinks</stringProp>
                  <stringProp name="Argument.value">${cMENULINKS_001}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="csrfToken" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">csrfToken</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="TabBar:ClaimTab:ClaimTab_FindClaim" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">TabBar:ClaimTab:ClaimTab_FindClaim</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="QuickJump" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">QuickJump</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="Claim:MenuLinks_toggle" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">Claim:MenuLinks_toggle</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name=":tblinks" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">:tblinks</stringProp>
                  <stringProp name="Argument.value">${cTBLINKS_001}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name=":tabs" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">:tabs</stringProp>
                  <stringProp name="Argument.value">${cTABS_002}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="infoBar" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">infoBar</stringProp>
                  <stringProp name="Argument.value">${cINFOBAR_001}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="Claim:ClaimMenuActions" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">Claim:ClaimMenuActions</stringProp>
                  <stringProp name="Argument.value">${cCLAIMMENUACTIONS_001}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="objFocusId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">objFocusId</stringProp>
                  <stringProp name="Argument.value">TabBar:DesktopTab</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="eventSource" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">eventSource</stringProp>
                  <stringProp name="Argument.value">TabBar:DesktopTab_act</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">https://${SERVER}/cc/ClaimCenter.do</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Host</stringProp>
                  <stringProp name="Header.value">${SERVER}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="responsecode" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">code</stringProp>
              <stringProp name="RegexExtractor.refname">responsecode</stringProp>
              <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">0</stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="ActivitiesScreenSuccessCount" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">ActivitiesScreenSuccessCount</stringProp>
              <stringProp name="RegexExtractor.regex">Activ(.*?)ies</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">null</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">int rescode=Integer.parseInt(vars.get(&quot;responsecode&quot;));
String Stat=vars.get(&quot;ActivitiesScreenSuccessCount&quot;);
// if we get a sucessful http response from web service
if (rescode &gt;= 200 &amp;&amp; rescode &lt; 400)
{	//error if no results found
	if (!Stat.equals(&quot;null&quot;))
	{	
		// Login page displayed successfully.
		prev.setSuccessful(true);
	}
	else 
	{
		//Launch page is not display successfully
		log.error(&quot;Transaction Name :CNG_TP159_R_Return_To_Desktop ##&quot;+&quot;Login ID and Password:&quot;+vars.get(&quot;USERNAME&quot;)+&quot; &quot;+vars.get(&quot;PASSWORD&quot;)+&quot;##&quot;+&quot;Request XML:&quot;+prev.getSamplerData()+&quot;##&quot;+&quot;HTTP Response Code:&quot;+vars.get(&quot;responsecode&quot;)+&quot;##&quot;+&quot;Response From Server : &quot;+prev.getResponseDataAsString());
		prev.setSuccessful(false);
		ctx.setRestartNextLoop(true);
}
}
else
{

//response is not 200
	log.error(&quot;Transaction Name :CNG_TP159_R_Return_To_Desktop ##&quot;+&quot;Login ID and Password:&quot;+vars.get(&quot;USERNAME&quot;)+&quot; &quot;+vars.get(&quot;PASSWORD&quot;)+&quot;##&quot;+&quot;Request XML:&quot;+prev.getSamplerData()+&quot;##&quot;+&quot;HTTP Response Code:&quot;+vars.get(&quot;responsecode&quot;)+&quot;##&quot;+&quot;Response From Server : &quot;+prev.getResponseDataAsString());
	prev.setSuccessful(false);
	ctx.setRestartNextLoop(true);
}


</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ThinkTime - 10" enabled="true">
            <stringProp name="TestPlan.comments">This transaction will wait for 10 seconds</stringProp>
          </GenericController>
          <hashTree>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="ThinkTime" enabled="true">
              <stringProp name="ConstantTimer.delay">10000</stringProp>
              <stringProp name="TestPlan.comments">   Converting seconds to milliseconds - 10s x 1000</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CNG_TP159_S_Logout" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ClaimCenter.do_33" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&amp;QuickJump=&amp;Desktop%3AMenuLinks_toggle=&amp;DesktopActivities%3ADesktopActivitiesScreen%3ADesktopActivitiesLV%3ADesktopActivitiesFilter=AndFilter%2FMy%20activities%20today&amp;%3Atblinks=${cTBLINKS_001_URL2}&amp;%3Atabs=${cTABS_001_URL2}&amp;Desktop%3ADesktopMenuActions=${cDESKTOPMENUACTIONS_001_URL2}&amp;Desktop%3AMenuLinks=${cDESKTOPMENULINKS_001_URL2}&amp;csrfToken=&amp;eventSource=TabBar%3ALogoutTabBarLink_act&amp;objFocusId=TabBar%3ALogoutTabBarLink</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">https://${SERVER}/cc/ClaimCenter.do</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Host</stringProp>
                  <stringProp name="Header.value">${SERVER}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PMClaimCenterLogout.fcc" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">https://${SERVER}/LMAuth/PMClaimCenterLogout.fcc</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Host</stringProp>
                  <stringProp name="Header.value">${SERVER}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="responsecode" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">code</stringProp>
              <stringProp name="RegexExtractor.refname">responsecode</stringProp>
              <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">0</stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="TextCheck" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">TextCheck</stringProp>
              <stringProp name="RegexExtractor.regex">You have successfully (.*?) out of Navigator</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">null</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">int rescode=Integer.parseInt(vars.get(&quot;responsecode&quot;));
String Stat=vars.get(&quot;TextCheck&quot;);
// if we get a sucessful http response from web service
if (rescode &gt;= 200 &amp;&amp; rescode &lt; 400)
{	//error if no results found
	if (!Stat.equals(&quot;null&quot;))
	{	
		// Login page displayed successfully.
		prev.setSuccessful(true);
	}
	else 
	{
		//Launch page is not display successfully
		log.error(&quot;Transaction Name :CNG_TP159_S_Logout ##&quot;+&quot;Login ID and Password:&quot;+vars.get(&quot;USERNAME&quot;)+&quot; &quot;+vars.get(&quot;PASSWORD&quot;)+&quot;##&quot;+&quot;Request XML:&quot;+prev.getSamplerData()+&quot;##&quot;+&quot;HTTP Response Code:&quot;+vars.get(&quot;responsecode&quot;)+&quot;##&quot;+&quot;Response From Server : &quot;+prev.getResponseDataAsString());
		prev.setSuccessful(false);
		ctx.setRestartNextLoop(true);
}
}
else
{

//response is not 200
	log.error(&quot;Transaction Name :CNG_TP159_S_Logout ##&quot;+&quot;Login ID and Password:&quot;+vars.get(&quot;USERNAME&quot;)+&quot; &quot;+vars.get(&quot;PASSWORD&quot;)+&quot;##&quot;+&quot;Request XML:&quot;+prev.getSamplerData()+&quot;##&quot;+&quot;HTTP Response Code:&quot;+vars.get(&quot;responsecode&quot;)+&quot;##&quot;+&quot;Response From Server : &quot;+prev.getResponseDataAsString());
	prev.setSuccessful(false);
	ctx.setRestartNextLoop(true);
}


</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ThinkTime - 10" enabled="true">
            <stringProp name="TestPlan.comments">This transaction will wait for 10 seconds</stringProp>
          </GenericController>
          <hashTree>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="ThinkTime" enabled="true">
              <stringProp name="ConstantTimer.delay">10000</stringProp>
              <stringProp name="TestPlan.comments">   Converting seconds to milliseconds - 10s x 1000</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
            </value>
          </objProp>
          <stringProp name="filename">${reportTarget}/CNG_TP159_Financials_ClaimCard_v1_RESULTS.csv</stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
            </value>
          </objProp>
          <stringProp name="filename">${reportTarget}/CNG_TP159_Financials_ClaimCard_v1_RESULTS.csv</stringProp>
        </ResultCollector>
        <hashTree/>
        <kg.apc.jmeter.listener.GraphsGeneratorListener guiclass="TestBeanGUI" testclass="kg.apc.jmeter.listener.GraphsGeneratorListener" testname="jp@gc - Graphs Generator" enabled="true">
          <boolProp name="aggregateRows">false</boolProp>
          <boolProp name="autoScaleRows">false</boolProp>
          <stringProp name="endOffset"></stringProp>
          <stringProp name="excludeLabels"></stringProp>
          <boolProp name="excludeSamplesWithRegex">false</boolProp>
          <intProp name="exportMode">0</intProp>
          <stringProp name="filePrefix">CNG_TP159_Financials_ClaimCard_v1_RESULTS_${__time(YMDHMS)}-</stringProp>
          <stringProp name="forceY"></stringProp>
          <stringProp name="granulation">1000</stringProp>
          <intProp name="graphHeight">600</intProp>
          <intProp name="graphWidth">800</intProp>
          <stringProp name="includeLabels"></stringProp>
          <boolProp name="includeSamplesWithRegex">false</boolProp>
          <stringProp name="limitRows">150</stringProp>
          <stringProp name="lineWeight"></stringProp>
          <stringProp name="lowCountLimit"></stringProp>
          <stringProp name="outputBaseFolder">${reportTarget}/Reports</stringProp>
          <boolProp name="paintGradient">true</boolProp>
          <boolProp name="paintZeroing">true</boolProp>
          <boolProp name="preventOutliers">false</boolProp>
          <boolProp name="relativeTimes">false</boolProp>
          <stringProp name="resultsFileName">${reportTarget}/CNG_TP159_Financials_ClaimCard_v1_RESULTS.csv</stringProp>
          <stringProp name="startOffset"></stringProp>
          <stringProp name="successFilter"></stringProp>
        </kg.apc.jmeter.listener.GraphsGeneratorListener>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
