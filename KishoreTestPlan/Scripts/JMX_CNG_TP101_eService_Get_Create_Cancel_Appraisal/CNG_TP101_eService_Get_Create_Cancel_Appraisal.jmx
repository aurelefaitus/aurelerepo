<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="2.8" jmeter="2.13 r1665067">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="CNG_TP101_eService_Get_Create_Cancel_Appraisal" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">5</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">5</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1455260938000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <longProp name="ThreadGroup.end_time">0</longProp>
      </ThreadGroup>
      <hashTree>
        <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Defined Parameters" enabled="true">
          <boolProp name="UserParameters.per_iteration">false</boolProp>
          <collectionProp name="UserParameters.names"/>
          <collectionProp name="UserParameters.thread_values">
            <collectionProp name="1"/>
          </collectionProp>
        </UserParameters>
        <hashTree/>
        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Pacing" enabled="true">
          <stringProp name="ConstantTimer.delay">1</stringProp>
          <stringProp name="TestPlan.comments">   Converting seconds to milliseconds - 60s x 1000</stringProp>
        </ConstantTimer>
        <hashTree/>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">true</boolProp>
        </CookieManager>
        <hashTree/>
        <CacheManager guiclass="CacheManagerGui" testclass="CacheManager" testname="HTTP Cache Manager" enabled="true">
          <boolProp name="clearEachIteration">true</boolProp>
          <boolProp name="useExpires">false</boolProp>
        </CacheManager>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="filename">SERVER.csv</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <stringProp name="shareMode.all">shareMode</stringProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="filename">TP101.csv</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <stringProp name="shareMode.all">shareMode</stringProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="filename">REQUESTOR.csv</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <stringProp name="shareMode.all">shareMode</stringProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="filename">SERVICETYPE.csv</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <stringProp name="shareMode.all">shareMode</stringProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="filename">RECIPIENTNUMBER.csv</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <stringProp name="shareMode.all">shareMode</stringProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="TRANSACTIONS" enabled="true"/>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="TP101_010_eService_Get_Latest_Appraisal" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="EService_Get_Latest_Appraisal" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:app=&quot;http://pm.lmig.com/cl/AppraisalsLibrary/AppraisalsAPI&quot;&gt;	&lt;soap:Header/&gt;		&lt;soap:Body&gt;			&lt;app:getLatestAppraisalByIncidentId&gt;				&lt;AppraisalRequest&gt;				&lt;RequestId&gt;&lt;/RequestId&gt;				&lt;Requestor&gt;${REQUESTOR}&lt;/Requestor&gt;				&lt;UserID&gt;&lt;/UserID&gt;				&lt;IncidentId&gt;${INCIDENTID}&lt;/IncidentId&gt;				&lt;/AppraisalRequest&gt;			&lt;/app:getLatestAppraisalByIncidentId&gt;		&lt;/soap:Body&gt;&lt;/soap:Envelope&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">https://${SERVER}/AppraisalsMediationModuleWeb/sca/AppraisalsAPIExport1</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
              <boolProp name="HTTPSampler.image_parser">true</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/soap+xml; charset=utf-8</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">SOAPAction</stringProp>
                    <stringProp name="Header.value">https://${SERVER}/AppraisalsMediationModuleWeb/sca/AppraisalsAPIExport1</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Host</stringProp>
                    <stringProp name="Header.value">${SERVER}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Connection</stringProp>
                    <stringProp name="Header.value">Keep-Alive</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Qualification_Message" enabled="true">
                <stringProp name="TestPlan.comments">&quot;Qualification_Message&quot;|&quot;LB=&lt;QualificationMessage&gt;&quot;|&quot;RB=&lt;/QualificationMessage&gt;&quot;|&quot;Search=Body&quot;|&quot;IgnoreRedirections=Yes&quot;|&quot;NotFound=WARNING&quot;|</stringProp>
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">Qualification_Message</stringProp>
                <stringProp name="RegexExtractor.regex">&lt;QualificationMessage&gt;(.*?)&lt;/QualificationMessage&gt;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">null</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="APPRAISAL_ID" enabled="true">
                <stringProp name="TestPlan.comments">&quot;APPRAISAL_ID&quot;|&quot;LB=&lt;AppraisalId&gt;&quot;|&quot;RB=&lt;/AppraisalId&gt;&quot;|&quot;Search=Body&quot;|&quot;IgnoreRedirections=Yes&quot;|&quot;NotFound=WARNING&quot;|</stringProp>
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">APPRAISAL_ID</stringProp>
                <stringProp name="RegexExtractor.regex">&lt;AppraisalId&gt;(.*?)&lt;/AppraisalId&gt;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">null</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Error_Code" enabled="true">
                <stringProp name="TestPlan.comments">&quot;Error_Code&quot;|&quot;LB=&lt;Code&gt;&quot;|&quot;RB=&lt;/Code&gt;&quot;|&quot;Search=Body&quot;|&quot;IgnoreRedirections=Yes&quot;|&quot;NotFound=WARNING&quot;|</stringProp>
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">Error_Code</stringProp>
                <stringProp name="RegexExtractor.regex">&lt;Code&gt;(.*?)&lt;/Code&gt;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">null</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Error_Description" enabled="true">
                <stringProp name="TestPlan.comments">&quot;Error_Description&quot;|&quot;LB=&lt;Description&gt;&quot;|&quot;RB=&lt;/Description&gt;&quot;|&quot;Search=Body&quot;|&quot;IgnoreRedirections=Yes&quot;|&quot;NotFound=WARNING&quot;|</stringProp>
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">Error_Description</stringProp>
                <stringProp name="RegexExtractor.regex">&lt;Description&gt;(.*?)&lt;/Description&gt;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">null</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="SUCCESS_Count" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">SUCCESS_Count</stringProp>
                <stringProp name="RegexExtractor.regex">&lt;ResponseStatus&gt;su(.*?)ess&lt;/ResponseStatus&gt;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">null</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="APPRAISALID_Count" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">APPRAISALID_Count</stringProp>
                <stringProp name="RegexExtractor.regex">&lt;AppraisalId(.*?)cc:</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">null</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="responsecode" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">code</stringProp>
                <stringProp name="RegexExtractor.refname">responsecode</stringProp>
                <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">0</stringProp>
                <stringProp name="RegexExtractor.match_number"></stringProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="LOGGER" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">
//log.info(&quot;Request XML - &quot;+prev.getSamplerData());
//log.info(&quot;Response From Server - &quot;+prev.getResponseDataAsString());

log.info(&quot;Qualification_Message - &quot;+vars.get(&quot;Qualification_Message&quot;));
log.info(&quot;APPRAISAL_ID - &quot;+vars.get(&quot;APPRAISAL_ID&quot;));
log.info(&quot;Error_Code - &quot;+vars.get(&quot;Error_Code&quot;));
log.info(&quot;Error_Description - &quot;+vars.get(&quot;Error_Description&quot;));
log.info(&quot;SUCCESS_Count - &quot;+vars.get(&quot;SUCCESS_Count&quot;));
log.info(&quot;APPRAISALID_Count - &quot;+vars.get(&quot;APPRAISALID_Count&quot;));
log.info(&quot;responsecode - &quot;+vars.get(&quot;responsecode&quot;));
log.info(&quot;#####################__TP101_010_eService_Get_Latest_Appraisal&quot;);</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">int rescode=Integer.parseInt(vars.get(&quot;responsecode&quot;));
String Stat1=vars.get(&quot;SUCCESS_Count&quot;);
String Stat2=vars.get(&quot;APPRAISALID_Count&quot;);

if (rescode &gt;= 200 &amp;&amp; rescode &lt; 400)
	{	
	if (!Stat1.equals(&quot;null&quot;) &amp;&amp; !Stat2.equals(&quot;null&quot;))
		{	
		prev.setSuccessful(true);
		}
	else 
		{
		log.error(&quot;TP101_010_eService_Get_Latest_Appraisal failed for Request XML:&quot;+prev.getSamplerData()+&quot;####&quot;+&quot;HTTP Response Code:&quot;+vars.get(&quot;responsecode&quot;)+&quot;####&quot;+&quot;Response From Server : &quot;+prev.getResponseDataAsString());
		prev.setSuccessful(false);
		ctx.setRestartNextLoop(true);
		}
	}

else
	{
	log.error(&quot;TP101_010_eService_Get_Latest_Appraisal failed for Request XML:&quot;+prev.getSamplerData()+&quot;####&quot;+&quot;HTTP Response Code:&quot;+vars.get(&quot;responsecode&quot;)+&quot;####&quot;+&quot;Response From Server : &quot;+prev.getResponseDataAsString());
	prev.setSuccessful(false);
	ctx.setRestartNextLoop(true);
	}


</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ThinkTime - 0" enabled="true">
              <stringProp name="TestPlan.comments">This transaction will wait for 0 seconds</stringProp>
            </GenericController>
            <hashTree>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="ThinkTime" enabled="true">
                <stringProp name="ConstantTimer.delay">0</stringProp>
                <stringProp name="TestPlan.comments">   Converting seconds to milliseconds - 0s x 1000</stringProp>
              </ConstantTimer>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">&quot;${SUCCESS_Count}&quot;!=&quot;null&quot; &amp;&amp; &quot;${APPRAISALID_Count}&quot;==&quot;null&quot;</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="TP101_020_eService_Create_Shop_Appraisal" enabled="true">
                <boolProp name="TransactionController.includeTimers">false</boolProp>
                <boolProp name="TransactionController.parent">true</boolProp>
              </TransactionController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="EService_Create_Shop_Appraisal" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:app=&quot;http://pm.lmig.com/cl/AppraisalsLibrary/AppraisalsAPI&quot;&gt;	&lt;soap:Header/&gt;	&lt;soap:Body&gt;		&lt;app:createShopAppraisal&gt;			&lt;ShopServiceRequest&gt;    			&lt;RequestId&gt;&lt;/RequestId&gt;    			&lt;Requestor&gt;${REQUESTOR}&lt;/Requestor&gt;    			&lt;UserID&gt;&lt;/UserID&gt;            	&lt;Appointment&gt;       				&lt;Date&gt;${DATE}&lt;/Date&gt;				&lt;/Appointment&gt;    			&lt;DeductibleWaived&gt;&lt;/DeductibleWaived&gt;    			&lt;DirectionToPay&gt;&lt;/DirectionToPay&gt;    			&lt;IncidentId&gt;${INCIDENTID}&lt;/IncidentId&gt;    			&lt;Notes&gt;&lt;/Notes&gt;    			&lt;OkayToPay&gt;&lt;/OkayToPay&gt;    			&lt;RecipientNumber&gt;${RECIPIENTNUMBER}&lt;/RecipientNumber&gt;    			&lt;ServiceType&gt;${SERVICETYPE}&lt;/ServiceType&gt;    			&lt;TowNeeded&gt;&lt;/TowNeeded&gt;    			&lt;WaiverReason&gt;&lt;/WaiverReason&gt; 				&lt;/ShopServiceRequest&gt;		&lt;/app:createShopAppraisal&gt;	&lt;/soap:Body&gt;&lt;/soap:Envelope&gt;</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">https://${SERVER}/AppraisalsMediationModuleWeb/sca/AppraisalsAPIExport1</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
                  <boolProp name="HTTPSampler.image_parser">true</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/soap+xml; charset=utf-8</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">SOAPAction</stringProp>
                        <stringProp name="Header.value">https://${SERVER}/AppraisalsMediationModuleWeb/sca/AppraisalsAPIExport1</stringProp>
                      </elementProp>
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Host</stringProp>
                        <stringProp name="Header.value">${SERVER}</stringProp>
                      </elementProp>
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Connection</stringProp>
                        <stringProp name="Header.value">Keep-Alive</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="APPRAISAL_ID" enabled="true">
                    <stringProp name="TestPlan.comments">&quot;APPRAISAL_ID&quot;|&quot;LB=&lt;AppraisalId&gt;&quot;|&quot;RB=&lt;/AppraisalId&gt;&quot;|&quot;Search=Body&quot;|&quot;IgnoreRedirections=Yes&quot;|&quot;NotFound=WARNING&quot;|</stringProp>
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">APPRAISAL_ID</stringProp>
                    <stringProp name="RegexExtractor.regex">&lt;AppraisalId&gt;(.*?)&lt;/AppraisalId&gt;</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">null</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                    <stringProp name="Sample.scope">all</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Error_Code" enabled="true">
                    <stringProp name="TestPlan.comments">&quot;Error_Code&quot;|&quot;LB=&lt;Code&gt;&quot;|&quot;RB=&lt;/Code&gt;&quot;|&quot;Search=Body&quot;|&quot;IgnoreRedirections=Yes&quot;|&quot;NotFound=WARNING&quot;|</stringProp>
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">Error_Code</stringProp>
                    <stringProp name="RegexExtractor.regex">&lt;Code&gt;(.*?)&lt;/Code&gt;</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">null</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                    <stringProp name="Sample.scope">all</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Error_Description" enabled="true">
                    <stringProp name="TestPlan.comments">&quot;Error_Description&quot;|&quot;LB=&lt;Description&gt;&quot;|&quot;RB=&lt;/Description&gt;&quot;|&quot;Search=Body&quot;|&quot;IgnoreRedirections=Yes&quot;|&quot;NotFound=WARNING&quot;|</stringProp>
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">Error_Description</stringProp>
                    <stringProp name="RegexExtractor.regex">&lt;Description&gt;(.*?)&lt;/Description&gt;</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">null</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                    <stringProp name="Sample.scope">all</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="SUCCESS_Count" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">SUCCESS_Count</stringProp>
                    <stringProp name="RegexExtractor.regex">&lt;ResponseStatus&gt;su(.*?)ess&lt;/ResponseStatus&gt;</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">null</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                    <stringProp name="Sample.scope">all</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="ASSIGNMENT_Count" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">ASSIGNMENT_Count</stringProp>
                    <stringProp name="RegexExtractor.regex">&lt;AssessmentLineEvent&gt;Assignment S(.*?)eduled&lt;/AssessmentLineEvent&gt;</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">null</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                    <stringProp name="Sample.scope">all</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="ASSIGNMENT_Count2" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">ASSIGNMENT_Count2</stringProp>
                    <stringProp name="RegexExtractor.regex">&lt;AssessmentLineEvent&gt;Assignment In Q(.*?)ue&lt;/AssessmentLineEvent&gt;</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">null</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                    <stringProp name="Sample.scope">all</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="responsecode" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">code</stringProp>
                    <stringProp name="RegexExtractor.refname">responsecode</stringProp>
                    <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">0</stringProp>
                    <stringProp name="RegexExtractor.match_number"></stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="LOGGER" enabled="true">
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="script">
//log.info(&quot;Request XML - &quot;+prev.getSamplerData());
//log.info(&quot;Response From Server - &quot;+prev.getResponseDataAsString());

log.info(&quot;SUCCESS_Count - &quot;+vars.get(&quot;SUCCESS_Count&quot;));
log.info(&quot;APPRAISAL_ID - &quot;+vars.get(&quot;APPRAISAL_ID&quot;));
log.info(&quot;Error_Code - &quot;+vars.get(&quot;Error_Code&quot;));
log.info(&quot;Error_Description - &quot;+vars.get(&quot;Error_Description&quot;));
log.info(&quot;ASSIGNMENT_Count - &quot;+vars.get(&quot;ASSIGNMENT_Count&quot;));
log.info(&quot;ASSIGNMENT_Count2 - &quot;+vars.get(&quot;ASSIGNMENT_Count2&quot;));
log.info(&quot;responsecode - &quot;+vars.get(&quot;responsecode&quot;));
log.info(&quot;#####################__TP101_020_eService_Create_Shop_Appraisal&quot;);</stringProp>
                  </BeanShellPostProcessor>
                  <hashTree/>
                  <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="script">int rescode=Integer.parseInt(vars.get(&quot;responsecode&quot;));
String Stat1=vars.get(&quot;SUCCESS_Count&quot;);
String Stat2=vars.get(&quot;ASSIGNMENT_Count&quot;);
String Stat3=vars.get(&quot;ASSIGNMENT_Count2&quot;);

if (rescode &gt;= 200 &amp;&amp; rescode &lt; 400)
	{	
	if (!Stat1.equals(&quot;null&quot;) &amp;&amp; !Stat2.equals(&quot;null&quot;) || !Stat3.equals(&quot;null&quot;))
		{	
		prev.setSuccessful(true);
		}
	else 
		{
		log.error(&quot;TP101_020_eService_Create_Shop_Appraisal failed for Request XML:&quot;+prev.getSamplerData()+&quot;####&quot;+&quot;HTTP Response Code:&quot;+vars.get(&quot;responsecode&quot;)+&quot;####&quot;+&quot;Response From Server : &quot;+prev.getResponseDataAsString());
		prev.setSuccessful(false);
		ctx.setRestartNextLoop(true);
		}
	}

else
	{
	log.error(&quot;TP101_020_eService_Create_Shop_Appraisal failed for Request XML:&quot;+prev.getSamplerData()+&quot;####&quot;+&quot;HTTP Response Code:&quot;+vars.get(&quot;responsecode&quot;)+&quot;####&quot;+&quot;Response From Server : &quot;+prev.getResponseDataAsString());
	prev.setSuccessful(false);
	ctx.setRestartNextLoop(true);
	}


</stringProp>
                  </BeanShellPostProcessor>
                  <hashTree/>
                </hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ThinkTime - 10" enabled="true">
                  <stringProp name="TestPlan.comments">This transaction will wait for 10 seconds</stringProp>
                </GenericController>
                <hashTree>
                  <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="ThinkTime" enabled="true">
                    <stringProp name="ConstantTimer.delay">10000</stringProp>
                    <stringProp name="TestPlan.comments">   Converting seconds to milliseconds - 10s x 1000</stringProp>
                  </ConstantTimer>
                  <hashTree/>
                </hashTree>
              </hashTree>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">&quot;SUCCESS_Count&quot;!=&quot;null&quot; &amp;&amp; &quot;ASSIGNMENT_Count&quot;!=&quot;null&quot; || &quot;ASSIGNMENT_Count2&quot;!=&quot;null&quot;</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="TP101_030_eService_Cancel_Appraisal" enabled="true">
                <boolProp name="TransactionController.includeTimers">false</boolProp>
                <boolProp name="TransactionController.parent">true</boolProp>
              </TransactionController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="EService_Create_Express_Review" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:app=&quot;http://pm.lmig.com/cl/AppraisalsLibrary/AppraisalsAPI&quot;&gt;	&lt;soap:Header/&gt;	&lt;soap:Body&gt;		&lt;app:cancelAppraisal&gt;			&lt;CancelRequest&gt;		    	&lt;RequestId&gt;&lt;/RequestId&gt;		    	&lt;Requestor&gt;${REQUESTOR}&lt;/Requestor&gt;    			&lt;UserID&gt;&lt;/UserID&gt;    			&lt;AppraisalId&gt;${APPRAISAL_ID}&lt;/AppraisalId&gt; 			&lt;/CancelRequest&gt;		&lt;/app:cancelAppraisal&gt;	&lt;/soap:Body&gt;&lt;/soap:Envelope&gt;</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">https://${SERVER}/AppraisalsMediationModuleWeb/sca/AppraisalsAPIExport1</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
                  <boolProp name="HTTPSampler.image_parser">true</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/soap+xml; charset=utf-8</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">SOAPAction</stringProp>
                        <stringProp name="Header.value">https://${SERVER}/AppraisalsMediationModuleWeb/sca/AppraisalsAPIExport1</stringProp>
                      </elementProp>
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Host</stringProp>
                        <stringProp name="Header.value">${SERVER}</stringProp>
                      </elementProp>
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Connection</stringProp>
                        <stringProp name="Header.value">Keep-Alive</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="APPRAISAL_ID" enabled="true">
                    <stringProp name="TestPlan.comments">&quot;APPRAISAL_ID&quot;|&quot;LB=&lt;AppraisalId&gt;&quot;|&quot;RB=&lt;/AppraisalId&gt;&quot;|&quot;Search=Body&quot;|&quot;IgnoreRedirections=Yes&quot;|&quot;NotFound=WARNING&quot;|</stringProp>
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">APPRAISAL_ID</stringProp>
                    <stringProp name="RegexExtractor.regex">&lt;AppraisalId&gt;(.*?)&lt;/AppraisalId&gt;</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">null</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Error_Code" enabled="true">
                    <stringProp name="TestPlan.comments">&quot;Error_Code&quot;|&quot;LB=&lt;Code&gt;&quot;|&quot;RB=&lt;/Code&gt;&quot;|&quot;Search=Body&quot;|&quot;IgnoreRedirections=Yes&quot;|&quot;NotFound=WARNING&quot;|</stringProp>
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">Error_Code</stringProp>
                    <stringProp name="RegexExtractor.regex">&lt;Code&gt;(.*?)&lt;/Code&gt;</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">null</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Error_Description" enabled="true">
                    <stringProp name="TestPlan.comments">&quot;Error_Description&quot;|&quot;LB=&lt;Description&gt;&quot;|&quot;RB=&lt;/Description&gt;&quot;|&quot;Search=Body&quot;|&quot;IgnoreRedirections=Yes&quot;|&quot;NotFound=WARNING&quot;|</stringProp>
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">Error_Description</stringProp>
                    <stringProp name="RegexExtractor.regex">&lt;Description&gt;(.*?)&lt;/Description&gt;</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">null</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="SUCCESS_Count" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">SUCCESS_Count</stringProp>
                    <stringProp name="RegexExtractor.regex">&lt;ResponseStatus&gt;su(.*?)ess&lt;/ResponseStatus&gt;</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">null</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                    <stringProp name="Sample.scope">all</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="CANCELEDREQ_Count" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">CANCELEDREQ_Count</stringProp>
                    <stringProp name="RegexExtractor.regex">AssessmentLineEvent&gt;Cancelation Re(.*?)sted&lt;/AssessmentLineEvent&gt;</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">null</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                    <stringProp name="Sample.scope">all</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="responsecode" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">code</stringProp>
                    <stringProp name="RegexExtractor.refname">responsecode</stringProp>
                    <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">0</stringProp>
                    <stringProp name="RegexExtractor.match_number"></stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="LOGGER" enabled="true">
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="script">
//log.info(&quot;Request XML - &quot;+prev.getSamplerData());
//log.info(&quot;Response From Server - &quot;+prev.getResponseDataAsString());

log.info(&quot;SUCCESS_Count - &quot;+vars.get(&quot;SUCCESS_Count&quot;));
log.info(&quot;APPRAISAL_ID - &quot;+vars.get(&quot;APPRAISAL_ID&quot;));
log.info(&quot;Error_Code - &quot;+vars.get(&quot;Error_Code&quot;));
log.info(&quot;Error_Description - &quot;+vars.get(&quot;Error_Description&quot;));
log.info(&quot;CANCELEDREQ_Count - &quot;+vars.get(&quot;CANCELEDREQ_Count&quot;));
log.info(&quot;responsecode - &quot;+vars.get(&quot;responsecode&quot;));
log.info(&quot;#####################__TP101_030_eService_Cancel_Appraisal&quot;);</stringProp>
                  </BeanShellPostProcessor>
                  <hashTree/>
                  <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="script">int rescode=Integer.parseInt(vars.get(&quot;responsecode&quot;));
String Stat1=vars.get(&quot;SUCCESS_Count&quot;);
String Stat2=vars.get(&quot;CANCELEDREQ_Count&quot;);

if (rescode &gt;= 200 &amp;&amp; rescode &lt; 400)
	{	
	if (!Stat1.equals(&quot;null&quot;) &amp;&amp; !Stat2.equals(&quot;null&quot;))
		{	
		prev.setSuccessful(true);
		}
	else 
		{
		log.error(&quot;TP101_030_eService_Cancel_Appraisal failed for Request XML:&quot;+prev.getSamplerData()+&quot;####&quot;+&quot;HTTP Response Code:&quot;+vars.get(&quot;responsecode&quot;)+&quot;####&quot;+&quot;Response From Server : &quot;+prev.getResponseDataAsString());
		prev.setSuccessful(false);
		ctx.setRestartNextLoop(true);
		}
	}

else
	{
	log.error(&quot;TP101_030_eService_Cancel_Appraisal failed for Request XML:&quot;+prev.getSamplerData()+&quot;####&quot;+&quot;HTTP Response Code:&quot;+vars.get(&quot;responsecode&quot;)+&quot;####&quot;+&quot;Response From Server : &quot;+prev.getResponseDataAsString());
	prev.setSuccessful(false);
	ctx.setRestartNextLoop(true);
	}


</stringProp>
                  </BeanShellPostProcessor>
                  <hashTree/>
                </hashTree>
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
        <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
            </value>
          </objProp>
          <stringProp name="filename">SummReport_CNG_TP101_eService_Get_Create_Cancel_Appraisal.csv</stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
